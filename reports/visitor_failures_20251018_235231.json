{
    "failures": [
        {
            "captured_at": "2025-10-18T23:48:10.094686+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 13.68674099999771,
                "ended_at": "2025-10-18T23:48:10.094686+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "660c6e75ed5113f10ab8d70d3f09734e217d064b41941093f2f29091abcd5d6e",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-18T23:47:56.407950+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\shared.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n5 files would be reformatted, 22 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\t2025-10-18 02:04:30.533306+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\t2025-10-18 23:48:03.348138+00:00\n@@ -72,11 +72,13 @@\n     make_all.main([\"--no-gui\"])\n \n     assert not commit_calls\n \n \n-def test_main_does_not_commit_when_orchestrator_fails(monkeypatch, tmp_path: Path) -> None:\n+def test_main_does_not_commit_when_orchestrator_fails(\n+    monkeypatch, tmp_path: Path\n+) -> None:\n     repo_root = tmp_path\n     commit_calls: list[tuple[Path, str]] = []\n \n     class FailingOrchestrator(_OrchestratorHarness):\n         def __init__(self) -> None:\n--- C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py\t2025-10-18 21:29:47.861410+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py\t2025-10-18 23:48:04.519016+00:00\n@@ -139,11 +139,10 @@\n             yield self._commit_input\n \n             self._commit_button = Button(\"Commit All\", id=\"commit-all\")\n             yield self._commit_button\n \n-\n             self._dry_run_label = Static(\"Orchestrator Dry-Run\")\n             self._dry_run_label.styles.border = (\"ascii\", \"round\")\n             yield self._dry_run_label\n \n             stage_placeholder = \"Stage\"\n@@ -177,11 +176,13 @@\n             if stage_field is not None and stage_field.default:\n                 self._dry_run_stage_input.value = str(stage_field.default)\n             else:\n                 self._dry_run_stage_input.value = \"quality_gates\"\n             if include_field is not None and include_field.default is not None:\n-                self._dry_run_include_input.value = \"true\" if include_field.default else \"false\"\n+                self._dry_run_include_input.value = (\n+                    \"true\" if include_field.default else \"false\"\n+                )\n             else:\n                 self._dry_run_include_input.value = \"true\"\n             if workers_field is not None and isinstance(workers_field.default, int):\n                 self._dry_run_workers_input.value = str(workers_field.default)\n             else:\n@@ -216,17 +217,23 @@\n             self._update_metadata()\n \n         async def on_button_pressed(self, event: Button.Pressed) -> None:  # type: ignore[override]\n             if self._commit_button is not None and event.button is self._commit_button:\n                 await self._handle_commit_request()\n-            elif self._dry_run_button is not None and event.button is self._dry_run_button:\n+            elif (\n+                self._dry_run_button is not None\n+                and event.button is self._dry_run_button\n+            ):\n                 await self._handle_dry_run_request()\n \n         async def on_input_submitted(self, event: Input.Submitted) -> None:  # type: ignore[override]\n             if self._commit_input is not None and event.input is self._commit_input:\n                 await self._handle_commit_request()\n-            elif self._dry_run_stage_input is not None and event.input is self._dry_run_stage_input:\n+            elif (\n+                self._dry_run_stage_input is not None\n+                and event.input is self._dry_run_stage_input\n+            ):\n                 await self._handle_dry_run_request()\n \n         def _refresh_snapshot(self) -> None:\n             self._snapshot = load_workspace_snapshot(self._workspace_root)\n \n@@ -244,11 +251,15 @@\n             )\n             rows_added = False\n             for schema in self._form_catalog:\n                 for field in schema.fields:\n                     field_type = field.field_type\n-                    enum_values = field.schema.get(\"enum\") if isinstance(field.schema, Mapping) else None\n+                    enum_values = (\n+                        field.schema.get(\"enum\")\n+                        if isinstance(field.schema, Mapping)\n+                        else None\n+                    )\n                     if isinstance(enum_values, list) and enum_values:\n                         joined = \", \".join(str(item) for item in enum_values[:4])\n                         suffix = \"...\" if len(enum_values) > 4 else \"\"\n                         field_type = f\"{field_type} ({joined}{suffix})\"\n                     default = \"\" if field.default is None else str(field.default)\n@@ -261,17 +272,21 @@\n                         default,\n                         description,\n                     )\n                     rows_added = True\n             if not rows_added:\n-                self._schema_table.add_row(\"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No schema metadata available\")\n+                self._schema_table.add_row(\n+                    \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No schema metadata available\"\n+                )\n \n         def _initialize_commit_results_table(self) -> None:\n             if self._commit_results_table is None:\n                 return\n             self._commit_results_table.clear(columns=True)\n-            self._commit_results_table.add_columns(\"Repository\", \"git add\", \"git commit\", \"Summary\")\n+            self._commit_results_table.add_columns(\n+                \"Repository\", \"git add\", \"git commit\", \"Summary\"\n+            )\n \n         def _populate_repo_table(self) -> None:\n             if self._repo_table is None or self._snapshot is None:\n                 return\n             self._repo_table.clear(columns=True)\n@@ -284,28 +299,36 @@\n \n         def _populate_manifest_table(self) -> None:\n             if self._manifest_table is None or self._snapshot is None:\n                 return\n             self._manifest_table.clear(columns=True)\n-            self._manifest_table.add_columns(\"Repository\", \"Package\", \"Version\", \"PyPI\", \"Dependencies\")\n+            self._manifest_table.add_columns(\n+                \"Repository\", \"Package\", \"Version\", \"PyPI\", \"Dependencies\"\n+            )\n             for repo in self._snapshot.repositories:\n                 record = lookup_manifest_record(self._snapshot.manifest, repo.name)\n                 if record is None:\n-                    self._manifest_table.add_row(repo.name, \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", key=repo.name)\n+                    self._manifest_table.add_row(\n+                        repo.name, \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", key=repo.name\n+                    )\n                     continue\n-                dependencies = \", \".join(record.dependencies) if record.dependencies else \"\u00e2\u20ac\u201d\"\n+                dependencies = (\n+                    \", \".join(record.dependencies) if record.dependencies else \"\u00e2\u20ac\u201d\"\n+                )\n                 pypi = record.pypi_name or \"\u00e2\u20ac\u201d\"\n                 self._manifest_table.add_row(\n                     repo.name,\n                     record.package,\n                     record.version,\n                     pypi,\n                     dependencies,\n                     key=repo.name,\n                 )\n             if not self._snapshot.repositories:\n-                self._manifest_table.add_row(\"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No repositories detected\")\n+                self._manifest_table.add_row(\n+                    \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No repositories detected\"\n+                )\n             self._update_manifest_detail_panel()\n \n         def _populate_column_table(self) -> None:\n             if self._column_table is None or self._snapshot is None:\n                 return\n@@ -313,25 +336,38 @@\n             self._column_table.add_columns(\"Group\", \"Column\", \"Key\", \"State\", \"Detail\")\n             status_map = {status.key: status for status in self._snapshot.column_status}\n             for spec in self._snapshot.column_specs:\n                 status = status_map.get(spec.key)\n                 state = status.state if status else \"unknown\"\n-                detail = status.message if status else \"Automation data not yet wired for this column.\"\n-                self._column_table.add_row(spec.group_label, spec.label, spec.key, state, detail)\n+                detail = (\n+                    status.message\n+                    if status\n+                    else \"Automation data not yet wired for this column.\"\n+                )\n+                self._column_table.add_row(\n+                    spec.group_label, spec.label, spec.key, state, detail\n+                )\n             if not self._snapshot.column_specs:\n-                self._column_table.add_row(\"\u00e2\u20ac\u201d\", \"No columns enabled\", \"\u00e2\u20ac\u201d\", \"unknown\", \"\")\n+                self._column_table.add_row(\n+                    \"\u00e2\u20ac\u201d\", \"No columns enabled\", \"\u00e2\u20ac\u201d\", \"unknown\", \"\"\n+                )\n \n         def _populate_card_table(self) -> None:\n             if self._card_table is None or self._snapshot is None:\n                 return\n             self._card_table.clear(columns=True)\n             self._card_table.add_columns(\"Column\", \"Card\", \"Status\", \"Messages\")\n             for card in self._snapshot.cards:\n                 joined = \"\\n\".join(card.messages)\n                 self._card_table.add_row(card.column, card.title, card.status, joined)\n             if not self._snapshot.cards:\n-                self._card_table.add_row(\"\u00e2\u20ac\u201d\", \"No data\", \"\", \"Run orchestrator to generate make_all_summary.json.\")\n+                self._card_table.add_row(\n+                    \"\u00e2\u20ac\u201d\",\n+                    \"No data\",\n+                    \"\",\n+                    \"Run orchestrator to generate make_all_summary.json.\",\n+                )\n \n         def _update_metadata(self) -> None:\n             if self._metadata is None or self._snapshot is None:\n                 return\n             lines = [f\"Workspace: {self._workspace_root}\"]\n@@ -341,45 +377,62 @@\n             for repo in self._snapshot.repositories:\n                 script_count = len(repo.scripts)\n                 descriptor = f\"{repo.name} ({script_count} script{'s' if script_count != 1 else ''})\"\n                 lines.append(f\"  \u00e2\u20ac\u00a2 {descriptor}\")\n             if self._snapshot.column_specs:\n-                lines.append(f\"Status columns enabled: {len(self._snapshot.column_specs)}\")\n+                lines.append(\n+                    f\"Status columns enabled: {len(self._snapshot.column_specs)}\"\n+                )\n             self._metadata.update(\"\\n\".join(lines))\n \n         def _update_manifest_detail_panel(self) -> None:\n             if self._manifest_detail is None or self._snapshot is None:\n                 return\n             lines: list[str] = []\n             for repo in self._snapshot.repositories:\n                 record = lookup_manifest_record(self._snapshot.manifest, repo.name)\n                 if record is None:\n                     continue\n-                dependencies = \", \".join(record.dependencies) if record.dependencies else \"None\"\n+                dependencies = (\n+                    \", \".join(record.dependencies) if record.dependencies else \"None\"\n+                )\n                 header = f\"{repo.name}: {record.version}\"\n-                author = f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n+                author = (\n+                    f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n+                )\n                 pypi = f\"PyPI: {record.pypi_name or 'n/a'}\"\n-                lines.extend([header, f\"  {author}\", f\"  {pypi}\", f\"  Dependencies: {dependencies}\"])\n+                lines.extend(\n+                    [\n+                        header,\n+                        f\"  {author}\",\n+                        f\"  {pypi}\",\n+                        f\"  Dependencies: {dependencies}\",\n+                    ]\n+                )\n                 if record.description:\n                     lines.append(f\"  {record.description}\")\n                 if record.absolute_path:\n                     lines.append(f\"  Path: {record.absolute_path}\")\n                 lines.append(\"\")\n             if not lines:\n                 lines = [\"Manifest metadata not available for discovered repositories.\"]\n-            self._manifest_detail.update(\"\\n\".join(line for line in lines if line is not None))\n+            self._manifest_detail.update(\n+                \"\\n\".join(line for line in lines if line is not None)\n+            )\n \n         def _update_commit_form_metadata(self) -> None:\n             field = self._commit_field\n             if self._commit_label is not None:\n                 if field is not None:\n                     self._commit_label.update(field.title)\n                 else:\n                     self._commit_label.update(\"Commit message\")\n             if self._commit_help is not None:\n                 description = field.description if field is not None else None\n-                self._commit_help.update(description or \"Provide a message for the commit sweep.\")\n+                self._commit_help.update(\n+                    description or \"Provide a message for the commit sweep.\"\n+                )\n             if self._commit_input is not None and field is not None:\n                 placeholder = field.description or field.title\n                 self._commit_input.placeholder = placeholder\n                 if field.default is not None:\n                     self._commit_input.value = str(field.default)\n@@ -390,14 +443,20 @@\n                 return (bool(message), None)\n             if field.required and not message:\n                 return (False, f\"{field.title} is required.\")\n             min_length = field.schema.get(\"minLength\")\n             if isinstance(min_length, (int, float)) and len(message) < int(min_length):\n-                return (False, f\"{field.title} must be at least {int(min_length)} characters.\")\n+                return (\n+                    False,\n+                    f\"{field.title} must be at least {int(min_length)} characters.\",\n+                )\n             max_length = field.schema.get(\"maxLength\")\n             if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n-                return (False, f\"{field.title} must be at most {int(max_length)} characters.\")\n+                return (\n+                    False,\n+                    f\"{field.title} must be at most {int(max_length)} characters.\",\n+                )\n             return (True, None)\n \n         def _append_log(self, line: str) -> None:\n             if self._log is None:\n                 return\n@@ -416,11 +475,13 @@\n \n         def _update_commit_results(self, results) -> None:\n             if self._commit_results_table is None:\n                 return\n             self._commit_results_table.clear(columns=True)\n-            self._commit_results_table.add_columns(\"Repository\", \"git add\", \"git commit\", \"Summary\")\n+            self._commit_results_table.add_columns(\n+                \"Repository\", \"git add\", \"git commit\", \"Summary\"\n+            )\n             for result in results:\n                 summary = result.stderr or result.stdout or \"no output\"\n                 self._commit_results_table.add_row(\n                     result.name,\n                     str(result.add_return_code),\n@@ -436,21 +497,25 @@\n             message = \"\"\n             if self._commit_input is not None:\n                 message = (self._commit_input.value or \"\").strip()\n             is_valid, error_message = self._validate_commit_message(message)\n             if not is_valid:\n-                self._append_log(f\"[commit-all] {error_message or 'Invalid message provided.'}\")\n+                self._append_log(\n+                    f\"[commit-all] {error_message or 'Invalid message provided.'}\"\n+                )\n                 return\n \n             self._commit_in_progress = True\n             self._set_commit_controls_enabled(False)\n             if self._log is not None:\n                 self._log.clear()\n             self._append_log(\"[commit-all] starting sweep...\")\n \n             try:\n-                sweep = await asyncio.to_thread(perform_commit_sweep, self._workspace_root, message)\n+                sweep = await asyncio.to_thread(\n+                    perform_commit_sweep, self._workspace_root, message\n+                )\n             except CommitMessageRequiredError:\n                 self._append_log(\"[commit-all] commit message must be non-empty.\")\n             except Exception as exc:  # noqa: BLE001 - surfaced to operator\n                 self._append_log(f\"[commit-all] error: {exc}\")\n             else:\n@@ -538,7 +603,11 @@\n \n     if TextualControlCenter is None:\n         raise RuntimeError(\n             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n         ) from _TEXTUAL_IMPORT_ERROR\n-    root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n+    root = (\n+        Path(workspace_root)\n+        if workspace_root is not None\n+        else _workspace_root_from_default()\n+    )\n     TextualControlCenter(root).run()\n--- C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\t2025-10-18 21:57:26.366186+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\t2025-10-18 23:48:04.562092+00:00\n@@ -49,11 +49,13 @@\n     if snapshot.generated_at:\n         lines.append(f\"Generated: {snapshot.generated_at}\")\n     lines.append(f\"Repositories: {len(snapshot.repositories)}\")\n     for repo in snapshot.repositories:\n         script_count = len(repo.scripts)\n-        descriptor = f\"{repo.name} ({script_count} script{'s' if script_count != 1 else ''})\"\n+        descriptor = (\n+            f\"{repo.name} ({script_count} script{'s' if script_count != 1 else ''})\"\n+        )\n         lines.append(f\"- {descriptor}\")\n     return \"\\n\".join(lines)\n \n \n def _kanban_rows(snapshot: WorkspaceSnapshot) -> list[dict[str, str]]:\n@@ -91,11 +93,13 @@\n                 \"repository\": repo.name,\n                 \"scripts\": scripts,\n             }\n         )\n     if not rows:\n-        rows.append({\"id\": \"empty\", \"repository\": \"\u00e2\u20ac\u201d\", \"scripts\": \"No repositories detected\"})\n+        rows.append(\n+            {\"id\": \"empty\", \"repository\": \"\u00e2\u20ac\u201d\", \"scripts\": \"No repositories detected\"}\n+        )\n     return rows\n \n \n def _manifest_rows(snapshot: WorkspaceSnapshot) -> list[dict[str, str]]:\n     rows: list[dict[str, str]] = []\n@@ -178,11 +182,13 @@\n \n def _schema_rows(schemas: Iterable[FormSchema]) -> list[dict[str, str]]:\n     rows: list[dict[str, str]] = []\n     for index, schema in enumerate(schemas):\n         for field in schema.fields:\n-            enum_values = field.schema.get(\"enum\") if isinstance(field.schema, Mapping) else None\n+            enum_values = (\n+                field.schema.get(\"enum\") if isinstance(field.schema, Mapping) else None\n+            )\n             field_type = field.field_type\n             if isinstance(enum_values, list) and enum_values:\n                 joined = \", \".join(str(item) for item in enum_values[:4])\n                 suffix = \"...\" if len(enum_values) > 4 else \"\"\n                 field_type = f\"{field_type} ({joined}{suffix})\"\n@@ -236,37 +242,52 @@\n             }\n         )\n     return rows\n \n \n-def run(workspace_root: str | Path | None = None, *, host: str = \"127.0.0.1\", port: int = 8080) -> None:\n+def run(\n+    workspace_root: str | Path | None = None,\n+    *,\n+    host: str = \"127.0.0.1\",\n+    port: int = 8080,\n+) -> None:\n     \"\"\"Launch the NiceGUI prototype.\"\"\"\n \n     if ui is None:\n         raise RuntimeError(\n             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n         ) from _NICEGUI_IMPORT_ERROR\n     assert ui is not None  # help type checkers understand ui is available\n \n-    root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n+    root = (\n+        Path(workspace_root)\n+        if workspace_root is not None\n+        else _workspace_root_from_default()\n+    )\n     snapshot = load_workspace_snapshot(root)\n     form_catalog = list_form_schemas()\n     commit_schema: FormSchema = load_form_schema(\"commit_sweep\")\n-    commit_field: FieldDefinition | None = commit_schema.fields[0] if commit_schema.fields else None\n+    commit_field: FieldDefinition | None = (\n+        commit_schema.fields[0] if commit_schema.fields else None\n+    )\n     orchestrator_schema: FormSchema = load_form_schema(\"orchestrator_dry_run\")\n     orchestrator_fields = {field.name: field for field in orchestrator_schema.fields}\n     stage_field = orchestrator_fields.get(\"stage\")\n     include_field = orchestrator_fields.get(\"include_reports\")\n     workers_field = orchestrator_fields.get(\"max_workers\")\n \n-    header = ui.markdown(f\"## x_runner_x Control Center (NiceGUI)\\n\\n{_format_repository_summary(snapshot, root)}\")\n+    header = ui.markdown(\n+        f\"## x_runner_x Control Center (NiceGUI)\\n\\n{_format_repository_summary(snapshot, root)}\"\n+    )\n \n     repo_columns = [\n         {\"name\": \"repository\", \"label\": \"Repository\", \"field\": \"repository\"},\n         {\"name\": \"scripts\", \"label\": \"Scripts\", \"field\": \"scripts\"},\n     ]\n-    repo_table = ui.table(columns=repo_columns, rows=_repository_rows(snapshot), row_key=\"id\").classes(\"w-full\")\n+    repo_table = ui.table(\n+        columns=repo_columns, rows=_repository_rows(snapshot), row_key=\"id\"\n+    ).classes(\"w-full\")\n \n     manifest_columns = [\n         {\"name\": \"repository\", \"label\": \"Repository\", \"field\": \"repository\"},\n         {\"name\": \"package\", \"label\": \"Package\", \"field\": \"package\"},\n         {\"name\": \"version\", \"label\": \"Version\", \"field\": \"version\"},\n@@ -312,19 +333,23 @@\n         {\"name\": \"column\", \"label\": \"Column\", \"field\": \"column\"},\n         {\"name\": \"card\", \"label\": \"Card\", \"field\": \"card\"},\n         {\"name\": \"status\", \"label\": \"Status\", \"field\": \"status\"},\n         {\"name\": \"messages\", \"label\": \"Messages\", \"field\": \"messages\"},\n     ]\n-    kanban_table = ui.table(columns=kanban_columns, rows=_kanban_rows(snapshot), row_key=\"id\").classes(\"w-full\")\n+    kanban_table = ui.table(\n+        columns=kanban_columns, rows=_kanban_rows(snapshot), row_key=\"id\"\n+    ).classes(\"w-full\")\n \n     ui.separator()\n \n     commit_label = commit_field.title if commit_field is not None else \"Commit message\"\n     commit_placeholder = commit_label\n     if commit_field is not None and commit_field.description:\n         commit_placeholder = commit_field.description\n-    commit_input = ui.input(label=commit_label, placeholder=commit_placeholder).classes(\"w-full\")\n+    commit_input = ui.input(label=commit_label, placeholder=commit_placeholder).classes(\n+        \"w-full\"\n+    )\n     if commit_field is not None and commit_field.default is not None:\n         commit_input.value = str(commit_field.default)\n     if commit_field is not None and commit_field.description:\n         ui.label(commit_field.description).classes(\"text-sm text-gray-500\")\n     commit_button = ui.button(\"Commit All\")\n@@ -334,11 +359,13 @@\n         {\"name\": \"repository\", \"label\": \"Repository\", \"field\": \"repository\"},\n         {\"name\": \"git_add\", \"label\": \"git add\", \"field\": \"git_add\"},\n         {\"name\": \"git_commit\", \"label\": \"git commit\", \"field\": \"git_commit\"},\n         {\"name\": \"summary\", \"label\": \"Summary\", \"field\": \"summary\"},\n     ]\n-    commit_table = ui.table(columns=commit_columns, rows=_commit_rows(()), row_key=\"id\").classes(\"w-full\")\n+    commit_table = ui.table(\n+        columns=commit_columns, rows=_commit_rows(()), row_key=\"id\"\n+    ).classes(\"w-full\")\n \n     ui.separator()\n \n     stage_options: list[str] = []\n     if stage_field is not None:\n@@ -354,11 +381,13 @@\n         if isinstance(stage_default, str) and stage_default in stage_options:\n             dry_run_stage_select.value = stage_default\n     elif stage_options:\n         dry_run_stage_select.value = stage_options[0]\n \n-    include_label = include_field.title if include_field is not None else \"Include reports\"\n+    include_label = (\n+        include_field.title if include_field is not None else \"Include reports\"\n+    )\n     include_default = bool(include_field.default) if include_field is not None else True\n     dry_run_include_checkbox = ui.checkbox(include_label, value=include_default)\n \n     workers_label = workers_field.title if workers_field is not None else \"Max workers\"\n     workers_default = 2\n@@ -385,14 +414,20 @@\n             return (bool(message), None)\n         if field.required and not message:\n             return (False, f\"{field.title} is required.\")\n         min_length = field.schema.get(\"minLength\")\n         if isinstance(min_length, (int, float)) and len(message) < int(min_length):\n-            return (False, f\"{field.title} must be at least {int(min_length)} characters.\")\n+            return (\n+                False,\n+                f\"{field.title} must be at least {int(min_length)} characters.\",\n+            )\n         max_length = field.schema.get(\"maxLength\")\n         if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n-            return (False, f\"{field.title} must be at most {int(max_length)} characters.\")\n+            return (\n+                False,\n+                f\"{field.title} must be at most {int(max_length)} characters.\",\n+            )\n         return (True, None)\n \n     def _render_manifest_details() -> None:\n         manifest_details.clear()\n         if not snapshot.repositories:\n@@ -413,11 +448,13 @@\n                 with ui.expansion(header, value=False):\n                     ui.label(f\"Package: {manifest_record.package}\")\n                     ui.label(f\"PyPI: {manifest_record.pypi_name or 'n/a'}\")\n                     ui.label(f\"Author: {manifest_record.author or 'unknown'}\")\n                     dependencies = (\n-                        \", \".join(manifest_record.dependencies) if manifest_record.dependencies else \"None\"\n+                        \", \".join(manifest_record.dependencies)\n+                        if manifest_record.dependencies\n+                        else \"None\"\n                     )\n                     ui.label(f\"Dependencies: {dependencies}\")\n                     if manifest_record.description:\n                         ui.label(manifest_record.description)\n                     if manifest_record.absolute_path:\n@@ -442,11 +479,13 @@\n     async def run_commit() -> None:\n         message = (commit_input.value or \"\").strip()\n         commit_log.clear()\n         is_valid, validation_error = _validate_commit_message(message)\n         if not is_valid:\n-            commit_log.push(f\"[commit-all] {validation_error or 'Invalid message provided.'}\")\n+            commit_log.push(\n+                f\"[commit-all] {validation_error or 'Invalid message provided.'}\"\n+            )\n             return\n         commit_button.disable()\n         commit_input.disable()\n         commit_log.push(\"[commit-all] starting sweep...\")\n         try:\n@@ -475,11 +514,13 @@\n             dry_run_log.push(\"[dry-run] select a stage to preview.\")\n             return\n         include_value = bool(dry_run_include_checkbox.value)\n         workers_raw = dry_run_workers_input.value\n         try:\n-            workers_value = int(workers_raw) if workers_raw is not None else int(workers_default)\n+            workers_value = (\n+                int(workers_raw) if workers_raw is not None else int(workers_default)\n+            )\n         except (TypeError, ValueError):\n             workers_value = int(workers_default)\n         dry_run_button.disable()\n         dry_run_log.push(f\"[dry-run] starting {stage_value} preview...\")\n         try:\n--- C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\shared.py\t2025-10-18 21:29:47.893354+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\shared.py\t2025-10-18 23:48:06.480841+00:00\n@@ -164,11 +164,13 @@\n         if not self.total:\n             return \"No commit sweep results recorded.\"\n         if self.failures:\n             repos = \", \".join(self.failures)\n             return f\"Commit sweep failed for {repos} ({timestamp}).\"\n-        return f\"Commit sweep completed for {self.total} repository(ies) at {timestamp}.\"\n+        return (\n+            f\"Commit sweep completed for {self.total} repository(ies) at {timestamp}.\"\n+        )\n \n \n @dataclass(frozen=True, slots=True)\n class OrchestratorDryRun:\n     \"\"\"Result payload returned from an orchestrator dry-run.\"\"\"\n@@ -399,11 +401,13 @@\n             if isinstance(failures, list):\n                 for entry in failures:\n                     if not isinstance(entry, Mapping):\n                         continue\n                     detail_value = entry.get(\"detail\")\n-                    detail_obj = detail_value if isinstance(detail_value, Mapping) else None\n+                    detail_obj = (\n+                        detail_value if isinstance(detail_value, Mapping) else None\n+                    )\n                     tool_value = entry.get(\"tool\")\n                     if tool_value is None and detail_obj is not None:\n                         tool_value = detail_obj.get(\"tool\")\n                     tool = str(tool_value).strip() if tool_value else None\n                     message_obj = entry.get(\"summary\") or entry.get(\"message\")\n@@ -473,15 +477,17 @@\n                 )\n             )\n \n     if not findings:\n         return MappingProxyType({})\n-    return MappingProxyType({tool: tuple(entries) for tool, entries in findings.items()})\n+    return MappingProxyType(\n+        {tool: tuple(entries) for tool, entries in findings.items()}\n+    )\n \n \n def _first_visitor_issue(\n-    visitor_failures: Mapping[str, tuple[VisitorFinding, ...]]\n+    visitor_failures: Mapping[str, tuple[VisitorFinding, ...]],\n ) -> tuple[str, VisitorFinding] | None:\n     for tool in sorted(visitor_failures.keys()):\n         entries = visitor_failures.get(tool)\n         if entries:\n             return (tool, entries[0])\n@@ -547,11 +553,15 @@\n     )\n \n \n def _build_lifecycle_context(payload: Mapping[str, Any]) -> _LifecycleContext:\n     artifacts_obj = payload.get(\"artifacts\")\n-    artifacts = cast(\"Mapping[str, object]\", artifacts_obj) if isinstance(artifacts_obj, Mapping) else {}\n+    artifacts = (\n+        cast(\"Mapping[str, object]\", artifacts_obj)\n+        if isinstance(artifacts_obj, Mapping)\n+        else {}\n+    )\n \n     pypi_status_obj = artifacts.get(\"pypi_release_status\") if artifacts else None\n     if isinstance(pypi_status_obj, Mapping):\n         pypi_status = cast(\"Mapping[str, object]\", pypi_status_obj)\n     else:\n@@ -563,26 +573,34 @@\n         for entry in pip_packages_obj:\n             if isinstance(entry, str) and entry.strip():\n                 pip_packages.add(entry.strip())\n \n     pip_completed_obj = artifacts.get(\"pip_updates_completed\") if artifacts else None\n-    pip_updates_completed = bool(pip_completed_obj) if isinstance(pip_completed_obj, bool) else False\n+    pip_updates_completed = (\n+        bool(pip_completed_obj) if isinstance(pip_completed_obj, bool) else False\n+    )\n \n     stages = _extract_stage_statuses(payload)\n     inspection_previews = _collect_inspection_previews(payload)\n \n     generated_at_obj = payload.get(\"generated_at\")\n-    generated_at = generated_at_obj.strip() if isinstance(generated_at_obj, str) else None\n+    generated_at = (\n+        generated_at_obj.strip() if isinstance(generated_at_obj, str) else None\n+    )\n \n     visitor_report_obj = artifacts.get(\"visitor_report_path\") if artifacts else None\n     visitor_report_path = None\n     if isinstance(visitor_report_obj, str) and visitor_report_obj.strip():\n         visitor_report_path = visitor_report_obj.strip()\n-    visitor_failures = _collect_visitor_failures(visitor_report_path, inspection_previews)\n+    visitor_failures = _collect_visitor_failures(\n+        visitor_report_path, inspection_previews\n+    )\n \n     visitor_error_obj = artifacts.get(\"visitor_error\") if artifacts else None\n-    visitor_summary = visitor_error_obj.strip() if isinstance(visitor_error_obj, str) else None\n+    visitor_summary = (\n+        visitor_error_obj.strip() if isinstance(visitor_error_obj, str) else None\n+    )\n     if visitor_summary is None:\n         inspection_stage = stages.get(\"inspection\")\n         if inspection_stage is not None:\n             visitor_summary = inspection_stage.message\n \n@@ -764,36 +782,55 @@\n                 if stage_state == \"passed\":\n                     state = \"passed\"\n                     message = f\"No {label} issues detected in latest visitor run.\"\n                 elif stage_state == \"failed\":\n                     state = \"unknown\"\n-                    message = context.visitor_summary or \"Visitor QA reported issues in other tools.\"\n+                    message = (\n+                        context.visitor_summary\n+                        or \"Visitor QA reported issues in other tools.\"\n+                    )\n                 else:\n                     state = stage_state\n-                    message = context.visitor_summary or stage_message or \"Awaiting visitor QA data.\"\n+                    message = (\n+                        context.visitor_summary\n+                        or stage_message\n+                        or \"Awaiting visitor QA data.\"\n+                    )\n         elif key in _COLUMN_STAGE_MAPPING:\n             stage_id = _COLUMN_STAGE_MAPPING[key]\n             stage = context.stages.get(stage_id)\n             state, message = _stage_state_message(stage)\n-            if key == \"release_assembly\" and commit_summary is not None and commit_summary.total:\n+            if (\n+                key == \"release_assembly\"\n+                and commit_summary is not None\n+                and commit_summary.total\n+            ):\n                 commit_state = commit_summary.state()\n                 commit_message = commit_summary.message()\n-                link_suffix = f\" (see {commit_summary.report_path})\" if commit_summary.report_path else \"\"\n+                link_suffix = (\n+                    f\" (see {commit_summary.report_path})\"\n+                    if commit_summary.report_path\n+                    else \"\"\n+                )\n                 if commit_state == \"failed\" or state not in {\"failed\", \"passed\"}:\n                     state = commit_state\n                 message = commit_message + link_suffix\n         elif key == \"publish_to_pypi\":\n-            state, message = _summarize_publish_status(repositories, manifest, context.pypi_status)\n+            state, message = _summarize_publish_status(\n+                repositories, manifest, context.pypi_status\n+            )\n         elif key == \"pip_package_propagation\":\n             state, message = _summarize_pip_status(repositories, manifest, context)\n         elif key in _PLACEHOLDER_COLUMN_MESSAGES:\n             state = \"skipped\"\n             message = _PLACEHOLDER_COLUMN_MESSAGES[key]\n         else:\n             message = \"Automation data not yet wired for this column.\"\n \n-        statuses.append(ColumnStatus(key=key, label=label, state=state, message=message))\n+        statuses.append(\n+            ColumnStatus(key=key, label=label, state=state, message=message)\n+        )\n \n     return tuple(statuses)\n \n \n def _load_summary_payload(path: Path) -> Mapping[str, Any] | None:\n@@ -825,11 +862,13 @@\n             title = str(entry.get(\"title\", \"\")).strip()\n             status = str(entry.get(\"status\", \"\")).strip()\n             raw_msgs = entry.get(\"messages\")\n             messages: tuple[str, ...] = ()\n             if isinstance(raw_msgs, list):\n-                messages = tuple(str(msg).strip() for msg in raw_msgs if str(msg).strip())\n+                messages = tuple(\n+                    str(msg).strip() for msg in raw_msgs if str(msg).strip()\n+                )\n             if not title:\n                 continue\n             cards.append(\n                 KanbanCard(\n                     column=column_title or \"(unnamed column)\",\n@@ -1034,14 +1073,11 @@\n     return CommitSweep(logs=tuple(messages), results=results)\n \n \n def _dry_run_report_path(workspace_root: Path, stage: str, timestamp: str) -> Path:\n     safe_stamp = (\n-        timestamp.replace(\":\", \"\")\n-        .replace(\"-\", \"\")\n-        .replace(\"+\", \"_\")\n-        .replace(\"T\", \"_\")\n+        timestamp.replace(\":\", \"\").replace(\"-\", \"\").replace(\"+\", \"_\").replace(\"T\", \"_\")\n     )\n     reports_dir = workspace_root / \"x_0_make_all_x\" / \"reports\"\n     return reports_dir / f\"orchestrator_dry_run_{stage}_{safe_stamp}.json\"\n \n \n@@ -1055,11 +1091,13 @@\n     \"\"\"Simulate orchestrator activity for *stage* without mutations.\"\"\"\n \n     normalized_stage = stage.strip().lower()\n     if normalized_stage not in _VALID_DRY_RUN_STAGES:\n         allowed = \", \".join(_VALID_DRY_RUN_STAGES)\n-        raise ValueError(f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\")\n+        raise ValueError(\n+            f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\"\n+        )\n \n     workers = max(1, int(max_workers))\n     timestamp = datetime.now(UTC).isoformat()\n \n     logs: list[str] = [\n@@ -1079,18 +1117,26 @@\n                 logs.append(f\"[dry-run] - sync {repo.name}\")\n             remaining = len(repos) - preview_limit\n             if remaining > 0:\n                 logs.append(f\"[dry-run] - \u00e2\u20ac\u00a6 {remaining} additional repository(ies)\")\n         else:\n-            logs.append(\"[dry-run] no repositories detected; cloner would initialize workspace.\")\n+            logs.append(\n+                \"[dry-run] no repositories detected; cloner would initialize workspace.\"\n+            )\n     elif normalized_stage == \"quality_gates\":\n         logs.append(\n             f\"[dry-run] would execute visitor QA across lint/type tools with up to {workers} worker(s).\"\n         )\n         commands = (\n-            (\"ruff\", \"python -m ruff check . --select ALL --ignore D,COM812,ISC001,T20\"),\n-            (\"black\", \"python -m black . --line-length 88 --target-version py311 --check\"),\n+            (\n+                \"ruff\",\n+                \"python -m ruff check . --select ALL --ignore D,COM812,ISC001,T20\",\n+            ),\n+            (\n+                \"black\",\n+                \"python -m black . --line-length 88 --target-version py311 --check\",\n+            ),\n             (\"mypy\", \"python -m mypy . --strict\"),\n             (\"pyright\", \"python -m pyright . --level error\"),\n         )\n         for tool, command in commands:\n             logs.append(f\"[dry-run] - {tool}: {command}\")\n@@ -1104,14 +1150,18 @@\n             )\n             preview_limit = 6\n             display_packages = \", \".join(packages[:preview_limit])\n             logs.append(f\"[dry-run] - packages: {display_packages}\")\n             if len(packages) > preview_limit:\n-                logs.append(f\"[dry-run] - \u00e2\u20ac\u00a6 {len(packages) - preview_limit} additional package(s)\")\n+                logs.append(\n+                    f\"[dry-run] - \u00e2\u20ac\u00a6 {len(packages) - preview_limit} additional package(s)\"\n+                )\n         else:\n             logs.append(\"[dry-run] manifest contains no publishable packages.\")\n-        logs.append(\"[dry-run] would verify PyPI release status and pip propagation readiness.\")\n+        logs.append(\n+            \"[dry-run] would verify PyPI release status and pip propagation readiness.\"\n+        )\n     else:  # observability_feedback\n         logs.append(\n             \"[dry-run] observability feedback pipeline not yet implemented; would collect telemetry endpoints and dashboards.\"\n         )\n \n--- C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-18 21:29:47.907222+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-18 23:48:08.763133+00:00\n@@ -907,13 +907,11 @@\n             }\n         )\n \n         for column in columns:\n             column_title = column.title or column.column_id or \"Column\"\n-            blocks.append(\n-                {\"kind\": \"header\", \"text\": column_title, \"level\": 2}\n-            )\n+            blocks.append({\"kind\": \"header\", \"text\": column_title, \"level\": 2})\n             if column.cards:\n                 items = [f\"{card.title} \u00e2\u20ac\u201d {card.status}\" for card in column.cards]\n                 blocks.append({\"kind\": \"list\", \"items\": items, \"ordered\": False})\n             else:\n                 blocks.append(\n@@ -1629,14 +1627,11 @@\n     ) -> dict[str, object] | None:\n         if ctx is None:\n             return None\n         if isinstance(ctx, Mapping):\n             typed = cast(\"Mapping[str, object]\", ctx)\n-            return {\n-                str(key): self._json_ready(value)\n-                for key, value in typed.items()\n-            }\n+            return {str(key): self._json_ready(value) for key, value in typed.items()}\n         payload: dict[str, object] = {}\n         publish_opts = getattr(ctx, \"publish_opts\", None)\n         if publish_opts is not None:\n             payload[\"publish_opts\"] = self._json_ready(publish_opts)\n         return payload or None\n@@ -1668,15 +1663,11 @@\n     ) -> Path | None:\n         reports_dir = self._pip_updates_reports_dir()\n         if not reports_dir.exists():\n             return None\n         pattern = \"x_make_pip_updates_x_run_*.json\"\n-        candidates = [\n-            path\n-            for path in reports_dir.glob(pattern)\n-            if path not in before\n-        ]\n+        candidates = [path for path in reports_dir.glob(pattern) if path not in before]\n         if not candidates:\n             return None\n         try:\n             return max(candidates, key=lambda path: path.stat().st_mtime)\n         except OSError:\n@@ -1799,15 +1790,11 @@\n         if normalized_packages:\n             self._pip_update_packages = tuple(normalized_packages)\n             metadata[\"normalized_packages\"] = list(normalized_packages)\n \n         result_obj = response_payload.get(\"result\")\n-        result_payload = (\n-            dict(result_obj)\n-            if isinstance(result_obj, Mapping)\n-            else {}\n-        )\n+        result_payload = dict(result_obj) if isinstance(result_obj, Mapping) else {}\n         result_status_obj = result_payload.get(\"status\")\n         result_status_text = (\n             result_status_obj if isinstance(result_status_obj, str) else \"\"\n         )\n         result_status_lower = result_status_text.lower()\n@@ -1823,24 +1810,30 @@\n                 \"duration_seconds\": response_payload.get(\"duration_seconds\"),\n             }\n         )\n \n         errors_obj = response_payload.get(\"errors\")\n-        if isinstance(errors_obj, Sequence) and not isinstance(\n-            errors_obj,\n-            (str, bytes, bytearray),\n-        ) and errors_obj:\n+        if (\n+            isinstance(errors_obj, Sequence)\n+            and not isinstance(\n+                errors_obj,\n+                (str, bytes, bytearray),\n+            )\n+            and errors_obj\n+        ):\n             metadata[\"errors\"] = self._json_ready(errors_obj)\n \n         report_path = self._discover_new_pip_updates_report(reports_before)\n         if report_path is not None:\n             self._pip_updates_report = report_path\n             metadata[\"report_path\"] = str(report_path)\n         elif isinstance(self._pip_updates_report, Path):\n             metadata[\"report_path\"] = str(self._pip_updates_report)\n \n-        package_count = len(normalized_packages) if normalized_packages else len(packages)\n+        package_count = (\n+            len(normalized_packages) if normalized_packages else len(packages)\n+        )\n \n         stage_status = \"completed\"\n         if status_lower not in {\"success\", \"error\"}:\n             stage_status = \"attention\"\n         if status_lower == \"error\" or result_status_lower == \"attention\":\n@@ -1859,14 +1852,18 @@\n         else:\n             stage_messages.append(\n                 \"pip updates completed with issues; review JSON response details.\"\n             )\n \n-        if isinstance(errors_obj, Sequence) and not isinstance(\n-            errors_obj,\n-            (str, bytes, bytearray),\n-        ) and errors_obj:\n+        if (\n+            isinstance(errors_obj, Sequence)\n+            and not isinstance(\n+                errors_obj,\n+                (str, bytes, bytearray),\n+            )\n+            and errors_obj\n+        ):\n             stage_messages.append(\n                 f\"pip updates reported {len(errors_obj)} error(s) in the response.\"\n             )\n \n         self._pip_updates_completed = (\n@@ -1886,21 +1883,29 @@\n             \"duration_seconds\": response_payload.get(\"duration_seconds\"),\n             \"response\": self._json_ready(response_payload),\n         }\n         if normalized_packages:\n             artifact_summary[\"normalized_packages\"] = list(normalized_packages)\n-        if isinstance(errors_obj, Sequence) and not isinstance(\n-            errors_obj,\n-            (str, bytes, bytearray),\n-        ) and errors_obj:\n+        if (\n+            isinstance(errors_obj, Sequence)\n+            and not isinstance(\n+                errors_obj,\n+                (str, bytes, bytearray),\n+            )\n+            and errors_obj\n+        ):\n             artifact_summary[\"errors\"] = self._json_ready(errors_obj)\n         self._pip_updates_payload = artifact_summary\n \n         self._record_stage(\n             \"pip_updates\",\n             title=\"Pip Package Updates\",\n-            status=stage_status if stage_status in {\"completed\", \"attention\"} else \"attention\",\n+            status=(\n+                stage_status\n+                if stage_status in {\"completed\", \"attention\"}\n+                else \"attention\"\n+            ),\n             messages=stage_messages,\n             metadata=metadata,\n         )\n \n \n@@ -2081,11 +2086,15 @@\n                     for result in commit_results\n                     if result.commit_return_code != 0\n                 )\n                 if failed_results:\n                     for failure in failed_results:\n-                        summary = failure.stderr or failure.stdout or \"no commit output captured\"\n+                        summary = (\n+                            failure.stderr\n+                            or failure.stdout\n+                            or \"no commit output captured\"\n+                        )\n                         _error(f\"Commit sweep failed for {failure.name}:\", summary)\n                     commit_error = RuntimeError(\n                         \"Commit sweep encountered one or more failures.\"\n                     )\n                 else:\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:47:56.407950+00:00\nduration: 13.687s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\t2025-10-18 02:04:30.533306+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\t2025-10-18 23:48:03.348138+00:00\n@@ -72,11 +72,13 @@\n     make_all.main([\"--no-gui\"])\n \n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\shared.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\u2026",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\shared.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\u2026",
            "stdout_preview": "--- C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\t2025-10-18 02:04:30.533306+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\t2025-10-18 23:48:03.348138+00:00\n@@ -72,11 +72,13 @@\n     make_all.main([\"--no-gui\"])\n \n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:47:56.407950+00:00 durat\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:48:25.130294+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 14.564630199995008,
                "ended_at": "2025-10-18T23:48:25.130294+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "660c6e75ed5113f10ab8d70d3f09734e217d064b41941093f2f29091abcd5d6e",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-18T23:48:10.565648+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\ninterface\\gui\\prototypes\\form_schemas.py:149: error: Redundant cast to \"object | None\"  [redundant-cast]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:121: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:455: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1017: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1021: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1021: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1022: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1023: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1119: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1123: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1123: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1124: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1125: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1129: error: Incompatible return value type (got \"dict[str, Collection[str]]\", expected \"dict[str, object]\")  [return-value]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1129: note: \"dict\" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1129: note: Consider using \"Mapping\" instead, which is covariant in the value type\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1129: note: Perhaps you need a type annotation for \"result\"? Suggestion: \"dict[str, object]\"\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1145: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1148: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:1148: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:263: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:294: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:300: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:302: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:307: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:312: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:317: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:341: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:345: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:345: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:346: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:347: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:422: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:426: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:426: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:427: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:428: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:448: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:451: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py:451: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:22: note: (or run \"mypy --install-types\" to install all missing stub packages)\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:470: error: Argument 4 to \"add_edge\" of \"GraphvizBuilder\" has incompatible type \"**dict[str, str | int | float | bool | None]\"; expected \"str | None\"  [arg-type]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:492: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:496: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:496: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:497: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:498: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:548: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:552: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:552: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:553: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:554: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:573: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:576: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:576: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:595: error: Statement is unreachable  [unreachable]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:16: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:601: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:616: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:620: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:620: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:621: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:622: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:655: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:698: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:702: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:702: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:703: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py:704: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:316: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\gui\\prototypes\\shared.py:317: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:317: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:319: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:345: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\gui\\prototypes\\shared.py:346: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:346: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:347: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:394: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:397: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:457: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\shared.py:508: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:509: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:511: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:511: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:512: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:513: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:513: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:516: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:527: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:527: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:528: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:532: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:534: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:540: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:550: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\gui\\prototypes\\shared.py:551: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:551: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:552: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:570: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:571: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:573: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:573: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:574: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:640: error: Argument 1 to \"get\" of \"Mapping\" has incompatible type \"str | None\"; expected \"str\"  [arg-type]\ninterface\\gui\\prototypes\\shared.py:799: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\gui\\prototypes\\shared.py:802: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:805: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:810: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\gui\\prototypes\\shared.py:811: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:811: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:812: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:859: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\gui\\prototypes\\shared.py:862: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:865: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:871: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:873: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:874: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:874: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:874: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:874: error: Expression type contains \"Any\" (has type \"ItemsView[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:875: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:971: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:975: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:976: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:976: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:977: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\gui\\prototypes\\shared.py:979: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:980: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:19: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:72: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1583: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1587: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1587: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1588: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1589: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"str\"  [arg-type]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"bool\"  [arg-type]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"Sequence[str] | None\"  [arg-type]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"Mapping[str, Sequence[str]] | None\"  [arg-type]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1735: error: Statement is unreachable  [unreachable]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1757: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1761: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1761: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1762: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1763: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1794: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1797: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1797: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:30: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:532: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:598: error: Explicit \"Any\" is not allowed  [explicit-any]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:615: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:616: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:619: error: Explicit \"Any\" is not allowed  [explicit-any]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:619: error: Expression type contains \"Any\" (has type \"Callable[..., object]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:634: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:638: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:638: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:639: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:640: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:668: error: Expression type contains \"Any\" (has type \"Callable[..., object]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:691: error: Redundant cast to \"Callable[..., object]\"  [redundant-cast]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:691: error: Explicit \"Any\" is not allowed  [explicit-any]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:691: error: Expression type contains \"Any\" (has type \"Callable[..., object]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:691: error: Argument \"publisher_factory\" to \"publish_manifest_entries\" has incompatible type \"Callable[..., object]\"; expected \"PublisherFactory\"  [arg-type]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:691: note: \"PublisherFactory.__call__\" has type \"Callable[[VarArg(object), KwArg(object)], PublisherProtocol]\"\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:696: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:697: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:703: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:713: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:719: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:720: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:720: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:725: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:729: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:729: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:730: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:731: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:750: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:753: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:753: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:821: error: Name \"_SupportsMetadata\" is not defined  [name-defined]\nx_cls_make_all_x.py:821: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:823: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:824: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:826: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1537: error: Name \"_HasRunReportPath\" is not defined  [name-defined]\nx_cls_make_all_x.py:1537: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1538: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1639: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1640: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1641: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1649: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1650: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1651: error: Expression type contains \"Any\" (has type \"str | Any\")  [misc]\nx_cls_make_all_x.py:1681: error: Expression type contains \"Any\" (has type \"Callable[[Any], Any]\")  [misc]\nx_cls_make_all_x.py:1681: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1757: error: Statement is unreachable  [unreachable]\nx_cls_make_all_x.py:1805: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_all_x.py:1807: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_all_x.py:1809: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_all_x.py:1809: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1811: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1814: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_all_x.py:1814: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1896: error: Incompatible types in assignment (expression has type \"dict[str, object]\", variable has type \"None\")  [assignment]\nx_cls_make_all_x.py:1976: error: Name \"_LaunchGuiModule\" is not defined  [name-defined]\nx_cls_make_all_x.py:1976: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1980: error: Name \"_LaunchGuiModule\" is not defined  [name-defined]\nx_cls_make_all_x.py:1981: error: Returning Any from function declared to return \"_LaunchGuiCallable | None\"  [no-any-return]\nx_cls_make_all_x.py:1981: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:2068: error: Argument 2 to \"commit_all_repositories\" has incompatible type \"str | None\"; expected \"str\"  [arg-type]\ntests\\test_make_all_pip_updates.py:9: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_pip_updates.py:11: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:12: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:14: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:17: error: Expression type contains \"Any\" (has type \"Callable[[Any], Any]\")  [misc]\ntests\\test_make_all_pip_updates.py:17: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:44: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:71: error: Unused \"type: ignore\" comment  [unused-ignore]\ntests\\test_make_all_pip_updates.py:71: error: Function is missing a return type annotation  [no-untyped-def]\ntests\\test_make_all_pip_updates.py:71: note: Error code \"no-untyped-def\" not covered by \"type: ignore\" comment\ntests\\test_make_all_pip_updates.py:71: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_pip_updates.py:73: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:74: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:77: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:79: error: Expression type contains \"Any\" (has type \"Callable[[dict[str, object], DefaultNamedArg(Any, 'ctx'), DefaultNamedArg(Any, 'pip_updates_factory')], Any]\")  [misc]\ntests\\test_make_all_pip_updates.py:82: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:88: error: Argument 2 to \"run_pip_updates\" of \"MakeAllOrchestrator\" has incompatible type \"dict[str, str]\"; expected \"dict[str, str | None]\"  [arg-type]\ntests\\test_make_all_pip_updates.py:88: note: \"dict\" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance\ntests\\test_make_all_pip_updates.py:88: note: Consider using \"Mapping\" instead, which is covariant in the value type\ntests\\test_make_all_pip_updates.py:89: error: Argument 3 to \"run_pip_updates\" of \"MakeAllOrchestrator\" has incompatible type \"dict[str, dict[str, Sequence[str]]]\"; expected \"dict[str, dict[str, object]]\"  [arg-type]\ntests\\test_make_all_pip_updates.py:90: error: Argument \"ctx\" to \"run_pip_updates\" of \"MakeAllOrchestrator\" has incompatible type \"dict[str, dict[str, bool]]\"; expected \"OrchestratorContextProtocol | None\"  [arg-type]\ntests\\test_make_all_pip_updates.py:99: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:102: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:103: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:107: error: Value of type \"object\" is not indexable  [index]\ntests\\test_make_all_pip_updates.py:107: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:108: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:109: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:110: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:111: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_pip_updates.py:112: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:21: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:28: error: Unused \"type: ignore\" comment  [unused-ignore]\ntests\\test_make_all_commit_cli.py:28: error: Function is missing a return type annotation  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:28: note: Error code \"no-untyped-def\" not covered by \"type: ignore\" comment\ntests\\test_make_all_commit_cli.py:28: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:48: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:49: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:49: error: Expression type contains \"Any\" (has type \"Callable[[Path, str, DefaultNamedArg(Any, 'log')], Any]\")  [misc]\ntests\\test_make_all_commit_cli.py:57: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:65: error: Unused \"type: ignore\" comment  [unused-ignore]\ntests\\test_make_all_commit_cli.py:65: error: Function is missing a return type annotation  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:65: note: Error code \"no-untyped-def\" not covered by \"type: ignore\" comment\ntests\\test_make_all_commit_cli.py:65: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:69: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:70: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:70: error: Expression type contains \"Any\" (has type \"Callable[[Path, str, DefaultNamedArg(Any, 'log')], Any]\")  [misc]\ntests\\test_make_all_commit_cli.py:77: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:88: error: Unused \"type: ignore\" comment  [unused-ignore]\ntests\\test_make_all_commit_cli.py:88: error: Function is missing a return type annotation  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:88: note: Error code \"no-untyped-def\" not covered by \"type: ignore\" comment\ntests\\test_make_all_commit_cli.py:88: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:92: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:93: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:93: error: Expression type contains \"Any\" (has type \"Callable[[Path, str, DefaultNamedArg(Any, 'log')], Any]\")  [misc]\ntests\\test_make_all_commit_cli.py:101: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:110: error: Unused \"type: ignore\" comment  [unused-ignore]\ntests\\test_make_all_commit_cli.py:110: error: Function is missing a return type annotation  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:110: note: Error code \"no-untyped-def\" not covered by \"type: ignore\" comment\ntests\\test_make_all_commit_cli.py:110: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_make_all_commit_cli.py:122: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:123: error: Expression has type \"Any\"  [misc]\ntests\\test_make_all_commit_cli.py:123: error: Expression type contains \"Any\" (has type \"Callable[[Path, str, DefaultNamedArg(Any, 'log')], Any]\")  [misc]\ntests\\test_make_all_commit_cli.py:128: error: \"None\" has no attribute \"value\"  [attr-defined]\ntests\\test_make_all_commit_cli.py:128: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:27: error: Cannot find implementation or library stub for module named \"textual.app\"  [import-not-found]\ninterface\\gui\\prototypes\\textual_control_center.py:28: error: Cannot find implementation or library stub for module named \"textual.widgets\"  [import-not-found]\ninterface\\gui\\prototypes\\textual_control_center.py:39: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:40: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:41: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:42: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:43: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:44: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:45: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:46: error: Unused \"type: ignore[assignment, misc]\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:55: error: Class cannot subclass \"App\" (has type \"Any\")  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:55: error: Base type App becomes \"Any\" due to an unfollowed import  [no-any-unimported]\ninterface\\gui\\prototypes\\textual_control_center.py:100: error: Unused \"type: ignore\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:100: error: Function is missing a return type annotation  [no-untyped-def]\ninterface\\gui\\prototypes\\textual_control_center.py:100: note: Error code \"no-untyped-def\" not covered by \"type: ignore\" comment\ninterface\\gui\\prototypes\\textual_control_center.py:101: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:104: error: \"None\" has no attribute \"styles\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:104: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:108: error: \"None\" has no attribute \"cursor_type\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:112: error: \"None\" has no attribute \"cursor_type\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:116: error: \"None\" has no attribute \"styles\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:116: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:120: error: \"None\" has no attribute \"cursor_type\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:124: error: \"None\" has no attribute \"cursor_type\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:128: error: \"None\" has no attribute \"cursor_type\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:135: error: \"None\" has no attribute \"styles\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:135: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:146: error: \"None\" has no attribute \"styles\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:146: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:174: error: \"None\" has no attribute \"border_title\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:178: error: \"None\" has no attribute \"value\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:180: error: \"None\" has no attribute \"value\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:182: error: \"None\" has no attribute \"value\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:184: error: \"None\" has no attribute \"value\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:186: error: \"None\" has no attribute \"value\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:188: error: \"None\" has no attribute \"value\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:190: error: \"None\" has no attribute \"cursor_type\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:194: error: \"None\" has no attribute \"border_title\"  [attr-defined]\ninterface\\gui\\prototypes\\textual_control_center.py:197: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:199: error: Unused \"type: ignore\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:199: error: Function is missing a return type annotation  [no-untyped-def]\ninterface\\gui\\prototypes\\textual_control_center.py:199: note: Error code \"no-untyped-def\" not covered by \"type: ignore\" comment\ninterface\\gui\\prototypes\\textual_control_center.py:199: note: Use \"-> None\" if function does not return a value\ninterface\\gui\\prototypes\\textual_control_center.py:218: error: Unused \"type: ignore\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:218: error: Argument 2 to \"on_button_pressed\" becomes \"Any\" due to an unfollowed import  [no-any-unimported]\ninterface\\gui\\prototypes\\textual_control_center.py:218: note: Error code \"no-any-unimported\" not covered by \"type: ignore\" comment\ninterface\\gui\\prototypes\\textual_control_center.py:219: error: Right operand of \"and\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:220: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:221: error: Right operand of \"and\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:222: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:224: error: Unused \"type: ignore\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\textual_control_center.py:224: error: Argument 2 to \"on_input_submitted\" becomes \"Any\" due to an unfollowed import  [no-any-unimported]\ninterface\\gui\\prototypes\\textual_control_center.py:224: note: Error code \"no-any-unimported\" not covered by \"type: ignore\" comment\ninterface\\gui\\prototypes\\textual_control_center.py:225: error: Right operand of \"and\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:226: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:227: error: Right operand of \"and\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:228: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:231: error: Incompatible types in assignment (expression has type \"WorkspaceSnapshot\", variable has type \"None\")  [assignment]\ninterface\\gui\\prototypes\\textual_control_center.py:236: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:271: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:275: error: Right operand of \"or\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:277: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:286: error: Right operand of \"or\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:288: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:310: error: Right operand of \"or\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:312: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:324: error: Right operand of \"or\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:326: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:335: error: Right operand of \"or\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:337: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:350: error: Right operand of \"or\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:352: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:374: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:379: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:381: error: Right operand of \"and\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:382: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:404: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:409: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:413: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:415: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:417: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ninterface\\gui\\prototypes\\textual_control_center.py:420: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:438: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:447: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:462: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:477: error: Right operand of \"or\" is never evaluated  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:479: error: Statement is unreachable  [unreachable]\ninterface\\gui\\prototypes\\textual_control_center.py:533: error: Cannot assign to a type  [misc]\ninterface\\gui\\prototypes\\textual_control_center.py:533: note: Error code \"misc\" not covered by \"type: ignore\" comment\ninterface\\gui\\prototypes\\nicegui_control_center.py:17: error: Module \"x_0_make_all_x.interface.gui.prototypes.shared\" does not explicitly export attribute \"CommitResult\"  [attr-defined]\ninterface\\gui\\prototypes\\nicegui_control_center.py:29: error: Cannot find implementation or library stub for module named \"nicegui\"  [import-not-found]\ninterface\\gui\\prototypes\\nicegui_control_center.py:29: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ninterface\\gui\\prototypes\\nicegui_control_center.py:32: error: Unused \"type: ignore\" comment  [unused-ignore]\ninterface\\gui\\prototypes\\nicegui_control_center.py:244: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:248: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:261: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:267: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:276: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:282: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:291: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:305: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:317: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:319: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:325: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:327: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:329: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:330: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:331: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:339: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:341: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:351: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:355: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:357: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:361: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:368: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:379: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:380: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:397: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:399: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:400: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:404: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:409: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:410: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:413: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:414: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:415: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:416: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:420: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:422: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:424: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:429: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:432: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:433: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:434: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:435: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:437: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:438: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:439: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:440: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:443: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:443: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:444: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:445: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:447: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:449: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:450: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:451: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:453: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:455: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:457: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:461: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:462: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:463: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:464: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:466: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:468: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:469: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:472: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:473: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:474: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:475: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:477: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:478: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:480: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:483: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:484: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:489: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:494: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:497: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:499: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:501: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:503: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:504: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:506: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\nicegui_control_center.py:510: error: Expression has type \"Any\"  [misc]\nFound 441 errors in 8 files (checked 27 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:48:10.565648+00:00\nduration: 14.565s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\ninterface\\gui\\prototypes\\form_schemas.py:149: error: Redundant cast to \"object | None\"  [redundant-cast]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\ninterface\\gui\\prototypes\\form_schemas.py:149: error: Redundant cast to \"object | None\"  [redundant-cast]\nC:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-un\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:48:38.449217+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 13.305937600001926,
                "ended_at": "2025-10-18T23:48:38.449217+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "660c6e75ed5113f10ab8d70d3f09734e217d064b41941093f2f29091abcd5d6e",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-18T23:48:25.143282+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:400:20 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:409:29 - error: \"expansion\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:410:28 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:413:25 - error: \"expansion\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:414:24 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:415:24 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:416:24 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:420:24 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:422:28 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:424:28 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\nc:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:55:32 - error: Argument to class must be a base class (reportGeneralTypeIssues)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:104:28 - error: Cannot access attribute \"styles\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"styles\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:107:42 - error: No parameter named \"zebra_stripes\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:108:30 - error: Cannot assign to attribute \"cursor_type\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"cursor_type\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:111:46 - error: No parameter named \"zebra_stripes\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:112:34 - error: Cannot assign to attribute \"cursor_type\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"cursor_type\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:116:35 - error: Cannot access attribute \"styles\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"styles\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:119:44 - error: No parameter named \"zebra_stripes\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:120:32 - error: Cannot assign to attribute \"cursor_type\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"cursor_type\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:123:44 - error: No parameter named \"zebra_stripes\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:124:32 - error: Cannot assign to attribute \"cursor_type\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"cursor_type\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:127:42 - error: No parameter named \"zebra_stripes\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:128:30 - error: Cannot assign to attribute \"cursor_type\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"cursor_type\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:135:31 - error: Cannot access attribute \"styles\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"styles\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:138:40 - error: No parameter named \"placeholder\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:141:42 - error: Expected 0 positional arguments (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:145:42 - error: Expected 0 positional arguments (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:146:33 - error: Cannot access attribute \"styles\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"styles\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:153:47 - error: No parameter named \"placeholder\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:160:49 - error: No parameter named \"placeholder\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:167:49 - error: No parameter named \"placeholder\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:170:43 - error: Expected 0 positional arguments (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:173:41 - error: No parameter named \"highlight\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:174:31 - error: Cannot assign to attribute \"border_title\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"border_title\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:178:43 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:180:43 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:182:45 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:184:45 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:186:45 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:188:45 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:189:52 - error: No parameter named \"zebra_stripes\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:190:40 - error: Cannot assign to attribute \"cursor_type\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"cursor_type\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:193:33 - error: No parameter named \"highlight\" (reportCallIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:194:23 - error: Cannot assign to attribute \"border_title\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"border_title\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:236:32 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:237:32 - error: Cannot access attribute \"add_columns\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_columns\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:256:40 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:266:36 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:271:40 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:272:40 - error: Cannot access attribute \"add_columns\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_columns\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:277:30 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:278:30 - error: Cannot access attribute \"add_columns\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_columns\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:281:34 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:283:34 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:288:34 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:289:34 - error: Cannot access attribute \"add_columns\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_columns\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:293:42 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:297:38 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:306:38 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:312:32 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:313:32 - error: Cannot access attribute \"add_columns\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_columns\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:319:36 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:321:36 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:326:30 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:327:30 - error: Cannot access attribute \"add_columns\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_columns\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:330:34 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:332:34 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:347:28 - error: Cannot access attribute \"update\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"update\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:369:35 - error: Cannot access attribute \"update\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"update\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:375:40 - error: Cannot access attribute \"update\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"update\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:377:40 - error: Cannot access attribute \"update\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"update\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:380:35 - error: Cannot access attribute \"update\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"update\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:383:36 - error: Cannot assign to attribute \"placeholder\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"placeholder\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:385:40 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:404:23 - error: Cannot access attribute \"write\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"write\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:409:31 - error: Cannot access attribute \"write\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"write\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:413:37 - error: Cannot assign to attribute \"disabled\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"disabled\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:415:36 - error: Cannot assign to attribute \"disabled\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"disabled\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:420:40 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:421:40 - error: Cannot access attribute \"add_columns\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_columns\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:424:44 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:431:44 - error: Cannot access attribute \"add_row\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"add_row\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:438:47 - error: Cannot access attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:447:27 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:462:40 - error: Cannot assign to attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:479:54 - error: Cannot access attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:486:60 - error: Cannot access attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:500:60 - error: Cannot access attribute \"value\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:509:34 - error: Cannot assign to attribute \"disabled\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"disabled\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:511:35 - error: Cannot access attribute \"clear\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"clear\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\textual_control_center.py:529:38 - error: Cannot assign to attribute \"disabled\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"disabled\" is unknown (reportAttributeAccessIssue)\nc:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py\n  c:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_commit_cli.py:128:76 - error: Cannot access attribute \"value\" for class \"None\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\nc:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_pip_updates.py\n  c:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_pip_updates.py:88:9 - error: Argument of type \"dict[str, str]\" cannot be assigned to parameter \"published_versions\" of type \"dict[str, str | None]\" in function \"run_pip_updates\"\n  \u00c2\u00a0\u00c2\u00a0\"dict[str, str]\" is not assignable to \"dict[str, str | None]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type parameter \"_VT@dict\" is invariant, but \"str\" is not the same as \"str | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Consider switching from \"dict\" to \"Mapping\" which is covariant in the value type (reportArgumentType)\n  c:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_pip_updates.py:90:13 - error: Argument of type \"dict[str, dict[str, bool]]\" cannot be assigned to parameter \"ctx\" of type \"OrchestratorContext | None\" in function \"run_pip_updates\"\n  \u00c2\u00a0\u00c2\u00a0Type \"dict[str, dict[str, bool]]\" is not assignable to type \"OrchestratorContext | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"dict[str, dict[str, bool]]\" is incompatible with protocol \"OrchestratorContextProtocol\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"publish_opts\" is not present\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"dict[str, dict[str, bool]]\" is not assignable to \"None\" (reportArgumentType)\n  c:\\x_runner_x\\x_0_make_all_x\\tests\\test_make_all_pip_updates.py:107:16 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\nc:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:821:42 - error: \"_SupportsMetadata\" is not defined (reportUndefinedVariable)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:823:38 - error: Cannot access attribute \"to_metadata\" for class \"object\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"to_metadata\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:1537:32 - error: \"_HasRunReportPath\" is not defined (reportUndefinedVariable)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:1538:40 - error: Cannot access attribute \"run_report_path\" for class \"Exception\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"run_report_path\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:1976:45 - error: \"_LaunchGuiModule\" is not defined (reportUndefinedVariable)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:1980:27 - error: \"_LaunchGuiModule\" is not defined (reportUndefinedVariable)\n101 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:48:25.143282+00:00\nduration: 13.306s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:400:20 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:409:29 - error: \"expansion\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:410:28 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:413:25 - error: \"expansion\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:400:20 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:409:29 - error: \"expansion\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:410:28 - error: \"label\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n  c:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\prototypes\\nicegui_control_center.py:413:25 - error: \"expansion\" is not a known attribute of \"None\" (reportOptionalMemberAccess)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:48:25.143282+00:00 duration: 13.306s tool_version: pyright 1.\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:48:10.525183+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 0.391159200007678,
                "ended_at": "2025-10-18T23:48:10.525183+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "660c6e75ed5113f10ab8d70d3f09734e217d064b41941093f2f29091abcd5d6e",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-18T23:48:10.134012+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> interface\\gui\\commit.py:7:29\n  |\n5 | import json\n6 | import subprocess\n7 | from collections.abc import Callable, Iterable\n  |                             ^^^^^^^^\n8 | from dataclasses import dataclass\n9 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\gui\\commit.py:7:39\n  |\n5 | import json\n6 | import subprocess\n7 | from collections.abc import Callable, Iterable\n  |                                       ^^^^^^^^\n8 | from dataclasses import dataclass\n9 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> interface\\gui\\commit.py:10:21\n   |\n 8 | from dataclasses import dataclass\n 9 | from datetime import UTC, datetime\n10 | from pathlib import Path\n   |                     ^^^^\n11 | from typing import Protocol\n   |\nhelp: Move into type-checking block\n\nRET504 Unnecessary assignment to `fallback` before `return` statement\n   --> interface\\gui\\commit.py:146:12\n    |\n144 |         return candidate\n145 |     fallback = root / \"reports\"\n146 |     return fallback\n    |            ^^^^^^^^\n    |\nhelp: Remove unnecessary assignment\n\nE501 Line too long (97 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:40:89\n   |\n38 |         \"name\": \"commit_sweep\",\n39 |         \"title\": \"Commit Sweep\",\n40 |         \"description\": \"Stage and commit changes across all repositories with a single message.\",\n   |                                                                                         ^^^^^^^^^\n41 |         \"type\": \"object\",\n42 |         \"properties\": {\n   |\n\nE501 Line too long (95 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:46:89\n   |\n44 |                 \"title\": \"Commit message\",\n45 |                 \"type\": \"string\",\n46 |                 \"description\": \"A concise summary recorded for every repository in the sweep.\",\n   |                                                                                         ^^^^^^^\n47 |                 \"minLength\": 5,\n48 |                 \"maxLength\": 120,\n   |\n\nE501 Line too long (103 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:61:89\n   |\n59 |         \"name\": \"orchestrator_dry_run\",\n60 |         \"title\": \"Orchestrator Dry-Run\",\n61 |         \"description\": \"Preview orchestrator actions for a given stage without mutating repositories.\",\n   |                                                                                         ^^^^^^^^^^^^^^^\n62 |         \"type\": \"object\",\n63 |         \"properties\": {\n   |\n\nE501 Line too long (89 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:80:89\n   |\n78 |                 \"type\": \"boolean\",\n79 |                 \"default\": True,\n80 |                 \"description\": \"Generate JSON reports alongside the dry-run for review.\",\n   |                                                                                         ^\n81 |             },\n82 |             \"max_workers\": {\n   |\n\nE501 Line too long (94 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:88:89\n   |\n86 |                 \"maximum\": 8,\n87 |                 \"default\": 2,\n88 |                 \"description\": \"Parallel workers to provision for the dry-run orchestration.\",\n   |                                                                                         ^^^^^^\n89 |             },\n90 |         },\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\gui\\prototypes\\form_schemas.py:169:15\n    |\n167 |     payload = _SCHEMA_REGISTRY.get(name)\n168 |     if payload is None:\n169 |         raise KeyError(f\"Unknown schema '{name}'\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n170 |     schema = MappingProxyType(dict(payload))\n171 |     title = _coerce_str(schema.get(\"title\"), name)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\gui\\prototypes\\form_schemas.py:169:24\n    |\n167 |     payload = _SCHEMA_REGISTRY.get(name)\n168 |     if payload is None:\n169 |         raise KeyError(f\"Unknown schema '{name}'\")\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n170 |     schema = MappingProxyType(dict(payload))\n171 |     title = _coerce_str(schema.get(\"title\"), name)\n    |\nhelp: Assign to variable; remove f-string literal\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n   --> interface\\gui\\prototypes\\form_schemas.py:192:45\n    |\n190 |     \"\"\"Return all registered form schemas.\"\"\"\n191 |\n192 |     return tuple(load_form_schema(name) for name in _SCHEMA_REGISTRY.keys())\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Remove `.keys()`\n\nE501 Line too long (93 > 88)\n  --> interface\\gui\\prototypes\\nicegui_control_center.py:54:89\n   |\n52 |     for repo in snapshot.repositories:\n53 |         script_count = len(repo.scripts)\n54 |         descriptor = f\"{repo.name} ({script_count} script{'s' if script_count != 1 else ''})\"\n   |                                                                                         ^^^^^\n55 |         lines.append(f\"- {descriptor}\")\n56 |     return \"\\n\".join(lines)\n   |\n\nE501 Line too long (94 > 88)\n  --> interface\\gui\\prototypes\\nicegui_control_center.py:96:89\n   |\n94 |         )\n95 |     if not rows:\n96 |         rows.append({\"id\": \"empty\", \"repository\": \"\u00e2\u20ac\u201d\", \"scripts\": \"No repositories detected\"})\n   |                                                                                         ^^^^^^\n97 |     return rows\n   |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:183:89\n    |\n181 |     for index, schema in enumerate(schemas):\n182 |         for field in schema.fields:\n183 |             enum_values = field.schema.get(\"enum\") if isinstance(field.schema, Mapping) else None\n    |                                                                                         ^^^^^^^^^\n184 |             field_type = field.field_type\n185 |             if isinstance(enum_values, list) and enum_values:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:187:54\n    |\n185 |             if isinstance(enum_values, list) and enum_values:\n186 |                 joined = \", \".join(str(item) for item in enum_values[:4])\n187 |                 suffix = \"...\" if len(enum_values) > 4 else \"\"\n    |                                                      ^\n188 |                 field_type = f\"{field_type} ({joined}{suffix})\"\n189 |             rows.append(\n    |\n\nC901 `run` is too complex (39 > 10)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:241:5\n    |\n241 | def run(workspace_root: str | Path | None = None, *, host: str = \"127.0.0.1\", port: int = 8080) -> None:\n    |     ^^^\n242 |     \"\"\"Launch the NiceGUI prototype.\"\"\"\n    |\n\nPLR0915 Too many statements (169 > 50)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:241:5\n    |\n241 | def run(workspace_root: str | Path | None = None, *, host: str = \"127.0.0.1\", port: int = 8080) -> None:\n    |     ^^^\n242 |     \"\"\"Launch the NiceGUI prototype.\"\"\"\n    |\n\nE501 Line too long (104 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:241:89\n    |\n241 | def run(workspace_root: str | Path | None = None, *, host: str = \"127.0.0.1\", port: int = 8080) -> None:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n242 |     \"\"\"Launch the NiceGUI prototype.\"\"\"\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:245:15\n    |\n244 |       if ui is None:\n245 |           raise RuntimeError(\n    |  _______________^\n246 | |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n247 | |         ) from _NICEGUI_IMPORT_ERROR\n    | |_________^\n248 |       assert ui is not None  # help type checkers understand ui is available\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:246:13\n    |\n244 |     if ui is None:\n245 |         raise RuntimeError(\n246 |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n247 |         ) from _NICEGUI_IMPORT_ERROR\n248 |     assert ui is not None  # help type checkers understand ui is available\n    |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:246:89\n    |\n244 |     if ui is None:\n245 |         raise RuntimeError(\n246 |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n    |                                                                                         ^^^^^^^^^^^\n247 |         ) from _NICEGUI_IMPORT_ERROR\n248 |     assert ui is not None  # help type checkers understand ui is available\n    |\n\nS101 Use of `assert` detected\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:248:5\n    |\n246 |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n247 |         ) from _NICEGUI_IMPORT_ERROR\n248 |     assert ui is not None  # help type checkers understand ui is available\n    |     ^^^^^^\n249 |\n250 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:250:89\n    |\n248 |     assert ui is not None  # help type checkers understand ui is available\n249 |\n250 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |                                                                                         ^^^^^^^^^\n251 |     snapshot = load_workspace_snapshot(root)\n252 |     form_catalog = list_form_schemas()\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:254:89\n    |\n252 |     form_catalog = list_form_schemas()\n253 |     commit_schema: FormSchema = load_form_schema(\"commit_sweep\")\n254 |     commit_field: FieldDefinition | None = commit_schema.fields[0] if commit_schema.fields else None\n    |                                                                                         ^^^^^^^^^^^^\n255 |     orchestrator_schema: FormSchema = load_form_schema(\"orchestrator_dry_run\")\n256 |     orchestrator_fields = {field.name: field for field in orchestrator_schema.fields}\n    |\n\nE501 Line too long (115 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:261:89\n    |\n259 |     workers_field = orchestrator_fields.get(\"max_workers\")\n260 |\n261 |     header = ui.markdown(f\"## x_runner_x Control Center (NiceGUI)\\n\\n{_format_repository_summary(snapshot, root)}\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n262 |\n263 |     repo_columns = [\n    |\n\nE501 Line too long (112 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:267:89\n    |\n265 |         {\"name\": \"scripts\", \"label\": \"Scripts\", \"field\": \"scripts\"},\n266 |     ]\n267 |     repo_table = ui.table(columns=repo_columns, rows=_repository_rows(snapshot), row_key=\"id\").classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n268 |\n269 |     manifest_columns = [\n    |\n\nF841 Local variable `schema_table` is assigned to but never used\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:305:5\n    |\n303 |         {\"name\": \"description\", \"label\": \"Description\", \"field\": \"description\"},\n304 |     ]\n305 |     schema_table = ui.table(\n    |     ^^^^^^^^^^^^\n306 |         columns=schema_columns,\n307 |         rows=_schema_rows(form_catalog),\n    |\nhelp: Remove assignment to unused variable `schema_table`\n\nE501 Line too long (112 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:317:89\n    |\n315 |         {\"name\": \"messages\", \"label\": \"Messages\", \"field\": \"messages\"},\n316 |     ]\n317 |     kanban_table = ui.table(columns=kanban_columns, rows=_kanban_rows(snapshot), row_key=\"id\").classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n318 |\n319 |     ui.separator()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:325:89\n    |\n323 |     if commit_field is not None and commit_field.description:\n324 |         commit_placeholder = commit_field.description\n325 |     commit_input = ui.input(label=commit_label, placeholder=commit_placeholder).classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^\n326 |     if commit_field is not None and commit_field.default is not None:\n327 |         commit_input.value = str(commit_field.default)\n    |\n\nE501 Line too long (106 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:339:89\n    |\n337 |         {\"name\": \"summary\", \"label\": \"Summary\", \"field\": \"summary\"},\n338 |     ]\n339 |     commit_table = ui.table(columns=commit_columns, rows=_commit_rows(()), row_key=\"id\").classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^\n340 |\n341 |     ui.separator()\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:359:89\n    |\n357 |         dry_run_stage_select.value = stage_options[0]\n358 |\n359 |     include_label = include_field.title if include_field is not None else \"Include reports\"\n    |                                                                                         ^^^\n360 |     include_default = bool(include_field.default) if include_field is not None else True\n361 |     dry_run_include_checkbox = ui.checkbox(include_label, value=include_default)\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:390:89\n    |\n388 |         min_length = field.schema.get(\"minLength\")\n389 |         if isinstance(min_length, (int, float)) and len(message) < int(min_length):\n390 |             return (False, f\"{field.title} must be at least {int(min_length)} characters.\")\n    |                                                                                         ^^^\n391 |         max_length = field.schema.get(\"maxLength\")\n392 |         if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:393:89\n    |\n391 |         max_length = field.schema.get(\"maxLength\")\n392 |         if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n393 |             return (False, f\"{field.title} must be at most {int(max_length)} characters.\")\n    |                                                                                         ^^\n394 |         return (True, None)\n    |\n\nE501 Line too long (107 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:418:89\n    |\n416 |                     ui.label(f\"Author: {manifest_record.author or 'unknown'}\")\n417 |                     dependencies = (\n418 |                         \", \".join(manifest_record.dependencies) if manifest_record.dependencies else \"None\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^\n419 |                     )\n420 |                     ui.label(f\"Dependencies: {dependencies}\")\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:430:89\n    |\n428 |         snapshot = load_workspace_snapshot(root)\n429 |         header.set_content(\n430 |             f\"## x_runner_x Control Center (NiceGUI)\\n\\n{_format_repository_summary(snapshot, root)}\"\n    |                                                                                         ^^^^^^^^^^^^^\n431 |         )\n432 |         repo_table.rows = _repository_rows(snapshot)\n    |\n\nE501 Line too long (94 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:447:89\n    |\n445 |         is_valid, validation_error = _validate_commit_message(message)\n446 |         if not is_valid:\n447 |             commit_log.push(f\"[commit-all] {validation_error or 'Invalid message provided.'}\")\n    |                                                                                         ^^^^^^\n448 |             return\n449 |         commit_button.disable()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:480:89\n    |\n478 |         workers_raw = dry_run_workers_input.value\n479 |         try:\n480 |             workers_value = int(workers_raw) if workers_raw is not None else int(workers_default)\n    |                                                                                         ^^^^^^^^^\n481 |         except (TypeError, ValueError):\n482 |             workers_value = int(workers_default)\n    |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:21:1\n   |\n19 |     write_commit_sweep_summary,\n20 | )\n21 | from ..tree import RepositoryNode, build_repository_tree\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n22 |\n23 | _JSON_NAME = \"make_all_summary.json\"\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:21:1\n   |\n19 |     write_commit_sweep_summary,\n20 | )\n21 | from ..tree import RepositoryNode, build_repository_tree\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n22 |\n23 | _JSON_NAME = \"make_all_summary.json\"\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nE501 Line too long (89 > 88)\n  --> interface\\gui\\prototypes\\shared.py:42:89\n   |\n40 |         \"observability_readiness\": \"Awaiting observability checks automation.\",\n41 |         \"stakeholder_sign_off\": \"Awaiting sign-off registry integration.\",\n42 |         \"post_deployment_feedback_loop\": \"Awaiting production feedback intake pipeline.\",\n   |                                                                                         ^\n43 |     }\n44 | )\n   |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\shared.py:169:89\n    |\n167 |             repos = \", \".join(self.failures)\n168 |             return f\"Commit sweep failed for {repos} ({timestamp}).\"\n169 |         return f\"Commit sweep completed for {self.total} repository(ies) at {timestamp}.\"\n    |                                                                                         ^\n    |\n\nC901 `_collect_visitor_failures` is too complex (24 > 10)\n   --> interface\\gui\\prototypes\\shared.py:385:5\n    |\n385 | def _collect_visitor_failures(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n386 |     report_path: str | None,\n387 |     previews: Sequence[str],\n    |\n\nPLR0912 Too many branches (25 > 12)\n   --> interface\\gui\\prototypes\\shared.py:385:5\n    |\n385 | def _collect_visitor_failures(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n386 |     report_path: str | None,\n387 |     previews: Sequence[str],\n    |\n\nPLR0915 Too many statements (65 > 50)\n   --> interface\\gui\\prototypes\\shared.py:385:5\n    |\n385 | def _collect_visitor_failures(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n386 |     report_path: str | None,\n387 |     previews: Sequence[str],\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\gui\\prototypes\\shared.py:404:89\n    |\n402 |                         continue\n403 |                     detail_value = entry.get(\"detail\")\n404 |                     detail_obj = detail_value if isinstance(detail_value, Mapping) else None\n    |                                                                                         ^^^^\n405 |                     tool_value = entry.get(\"tool\")\n406 |                     if tool_value is None and detail_obj is not None:\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\shared.py:478:89\n    |\n476 |     if not findings:\n477 |         return MappingProxyType({})\n478 |     return MappingProxyType({tool: tuple(entries) for tool, entries in findings.items()})\n    |                                                                                         ^\n    |\n\nC901 `_load_commit_sweep_summary` is too complex (13 > 10)\n   --> interface\\gui\\prototypes\\shared.py:505:5\n    |\n505 | def _load_commit_sweep_summary(report_path: Path) -> CommitSweepSummary | None:\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n506 |     if not report_path.exists():\n507 |         return None\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> interface\\gui\\prototypes\\shared.py:531:21\n    |\n529 |             for entry in failed_list:\n530 |                 if isinstance(entry, str) and entry.strip():\n531 |                     failures.append(entry.strip())\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n532 |     logs_obj = payload.get(\"logs\")\n533 |     logs: tuple[str, ...] = ()\n    |\nhelp: Replace for loop with list.extend\n\nE501 Line too long (105 > 88)\n   --> interface\\gui\\prototypes\\shared.py:552:89\n    |\n550 | def _build_lifecycle_context(payload: Mapping[str, Any]) -> _LifecycleContext:\n551 |     artifacts_obj = payload.get(\"artifacts\")\n552 |     artifacts = cast(\"Mapping[str, object]\", artifacts_obj) if isinstance(artifacts_obj, Mapping) else {}\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n553 |\n554 |     pypi_status_obj = artifacts.get(\"pypi_release_status\") if artifacts else None\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\shared.py:568:89\n    |\n567 |     pip_completed_obj = artifacts.get(\"pip_updates_completed\") if artifacts else None\n568 |     pip_updates_completed = bool(pip_completed_obj) if isinstance(pip_completed_obj, bool) else False\n    |                                                                                         ^^^^^^^^^^^^^\n569 |\n570 |     stages = _extract_stage_statuses(payload)\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\shared.py:574:89\n    |\n573 |     generated_at_obj = payload.get(\"generated_at\")\n574 |     generated_at = generated_at_obj.strip() if isinstance(generated_at_obj, str) else None\n    |                                                                                         ^^\n575 |\n576 |     visitor_report_obj = artifacts.get(\"visitor_report_path\") if artifacts else None\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\shared.py:580:89\n    |\n578 |     if isinstance(visitor_report_obj, str) and visitor_report_obj.strip():\n579 |         visitor_report_path = visitor_report_obj.strip()\n580 |     visitor_failures = _collect_visitor_failures(visitor_report_path, inspection_previews)\n    |                                                                                         ^^\n581 |\n582 |     visitor_error_obj = artifacts.get(\"visitor_error\") if artifacts else None\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\gui\\prototypes\\shared.py:583:89\n    |\n582 |     visitor_error_obj = artifacts.get(\"visitor_error\") if artifacts else None\n583 |     visitor_summary = visitor_error_obj.strip() if isinstance(visitor_error_obj, str) else None\n    |                                                                                         ^^^^^^^\n584 |     if visitor_summary is None:\n585 |         inspection_stage = stages.get(\"inspection\")\n    |\n\nC901 `_summarize_publish_status` is too complex (11 > 10)\n   --> interface\\gui\\prototypes\\shared.py:621:5\n    |\n621 | def _summarize_publish_status(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n622 |     repositories: Iterable[RepositoryNode],\n623 |     manifest: Mapping[str, ManifestRecord],\n    |\n\nC901 `_summarize_column_statuses` is too complex (23 > 10)\n   --> interface\\gui\\prototypes\\shared.py:691:5\n    |\n691 | def _summarize_column_statuses(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n692 |     column_specs: Iterable[ColumnSpec],\n693 |     context: _LifecycleContext,\n    |\n\nPLR0912 Too many branches (30 > 12)\n   --> interface\\gui\\prototypes\\shared.py:691:5\n    |\n691 | def _summarize_column_statuses(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n692 |     column_specs: Iterable[ColumnSpec],\n693 |     context: _LifecycleContext,\n    |\n\nPLR0915 Too many statements (84 > 50)\n   --> interface\\gui\\prototypes\\shared.py:691:5\n    |\n691 | def _summarize_column_statuses(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n692 |     column_specs: Iterable[ColumnSpec],\n693 |     context: _LifecycleContext,\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\shared.py:769:89\n    |\n767 |                 elif stage_state == \"failed\":\n768 |                     state = \"unknown\"\n769 |                     message = context.visitor_summary or \"Visitor QA reported issues in other tools.\"\n    |                                                                                         ^^^^^^^^^^^^^\n770 |                 else:\n771 |                     state = stage_state\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\shared.py:772:89\n    |\n770 |                 else:\n771 |                     state = stage_state\n772 |                     message = context.visitor_summary or stage_message or \"Awaiting visitor QA data.\"\n    |                                                                                         ^^^^^^^^^^^^^\n773 |         elif key in _COLUMN_STAGE_MAPPING:\n774 |             stage_id = _COLUMN_STAGE_MAPPING[key]\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\shared.py:777:89\n    |\n775 |             stage = context.stages.get(stage_id)\n776 |             state, message = _stage_state_message(stage)\n777 |             if key == \"release_assembly\" and commit_summary is not None and commit_summary.total:\n    |                                                                                         ^^^^^^^^^\n778 |                 commit_state = commit_summary.state()\n779 |                 commit_message = commit_summary.message()\n    |\n\nE501 Line too long (106 > 88)\n   --> interface\\gui\\prototypes\\shared.py:780:89\n    |\n778 |                 commit_state = commit_summary.state()\n779 |                 commit_message = commit_summary.message()\n780 |                 link_suffix = f\" (see {commit_summary.report_path})\" if commit_summary.report_path else \"\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^\n781 |                 if commit_state == \"failed\" or state not in {\"failed\", \"passed\"}:\n782 |                     state = commit_state\n    |\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\shared.py:785:89\n    |\n783 |                 message = commit_message + link_suffix\n784 |         elif key == \"publish_to_pypi\":\n785 |             state, message = _summarize_publish_status(repositories, manifest, context.pypi_status)\n    |                                                                                         ^^^^^^^^^^^\n786 |         elif key == \"pip_package_propagation\":\n787 |             state, message = _summarize_pip_status(repositories, manifest, context)\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\shared.py:794:89\n    |\n792 |             message = \"Automation data not yet wired for this column.\"\n793 |\n794 |         statuses.append(ColumnStatus(key=key, label=label, state=state, message=message))\n    |                                                                                         ^\n795 |\n796 |     return tuple(statuses)\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\shared.py:830:89\n    |\n828 |             messages: tuple[str, ...] = ()\n829 |             if isinstance(raw_msgs, list):\n830 |                 messages = tuple(str(msg).strip() for msg in raw_msgs if str(msg).strip())\n    |                                                                                         ^^\n831 |             if not title:\n832 |                 continue\n    |\n\nC901 `_load_column_specs` is too complex (13 > 10)\n   --> interface\\gui\\prototypes\\shared.py:870:5\n    |\n870 | def _load_column_specs(path: Path = _COLUMN_CONFIG_PATH) -> tuple[ColumnSpec, ...]:\n    |     ^^^^^^^^^^^^^^^^^^\n871 |     payload = _read_json_mapping(path)\n872 |     specs: list[ColumnSpec] = []\n    |\n\nC901 `perform_orchestrator_dry_run` is too complex (14 > 10)\n    --> interface\\gui\\prototypes\\shared.py:1048:5\n     |\n1048 | def perform_orchestrator_dry_run(\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1049 |     workspace_root: Path,\n1050 |     *,\n     |\n\nPLR0912 Too many branches (16 > 12)\n    --> interface\\gui\\prototypes\\shared.py:1048:5\n     |\n1048 | def perform_orchestrator_dry_run(\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1049 |     workspace_root: Path,\n1050 |     *,\n     |\n\nPLR0915 Too many statements (51 > 50)\n    --> interface\\gui\\prototypes\\shared.py:1048:5\n     |\n1048 | def perform_orchestrator_dry_run(\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1049 |     workspace_root: Path,\n1050 |     *,\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> interface\\gui\\prototypes\\shared.py:1060:15\n     |\n1058 |     if normalized_stage not in _VALID_DRY_RUN_STAGES:\n1059 |         allowed = \", \".join(_VALID_DRY_RUN_STAGES)\n1060 |         raise ValueError(f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1061 |\n1062 |     workers = max(1, int(max_workers))\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> interface\\gui\\prototypes\\shared.py:1060:26\n     |\n1058 |     if normalized_stage not in _VALID_DRY_RUN_STAGES:\n1059 |         allowed = \", \".join(_VALID_DRY_RUN_STAGES)\n1060 |         raise ValueError(f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\")\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1061 |\n1062 |     workers = max(1, int(max_workers))\n     |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (89 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1060:89\n     |\n1058 |     if normalized_stage not in _VALID_DRY_RUN_STAGES:\n1059 |         allowed = \", \".join(_VALID_DRY_RUN_STAGES)\n1060 |         raise ValueError(f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\")\n     |                                                                                         ^\n1061 |\n1062 |     workers = max(1, int(max_workers))\n     |\n\nE501 Line too long (101 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1075:89\n     |\n1073 |         if repos:\n1074 |             logs.append(\n1075 |                 f\"[dry-run] would synchronize {len(repos)} repository(ies) beneath {workspace_root}.\"\n     |                                                                                         ^^^^^^^^^^^^^\n1076 |             )\n1077 |             preview_limit = 8\n     |\n\nPERF401 Use `list.extend` to create a transformed list\n    --> interface\\gui\\prototypes\\shared.py:1079:17\n     |\n1077 |             preview_limit = 8\n1078 |             for repo in repos[:preview_limit]:\n1079 |                 logs.append(f\"[dry-run] - sync {repo.name}\")\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1080 |             remaining = len(repos) - preview_limit\n1081 |             if remaining > 0:\n     |\nhelp: Replace for loop with list.extend\n\nE501 Line too long (97 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1084:89\n     |\n1082 |                 logs.append(f\"[dry-run] - \u00e2\u20ac\u00a6 {remaining} additional repository(ies)\")\n1083 |         else:\n1084 |             logs.append(\"[dry-run] no repositories detected; cloner would initialize workspace.\")\n     |                                                                                         ^^^^^^^^^\n1085 |     elif normalized_stage == \"quality_gates\":\n1086 |         logs.append(\n     |\n\nE501 Line too long (104 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1087:89\n     |\n1085 |     elif normalized_stage == \"quality_gates\":\n1086 |         logs.append(\n1087 |             f\"[dry-run] would execute visitor QA across lint/type tools with up to {workers} worker(s).\"\n     |                                                                                         ^^^^^^^^^^^^^^^^\n1088 |         )\n1089 |         commands = (\n     |\n\nE501 Line too long (89 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1090:89\n     |\n1088 |         )\n1089 |         commands = (\n1090 |             (\"ruff\", \"python -m ruff check . --select ALL --ignore D,COM812,ISC001,T20\"),\n     |                                                                                         ^\n1091 |             (\"black\", \"python -m black . --line-length 88 --target-version py311 --check\"),\n1092 |             (\"mypy\", \"python -m mypy . --strict\"),\n     |\n\nE501 Line too long (91 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1091:89\n     |\n1089 |         commands = (\n1090 |             (\"ruff\", \"python -m ruff check . --select ALL --ignore D,COM812,ISC001,T20\"),\n1091 |             (\"black\", \"python -m black . --line-length 88 --target-version py311 --check\"),\n     |                                                                                         ^^^\n1092 |             (\"mypy\", \"python -m mypy . --strict\"),\n1093 |             (\"pyright\", \"python -m pyright . --level error\"),\n     |\n\nE501 Line too long (93 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1103:89\n     |\n1101 |         if packages:\n1102 |             logs.append(\n1103 |                 f\"[dry-run] would stage release verification for {len(packages)} package(s).\"\n     |                                                                                         ^^^^^\n1104 |             )\n1105 |             preview_limit = 6\n     |\n\nE501 Line too long (99 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1109:89\n     |\n1107 |             logs.append(f\"[dry-run] - packages: {display_packages}\")\n1108 |             if len(packages) > preview_limit:\n1109 |                 logs.append(f\"[dry-run] - \u00e2\u20ac\u00a6 {len(packages) - preview_limit} additional package(s)\")\n     |                                                                                         ^^^^^^^^^^^\n1110 |         else:\n1111 |             logs.append(\"[dry-run] manifest contains no publishable packages.\")\n     |\n\nE501 Line too long (96 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1112:89\n     |\n1110 |         else:\n1111 |             logs.append(\"[dry-run] manifest contains no publishable packages.\")\n1112 |         logs.append(\"[dry-run] would verify PyPI release status and pip propagation readiness.\")\n     |                                                                                         ^^^^^^^^\n1113 |     else:  # observability_feedback\n1114 |         logs.append(\n     |\n\nE501 Line too long (126 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1115:89\n     |\n1113 |     else:  # observability_feedback\n1114 |         logs.append(\n1115 |             \"[dry-run] observability feedback pipeline not yet implemented; would collect telemetry endpoints and dashboards.\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1116 |         )\n     |\n\nRUF012 Mutable class attributes should be annotated with `typing.ClassVar`\n  --> interface\\gui\\prototypes\\textual_control_center.py:60:20\n   |\n58 |           TITLE = \"x_runner_x Control Center (Textual)\"\n59 |           CSS_PATH = None\n60 |           BINDINGS = [\n   |  ____________________^\n61 | |             (\"r\", \"refresh_data\", \"Refresh data\"),\n62 | |             (\"q\", \"quit\", \"Quit\"),\n63 | |         ]\n   | |_________^\n64 |\n65 |           def __init__(self, workspace_root: Path) -> None:\n   |\n\nPLR0915 Too many statements (76 > 50)\n   --> interface\\gui\\prototypes\\textual_control_center.py:100:13\n    |\n 98 |             }\n 99 |\n100 |         def compose(self):  # type: ignore[override]\n    |             ^^^^^^^\n101 |             yield Header()\n    |\n\nANN201 Missing return type annotation for public function `compose`\n   --> interface\\gui\\prototypes\\textual_control_center.py:100:13\n    |\n 98 |             }\n 99 |\n100 |         def compose(self):  # type: ignore[override]\n    |             ^^^^^^^\n101 |             yield Header()\n    |\nhelp: Add return type annotation\n\nE501 Line too long (96 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:182:89\n    |\n180 |                 self._dry_run_stage_input.value = \"quality_gates\"\n181 |             if include_field is not None and include_field.default is not None:\n182 |                 self._dry_run_include_input.value = \"true\" if include_field.default else \"false\"\n    |                                                                                         ^^^^^^^^\n183 |             else:\n184 |                 self._dry_run_include_input.value = \"true\"\n    |\n\nANN201 Missing return type annotation for public function `on_mount`\n   --> interface\\gui\\prototypes\\textual_control_center.py:199:13\n    |\n197 |             yield Footer()\n198 |\n199 |         def on_mount(self):  # type: ignore[override]\n    |             ^^^^^^^^\n200 |             self._refresh_snapshot()\n201 |             self._populate_repo_table()\n    |\nhelp: Add return type annotation: `None`\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:221:89\n    |\n219 |             if self._commit_button is not None and event.button is self._commit_button:\n220 |                 await self._handle_commit_request()\n221 |             elif self._dry_run_button is not None and event.button is self._dry_run_button:\n    |                                                                                         ^^^\n222 |                 await self._handle_dry_run_request()\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:227:89\n    |\n225 |             if self._commit_input is not None and event.input is self._commit_input:\n226 |                 await self._handle_commit_request()\n227 |             elif self._dry_run_stage_input is not None and event.input is self._dry_run_stage_input:\n    |                                                                                         ^^^^^^^^^^^^\n228 |                 await self._handle_dry_run_request()\n    |\n\nE501 Line too long (105 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:249:89\n    |\n247 |                 for field in schema.fields:\n248 |                     field_type = field.field_type\n249 |                     enum_values = field.schema.get(\"enum\") if isinstance(field.schema, Mapping) else None\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n250 |                     if isinstance(enum_values, list) and enum_values:\n251 |                         joined = \", \".join(str(item) for item in enum_values[:4])\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> interface\\gui\\prototypes\\textual_control_center.py:252:62\n    |\n250 |                     if isinstance(enum_values, list) and enum_values:\n251 |                         joined = \", \".join(str(item) for item in enum_values[:4])\n252 |                         suffix = \"...\" if len(enum_values) > 4 else \"\"\n    |                                                              ^\n253 |                         field_type = f\"{field_type} ({joined}{suffix})\"\n254 |                     default = \"\" if field.default is None else str(field.default)\n    |\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:266:89\n    |\n264 |                     rows_added = True\n265 |             if not rows_added:\n266 |                 self._schema_table.add_row(\"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No schema metadata available\")\n    |                                                                                         ^^^^^^^^^^^\n267 |\n268 |         def _initialize_commit_results_table(self) -> None:\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:272:89\n    |\n270 |                 return\n271 |             self._commit_results_table.clear(columns=True)\n272 |             self._commit_results_table.add_columns(\"Repository\", \"git add\", \"git commit\", \"Summary\")\n    |                                                                                         ^^^^^^^^^^^^\n273 |\n274 |         def _populate_repo_table(self) -> None:\n    |\n\nE501 Line too long (104 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:289:89\n    |\n287 |                 return\n288 |             self._manifest_table.clear(columns=True)\n289 |             self._manifest_table.add_columns(\"Repository\", \"Package\", \"Version\", \"PyPI\", \"Dependencies\")\n    |                                                                                         ^^^^^^^^^^^^^^^^\n290 |             for repo in self._snapshot.repositories:\n291 |                 record = lookup_manifest_record(self._snapshot.manifest, repo.name)\n    |\n\nE501 Line too long (94 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:293:89\n    |\n291 |                 record = lookup_manifest_record(self._snapshot.manifest, repo.name)\n292 |                 if record is None:\n293 |                     self._manifest_table.add_row(repo.name, \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", key=repo.name)\n    |                                                                                         ^^^^^^\n294 |                     continue\n295 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"\u00e2\u20ac\u201d\"\n    |\n\nE501 Line too long (93 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:295:89\n    |\n293 |                     self._manifest_table.add_row(repo.name, \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", key=repo.name)\n294 |                     continue\n295 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"\u00e2\u20ac\u201d\"\n    |                                                                                         ^^^^^\n296 |                 pypi = record.pypi_name or \"\u00e2\u20ac\u201d\"\n297 |                 self._manifest_table.add_row(\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:306:89\n    |\n304 |                 )\n305 |             if not self._snapshot.repositories:\n306 |                 self._manifest_table.add_row(\"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No repositories detected\")\n    |                                                                                         ^^^^\n307 |             self._update_manifest_detail_panel()\n    |\n\nE501 Line too long (103 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:318:89\n    |\n316 |                 status = status_map.get(spec.key)\n317 |                 state = status.state if status else \"unknown\"\n318 |                 detail = status.message if status else \"Automation data not yet wired for this column.\"\n    |                                                                                         ^^^^^^^^^^^^^^^\n319 |                 self._column_table.add_row(spec.group_label, spec.label, spec.key, state, detail)\n320 |             if not self._snapshot.column_specs:\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:319:89\n    |\n317 |                 state = status.state if status else \"unknown\"\n318 |                 detail = status.message if status else \"Automation data not yet wired for this column.\"\n319 |                 self._column_table.add_row(spec.group_label, spec.label, spec.key, state, detail)\n    |                                                                                         ^^^^^^^^^\n320 |             if not self._snapshot.column_specs:\n321 |                 self._column_table.add_row(\"\u00e2\u20ac\u201d\", \"No columns enabled\", \"\u00e2\u20ac\u201d\", \"unknown\", \"\")\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:321:89\n    |\n319 |                 self._column_table.add_row(spec.group_label, spec.label, spec.key, state, detail)\n320 |             if not self._snapshot.column_specs:\n321 |                 self._column_table.add_row(\"\u00e2\u20ac\u201d\", \"No columns enabled\", \"\u00e2\u20ac\u201d\", \"unknown\", \"\")\n    |                                                                                         ^\n322 |\n323 |         def _populate_card_table(self) -> None:\n    |\n\nE501 Line too long (115 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:332:89\n    |\n330 |                 self._card_table.add_row(card.column, card.title, card.status, joined)\n331 |             if not self._snapshot.cards:\n332 |                 self._card_table.add_row(\"\u00e2\u20ac\u201d\", \"No data\", \"\", \"Run orchestrator to generate make_all_summary.json.\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n333 |\n334 |         def _update_metadata(self) -> None:\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:343:89\n    |\n341 |             for repo in self._snapshot.repositories:\n342 |                 script_count = len(repo.scripts)\n343 |                 descriptor = f\"{repo.name} ({script_count} script{'s' if script_count != 1 else ''})\"\n    |                                                                                         ^^^^^^^^^^^^^\n344 |                 lines.append(f\"  \u00e2\u20ac\u00a2 {descriptor}\")\n345 |             if self._snapshot.column_specs:\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:346:89\n    |\n344 |                 lines.append(f\"  \u00e2\u20ac\u00a2 {descriptor}\")\n345 |             if self._snapshot.column_specs:\n346 |                 lines.append(f\"Status columns enabled: {len(self._snapshot.column_specs)}\")\n    |                                                                                         ^^^\n347 |             self._metadata.update(\"\\n\".join(lines))\n    |\n\nE501 Line too long (96 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:357:89\n    |\n355 |                 if record is None:\n356 |                     continue\n357 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"None\"\n    |                                                                                         ^^^^^^^^\n358 |                 header = f\"{repo.name}: {record.version}\"\n359 |                 author = f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:359:89\n    |\n357 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"None\"\n358 |                 header = f\"{repo.name}: {record.version}\"\n359 |                 author = f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n    |                                                                                         ^^^\n360 |                 pypi = f\"PyPI: {record.pypi_name or 'n/a'}\"\n361 |                 lines.extend([header, f\"  {author}\", f\"  {pypi}\", f\"  Dependencies: {dependencies}\"])\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:361:89\n    |\n359 |                 author = f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n360 |                 pypi = f\"PyPI: {record.pypi_name or 'n/a'}\"\n361 |                 lines.extend([header, f\"  {author}\", f\"  {pypi}\", f\"  Dependencies: {dependencies}\"])\n    |                                                                                         ^^^^^^^^^^^^^\n362 |                 if record.description:\n363 |                     lines.append(f\"  {record.description}\")\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:369:89\n    |\n367 |             if not lines:\n368 |                 lines = [\"Manifest metadata not available for discovered repositories.\"]\n369 |             self._manifest_detail.update(\"\\n\".join(line for line in lines if line is not None))\n    |                                                                                         ^^^^^^^\n370 |\n371 |         def _update_commit_form_metadata(self) -> None:\n    |\n\nE501 Line too long (98 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:380:89\n    |\n378 |             if self._commit_help is not None:\n379 |                 description = field.description if field is not None else None\n380 |                 self._commit_help.update(description or \"Provide a message for the commit sweep.\")\n    |                                                                                         ^^^^^^^^^^\n381 |             if self._commit_input is not None and field is not None:\n382 |                 placeholder = field.description or field.title\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:395:89\n    |\n393 |             min_length = field.schema.get(\"minLength\")\n394 |             if isinstance(min_length, (int, float)) and len(message) < int(min_length):\n395 |                 return (False, f\"{field.title} must be at least {int(min_length)} characters.\")\n    |                                                                                         ^^^^^^^\n396 |             max_length = field.schema.get(\"maxLength\")\n397 |             if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n    |\n\nE501 Line too long (94 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:398:89\n    |\n396 |             max_length = field.schema.get(\"maxLength\")\n397 |             if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n398 |                 return (False, f\"{field.title} must be at most {int(max_length)} characters.\")\n    |                                                                                         ^^^^^^\n399 |             return (True, None)\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\gui\\prototypes\\textual_control_center.py:411:48\n    |\n409 |             self._dry_run_log.write(line)\n410 |\n411 |         def _set_commit_controls_enabled(self, enabled: bool) -> None:\n    |                                                ^^^^^^^\n412 |             if self._commit_button is not None:\n413 |                 self._commit_button.disabled = not enabled\n    |\n\nANN001 Missing type annotation for function argument `results`\n   --> interface\\gui\\prototypes\\textual_control_center.py:417:42\n    |\n415 |                 self._commit_input.disabled = not enabled\n416 |\n417 |         def _update_commit_results(self, results) -> None:\n    |                                          ^^^^^^^\n418 |             if self._commit_results_table is None:\n419 |                 return\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:421:89\n    |\n419 |                 return\n420 |             self._commit_results_table.clear(columns=True)\n421 |             self._commit_results_table.add_columns(\"Repository\", \"git add\", \"git commit\", \"Summary\")\n    |                                                                                         ^^^^^^^^^^^^\n422 |             for result in results:\n423 |                 summary = result.stderr or result.stdout or \"no output\"\n    |\n\nC901 `_handle_commit_request` is too complex (11 > 10)\n   --> interface\\gui\\prototypes\\textual_control_center.py:433:19\n    |\n431 |                 self._commit_results_table.add_row(\"\u00e2\u20ac\u201d\", \"\", \"\", \"No commits recorded\")\n432 |\n433 |         async def _handle_commit_request(self) -> None:\n    |                   ^^^^^^^^^^^^^^^^^^^^^^\n434 |             if self._commit_in_progress:\n435 |                 return\n    |\n\nE501 Line too long (96 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:441:89\n    |\n439 |             is_valid, error_message = self._validate_commit_message(message)\n440 |             if not is_valid:\n441 |                 self._append_log(f\"[commit-all] {error_message or 'Invalid message provided.'}\")\n    |                                                                                         ^^^^^^^^\n442 |                 return\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\gui\\prototypes\\textual_control_center.py:445:47\n    |\n444 |             self._commit_in_progress = True\n445 |             self._set_commit_controls_enabled(False)\n    |                                               ^^^^^\n446 |             if self._log is not None:\n447 |                 self._log.clear()\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:451:89\n    |\n450 |             try:\n451 |                 sweep = await asyncio.to_thread(perform_commit_sweep, self._workspace_root, message)\n    |                                                                                         ^^^^^^^^^^^^\n452 |             except CommitMessageRequiredError:\n453 |                 self._append_log(\"[commit-all] commit message must be non-empty.\")\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\gui\\prototypes\\textual_control_center.py:471:51\n    |\n469 |                 self._append_log(\"[commit-all] sweep complete.\")\n470 |             finally:\n471 |                 self._set_commit_controls_enabled(True)\n    |                                                   ^^^^\n472 |                 self._commit_in_progress = False\n    |\n\nC901 `_handle_dry_run_request` is too complex (17 > 10)\n   --> interface\\gui\\prototypes\\textual_control_center.py:474:19\n    |\n472 |                 self._commit_in_progress = False\n473 |\n474 |         async def _handle_dry_run_request(self) -> None:\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n475 |             if self._dry_run_in_progress:\n476 |                 return\n    |\n\nPLR0912 Too many branches (17 > 12)\n   --> interface\\gui\\prototypes\\textual_control_center.py:474:19\n    |\n472 |                 self._commit_in_progress = False\n473 |\n474 |         async def _handle_dry_run_request(self) -> None:\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n475 |             if self._dry_run_in_progress:\n476 |                 return\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\gui\\prototypes\\textual_control_center.py:540:15\n    |\n539 |       if TextualControlCenter is None:\n540 |           raise RuntimeError(\n    |  _______________^\n541 | |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n542 | |         ) from _TEXTUAL_IMPORT_ERROR\n    | |_________^\n543 |       root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n544 |       TextualControlCenter(root).run()\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\gui\\prototypes\\textual_control_center.py:541:13\n    |\n539 |     if TextualControlCenter is None:\n540 |         raise RuntimeError(\n541 |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n542 |         ) from _TEXTUAL_IMPORT_ERROR\n543 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:541:89\n    |\n539 |     if TextualControlCenter is None:\n540 |         raise RuntimeError(\n541 |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n    |                                                                                         ^^^^^^^^^^^\n542 |         ) from _TEXTUAL_IMPORT_ERROR\n543 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:543:89\n    |\n541 |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n542 |         ) from _TEXTUAL_IMPORT_ERROR\n543 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |                                                                                         ^^^^^^^^^\n544 |     TextualControlCenter(root).run()\n    |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_commit_cli.py:21:45\n   |\n21 | def test_main_runs_commit_when_flag_present(monkeypatch, tmp_path: Path) -> None:\n   |                                             ^^^^^^^^^^^\n22 |     repo_root = tmp_path\n23 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nANN202 Missing return type annotation for private function `fake_commit`\n  --> tests\\test_make_all_commit_cli.py:28:9\n   |\n26 |     repo_path.mkdir()\n27 |\n28 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^\n29 |         commit_calls.append((Path(root), message))\n30 |         return (\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `log`\n  --> tests\\test_make_all_commit_cli.py:28:50\n   |\n26 |     repo_path.mkdir()\n27 |\n28 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n29 |         commit_calls.append((Path(root), message))\n30 |         return (\n   |\n\nARG001 Unused function argument: `log`\n  --> tests\\test_make_all_commit_cli.py:28:50\n   |\n26 |     repo_path.mkdir()\n27 |\n28 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n29 |         commit_calls.append((Path(root), message))\n30 |         return (\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:53:5\n   |\n51 |     make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n52 |\n53 |     assert instances and instances[0].run_called\n   |     ^^^^^^\n54 |     assert commit_calls == [(repo_root.resolve(), \"Lab sweep\")]\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_make_all_commit_cli.py:53:5\n   |\n51 |     make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n52 |\n53 |     assert instances and instances[0].run_called\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n54 |     assert commit_calls == [(repo_root.resolve(), \"Lab sweep\")]\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:54:5\n   |\n53 |     assert instances and instances[0].run_called\n54 |     assert commit_calls == [(repo_root.resolve(), \"Lab sweep\")]\n   |     ^^^^^^\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_commit_cli.py:57:41\n   |\n57 | def test_main_skips_commit_without_flag(monkeypatch, tmp_path: Path) -> None:\n   |                                         ^^^^^^^^^^^\n58 |     repo_root = tmp_path\n59 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nANN202 Missing return type annotation for private function `fake_commit`\n  --> tests\\test_make_all_commit_cli.py:65:9\n   |\n63 |             super().__init__(repo_root)\n64 |\n65 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^\n66 |         commit_calls.append((Path(root), message))\n67 |         return ()\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `log`\n  --> tests\\test_make_all_commit_cli.py:65:50\n   |\n63 |             super().__init__(repo_root)\n64 |\n65 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n66 |         commit_calls.append((Path(root), message))\n67 |         return ()\n   |\n\nARG001 Unused function argument: `log`\n  --> tests\\test_make_all_commit_cli.py:65:50\n   |\n63 |             super().__init__(repo_root)\n64 |\n65 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n66 |         commit_calls.append((Path(root), message))\n67 |         return ()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:74:5\n   |\n72 |     make_all.main([\"--no-gui\"])\n73 |\n74 |     assert not commit_calls\n   |     ^^^^^^\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_commit_cli.py:77:55\n   |\n77 | def test_main_does_not_commit_when_orchestrator_fails(monkeypatch, tmp_path: Path) -> None:\n   |                                                       ^^^^^^^^^^^\n78 |     repo_root = tmp_path\n79 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nE501 Line too long (91 > 88)\n  --> tests\\test_make_all_commit_cli.py:77:89\n   |\n77 | def test_main_does_not_commit_when_orchestrator_fails(monkeypatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^\n78 |     repo_root = tmp_path\n79 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_make_all_commit_cli.py:86:19\n   |\n85 |         def run(self) -> None:\n86 |             raise RuntimeError(\"orchestrator exploded\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_make_all_commit_cli.py:86:32\n   |\n85 |         def run(self) -> None:\n86 |             raise RuntimeError(\"orchestrator exploded\")\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |\nhelp: Assign to variable; remove string literal\n\nANN202 Missing return type annotation for private function `fake_commit`\n  --> tests\\test_make_all_commit_cli.py:88:9\n   |\n86 |             raise RuntimeError(\"orchestrator exploded\")\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^\n89 |         commit_calls.append((Path(root), message))\n90 |         return ()\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `log`\n  --> tests\\test_make_all_commit_cli.py:88:50\n   |\n86 |             raise RuntimeError(\"orchestrator exploded\")\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n89 |         commit_calls.append((Path(root), message))\n90 |         return ()\n   |\n\nARG001 Unused function argument: `log`\n  --> tests\\test_make_all_commit_cli.py:88:50\n   |\n86 |             raise RuntimeError(\"orchestrator exploded\")\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n89 |         commit_calls.append((Path(root), message))\n90 |         return ()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:98:5\n   |\n96 |         make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n97 |\n98 |     assert not commit_calls\n   |     ^^^^^^\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n   --> tests\\test_make_all_commit_cli.py:101:46\n    |\n101 | def test_main_raises_when_commit_sweep_fails(monkeypatch, tmp_path: Path) -> None:\n    |                                              ^^^^^^^^^^^\n102 |     repo_root = tmp_path\n103 |     repo_path = repo_root / \"alpha\"\n    |\n\nANN202 Missing return type annotation for private function `fake_commit`\n   --> tests\\test_make_all_commit_cli.py:110:9\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |         ^^^^^^^^^^^\n111 |         return (\n112 |             CommitResult(\n    |\nhelp: Add return type annotation\n\nARG001 Unused function argument: `root`\n   --> tests\\test_make_all_commit_cli.py:110:21\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                     ^^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nARG001 Unused function argument: `message`\n   --> tests\\test_make_all_commit_cli.py:110:33\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                                 ^^^^^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nANN001 Missing type annotation for function argument `log`\n   --> tests\\test_make_all_commit_cli.py:110:50\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                                                  ^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nARG001 Unused function argument: `log`\n   --> tests\\test_make_all_commit_cli.py:110:50\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                                                  ^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_commit_cli.py:128:5\n    |\n126 |         make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n127 |\n128 |     assert \"Commit sweep encountered one or more failures.\" in str(excinfo.value)\n    |     ^^^^^^\n    |\n\nPLR0915 Too many statements (52 > 50)\n  --> tests\\test_make_all_kanban.py:11:5\n   |\n11 | def test_write_run_summary_emits_kanban_artifacts(tmp_path: Path) -> None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 |     orchestrator = MakeAllOrchestrator()\n13 |     stage_results_obj = cast(\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_pip_updates.py:9:48\n   |\n 9 | def test_run_pip_updates_invokes_json_contract(monkeypatch, tmp_path) -> None:\n   |                                                ^^^^^^^^^^^\n10 |     orchestrator = MakeAllOrchestrator()\n11 |     reports_dir = tmp_path / \"pip_reports\"\n   |\n\nANN001 Missing type annotation for function argument `tmp_path`\n  --> tests\\test_make_all_pip_updates.py:9:61\n   |\n 9 | def test_run_pip_updates_invokes_json_contract(monkeypatch, tmp_path) -> None:\n   |                                                             ^^^^^^^^\n10 |     orchestrator = MakeAllOrchestrator()\n11 |     reports_dir = tmp_path / \"pip_reports\"\n   |\n\nANN202 Missing return type annotation for private function `fake_main_json`\n  --> tests\\test_make_all_pip_updates.py:71:9\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `ctx`\n  --> tests\\test_make_all_pip_updates.py:71:55\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                       ^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nARG001 Unused function argument: `ctx`\n  --> tests\\test_make_all_pip_updates.py:71:55\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                       ^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nANN001 Missing type annotation for function argument `pip_updates_factory`\n  --> tests\\test_make_all_pip_updates.py:71:65\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                                 ^^^^^^^^^^^^^^^^^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nARG001 Unused function argument: `pip_updates_factory`\n  --> tests\\test_make_all_pip_updates.py:71:65\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                                 ^^^^^^^^^^^^^^^^^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nE501 Line too long (90 > 88)\n  --> tests\\test_make_all_pip_updates.py:71:89\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                                                         ^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_pip_updates.py:93:5\n   |\n91 |     )\n92 |\n93 |     assert orchestrator.pip_updates_completed is True\n   |     ^^^^^^\n94 |     assert orchestrator._pip_updates_report is not None\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_pip_updates.py:94:5\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n   |     ^^^^^^\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |\n\nSLF001 Private member accessed: `_pip_updates_report`\n  --> tests\\test_make_all_pip_updates.py:94:12\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_pip_updates.py:95:5\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |     ^^^^^^\n96 |\n97 |     payload = captured[\"payload\"]\n   |\n\nSLF001 Private member accessed: `_pip_updates_report`\n  --> tests\\test_make_all_pip_updates.py:95:12\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n96 |\n97 |     payload = captured[\"payload\"]\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:98:5\n    |\n 97 |     payload = captured[\"payload\"]\n 98 |     assert isinstance(payload, dict)\n    |     ^^^^^^\n 99 |     assert payload[\"command\"] == \"x_make_pip_updates_x\"\n100 |     parameters = payload[\"parameters\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:99:5\n    |\n 97 |     payload = captured[\"payload\"]\n 98 |     assert isinstance(payload, dict)\n 99 |     assert payload[\"command\"] == \"x_make_pip_updates_x\"\n    |     ^^^^^^\n100 |     parameters = payload[\"parameters\"]\n101 |     assert isinstance(parameters, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:101:5\n    |\n 99 |     assert payload[\"command\"] == \"x_make_pip_updates_x\"\n100 |     parameters = payload[\"parameters\"]\n101 |     assert isinstance(parameters, dict)\n    |     ^^^^^^\n102 |     assert parameters[\"packages\"] == [\"pkgA\"]\n103 |     assert parameters[\"published_versions\"][\"pkgA\"] == \"1.0.0\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:102:5\n    |\n100 |     parameters = payload[\"parameters\"]\n101 |     assert isinstance(parameters, dict)\n102 |     assert parameters[\"packages\"] == [\"pkgA\"]\n    |     ^^^^^^\n103 |     assert parameters[\"published_versions\"][\"pkgA\"] == \"1.0.0\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:103:5\n    |\n101 |     assert isinstance(parameters, dict)\n102 |     assert parameters[\"packages\"] == [\"pkgA\"]\n103 |     assert parameters[\"published_versions\"][\"pkgA\"] == \"1.0.0\"\n    |     ^^^^^^\n104 |\n105 |     summary, _ = orchestrator.write_run_summary()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:108:5\n    |\n106 |     artifacts = summary[\"artifacts\"]\n107 |     pip_meta = artifacts[\"pip_updates\"]\n108 |     assert pip_meta[\"status\"] == \"success\"\n    |     ^^^^^^\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:109:5\n    |\n107 |     pip_meta = artifacts[\"pip_updates\"]\n108 |     assert pip_meta[\"status\"] == \"success\"\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n    |     ^^^^^^\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:110:5\n    |\n108 |     assert pip_meta[\"status\"] == \"success\"\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n    |     ^^^^^^\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n112 |     assert pip_meta[\"report_path\"].endswith(\".json\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:111:5\n    |\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n    |     ^^^^^^\n112 |     assert pip_meta[\"report_path\"].endswith(\".json\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:112:5\n    |\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n112 |     assert pip_meta[\"report_path\"].endswith(\".json\")\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:42:1\n   |\n40 |       run_inspection,\n41 |   )\n42 | / from x_make_graphviz_x.x_cls_make_graphviz_x import (\n43 | |     main_json as graphviz_main_json,\n44 | | )\n   | |_^\n45 |   from x_make_markdown_x.x_cls_make_markdown_x import (\n46 |       main_json as markdown_main_json,\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:45:1\n   |\n43 |       main_json as graphviz_main_json,\n44 |   )\n45 | / from x_make_markdown_x.x_cls_make_markdown_x import (\n46 | |     main_json as markdown_main_json,\n47 | | )\n   | |_^\n48 |   from x_make_mermaid_x.x_cls_make_mermaid_x import (\n49 |       main_json as mermaid_main_json,\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:48:1\n   |\n46 |       main_json as markdown_main_json,\n47 |   )\n48 | / from x_make_mermaid_x.x_cls_make_mermaid_x import (\n49 | |     main_json as mermaid_main_json,\n50 | | )\n   | |_^\n51 |   from x_make_pip_updates_x.update_flow import (  # noqa: E402\n52 |       PACKAGE_ROOT as pip_updates_package_root,\n   |\n\nN811 Constant `PACKAGE_ROOT` imported as non-constant `pip_updates_package_root`\n  --> x_cls_make_all_x.py:52:5\n   |\n50 | )\n51 | from x_make_pip_updates_x.update_flow import (  # noqa: E402\n52 |     PACKAGE_ROOT as pip_updates_package_root,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n53 | )\n54 | from x_make_pip_updates_x.update_flow import (\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:54:1\n   |\n52 |       PACKAGE_ROOT as pip_updates_package_root,\n53 |   )\n54 | / from x_make_pip_updates_x.update_flow import (\n55 | |     PipUpdatesFactory,\n56 | | )\n   | |_^\n57 |   from x_make_pip_updates_x.update_flow import (\n58 |       main_json as pip_updates_main_json,\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:57:1\n   |\n55 |       PipUpdatesFactory,\n56 |   )\n57 | / from x_make_pip_updates_x.update_flow import (\n58 | |     main_json as pip_updates_main_json,\n59 | | )\n   | |_^\n60 |   from x_make_pypi_x.publish_flow import (  # noqa: E402\n61 |       publish_manifest_entries,\n   |\n\nF821 Undefined name `_SupportsMetadata`\n   --> x_cls_make_all_x.py:821:42\n    |\n819 |         if export_result is None:\n820 |             return None\n821 |         if not isinstance(export_result, _SupportsMetadata):\n    |                                          ^^^^^^^^^^^^^^^^^\n822 |             return None\n823 |         metadata_obj = export_result.to_metadata()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:945:19\n    |\n943 |         if status != \"success\":\n944 |             message = str(result.get(\"message\", \"markdown generation failed\"))\n945 |             raise RuntimeError(f\"x_make_markdown_x returned {status}: {message}\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n946 |\n947 |         markdown_obj = result.get(\"markdown\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:945:32\n    |\n943 |         if status != \"success\":\n944 |             message = str(result.get(\"message\", \"markdown generation failed\"))\n945 |             raise RuntimeError(f\"x_make_markdown_x returned {status}: {message}\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n946 |\n947 |         markdown_obj = result.get(\"markdown\")\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> x_cls_make_all_x.py:949:13\n    |\n947 |         markdown_obj = result.get(\"markdown\")\n948 |         if not isinstance(markdown_obj, Mapping):\n949 |             raise RuntimeError(\"x_make_markdown_x response missing markdown artifact\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n950 |\n951 |         artifact: dict[str, object] = dict(markdown_obj)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:949:19\n    |\n947 |         markdown_obj = result.get(\"markdown\")\n948 |         if not isinstance(markdown_obj, Mapping):\n949 |             raise RuntimeError(\"x_make_markdown_x response missing markdown artifact\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n950 |\n951 |         artifact: dict[str, object] = dict(markdown_obj)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:949:32\n    |\n947 |         markdown_obj = result.get(\"markdown\")\n948 |         if not isinstance(markdown_obj, Mapping):\n949 |             raise RuntimeError(\"x_make_markdown_x response missing markdown artifact\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n950 |\n951 |         artifact: dict[str, object] = dict(markdown_obj)\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1004:19\n     |\n1002 |         if status != \"success\":\n1003 |             message = str(result.get(\"message\", \"graphviz generation failed\"))\n1004 |             raise RuntimeError(f\"x_make_graphviz_x returned {status}: {message}\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1005 |\n1006 |         dot_source = result.get(\"dot_source\")\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1004:32\n     |\n1002 |         if status != \"success\":\n1003 |             message = str(result.get(\"message\", \"graphviz generation failed\"))\n1004 |             raise RuntimeError(f\"x_make_graphviz_x returned {status}: {message}\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1005 |\n1006 |         dot_source = result.get(\"dot_source\")\n     |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n    --> x_cls_make_all_x.py:1008:13\n     |\n1006 |         dot_source = result.get(\"dot_source\")\n1007 |         if not isinstance(dot_source, str):\n1008 |             raise RuntimeError(\"x_make_graphviz_x response missing dot_source\")\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1009 |\n1010 |         payload_result: dict[str, object] = {\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1008:19\n     |\n1006 |         dot_source = result.get(\"dot_source\")\n1007 |         if not isinstance(dot_source, str):\n1008 |             raise RuntimeError(\"x_make_graphviz_x response missing dot_source\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1009 |\n1010 |         payload_result: dict[str, object] = {\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_make_all_x.py:1008:32\n     |\n1006 |         dot_source = result.get(\"dot_source\")\n1007 |         if not isinstance(dot_source, str):\n1008 |             raise RuntimeError(\"x_make_graphviz_x response missing dot_source\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1009 |\n1010 |         payload_result: dict[str, object] = {\n     |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1087:19\n     |\n1085 |         if status != \"success\":\n1086 |             message = str(result.get(\"message\", \"mermaid generation failed\"))\n1087 |             raise RuntimeError(f\"x_make_mermaid_x returned {status}: {message}\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1088 |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1087:32\n     |\n1085 |         if status != \"success\":\n1086 |             message = str(result.get(\"message\", \"mermaid generation failed\"))\n1087 |             raise RuntimeError(f\"x_make_mermaid_x returned {status}: {message}\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1088 |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n     |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n    --> x_cls_make_all_x.py:1091:13\n     |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n1090 |         if not isinstance(mermaid_obj, Mapping):\n1091 |             raise RuntimeError(\"x_make_mermaid_x response missing mermaid artifact\")\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1092 |\n1093 |         artifact: dict[str, object] = dict(mermaid_obj)\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1091:19\n     |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n1090 |         if not isinstance(mermaid_obj, Mapping):\n1091 |             raise RuntimeError(\"x_make_mermaid_x response missing mermaid artifact\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1092 |\n1093 |         artifact: dict[str, object] = dict(mermaid_obj)\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_make_all_x.py:1091:32\n     |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n1090 |         if not isinstance(mermaid_obj, Mapping):\n1091 |             raise RuntimeError(\"x_make_mermaid_x response missing mermaid artifact\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1092 |\n1093 |         artifact: dict[str, object] = dict(mermaid_obj)\n     |\nhelp: Assign to variable; remove string literal\n\nF821 Undefined name `_HasRunReportPath`\n    --> x_cls_make_all_x.py:1537:32\n     |\n1535 |             }\n1536 |             report_candidate: object | None = None\n1537 |             if isinstance(exc, _HasRunReportPath):\n     |                                ^^^^^^^^^^^^^^^^^\n1538 |                 report_candidate = exc.run_report_path\n1539 |             if report_candidate is not None:\n     |\n\nC416 Unnecessary set comprehension (rewrite using `set()`)\n    --> x_cls_make_all_x.py:1663:16\n     |\n1661 |             return set()\n1662 |         pattern = \"x_make_pip_updates_x_run_*.json\"\n1663 |         return {path for path in reports_dir.glob(pattern)}\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1664 |\n1665 |     def _discover_new_pip_updates_report(\n     |\nhelp: Rewrite using `set()`\n\nC901 `run_pip_updates` is too complex (21 > 10)\n    --> x_cls_make_all_x.py:1686:9\n     |\n1685 |     # Step 5b: run pip updates (delegated to x_make_pip_updates_x)\n1686 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1687 |         self,\n1688 |         cloner: object,\n     |\n\nPLR0912 Too many branches (21 > 12)\n    --> x_cls_make_all_x.py:1686:9\n     |\n1685 |     # Step 5b: run pip updates (delegated to x_make_pip_updates_x)\n1686 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1687 |         self,\n1688 |         cloner: object,\n     |\n\nPLR0915 Too many statements (96 > 50)\n    --> x_cls_make_all_x.py:1686:9\n     |\n1685 |     # Step 5b: run pip updates (delegated to x_make_pip_updates_x)\n1686 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1687 |         self,\n1688 |         cloner: object,\n     |\n\nTRY004 Prefer `TypeError` exception for invalid type\n    --> x_cls_make_all_x.py:1769:13\n     |\n1767 |                 metadata=metadata,\n1768 |             )\n1769 |             raise RuntimeError(\"pip-updates JSON payload invalid\")\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1770 |\n1771 |         response_payload = dict(response_obj)\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1769:19\n     |\n1767 |                 metadata=metadata,\n1768 |             )\n1769 |             raise RuntimeError(\"pip-updates JSON payload invalid\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1770 |\n1771 |         response_payload = dict(response_obj)\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_make_all_x.py:1769:32\n     |\n1767 |                 metadata=metadata,\n1768 |             )\n1769 |             raise RuntimeError(\"pip-updates JSON payload invalid\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1770 |\n1771 |         response_payload = dict(response_obj)\n     |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (90 > 88)\n    --> x_cls_make_all_x.py:1841:89\n     |\n1839 |             metadata[\"report_path\"] = str(self._pip_updates_report)\n1840 |\n1841 |         package_count = len(normalized_packages) if normalized_packages else len(packages)\n     |                                                                                         ^^\n1842 |\n1843 |         stage_status = \"completed\"\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_make_all_x.py:1901:89\n     |\n1899 |             \"pip_updates\",\n1900 |             title=\"Pip Package Updates\",\n1901 |             status=stage_status if stage_status in {\"completed\", \"attention\"} else \"attention\",\n     |                                                                                         ^^^^^^^\n1902 |             messages=stage_messages,\n1903 |             metadata=metadata,\n     |\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:1932:89\n     |\n1930 |         metavar=\"MESSAGE\",\n1931 |         help=(\n1932 |             \"Stage and commit every repository with MESSAGE once the orchestrator run completes.\"\n     |                                                                                         ^^^^^^^^^\n1933 |         ),\n1934 |     )\n     |\n\nF821 Undefined name `_LaunchGuiModule`\n    --> x_cls_make_all_x.py:1976:45\n     |\n1974 |         return None\n1975 |\n1976 |     if not isinstance(gui_module_candidate, _LaunchGuiModule):\n     |                                             ^^^^^^^^^^^^^^^^\n1977 |         _log_gui_unavailable(summary_path, \"launch_gui missing\")\n1978 |         return None\n     |\n\nF821 Undefined name `_LaunchGuiModule`\n    --> x_cls_make_all_x.py:1980:27\n     |\n1978 |         return None\n1979 |\n1980 |     launch_module = cast(\"_LaunchGuiModule\", gui_module_candidate)\n     |                           ^^^^^^^^^^^^^^^^\n1981 |     return launch_module.launch_gui\n     |\n\nC901 `main` is too complex (13 > 10)\n    --> x_cls_make_all_x.py:2045:5\n     |\n2044 | # Keep main using the class-based orchestrator\n2045 | def main(argv: Sequence[str] | None = None) -> None:\n     |     ^^^^\n2046 |     args = _parse_cli_args(argv or sys.argv[1:])\n2047 |     orchestrator = MakeAllOrchestrator()\n     |\n\nPLR0912 Too many branches (13 > 12)\n    --> x_cls_make_all_x.py:2045:5\n     |\n2044 | # Keep main using the class-based orchestrator\n2045 | def main(argv: Sequence[str] | None = None) -> None:\n     |     ^^^^\n2046 |     args = _parse_cli_args(argv or sys.argv[1:])\n2047 |     orchestrator = MakeAllOrchestrator()\n     |\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:2086:89\n     |\n2084 |                 if failed_results:\n2085 |                     for failure in failed_results:\n2086 |                         summary = failure.stderr or failure.stdout or \"no commit output captured\"\n     |                                                                                         ^^^^^^^^^\n2087 |                         _error(f\"Commit sweep failed for {failure.name}:\", summary)\n2088 |                     commit_error = RuntimeError(\n     |\n\nFound 217 errors.\nNo fixes available (27 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:48:10.134012+00:00\nduration: 0.391s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> interface\\gui\\commit.py:7:29\n  |\n5 | import json\n6 | import subprocess\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> interface\\gui\\commit.py:7:29\n  |\n5 | import json\n6 | import subprocess\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 2\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:47:56.349373+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 0.7080507000064244,
                "ended_at": "2025-10-18T23:47:56.349373+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "660c6e75ed5113f10ab8d70d3f09734e217d064b41941093f2f29091abcd5d6e",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-18T23:47:55.641332+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> interface\\gui\\commit.py:7:29\n  |\n5 | import json\n6 | import subprocess\n7 | from collections.abc import Callable, Iterable\n  |                             ^^^^^^^^\n8 | from dataclasses import dataclass\n9 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\gui\\commit.py:7:39\n  |\n5 | import json\n6 | import subprocess\n7 | from collections.abc import Callable, Iterable\n  |                                       ^^^^^^^^\n8 | from dataclasses import dataclass\n9 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> interface\\gui\\commit.py:10:21\n   |\n 8 | from dataclasses import dataclass\n 9 | from datetime import UTC, datetime\n10 | from pathlib import Path\n   |                     ^^^^\n11 | from typing import Protocol\n   |\nhelp: Move into type-checking block\n\nRET504 Unnecessary assignment to `fallback` before `return` statement\n   --> interface\\gui\\commit.py:146:12\n    |\n144 |         return candidate\n145 |     fallback = root / \"reports\"\n146 |     return fallback\n    |            ^^^^^^^^\n    |\nhelp: Remove unnecessary assignment\n\nE501 Line too long (97 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:40:89\n   |\n38 |         \"name\": \"commit_sweep\",\n39 |         \"title\": \"Commit Sweep\",\n40 |         \"description\": \"Stage and commit changes across all repositories with a single message.\",\n   |                                                                                         ^^^^^^^^^\n41 |         \"type\": \"object\",\n42 |         \"properties\": {\n   |\n\nE501 Line too long (95 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:46:89\n   |\n44 |                 \"title\": \"Commit message\",\n45 |                 \"type\": \"string\",\n46 |                 \"description\": \"A concise summary recorded for every repository in the sweep.\",\n   |                                                                                         ^^^^^^^\n47 |                 \"minLength\": 5,\n48 |                 \"maxLength\": 120,\n   |\n\nE501 Line too long (103 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:61:89\n   |\n59 |         \"name\": \"orchestrator_dry_run\",\n60 |         \"title\": \"Orchestrator Dry-Run\",\n61 |         \"description\": \"Preview orchestrator actions for a given stage without mutating repositories.\",\n   |                                                                                         ^^^^^^^^^^^^^^^\n62 |         \"type\": \"object\",\n63 |         \"properties\": {\n   |\n\nE501 Line too long (89 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:80:89\n   |\n78 |                 \"type\": \"boolean\",\n79 |                 \"default\": True,\n80 |                 \"description\": \"Generate JSON reports alongside the dry-run for review.\",\n   |                                                                                         ^\n81 |             },\n82 |             \"max_workers\": {\n   |\n\nE501 Line too long (94 > 88)\n  --> interface\\gui\\prototypes\\form_schemas.py:88:89\n   |\n86 |                 \"maximum\": 8,\n87 |                 \"default\": 2,\n88 |                 \"description\": \"Parallel workers to provision for the dry-run orchestration.\",\n   |                                                                                         ^^^^^^\n89 |             },\n90 |         },\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\gui\\prototypes\\form_schemas.py:169:15\n    |\n167 |     payload = _SCHEMA_REGISTRY.get(name)\n168 |     if payload is None:\n169 |         raise KeyError(f\"Unknown schema '{name}'\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n170 |     schema = MappingProxyType(dict(payload))\n171 |     title = _coerce_str(schema.get(\"title\"), name)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\gui\\prototypes\\form_schemas.py:169:24\n    |\n167 |     payload = _SCHEMA_REGISTRY.get(name)\n168 |     if payload is None:\n169 |         raise KeyError(f\"Unknown schema '{name}'\")\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n170 |     schema = MappingProxyType(dict(payload))\n171 |     title = _coerce_str(schema.get(\"title\"), name)\n    |\nhelp: Assign to variable; remove f-string literal\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n   --> interface\\gui\\prototypes\\form_schemas.py:192:45\n    |\n190 |     \"\"\"Return all registered form schemas.\"\"\"\n191 |\n192 |     return tuple(load_form_schema(name) for name in _SCHEMA_REGISTRY.keys())\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Remove `.keys()`\n\nE501 Line too long (93 > 88)\n  --> interface\\gui\\prototypes\\nicegui_control_center.py:54:89\n   |\n52 |     for repo in snapshot.repositories:\n53 |         script_count = len(repo.scripts)\n54 |         descriptor = f\"{repo.name} ({script_count} script{'s' if script_count != 1 else ''})\"\n   |                                                                                         ^^^^^\n55 |         lines.append(f\"- {descriptor}\")\n56 |     return \"\\n\".join(lines)\n   |\n\nE501 Line too long (94 > 88)\n  --> interface\\gui\\prototypes\\nicegui_control_center.py:96:89\n   |\n94 |         )\n95 |     if not rows:\n96 |         rows.append({\"id\": \"empty\", \"repository\": \"\u00e2\u20ac\u201d\", \"scripts\": \"No repositories detected\"})\n   |                                                                                         ^^^^^^\n97 |     return rows\n   |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:183:89\n    |\n181 |     for index, schema in enumerate(schemas):\n182 |         for field in schema.fields:\n183 |             enum_values = field.schema.get(\"enum\") if isinstance(field.schema, Mapping) else None\n    |                                                                                         ^^^^^^^^^\n184 |             field_type = field.field_type\n185 |             if isinstance(enum_values, list) and enum_values:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:187:54\n    |\n185 |             if isinstance(enum_values, list) and enum_values:\n186 |                 joined = \", \".join(str(item) for item in enum_values[:4])\n187 |                 suffix = \"...\" if len(enum_values) > 4 else \"\"\n    |                                                      ^\n188 |                 field_type = f\"{field_type} ({joined}{suffix})\"\n189 |             rows.append(\n    |\n\nC901 `run` is too complex (39 > 10)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:241:5\n    |\n241 | def run(workspace_root: str | Path | None = None, *, host: str = \"127.0.0.1\", port: int = 8080) -> None:\n    |     ^^^\n242 |     \"\"\"Launch the NiceGUI prototype.\"\"\"\n    |\n\nPLR0915 Too many statements (169 > 50)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:241:5\n    |\n241 | def run(workspace_root: str | Path | None = None, *, host: str = \"127.0.0.1\", port: int = 8080) -> None:\n    |     ^^^\n242 |     \"\"\"Launch the NiceGUI prototype.\"\"\"\n    |\n\nE501 Line too long (104 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:241:89\n    |\n241 | def run(workspace_root: str | Path | None = None, *, host: str = \"127.0.0.1\", port: int = 8080) -> None:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n242 |     \"\"\"Launch the NiceGUI prototype.\"\"\"\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:245:15\n    |\n244 |       if ui is None:\n245 |           raise RuntimeError(\n    |  _______________^\n246 | |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n247 | |         ) from _NICEGUI_IMPORT_ERROR\n    | |_________^\n248 |       assert ui is not None  # help type checkers understand ui is available\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:246:13\n    |\n244 |     if ui is None:\n245 |         raise RuntimeError(\n246 |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n247 |         ) from _NICEGUI_IMPORT_ERROR\n248 |     assert ui is not None  # help type checkers understand ui is available\n    |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:246:89\n    |\n244 |     if ui is None:\n245 |         raise RuntimeError(\n246 |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n    |                                                                                         ^^^^^^^^^^^\n247 |         ) from _NICEGUI_IMPORT_ERROR\n248 |     assert ui is not None  # help type checkers understand ui is available\n    |\n\nS101 Use of `assert` detected\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:248:5\n    |\n246 |             \"NiceGUI is not installed. Install it with 'pip install nicegui' to run the prototype.\"\n247 |         ) from _NICEGUI_IMPORT_ERROR\n248 |     assert ui is not None  # help type checkers understand ui is available\n    |     ^^^^^^\n249 |\n250 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:250:89\n    |\n248 |     assert ui is not None  # help type checkers understand ui is available\n249 |\n250 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |                                                                                         ^^^^^^^^^\n251 |     snapshot = load_workspace_snapshot(root)\n252 |     form_catalog = list_form_schemas()\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:254:89\n    |\n252 |     form_catalog = list_form_schemas()\n253 |     commit_schema: FormSchema = load_form_schema(\"commit_sweep\")\n254 |     commit_field: FieldDefinition | None = commit_schema.fields[0] if commit_schema.fields else None\n    |                                                                                         ^^^^^^^^^^^^\n255 |     orchestrator_schema: FormSchema = load_form_schema(\"orchestrator_dry_run\")\n256 |     orchestrator_fields = {field.name: field for field in orchestrator_schema.fields}\n    |\n\nE501 Line too long (115 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:261:89\n    |\n259 |     workers_field = orchestrator_fields.get(\"max_workers\")\n260 |\n261 |     header = ui.markdown(f\"## x_runner_x Control Center (NiceGUI)\\n\\n{_format_repository_summary(snapshot, root)}\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n262 |\n263 |     repo_columns = [\n    |\n\nE501 Line too long (112 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:267:89\n    |\n265 |         {\"name\": \"scripts\", \"label\": \"Scripts\", \"field\": \"scripts\"},\n266 |     ]\n267 |     repo_table = ui.table(columns=repo_columns, rows=_repository_rows(snapshot), row_key=\"id\").classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n268 |\n269 |     manifest_columns = [\n    |\n\nF841 Local variable `schema_table` is assigned to but never used\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:305:5\n    |\n303 |         {\"name\": \"description\", \"label\": \"Description\", \"field\": \"description\"},\n304 |     ]\n305 |     schema_table = ui.table(\n    |     ^^^^^^^^^^^^\n306 |         columns=schema_columns,\n307 |         rows=_schema_rows(form_catalog),\n    |\nhelp: Remove assignment to unused variable `schema_table`\n\nE501 Line too long (112 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:317:89\n    |\n315 |         {\"name\": \"messages\", \"label\": \"Messages\", \"field\": \"messages\"},\n316 |     ]\n317 |     kanban_table = ui.table(columns=kanban_columns, rows=_kanban_rows(snapshot), row_key=\"id\").classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n318 |\n319 |     ui.separator()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:325:89\n    |\n323 |     if commit_field is not None and commit_field.description:\n324 |         commit_placeholder = commit_field.description\n325 |     commit_input = ui.input(label=commit_label, placeholder=commit_placeholder).classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^\n326 |     if commit_field is not None and commit_field.default is not None:\n327 |         commit_input.value = str(commit_field.default)\n    |\n\nE501 Line too long (106 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:339:89\n    |\n337 |         {\"name\": \"summary\", \"label\": \"Summary\", \"field\": \"summary\"},\n338 |     ]\n339 |     commit_table = ui.table(columns=commit_columns, rows=_commit_rows(()), row_key=\"id\").classes(\"w-full\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^\n340 |\n341 |     ui.separator()\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:359:89\n    |\n357 |         dry_run_stage_select.value = stage_options[0]\n358 |\n359 |     include_label = include_field.title if include_field is not None else \"Include reports\"\n    |                                                                                         ^^^\n360 |     include_default = bool(include_field.default) if include_field is not None else True\n361 |     dry_run_include_checkbox = ui.checkbox(include_label, value=include_default)\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:390:89\n    |\n388 |         min_length = field.schema.get(\"minLength\")\n389 |         if isinstance(min_length, (int, float)) and len(message) < int(min_length):\n390 |             return (False, f\"{field.title} must be at least {int(min_length)} characters.\")\n    |                                                                                         ^^^\n391 |         max_length = field.schema.get(\"maxLength\")\n392 |         if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:393:89\n    |\n391 |         max_length = field.schema.get(\"maxLength\")\n392 |         if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n393 |             return (False, f\"{field.title} must be at most {int(max_length)} characters.\")\n    |                                                                                         ^^\n394 |         return (True, None)\n    |\n\nE501 Line too long (107 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:418:89\n    |\n416 |                     ui.label(f\"Author: {manifest_record.author or 'unknown'}\")\n417 |                     dependencies = (\n418 |                         \", \".join(manifest_record.dependencies) if manifest_record.dependencies else \"None\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^\n419 |                     )\n420 |                     ui.label(f\"Dependencies: {dependencies}\")\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:430:89\n    |\n428 |         snapshot = load_workspace_snapshot(root)\n429 |         header.set_content(\n430 |             f\"## x_runner_x Control Center (NiceGUI)\\n\\n{_format_repository_summary(snapshot, root)}\"\n    |                                                                                         ^^^^^^^^^^^^^\n431 |         )\n432 |         repo_table.rows = _repository_rows(snapshot)\n    |\n\nE501 Line too long (94 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:447:89\n    |\n445 |         is_valid, validation_error = _validate_commit_message(message)\n446 |         if not is_valid:\n447 |             commit_log.push(f\"[commit-all] {validation_error or 'Invalid message provided.'}\")\n    |                                                                                         ^^^^^^\n448 |             return\n449 |         commit_button.disable()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\nicegui_control_center.py:480:89\n    |\n478 |         workers_raw = dry_run_workers_input.value\n479 |         try:\n480 |             workers_value = int(workers_raw) if workers_raw is not None else int(workers_default)\n    |                                                                                         ^^^^^^^^^\n481 |         except (TypeError, ValueError):\n482 |             workers_value = int(workers_default)\n    |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:15:1\n   |\n13 |   from x_0_make_all_x.manifest import ManifestLoadError, load_manifest\n14 |\n15 | / from ..commit import (\n16 | |     CommitMessageRequiredError,\n17 | |     CommitResult,\n18 | |     commit_all_repositories,\n19 | |     write_commit_sweep_summary,\n20 | | )\n   | |_^\n21 |   from ..tree import RepositoryNode, build_repository_tree\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:21:1\n   |\n19 |     write_commit_sweep_summary,\n20 | )\n21 | from ..tree import RepositoryNode, build_repository_tree\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n22 |\n23 | _JSON_NAME = \"make_all_summary.json\"\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\gui\\prototypes\\shared.py:21:1\n   |\n19 |     write_commit_sweep_summary,\n20 | )\n21 | from ..tree import RepositoryNode, build_repository_tree\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n22 |\n23 | _JSON_NAME = \"make_all_summary.json\"\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nE501 Line too long (89 > 88)\n  --> interface\\gui\\prototypes\\shared.py:42:89\n   |\n40 |         \"observability_readiness\": \"Awaiting observability checks automation.\",\n41 |         \"stakeholder_sign_off\": \"Awaiting sign-off registry integration.\",\n42 |         \"post_deployment_feedback_loop\": \"Awaiting production feedback intake pipeline.\",\n   |                                                                                         ^\n43 |     }\n44 | )\n   |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\shared.py:169:89\n    |\n167 |             repos = \", \".join(self.failures)\n168 |             return f\"Commit sweep failed for {repos} ({timestamp}).\"\n169 |         return f\"Commit sweep completed for {self.total} repository(ies) at {timestamp}.\"\n    |                                                                                         ^\n    |\n\nC901 `_collect_visitor_failures` is too complex (24 > 10)\n   --> interface\\gui\\prototypes\\shared.py:385:5\n    |\n385 | def _collect_visitor_failures(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n386 |     report_path: str | None,\n387 |     previews: Sequence[str],\n    |\n\nPLR0912 Too many branches (25 > 12)\n   --> interface\\gui\\prototypes\\shared.py:385:5\n    |\n385 | def _collect_visitor_failures(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n386 |     report_path: str | None,\n387 |     previews: Sequence[str],\n    |\n\nPLR0915 Too many statements (65 > 50)\n   --> interface\\gui\\prototypes\\shared.py:385:5\n    |\n385 | def _collect_visitor_failures(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n386 |     report_path: str | None,\n387 |     previews: Sequence[str],\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\gui\\prototypes\\shared.py:404:89\n    |\n402 |                         continue\n403 |                     detail_value = entry.get(\"detail\")\n404 |                     detail_obj = detail_value if isinstance(detail_value, Mapping) else None\n    |                                                                                         ^^^^\n405 |                     tool_value = entry.get(\"tool\")\n406 |                     if tool_value is None and detail_obj is not None:\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\shared.py:478:89\n    |\n476 |     if not findings:\n477 |         return MappingProxyType({})\n478 |     return MappingProxyType({tool: tuple(entries) for tool, entries in findings.items()})\n    |                                                                                         ^\n    |\n\nC901 `_load_commit_sweep_summary` is too complex (13 > 10)\n   --> interface\\gui\\prototypes\\shared.py:505:5\n    |\n505 | def _load_commit_sweep_summary(report_path: Path) -> CommitSweepSummary | None:\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n506 |     if not report_path.exists():\n507 |         return None\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> interface\\gui\\prototypes\\shared.py:531:21\n    |\n529 |             for entry in failed_list:\n530 |                 if isinstance(entry, str) and entry.strip():\n531 |                     failures.append(entry.strip())\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n532 |     logs_obj = payload.get(\"logs\")\n533 |     logs: tuple[str, ...] = ()\n    |\nhelp: Replace for loop with list.extend\n\nE501 Line too long (105 > 88)\n   --> interface\\gui\\prototypes\\shared.py:552:89\n    |\n550 | def _build_lifecycle_context(payload: Mapping[str, Any]) -> _LifecycleContext:\n551 |     artifacts_obj = payload.get(\"artifacts\")\n552 |     artifacts = cast(\"Mapping[str, object]\", artifacts_obj) if isinstance(artifacts_obj, Mapping) else {}\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n553 |\n554 |     pypi_status_obj = artifacts.get(\"pypi_release_status\") if artifacts else None\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\shared.py:568:89\n    |\n567 |     pip_completed_obj = artifacts.get(\"pip_updates_completed\") if artifacts else None\n568 |     pip_updates_completed = bool(pip_completed_obj) if isinstance(pip_completed_obj, bool) else False\n    |                                                                                         ^^^^^^^^^^^^^\n569 |\n570 |     stages = _extract_stage_statuses(payload)\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\shared.py:574:89\n    |\n573 |     generated_at_obj = payload.get(\"generated_at\")\n574 |     generated_at = generated_at_obj.strip() if isinstance(generated_at_obj, str) else None\n    |                                                                                         ^^\n575 |\n576 |     visitor_report_obj = artifacts.get(\"visitor_report_path\") if artifacts else None\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\shared.py:580:89\n    |\n578 |     if isinstance(visitor_report_obj, str) and visitor_report_obj.strip():\n579 |         visitor_report_path = visitor_report_obj.strip()\n580 |     visitor_failures = _collect_visitor_failures(visitor_report_path, inspection_previews)\n    |                                                                                         ^^\n581 |\n582 |     visitor_error_obj = artifacts.get(\"visitor_error\") if artifacts else None\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\gui\\prototypes\\shared.py:583:89\n    |\n582 |     visitor_error_obj = artifacts.get(\"visitor_error\") if artifacts else None\n583 |     visitor_summary = visitor_error_obj.strip() if isinstance(visitor_error_obj, str) else None\n    |                                                                                         ^^^^^^^\n584 |     if visitor_summary is None:\n585 |         inspection_stage = stages.get(\"inspection\")\n    |\n\nC901 `_summarize_publish_status` is too complex (11 > 10)\n   --> interface\\gui\\prototypes\\shared.py:621:5\n    |\n621 | def _summarize_publish_status(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n622 |     repositories: Iterable[RepositoryNode],\n623 |     manifest: Mapping[str, ManifestRecord],\n    |\n\nC901 `_summarize_column_statuses` is too complex (23 > 10)\n   --> interface\\gui\\prototypes\\shared.py:691:5\n    |\n691 | def _summarize_column_statuses(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n692 |     column_specs: Iterable[ColumnSpec],\n693 |     context: _LifecycleContext,\n    |\n\nPLR0912 Too many branches (30 > 12)\n   --> interface\\gui\\prototypes\\shared.py:691:5\n    |\n691 | def _summarize_column_statuses(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n692 |     column_specs: Iterable[ColumnSpec],\n693 |     context: _LifecycleContext,\n    |\n\nPLR0915 Too many statements (84 > 50)\n   --> interface\\gui\\prototypes\\shared.py:691:5\n    |\n691 | def _summarize_column_statuses(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n692 |     column_specs: Iterable[ColumnSpec],\n693 |     context: _LifecycleContext,\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\shared.py:769:89\n    |\n767 |                 elif stage_state == \"failed\":\n768 |                     state = \"unknown\"\n769 |                     message = context.visitor_summary or \"Visitor QA reported issues in other tools.\"\n    |                                                                                         ^^^^^^^^^^^^^\n770 |                 else:\n771 |                     state = stage_state\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\shared.py:772:89\n    |\n770 |                 else:\n771 |                     state = stage_state\n772 |                     message = context.visitor_summary or stage_message or \"Awaiting visitor QA data.\"\n    |                                                                                         ^^^^^^^^^^^^^\n773 |         elif key in _COLUMN_STAGE_MAPPING:\n774 |             stage_id = _COLUMN_STAGE_MAPPING[key]\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\shared.py:777:89\n    |\n775 |             stage = context.stages.get(stage_id)\n776 |             state, message = _stage_state_message(stage)\n777 |             if key == \"release_assembly\" and commit_summary is not None and commit_summary.total:\n    |                                                                                         ^^^^^^^^^\n778 |                 commit_state = commit_summary.state()\n779 |                 commit_message = commit_summary.message()\n    |\n\nE501 Line too long (106 > 88)\n   --> interface\\gui\\prototypes\\shared.py:780:89\n    |\n778 |                 commit_state = commit_summary.state()\n779 |                 commit_message = commit_summary.message()\n780 |                 link_suffix = f\" (see {commit_summary.report_path})\" if commit_summary.report_path else \"\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^\n781 |                 if commit_state == \"failed\" or state not in {\"failed\", \"passed\"}:\n782 |                     state = commit_state\n    |\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\shared.py:785:89\n    |\n783 |                 message = commit_message + link_suffix\n784 |         elif key == \"publish_to_pypi\":\n785 |             state, message = _summarize_publish_status(repositories, manifest, context.pypi_status)\n    |                                                                                         ^^^^^^^^^^^\n786 |         elif key == \"pip_package_propagation\":\n787 |             state, message = _summarize_pip_status(repositories, manifest, context)\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\shared.py:794:89\n    |\n792 |             message = \"Automation data not yet wired for this column.\"\n793 |\n794 |         statuses.append(ColumnStatus(key=key, label=label, state=state, message=message))\n    |                                                                                         ^\n795 |\n796 |     return tuple(statuses)\n    |\n\nE501 Line too long (90 > 88)\n   --> interface\\gui\\prototypes\\shared.py:830:89\n    |\n828 |             messages: tuple[str, ...] = ()\n829 |             if isinstance(raw_msgs, list):\n830 |                 messages = tuple(str(msg).strip() for msg in raw_msgs if str(msg).strip())\n    |                                                                                         ^^\n831 |             if not title:\n832 |                 continue\n    |\n\nC901 `_load_column_specs` is too complex (13 > 10)\n   --> interface\\gui\\prototypes\\shared.py:870:5\n    |\n870 | def _load_column_specs(path: Path = _COLUMN_CONFIG_PATH) -> tuple[ColumnSpec, ...]:\n    |     ^^^^^^^^^^^^^^^^^^\n871 |     payload = _read_json_mapping(path)\n872 |     specs: list[ColumnSpec] = []\n    |\n\nC901 `perform_orchestrator_dry_run` is too complex (14 > 10)\n    --> interface\\gui\\prototypes\\shared.py:1048:5\n     |\n1048 | def perform_orchestrator_dry_run(\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1049 |     workspace_root: Path,\n1050 |     *,\n     |\n\nPLR0912 Too many branches (16 > 12)\n    --> interface\\gui\\prototypes\\shared.py:1048:5\n     |\n1048 | def perform_orchestrator_dry_run(\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1049 |     workspace_root: Path,\n1050 |     *,\n     |\n\nPLR0915 Too many statements (51 > 50)\n    --> interface\\gui\\prototypes\\shared.py:1048:5\n     |\n1048 | def perform_orchestrator_dry_run(\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1049 |     workspace_root: Path,\n1050 |     *,\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> interface\\gui\\prototypes\\shared.py:1060:15\n     |\n1058 |     if normalized_stage not in _VALID_DRY_RUN_STAGES:\n1059 |         allowed = \", \".join(_VALID_DRY_RUN_STAGES)\n1060 |         raise ValueError(f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\")\n     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1061 |\n1062 |     workers = max(1, int(max_workers))\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> interface\\gui\\prototypes\\shared.py:1060:26\n     |\n1058 |     if normalized_stage not in _VALID_DRY_RUN_STAGES:\n1059 |         allowed = \", \".join(_VALID_DRY_RUN_STAGES)\n1060 |         raise ValueError(f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\")\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1061 |\n1062 |     workers = max(1, int(max_workers))\n     |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (89 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1060:89\n     |\n1058 |     if normalized_stage not in _VALID_DRY_RUN_STAGES:\n1059 |         allowed = \", \".join(_VALID_DRY_RUN_STAGES)\n1060 |         raise ValueError(f\"Unknown dry-run stage '{stage}'. Expected one of: {allowed}.\")\n     |                                                                                         ^\n1061 |\n1062 |     workers = max(1, int(max_workers))\n     |\n\nE501 Line too long (101 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1075:89\n     |\n1073 |         if repos:\n1074 |             logs.append(\n1075 |                 f\"[dry-run] would synchronize {len(repos)} repository(ies) beneath {workspace_root}.\"\n     |                                                                                         ^^^^^^^^^^^^^\n1076 |             )\n1077 |             preview_limit = 8\n     |\n\nPERF401 Use `list.extend` to create a transformed list\n    --> interface\\gui\\prototypes\\shared.py:1079:17\n     |\n1077 |             preview_limit = 8\n1078 |             for repo in repos[:preview_limit]:\n1079 |                 logs.append(f\"[dry-run] - sync {repo.name}\")\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1080 |             remaining = len(repos) - preview_limit\n1081 |             if remaining > 0:\n     |\nhelp: Replace for loop with list.extend\n\nE501 Line too long (97 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1084:89\n     |\n1082 |                 logs.append(f\"[dry-run] - \u00e2\u20ac\u00a6 {remaining} additional repository(ies)\")\n1083 |         else:\n1084 |             logs.append(\"[dry-run] no repositories detected; cloner would initialize workspace.\")\n     |                                                                                         ^^^^^^^^^\n1085 |     elif normalized_stage == \"quality_gates\":\n1086 |         logs.append(\n     |\n\nE501 Line too long (104 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1087:89\n     |\n1085 |     elif normalized_stage == \"quality_gates\":\n1086 |         logs.append(\n1087 |             f\"[dry-run] would execute visitor QA across lint/type tools with up to {workers} worker(s).\"\n     |                                                                                         ^^^^^^^^^^^^^^^^\n1088 |         )\n1089 |         commands = (\n     |\n\nE501 Line too long (89 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1090:89\n     |\n1088 |         )\n1089 |         commands = (\n1090 |             (\"ruff\", \"python -m ruff check . --select ALL --ignore D,COM812,ISC001,T20\"),\n     |                                                                                         ^\n1091 |             (\"black\", \"python -m black . --line-length 88 --target-version py311 --check\"),\n1092 |             (\"mypy\", \"python -m mypy . --strict\"),\n     |\n\nE501 Line too long (91 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1091:89\n     |\n1089 |         commands = (\n1090 |             (\"ruff\", \"python -m ruff check . --select ALL --ignore D,COM812,ISC001,T20\"),\n1091 |             (\"black\", \"python -m black . --line-length 88 --target-version py311 --check\"),\n     |                                                                                         ^^^\n1092 |             (\"mypy\", \"python -m mypy . --strict\"),\n1093 |             (\"pyright\", \"python -m pyright . --level error\"),\n     |\n\nE501 Line too long (93 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1103:89\n     |\n1101 |         if packages:\n1102 |             logs.append(\n1103 |                 f\"[dry-run] would stage release verification for {len(packages)} package(s).\"\n     |                                                                                         ^^^^^\n1104 |             )\n1105 |             preview_limit = 6\n     |\n\nE501 Line too long (99 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1109:89\n     |\n1107 |             logs.append(f\"[dry-run] - packages: {display_packages}\")\n1108 |             if len(packages) > preview_limit:\n1109 |                 logs.append(f\"[dry-run] - \u00e2\u20ac\u00a6 {len(packages) - preview_limit} additional package(s)\")\n     |                                                                                         ^^^^^^^^^^^\n1110 |         else:\n1111 |             logs.append(\"[dry-run] manifest contains no publishable packages.\")\n     |\n\nE501 Line too long (96 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1112:89\n     |\n1110 |         else:\n1111 |             logs.append(\"[dry-run] manifest contains no publishable packages.\")\n1112 |         logs.append(\"[dry-run] would verify PyPI release status and pip propagation readiness.\")\n     |                                                                                         ^^^^^^^^\n1113 |     else:  # observability_feedback\n1114 |         logs.append(\n     |\n\nE501 Line too long (126 > 88)\n    --> interface\\gui\\prototypes\\shared.py:1115:89\n     |\n1113 |     else:  # observability_feedback\n1114 |         logs.append(\n1115 |             \"[dry-run] observability feedback pipeline not yet implemented; would collect telemetry endpoints and dashboards.\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1116 |         )\n     |\n\nRUF012 Mutable class attributes should be annotated with `typing.ClassVar`\n  --> interface\\gui\\prototypes\\textual_control_center.py:60:20\n   |\n58 |           TITLE = \"x_runner_x Control Center (Textual)\"\n59 |           CSS_PATH = None\n60 |           BINDINGS = [\n   |  ____________________^\n61 | |             (\"r\", \"refresh_data\", \"Refresh data\"),\n62 | |             (\"q\", \"quit\", \"Quit\"),\n63 | |         ]\n   | |_________^\n64 |\n65 |           def __init__(self, workspace_root: Path) -> None:\n   |\n\nPLR0915 Too many statements (76 > 50)\n   --> interface\\gui\\prototypes\\textual_control_center.py:100:13\n    |\n 98 |             }\n 99 |\n100 |         def compose(self):  # type: ignore[override]\n    |             ^^^^^^^\n101 |             yield Header()\n    |\n\nANN201 Missing return type annotation for public function `compose`\n   --> interface\\gui\\prototypes\\textual_control_center.py:100:13\n    |\n 98 |             }\n 99 |\n100 |         def compose(self):  # type: ignore[override]\n    |             ^^^^^^^\n101 |             yield Header()\n    |\nhelp: Add return type annotation\n\nE501 Line too long (96 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:182:89\n    |\n180 |                 self._dry_run_stage_input.value = \"quality_gates\"\n181 |             if include_field is not None and include_field.default is not None:\n182 |                 self._dry_run_include_input.value = \"true\" if include_field.default else \"false\"\n    |                                                                                         ^^^^^^^^\n183 |             else:\n184 |                 self._dry_run_include_input.value = \"true\"\n    |\n\nANN201 Missing return type annotation for public function `on_mount`\n   --> interface\\gui\\prototypes\\textual_control_center.py:199:13\n    |\n197 |             yield Footer()\n198 |\n199 |         def on_mount(self):  # type: ignore[override]\n    |             ^^^^^^^^\n200 |             self._refresh_snapshot()\n201 |             self._populate_repo_table()\n    |\nhelp: Add return type annotation: `None`\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:221:89\n    |\n219 |             if self._commit_button is not None and event.button is self._commit_button:\n220 |                 await self._handle_commit_request()\n221 |             elif self._dry_run_button is not None and event.button is self._dry_run_button:\n    |                                                                                         ^^^\n222 |                 await self._handle_dry_run_request()\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:227:89\n    |\n225 |             if self._commit_input is not None and event.input is self._commit_input:\n226 |                 await self._handle_commit_request()\n227 |             elif self._dry_run_stage_input is not None and event.input is self._dry_run_stage_input:\n    |                                                                                         ^^^^^^^^^^^^\n228 |                 await self._handle_dry_run_request()\n    |\n\nE501 Line too long (105 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:249:89\n    |\n247 |                 for field in schema.fields:\n248 |                     field_type = field.field_type\n249 |                     enum_values = field.schema.get(\"enum\") if isinstance(field.schema, Mapping) else None\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n250 |                     if isinstance(enum_values, list) and enum_values:\n251 |                         joined = \", \".join(str(item) for item in enum_values[:4])\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> interface\\gui\\prototypes\\textual_control_center.py:252:62\n    |\n250 |                     if isinstance(enum_values, list) and enum_values:\n251 |                         joined = \", \".join(str(item) for item in enum_values[:4])\n252 |                         suffix = \"...\" if len(enum_values) > 4 else \"\"\n    |                                                              ^\n253 |                         field_type = f\"{field_type} ({joined}{suffix})\"\n254 |                     default = \"\" if field.default is None else str(field.default)\n    |\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:266:89\n    |\n264 |                     rows_added = True\n265 |             if not rows_added:\n266 |                 self._schema_table.add_row(\"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No schema metadata available\")\n    |                                                                                         ^^^^^^^^^^^\n267 |\n268 |         def _initialize_commit_results_table(self) -> None:\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:272:89\n    |\n270 |                 return\n271 |             self._commit_results_table.clear(columns=True)\n272 |             self._commit_results_table.add_columns(\"Repository\", \"git add\", \"git commit\", \"Summary\")\n    |                                                                                         ^^^^^^^^^^^^\n273 |\n274 |         def _populate_repo_table(self) -> None:\n    |\n\nE501 Line too long (104 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:289:89\n    |\n287 |                 return\n288 |             self._manifest_table.clear(columns=True)\n289 |             self._manifest_table.add_columns(\"Repository\", \"Package\", \"Version\", \"PyPI\", \"Dependencies\")\n    |                                                                                         ^^^^^^^^^^^^^^^^\n290 |             for repo in self._snapshot.repositories:\n291 |                 record = lookup_manifest_record(self._snapshot.manifest, repo.name)\n    |\n\nE501 Line too long (94 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:293:89\n    |\n291 |                 record = lookup_manifest_record(self._snapshot.manifest, repo.name)\n292 |                 if record is None:\n293 |                     self._manifest_table.add_row(repo.name, \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", key=repo.name)\n    |                                                                                         ^^^^^^\n294 |                     continue\n295 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"\u00e2\u20ac\u201d\"\n    |\n\nE501 Line too long (93 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:295:89\n    |\n293 |                     self._manifest_table.add_row(repo.name, \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", key=repo.name)\n294 |                     continue\n295 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"\u00e2\u20ac\u201d\"\n    |                                                                                         ^^^^^\n296 |                 pypi = record.pypi_name or \"\u00e2\u20ac\u201d\"\n297 |                 self._manifest_table.add_row(\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:306:89\n    |\n304 |                 )\n305 |             if not self._snapshot.repositories:\n306 |                 self._manifest_table.add_row(\"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"\u00e2\u20ac\u201d\", \"No repositories detected\")\n    |                                                                                         ^^^^\n307 |             self._update_manifest_detail_panel()\n    |\n\nE501 Line too long (103 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:318:89\n    |\n316 |                 status = status_map.get(spec.key)\n317 |                 state = status.state if status else \"unknown\"\n318 |                 detail = status.message if status else \"Automation data not yet wired for this column.\"\n    |                                                                                         ^^^^^^^^^^^^^^^\n319 |                 self._column_table.add_row(spec.group_label, spec.label, spec.key, state, detail)\n320 |             if not self._snapshot.column_specs:\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:319:89\n    |\n317 |                 state = status.state if status else \"unknown\"\n318 |                 detail = status.message if status else \"Automation data not yet wired for this column.\"\n319 |                 self._column_table.add_row(spec.group_label, spec.label, spec.key, state, detail)\n    |                                                                                         ^^^^^^^^^\n320 |             if not self._snapshot.column_specs:\n321 |                 self._column_table.add_row(\"\u00e2\u20ac\u201d\", \"No columns enabled\", \"\u00e2\u20ac\u201d\", \"unknown\", \"\")\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:321:89\n    |\n319 |                 self._column_table.add_row(spec.group_label, spec.label, spec.key, state, detail)\n320 |             if not self._snapshot.column_specs:\n321 |                 self._column_table.add_row(\"\u00e2\u20ac\u201d\", \"No columns enabled\", \"\u00e2\u20ac\u201d\", \"unknown\", \"\")\n    |                                                                                         ^\n322 |\n323 |         def _populate_card_table(self) -> None:\n    |\n\nE501 Line too long (115 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:332:89\n    |\n330 |                 self._card_table.add_row(card.column, card.title, card.status, joined)\n331 |             if not self._snapshot.cards:\n332 |                 self._card_table.add_row(\"\u00e2\u20ac\u201d\", \"No data\", \"\", \"Run orchestrator to generate make_all_summary.json.\")\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n333 |\n334 |         def _update_metadata(self) -> None:\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:343:89\n    |\n341 |             for repo in self._snapshot.repositories:\n342 |                 script_count = len(repo.scripts)\n343 |                 descriptor = f\"{repo.name} ({script_count} script{'s' if script_count != 1 else ''})\"\n    |                                                                                         ^^^^^^^^^^^^^\n344 |                 lines.append(f\"  \u00e2\u20ac\u00a2 {descriptor}\")\n345 |             if self._snapshot.column_specs:\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:346:89\n    |\n344 |                 lines.append(f\"  \u00e2\u20ac\u00a2 {descriptor}\")\n345 |             if self._snapshot.column_specs:\n346 |                 lines.append(f\"Status columns enabled: {len(self._snapshot.column_specs)}\")\n    |                                                                                         ^^^\n347 |             self._metadata.update(\"\\n\".join(lines))\n    |\n\nE501 Line too long (96 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:357:89\n    |\n355 |                 if record is None:\n356 |                     continue\n357 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"None\"\n    |                                                                                         ^^^^^^^^\n358 |                 header = f\"{repo.name}: {record.version}\"\n359 |                 author = f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:359:89\n    |\n357 |                 dependencies = \", \".join(record.dependencies) if record.dependencies else \"None\"\n358 |                 header = f\"{repo.name}: {record.version}\"\n359 |                 author = f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n    |                                                                                         ^^^\n360 |                 pypi = f\"PyPI: {record.pypi_name or 'n/a'}\"\n361 |                 lines.extend([header, f\"  {author}\", f\"  {pypi}\", f\"  Dependencies: {dependencies}\"])\n    |\n\nE501 Line too long (101 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:361:89\n    |\n359 |                 author = f\"Author: {record.author}\" if record.author else \"Author: unknown\"\n360 |                 pypi = f\"PyPI: {record.pypi_name or 'n/a'}\"\n361 |                 lines.extend([header, f\"  {author}\", f\"  {pypi}\", f\"  Dependencies: {dependencies}\"])\n    |                                                                                         ^^^^^^^^^^^^^\n362 |                 if record.description:\n363 |                     lines.append(f\"  {record.description}\")\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:369:89\n    |\n367 |             if not lines:\n368 |                 lines = [\"Manifest metadata not available for discovered repositories.\"]\n369 |             self._manifest_detail.update(\"\\n\".join(line for line in lines if line is not None))\n    |                                                                                         ^^^^^^^\n370 |\n371 |         def _update_commit_form_metadata(self) -> None:\n    |\n\nE501 Line too long (98 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:380:89\n    |\n378 |             if self._commit_help is not None:\n379 |                 description = field.description if field is not None else None\n380 |                 self._commit_help.update(description or \"Provide a message for the commit sweep.\")\n    |                                                                                         ^^^^^^^^^^\n381 |             if self._commit_input is not None and field is not None:\n382 |                 placeholder = field.description or field.title\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:395:89\n    |\n393 |             min_length = field.schema.get(\"minLength\")\n394 |             if isinstance(min_length, (int, float)) and len(message) < int(min_length):\n395 |                 return (False, f\"{field.title} must be at least {int(min_length)} characters.\")\n    |                                                                                         ^^^^^^^\n396 |             max_length = field.schema.get(\"maxLength\")\n397 |             if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n    |\n\nE501 Line too long (94 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:398:89\n    |\n396 |             max_length = field.schema.get(\"maxLength\")\n397 |             if isinstance(max_length, (int, float)) and len(message) > int(max_length):\n398 |                 return (False, f\"{field.title} must be at most {int(max_length)} characters.\")\n    |                                                                                         ^^^^^^\n399 |             return (True, None)\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\gui\\prototypes\\textual_control_center.py:411:48\n    |\n409 |             self._dry_run_log.write(line)\n410 |\n411 |         def _set_commit_controls_enabled(self, enabled: bool) -> None:\n    |                                                ^^^^^^^\n412 |             if self._commit_button is not None:\n413 |                 self._commit_button.disabled = not enabled\n    |\n\nANN001 Missing type annotation for function argument `results`\n   --> interface\\gui\\prototypes\\textual_control_center.py:417:42\n    |\n415 |                 self._commit_input.disabled = not enabled\n416 |\n417 |         def _update_commit_results(self, results) -> None:\n    |                                          ^^^^^^^\n418 |             if self._commit_results_table is None:\n419 |                 return\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:421:89\n    |\n419 |                 return\n420 |             self._commit_results_table.clear(columns=True)\n421 |             self._commit_results_table.add_columns(\"Repository\", \"git add\", \"git commit\", \"Summary\")\n    |                                                                                         ^^^^^^^^^^^^\n422 |             for result in results:\n423 |                 summary = result.stderr or result.stdout or \"no output\"\n    |\n\nC901 `_handle_commit_request` is too complex (11 > 10)\n   --> interface\\gui\\prototypes\\textual_control_center.py:433:19\n    |\n431 |                 self._commit_results_table.add_row(\"\u00e2\u20ac\u201d\", \"\", \"\", \"No commits recorded\")\n432 |\n433 |         async def _handle_commit_request(self) -> None:\n    |                   ^^^^^^^^^^^^^^^^^^^^^^\n434 |             if self._commit_in_progress:\n435 |                 return\n    |\n\nE501 Line too long (96 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:441:89\n    |\n439 |             is_valid, error_message = self._validate_commit_message(message)\n440 |             if not is_valid:\n441 |                 self._append_log(f\"[commit-all] {error_message or 'Invalid message provided.'}\")\n    |                                                                                         ^^^^^^^^\n442 |                 return\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\gui\\prototypes\\textual_control_center.py:445:47\n    |\n444 |             self._commit_in_progress = True\n445 |             self._set_commit_controls_enabled(False)\n    |                                               ^^^^^\n446 |             if self._log is not None:\n447 |                 self._log.clear()\n    |\n\nE501 Line too long (100 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:451:89\n    |\n450 |             try:\n451 |                 sweep = await asyncio.to_thread(perform_commit_sweep, self._workspace_root, message)\n    |                                                                                         ^^^^^^^^^^^^\n452 |             except CommitMessageRequiredError:\n453 |                 self._append_log(\"[commit-all] commit message must be non-empty.\")\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\gui\\prototypes\\textual_control_center.py:471:51\n    |\n469 |                 self._append_log(\"[commit-all] sweep complete.\")\n470 |             finally:\n471 |                 self._set_commit_controls_enabled(True)\n    |                                                   ^^^^\n472 |                 self._commit_in_progress = False\n    |\n\nC901 `_handle_dry_run_request` is too complex (17 > 10)\n   --> interface\\gui\\prototypes\\textual_control_center.py:474:19\n    |\n472 |                 self._commit_in_progress = False\n473 |\n474 |         async def _handle_dry_run_request(self) -> None:\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n475 |             if self._dry_run_in_progress:\n476 |                 return\n    |\n\nPLR0912 Too many branches (17 > 12)\n   --> interface\\gui\\prototypes\\textual_control_center.py:474:19\n    |\n472 |                 self._commit_in_progress = False\n473 |\n474 |         async def _handle_dry_run_request(self) -> None:\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n475 |             if self._dry_run_in_progress:\n476 |                 return\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\gui\\prototypes\\textual_control_center.py:540:15\n    |\n539 |       if TextualControlCenter is None:\n540 |           raise RuntimeError(\n    |  _______________^\n541 | |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n542 | |         ) from _TEXTUAL_IMPORT_ERROR\n    | |_________^\n543 |       root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n544 |       TextualControlCenter(root).run()\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\gui\\prototypes\\textual_control_center.py:541:13\n    |\n539 |     if TextualControlCenter is None:\n540 |         raise RuntimeError(\n541 |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n542 |         ) from _TEXTUAL_IMPORT_ERROR\n543 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (99 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:541:89\n    |\n539 |     if TextualControlCenter is None:\n540 |         raise RuntimeError(\n541 |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n    |                                                                                         ^^^^^^^^^^^\n542 |         ) from _TEXTUAL_IMPORT_ERROR\n543 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |\n\nE501 Line too long (97 > 88)\n   --> interface\\gui\\prototypes\\textual_control_center.py:543:89\n    |\n541 |             \"Textual is not installed. Install it with 'pip install textual' to run the prototype.\"\n542 |         ) from _TEXTUAL_IMPORT_ERROR\n543 |     root = Path(workspace_root) if workspace_root is not None else _workspace_root_from_default()\n    |                                                                                         ^^^^^^^^^\n544 |     TextualControlCenter(root).run()\n    |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_commit_cli.py:21:45\n   |\n21 | def test_main_runs_commit_when_flag_present(monkeypatch, tmp_path: Path) -> None:\n   |                                             ^^^^^^^^^^^\n22 |     repo_root = tmp_path\n23 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nANN202 Missing return type annotation for private function `fake_commit`\n  --> tests\\test_make_all_commit_cli.py:28:9\n   |\n26 |     repo_path.mkdir()\n27 |\n28 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^\n29 |         commit_calls.append((Path(root), message))\n30 |         return (\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `log`\n  --> tests\\test_make_all_commit_cli.py:28:50\n   |\n26 |     repo_path.mkdir()\n27 |\n28 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n29 |         commit_calls.append((Path(root), message))\n30 |         return (\n   |\n\nARG001 Unused function argument: `log`\n  --> tests\\test_make_all_commit_cli.py:28:50\n   |\n26 |     repo_path.mkdir()\n27 |\n28 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n29 |         commit_calls.append((Path(root), message))\n30 |         return (\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:53:5\n   |\n51 |     make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n52 |\n53 |     assert instances and instances[0].run_called\n   |     ^^^^^^\n54 |     assert commit_calls == [(repo_root.resolve(), \"Lab sweep\")]\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_make_all_commit_cli.py:53:5\n   |\n51 |     make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n52 |\n53 |     assert instances and instances[0].run_called\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n54 |     assert commit_calls == [(repo_root.resolve(), \"Lab sweep\")]\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:54:5\n   |\n53 |     assert instances and instances[0].run_called\n54 |     assert commit_calls == [(repo_root.resolve(), \"Lab sweep\")]\n   |     ^^^^^^\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_commit_cli.py:57:41\n   |\n57 | def test_main_skips_commit_without_flag(monkeypatch, tmp_path: Path) -> None:\n   |                                         ^^^^^^^^^^^\n58 |     repo_root = tmp_path\n59 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nANN202 Missing return type annotation for private function `fake_commit`\n  --> tests\\test_make_all_commit_cli.py:65:9\n   |\n63 |             super().__init__(repo_root)\n64 |\n65 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^\n66 |         commit_calls.append((Path(root), message))\n67 |         return ()\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `log`\n  --> tests\\test_make_all_commit_cli.py:65:50\n   |\n63 |             super().__init__(repo_root)\n64 |\n65 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n66 |         commit_calls.append((Path(root), message))\n67 |         return ()\n   |\n\nARG001 Unused function argument: `log`\n  --> tests\\test_make_all_commit_cli.py:65:50\n   |\n63 |             super().__init__(repo_root)\n64 |\n65 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n66 |         commit_calls.append((Path(root), message))\n67 |         return ()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:74:5\n   |\n72 |     make_all.main([\"--no-gui\"])\n73 |\n74 |     assert not commit_calls\n   |     ^^^^^^\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_commit_cli.py:77:55\n   |\n77 | def test_main_does_not_commit_when_orchestrator_fails(monkeypatch, tmp_path: Path) -> None:\n   |                                                       ^^^^^^^^^^^\n78 |     repo_root = tmp_path\n79 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nE501 Line too long (91 > 88)\n  --> tests\\test_make_all_commit_cli.py:77:89\n   |\n77 | def test_main_does_not_commit_when_orchestrator_fails(monkeypatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^\n78 |     repo_root = tmp_path\n79 |     commit_calls: list[tuple[Path, str]] = []\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_make_all_commit_cli.py:86:19\n   |\n85 |         def run(self) -> None:\n86 |             raise RuntimeError(\"orchestrator exploded\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_make_all_commit_cli.py:86:32\n   |\n85 |         def run(self) -> None:\n86 |             raise RuntimeError(\"orchestrator exploded\")\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |\nhelp: Assign to variable; remove string literal\n\nANN202 Missing return type annotation for private function `fake_commit`\n  --> tests\\test_make_all_commit_cli.py:88:9\n   |\n86 |             raise RuntimeError(\"orchestrator exploded\")\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^\n89 |         commit_calls.append((Path(root), message))\n90 |         return ()\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `log`\n  --> tests\\test_make_all_commit_cli.py:88:50\n   |\n86 |             raise RuntimeError(\"orchestrator exploded\")\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n89 |         commit_calls.append((Path(root), message))\n90 |         return ()\n   |\n\nARG001 Unused function argument: `log`\n  --> tests\\test_make_all_commit_cli.py:88:50\n   |\n86 |             raise RuntimeError(\"orchestrator exploded\")\n87 |\n88 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n   |                                                  ^^^\n89 |         commit_calls.append((Path(root), message))\n90 |         return ()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_commit_cli.py:98:5\n   |\n96 |         make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n97 |\n98 |     assert not commit_calls\n   |     ^^^^^^\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n   --> tests\\test_make_all_commit_cli.py:101:46\n    |\n101 | def test_main_raises_when_commit_sweep_fails(monkeypatch, tmp_path: Path) -> None:\n    |                                              ^^^^^^^^^^^\n102 |     repo_root = tmp_path\n103 |     repo_path = repo_root / \"alpha\"\n    |\n\nANN202 Missing return type annotation for private function `fake_commit`\n   --> tests\\test_make_all_commit_cli.py:110:9\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |         ^^^^^^^^^^^\n111 |         return (\n112 |             CommitResult(\n    |\nhelp: Add return type annotation\n\nARG001 Unused function argument: `root`\n   --> tests\\test_make_all_commit_cli.py:110:21\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                     ^^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nARG001 Unused function argument: `message`\n   --> tests\\test_make_all_commit_cli.py:110:33\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                                 ^^^^^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nANN001 Missing type annotation for function argument `log`\n   --> tests\\test_make_all_commit_cli.py:110:50\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                                                  ^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nARG001 Unused function argument: `log`\n   --> tests\\test_make_all_commit_cli.py:110:50\n    |\n108 |             super().__init__(repo_root)\n109 |\n110 |     def fake_commit(root: Path, message: str, *, log=None):  # type: ignore[override]\n    |                                                  ^^^\n111 |         return (\n112 |             CommitResult(\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_commit_cli.py:128:5\n    |\n126 |         make_all.main([\"--commit-all\", \"Lab sweep\", \"--no-gui\"])\n127 |\n128 |     assert \"Commit sweep encountered one or more failures.\" in str(excinfo.value)\n    |     ^^^^^^\n    |\n\nPLR0915 Too many statements (52 > 50)\n  --> tests\\test_make_all_kanban.py:11:5\n   |\n11 | def test_write_run_summary_emits_kanban_artifacts(tmp_path: Path) -> None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 |     orchestrator = MakeAllOrchestrator()\n13 |     stage_results_obj = cast(\n   |\n\nANN001 Missing type annotation for function argument `monkeypatch`\n  --> tests\\test_make_all_pip_updates.py:9:48\n   |\n 9 | def test_run_pip_updates_invokes_json_contract(monkeypatch, tmp_path) -> None:\n   |                                                ^^^^^^^^^^^\n10 |     orchestrator = MakeAllOrchestrator()\n11 |     reports_dir = tmp_path / \"pip_reports\"\n   |\n\nANN001 Missing type annotation for function argument `tmp_path`\n  --> tests\\test_make_all_pip_updates.py:9:61\n   |\n 9 | def test_run_pip_updates_invokes_json_contract(monkeypatch, tmp_path) -> None:\n   |                                                             ^^^^^^^^\n10 |     orchestrator = MakeAllOrchestrator()\n11 |     reports_dir = tmp_path / \"pip_reports\"\n   |\n\nANN202 Missing return type annotation for private function `fake_main_json`\n  --> tests\\test_make_all_pip_updates.py:71:9\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |         ^^^^^^^^^^^^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\nhelp: Add return type annotation\n\nANN001 Missing type annotation for function argument `ctx`\n  --> tests\\test_make_all_pip_updates.py:71:55\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                       ^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nARG001 Unused function argument: `ctx`\n  --> tests\\test_make_all_pip_updates.py:71:55\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                       ^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nANN001 Missing type annotation for function argument `pip_updates_factory`\n  --> tests\\test_make_all_pip_updates.py:71:65\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                                 ^^^^^^^^^^^^^^^^^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nARG001 Unused function argument: `pip_updates_factory`\n  --> tests\\test_make_all_pip_updates.py:71:65\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                                 ^^^^^^^^^^^^^^^^^^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nE501 Line too long (90 > 88)\n  --> tests\\test_make_all_pip_updates.py:71:89\n   |\n69 |     captured: dict[str, object] = {}\n70 |\n71 |     def fake_main_json(payload: dict[str, object], *, ctx=None, pip_updates_factory=None):  # type: ignore[override]\n   |                                                                                         ^^\n72 |         captured[\"payload\"] = payload\n73 |         report_path = reports_dir / \"x_make_pip_updates_x_run_20251018_010203.json\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_pip_updates.py:93:5\n   |\n91 |     )\n92 |\n93 |     assert orchestrator.pip_updates_completed is True\n   |     ^^^^^^\n94 |     assert orchestrator._pip_updates_report is not None\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_pip_updates.py:94:5\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n   |     ^^^^^^\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |\n\nSLF001 Private member accessed: `_pip_updates_report`\n  --> tests\\test_make_all_pip_updates.py:94:12\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_make_all_pip_updates.py:95:5\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |     ^^^^^^\n96 |\n97 |     payload = captured[\"payload\"]\n   |\n\nSLF001 Private member accessed: `_pip_updates_report`\n  --> tests\\test_make_all_pip_updates.py:95:12\n   |\n93 |     assert orchestrator.pip_updates_completed is True\n94 |     assert orchestrator._pip_updates_report is not None\n95 |     assert orchestrator._pip_updates_report.name.startswith(\"x_make_pip_updates_x_run_\")\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n96 |\n97 |     payload = captured[\"payload\"]\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:98:5\n    |\n 97 |     payload = captured[\"payload\"]\n 98 |     assert isinstance(payload, dict)\n    |     ^^^^^^\n 99 |     assert payload[\"command\"] == \"x_make_pip_updates_x\"\n100 |     parameters = payload[\"parameters\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:99:5\n    |\n 97 |     payload = captured[\"payload\"]\n 98 |     assert isinstance(payload, dict)\n 99 |     assert payload[\"command\"] == \"x_make_pip_updates_x\"\n    |     ^^^^^^\n100 |     parameters = payload[\"parameters\"]\n101 |     assert isinstance(parameters, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:101:5\n    |\n 99 |     assert payload[\"command\"] == \"x_make_pip_updates_x\"\n100 |     parameters = payload[\"parameters\"]\n101 |     assert isinstance(parameters, dict)\n    |     ^^^^^^\n102 |     assert parameters[\"packages\"] == [\"pkgA\"]\n103 |     assert parameters[\"published_versions\"][\"pkgA\"] == \"1.0.0\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:102:5\n    |\n100 |     parameters = payload[\"parameters\"]\n101 |     assert isinstance(parameters, dict)\n102 |     assert parameters[\"packages\"] == [\"pkgA\"]\n    |     ^^^^^^\n103 |     assert parameters[\"published_versions\"][\"pkgA\"] == \"1.0.0\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:103:5\n    |\n101 |     assert isinstance(parameters, dict)\n102 |     assert parameters[\"packages\"] == [\"pkgA\"]\n103 |     assert parameters[\"published_versions\"][\"pkgA\"] == \"1.0.0\"\n    |     ^^^^^^\n104 |\n105 |     summary, _ = orchestrator.write_run_summary()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:108:5\n    |\n106 |     artifacts = summary[\"artifacts\"]\n107 |     pip_meta = artifacts[\"pip_updates\"]\n108 |     assert pip_meta[\"status\"] == \"success\"\n    |     ^^^^^^\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:109:5\n    |\n107 |     pip_meta = artifacts[\"pip_updates\"]\n108 |     assert pip_meta[\"status\"] == \"success\"\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n    |     ^^^^^^\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:110:5\n    |\n108 |     assert pip_meta[\"status\"] == \"success\"\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n    |     ^^^^^^\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n112 |     assert pip_meta[\"report_path\"].endswith(\".json\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:111:5\n    |\n109 |     assert pip_meta[\"result_status\"] == \"completed\"\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n    |     ^^^^^^\n112 |     assert pip_meta[\"report_path\"].endswith(\".json\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_make_all_pip_updates.py:112:5\n    |\n110 |     assert pip_meta[\"packages\"] == [\"pkgA\"]\n111 |     assert pip_meta[\"normalized_packages\"] == [\"pkgA\"]\n112 |     assert pip_meta[\"report_path\"].endswith(\".json\")\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:42:1\n   |\n40 |       run_inspection,\n41 |   )\n42 | / from x_make_graphviz_x.x_cls_make_graphviz_x import (\n43 | |     main_json as graphviz_main_json,\n44 | | )\n   | |_^\n45 |   from x_make_markdown_x.x_cls_make_markdown_x import (\n46 |       main_json as markdown_main_json,\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:45:1\n   |\n43 |       main_json as graphviz_main_json,\n44 |   )\n45 | / from x_make_markdown_x.x_cls_make_markdown_x import (\n46 | |     main_json as markdown_main_json,\n47 | | )\n   | |_^\n48 |   from x_make_mermaid_x.x_cls_make_mermaid_x import (\n49 |       main_json as mermaid_main_json,\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:48:1\n   |\n46 |       main_json as markdown_main_json,\n47 |   )\n48 | / from x_make_mermaid_x.x_cls_make_mermaid_x import (\n49 | |     main_json as mermaid_main_json,\n50 | | )\n   | |_^\n51 |   from x_make_pip_updates_x.update_flow import (  # noqa: E402\n52 |       PACKAGE_ROOT as pip_updates_package_root,\n   |\n\nN811 Constant `PACKAGE_ROOT` imported as non-constant `pip_updates_package_root`\n  --> x_cls_make_all_x.py:52:5\n   |\n50 | )\n51 | from x_make_pip_updates_x.update_flow import (  # noqa: E402\n52 |     PACKAGE_ROOT as pip_updates_package_root,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n53 | )\n54 | from x_make_pip_updates_x.update_flow import (\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:54:1\n   |\n52 |       PACKAGE_ROOT as pip_updates_package_root,\n53 |   )\n54 | / from x_make_pip_updates_x.update_flow import (\n55 | |     PipUpdatesFactory,\n56 | | )\n   | |_^\n57 |   from x_make_pip_updates_x.update_flow import (\n58 |       main_json as pip_updates_main_json,\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:57:1\n   |\n55 |       PipUpdatesFactory,\n56 |   )\n57 | / from x_make_pip_updates_x.update_flow import (\n58 | |     main_json as pip_updates_main_json,\n59 | | )\n   | |_^\n60 |   from x_make_pypi_x.publish_flow import (  # noqa: E402\n61 |       publish_manifest_entries,\n   |\n\nF821 Undefined name `_SupportsMetadata`\n   --> x_cls_make_all_x.py:821:42\n    |\n819 |         if export_result is None:\n820 |             return None\n821 |         if not isinstance(export_result, _SupportsMetadata):\n    |                                          ^^^^^^^^^^^^^^^^^\n822 |             return None\n823 |         metadata_obj = export_result.to_metadata()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:945:19\n    |\n943 |         if status != \"success\":\n944 |             message = str(result.get(\"message\", \"markdown generation failed\"))\n945 |             raise RuntimeError(f\"x_make_markdown_x returned {status}: {message}\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n946 |\n947 |         markdown_obj = result.get(\"markdown\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:945:32\n    |\n943 |         if status != \"success\":\n944 |             message = str(result.get(\"message\", \"markdown generation failed\"))\n945 |             raise RuntimeError(f\"x_make_markdown_x returned {status}: {message}\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n946 |\n947 |         markdown_obj = result.get(\"markdown\")\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> x_cls_make_all_x.py:949:13\n    |\n947 |         markdown_obj = result.get(\"markdown\")\n948 |         if not isinstance(markdown_obj, Mapping):\n949 |             raise RuntimeError(\"x_make_markdown_x response missing markdown artifact\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n950 |\n951 |         artifact: dict[str, object] = dict(markdown_obj)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:949:19\n    |\n947 |         markdown_obj = result.get(\"markdown\")\n948 |         if not isinstance(markdown_obj, Mapping):\n949 |             raise RuntimeError(\"x_make_markdown_x response missing markdown artifact\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n950 |\n951 |         artifact: dict[str, object] = dict(markdown_obj)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:949:32\n    |\n947 |         markdown_obj = result.get(\"markdown\")\n948 |         if not isinstance(markdown_obj, Mapping):\n949 |             raise RuntimeError(\"x_make_markdown_x response missing markdown artifact\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n950 |\n951 |         artifact: dict[str, object] = dict(markdown_obj)\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1004:19\n     |\n1002 |         if status != \"success\":\n1003 |             message = str(result.get(\"message\", \"graphviz generation failed\"))\n1004 |             raise RuntimeError(f\"x_make_graphviz_x returned {status}: {message}\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1005 |\n1006 |         dot_source = result.get(\"dot_source\")\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1004:32\n     |\n1002 |         if status != \"success\":\n1003 |             message = str(result.get(\"message\", \"graphviz generation failed\"))\n1004 |             raise RuntimeError(f\"x_make_graphviz_x returned {status}: {message}\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1005 |\n1006 |         dot_source = result.get(\"dot_source\")\n     |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n    --> x_cls_make_all_x.py:1008:13\n     |\n1006 |         dot_source = result.get(\"dot_source\")\n1007 |         if not isinstance(dot_source, str):\n1008 |             raise RuntimeError(\"x_make_graphviz_x response missing dot_source\")\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1009 |\n1010 |         payload_result: dict[str, object] = {\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1008:19\n     |\n1006 |         dot_source = result.get(\"dot_source\")\n1007 |         if not isinstance(dot_source, str):\n1008 |             raise RuntimeError(\"x_make_graphviz_x response missing dot_source\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1009 |\n1010 |         payload_result: dict[str, object] = {\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_make_all_x.py:1008:32\n     |\n1006 |         dot_source = result.get(\"dot_source\")\n1007 |         if not isinstance(dot_source, str):\n1008 |             raise RuntimeError(\"x_make_graphviz_x response missing dot_source\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1009 |\n1010 |         payload_result: dict[str, object] = {\n     |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1087:19\n     |\n1085 |         if status != \"success\":\n1086 |             message = str(result.get(\"message\", \"mermaid generation failed\"))\n1087 |             raise RuntimeError(f\"x_make_mermaid_x returned {status}: {message}\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1088 |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1087:32\n     |\n1085 |         if status != \"success\":\n1086 |             message = str(result.get(\"message\", \"mermaid generation failed\"))\n1087 |             raise RuntimeError(f\"x_make_mermaid_x returned {status}: {message}\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1088 |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n     |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n    --> x_cls_make_all_x.py:1091:13\n     |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n1090 |         if not isinstance(mermaid_obj, Mapping):\n1091 |             raise RuntimeError(\"x_make_mermaid_x response missing mermaid artifact\")\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1092 |\n1093 |         artifact: dict[str, object] = dict(mermaid_obj)\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1091:19\n     |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n1090 |         if not isinstance(mermaid_obj, Mapping):\n1091 |             raise RuntimeError(\"x_make_mermaid_x response missing mermaid artifact\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1092 |\n1093 |         artifact: dict[str, object] = dict(mermaid_obj)\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_make_all_x.py:1091:32\n     |\n1089 |         mermaid_obj = result.get(\"mermaid\")\n1090 |         if not isinstance(mermaid_obj, Mapping):\n1091 |             raise RuntimeError(\"x_make_mermaid_x response missing mermaid artifact\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1092 |\n1093 |         artifact: dict[str, object] = dict(mermaid_obj)\n     |\nhelp: Assign to variable; remove string literal\n\nF821 Undefined name `_HasRunReportPath`\n    --> x_cls_make_all_x.py:1537:32\n     |\n1535 |             }\n1536 |             report_candidate: object | None = None\n1537 |             if isinstance(exc, _HasRunReportPath):\n     |                                ^^^^^^^^^^^^^^^^^\n1538 |                 report_candidate = exc.run_report_path\n1539 |             if report_candidate is not None:\n     |\n\nC416 Unnecessary set comprehension (rewrite using `set()`)\n    --> x_cls_make_all_x.py:1663:16\n     |\n1661 |             return set()\n1662 |         pattern = \"x_make_pip_updates_x_run_*.json\"\n1663 |         return {path for path in reports_dir.glob(pattern)}\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1664 |\n1665 |     def _discover_new_pip_updates_report(\n     |\nhelp: Rewrite using `set()`\n\nC901 `run_pip_updates` is too complex (21 > 10)\n    --> x_cls_make_all_x.py:1686:9\n     |\n1685 |     # Step 5b: run pip updates (delegated to x_make_pip_updates_x)\n1686 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1687 |         self,\n1688 |         cloner: object,\n     |\n\nPLR0912 Too many branches (21 > 12)\n    --> x_cls_make_all_x.py:1686:9\n     |\n1685 |     # Step 5b: run pip updates (delegated to x_make_pip_updates_x)\n1686 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1687 |         self,\n1688 |         cloner: object,\n     |\n\nPLR0915 Too many statements (96 > 50)\n    --> x_cls_make_all_x.py:1686:9\n     |\n1685 |     # Step 5b: run pip updates (delegated to x_make_pip_updates_x)\n1686 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1687 |         self,\n1688 |         cloner: object,\n     |\n\nTRY004 Prefer `TypeError` exception for invalid type\n    --> x_cls_make_all_x.py:1769:13\n     |\n1767 |                 metadata=metadata,\n1768 |             )\n1769 |             raise RuntimeError(\"pip-updates JSON payload invalid\")\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1770 |\n1771 |         response_payload = dict(response_obj)\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1769:19\n     |\n1767 |                 metadata=metadata,\n1768 |             )\n1769 |             raise RuntimeError(\"pip-updates JSON payload invalid\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1770 |\n1771 |         response_payload = dict(response_obj)\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_make_all_x.py:1769:32\n     |\n1767 |                 metadata=metadata,\n1768 |             )\n1769 |             raise RuntimeError(\"pip-updates JSON payload invalid\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1770 |\n1771 |         response_payload = dict(response_obj)\n     |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (90 > 88)\n    --> x_cls_make_all_x.py:1841:89\n     |\n1839 |             metadata[\"report_path\"] = str(self._pip_updates_report)\n1840 |\n1841 |         package_count = len(normalized_packages) if normalized_packages else len(packages)\n     |                                                                                         ^^\n1842 |\n1843 |         stage_status = \"completed\"\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_make_all_x.py:1901:89\n     |\n1899 |             \"pip_updates\",\n1900 |             title=\"Pip Package Updates\",\n1901 |             status=stage_status if stage_status in {\"completed\", \"attention\"} else \"attention\",\n     |                                                                                         ^^^^^^^\n1902 |             messages=stage_messages,\n1903 |             metadata=metadata,\n     |\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:1932:89\n     |\n1930 |         metavar=\"MESSAGE\",\n1931 |         help=(\n1932 |             \"Stage and commit every repository with MESSAGE once the orchestrator run completes.\"\n     |                                                                                         ^^^^^^^^^\n1933 |         ),\n1934 |     )\n     |\n\nF821 Undefined name `_LaunchGuiModule`\n    --> x_cls_make_all_x.py:1976:45\n     |\n1974 |         return None\n1975 |\n1976 |     if not isinstance(gui_module_candidate, _LaunchGuiModule):\n     |                                             ^^^^^^^^^^^^^^^^\n1977 |         _log_gui_unavailable(summary_path, \"launch_gui missing\")\n1978 |         return None\n     |\n\nF821 Undefined name `_LaunchGuiModule`\n    --> x_cls_make_all_x.py:1980:27\n     |\n1978 |         return None\n1979 |\n1980 |     launch_module = cast(\"_LaunchGuiModule\", gui_module_candidate)\n     |                           ^^^^^^^^^^^^^^^^\n1981 |     return launch_module.launch_gui\n     |\n\nC901 `main` is too complex (13 > 10)\n    --> x_cls_make_all_x.py:2045:5\n     |\n2044 | # Keep main using the class-based orchestrator\n2045 | def main(argv: Sequence[str] | None = None) -> None:\n     |     ^^^^\n2046 |     args = _parse_cli_args(argv or sys.argv[1:])\n2047 |     orchestrator = MakeAllOrchestrator()\n     |\n\nPLR0912 Too many branches (13 > 12)\n    --> x_cls_make_all_x.py:2045:5\n     |\n2044 | # Keep main using the class-based orchestrator\n2045 | def main(argv: Sequence[str] | None = None) -> None:\n     |     ^^^^\n2046 |     args = _parse_cli_args(argv or sys.argv[1:])\n2047 |     orchestrator = MakeAllOrchestrator()\n     |\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:2086:89\n     |\n2084 |                 if failed_results:\n2085 |                     for failure in failed_results:\n2086 |                         summary = failure.stderr or failure.stdout or \"no commit output captured\"\n     |                                                                                         ^^^^^^^^^\n2087 |                         _error(f\"Commit sweep failed for {failure.name}:\", summary)\n2088 |                     commit_error = RuntimeError(\n     |\n\nFound 217 errors.\nNo fixes available (27 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:47:55.641332+00:00\nduration: 0.708s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> interface\\gui\\commit.py:7:29\n  |\n5 | import json\n6 | import subprocess\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> interface\\gui\\commit.py:7:29\n  |\n5 | import json\n6 | import subprocess\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_a\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:48:59.057725+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_common_x",
                "duration_seconds": 12.328093799995258,
                "ended_at": "2025-10-18T23:48:59.057725+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "exporters.py",
                    "json_board.py",
                    "json_contracts.py",
                    "run_reports.py",
                    "tests/__init__.py",
                    "tests/test_exporters.py",
                    "tests/test_json_board.py",
                    "tests/test_json_contracts.py",
                    "tests/test_subprocess_utils.py",
                    "x_cls_make_common_x.py",
                    "x_env_x.py",
                    "x_http_client_x.py",
                    "x_logging_utils_x.py",
                    "x_subprocess_utils_x.py"
                ],
                "repo": "x_make_common_x",
                "repo_hash": "bf7966a40c0b5bd2acce8e7755cf129fe99edd56e5ec70e719d01823ba212c0e",
                "repo_path": "C:\\x_runner_x\\x_make_common_x",
                "started_at": "2025-10-18T23:48:46.729631+00:00",
                "stderr": "",
                "stdout": "json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\njson_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\njson_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nFound 3 errors in 1 file (checked 15 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_common_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_common_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:48:46.729631+00:00\nduration: 12.328s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\njson_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\njson_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\njson_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nFound 3 errors in 1 file (checked 15 source files)\nstderr:\n<empty>",
            "repo": "x_make_common_x",
            "repo_path": "C:\\x_runner_x\\x_make_common_x",
            "stderr_preview": null,
            "stdout_preview": "json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\njson_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\njson_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nFound 3 errors in 1 file (checked 15 source files)",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_common_x (exit 1) cwd: C:\\x_runner_x\\x_make_common_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:49:02.924071+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_common_x",
                "duration_seconds": 3.8635615999955917,
                "ended_at": "2025-10-18T23:49:02.924071+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "exporters.py",
                    "json_board.py",
                    "json_contracts.py",
                    "run_reports.py",
                    "tests/__init__.py",
                    "tests/test_exporters.py",
                    "tests/test_json_board.py",
                    "tests/test_json_contracts.py",
                    "tests/test_subprocess_utils.py",
                    "x_cls_make_common_x.py",
                    "x_env_x.py",
                    "x_http_client_x.py",
                    "x_logging_utils_x.py",
                    "x_subprocess_utils_x.py"
                ],
                "repo": "x_make_common_x",
                "repo_hash": "bf7966a40c0b5bd2acce8e7755cf129fe99edd56e5ec70e719d01823ba212c0e",
                "repo_path": "C:\\x_runner_x\\x_make_common_x",
                "started_at": "2025-10-18T23:48:59.060510+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_common_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_common_x\\tests\\test_json_contracts.py:8:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n1 error, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_common_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_common_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:48:59.060510+00:00\nduration: 3.864s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_common_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_common_x\\tests\\test_json_contracts.py:8:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n1 error, 0 warnings, 0 informations\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_common_x",
            "repo_path": "C:\\x_runner_x\\x_make_common_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_common_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_common_x\\tests\\test_json_contracts.py:8:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n1 error, 0 warnings, 0 informations",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_common_x (exit 1) cwd: C:\\x_runner_x\\x_make_common_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:48:59.060510+00:00 duration: 3.864s tool_version: pyright 1\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:48:46.725236+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_common_x",
                "duration_seconds": 0.18402389998664148,
                "ended_at": "2025-10-18T23:48:46.725236+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "exporters.py",
                    "json_board.py",
                    "json_contracts.py",
                    "run_reports.py",
                    "tests/__init__.py",
                    "tests/test_exporters.py",
                    "tests/test_json_board.py",
                    "tests/test_json_contracts.py",
                    "tests/test_subprocess_utils.py",
                    "x_cls_make_common_x.py",
                    "x_env_x.py",
                    "x_http_client_x.py",
                    "x_logging_utils_x.py",
                    "x_subprocess_utils_x.py"
                ],
                "repo": "x_make_common_x",
                "repo_hash": "bf7966a40c0b5bd2acce8e7755cf129fe99edd56e5ec70e719d01823ba212c0e",
                "repo_path": "C:\\x_runner_x\\x_make_common_x",
                "started_at": "2025-10-18T23:48:46.541212+00:00",
                "stderr": "",
                "stdout": "C901 `_resolve_binary` is too complex (11 > 10)\n  --> exporters.py:65:5\n   |\n65 | def _resolve_binary(\n   |     ^^^^^^^^^^^^^^^\n66 |     *,\n67 |     preferred_path: str | os.PathLike[str] | None,\n   |\n\nB017 Do not assert blind exception: `Exception`\n  --> tests\\test_json_contracts.py:34:10\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nPT011 `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception\n  --> tests\\test_json_contracts.py:34:24\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |                        ^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nFound 3 errors.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_common_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_common_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:48:46.541212+00:00\nduration: 0.184s\ntool_version: ruff 0.14.1\nstdout:\nC901 `_resolve_binary` is too complex (11 > 10)\n  --> exporters.py:65:5\n   |\n65 | def _resolve_binary(\n   |     ^^^^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_common_x",
            "repo_path": "C:\\x_runner_x\\x_make_common_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `_resolve_binary` is too complex (11 > 10)\n  --> exporters.py:65:5\n   |\n65 | def _resolve_binary(\n   |     ^^^^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_common_x (exit 1) cwd: C:\\x_runner_x\\x_make_common_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:48:43.745188+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_common_x",
                "duration_seconds": 0.3256569999939529,
                "ended_at": "2025-10-18T23:48:43.745188+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "exporters.py",
                    "json_board.py",
                    "json_contracts.py",
                    "run_reports.py",
                    "tests/__init__.py",
                    "tests/test_exporters.py",
                    "tests/test_json_board.py",
                    "tests/test_json_contracts.py",
                    "tests/test_subprocess_utils.py",
                    "x_cls_make_common_x.py",
                    "x_env_x.py",
                    "x_http_client_x.py",
                    "x_logging_utils_x.py",
                    "x_subprocess_utils_x.py"
                ],
                "repo": "x_make_common_x",
                "repo_hash": "bf7966a40c0b5bd2acce8e7755cf129fe99edd56e5ec70e719d01823ba212c0e",
                "repo_path": "C:\\x_runner_x\\x_make_common_x",
                "started_at": "2025-10-18T23:48:43.419531+00:00",
                "stderr": "",
                "stdout": "C901 `_resolve_binary` is too complex (11 > 10)\n  --> exporters.py:65:5\n   |\n65 | def _resolve_binary(\n   |     ^^^^^^^^^^^^^^^\n66 |     *,\n67 |     preferred_path: str | os.PathLike[str] | None,\n   |\n\nB017 Do not assert blind exception: `Exception`\n  --> tests\\test_json_contracts.py:34:10\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nPT011 `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception\n  --> tests\\test_json_contracts.py:34:24\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |                        ^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nFound 3 errors.\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_common_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_common_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:48:43.419531+00:00\nduration: 0.326s\ntool_version: ruff 0.14.1\nstdout:\nC901 `_resolve_binary` is too complex (11 > 10)\n  --> exporters.py:65:5\n   |\n65 | def _resolve_binary(\n   |     ^^^^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_common_x",
            "repo_path": "C:\\x_runner_x\\x_make_common_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `_resolve_binary` is too complex (11 > 10)\n  --> exporters.py:65:5\n   |\n65 | def _resolve_binary(\n   |     ^^^^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_common_x (exit 1) cwd: C:\\x_runner_x\\x_make_common_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:49:11.307712+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 5.768448299990268,
                "ended_at": "2025-10-18T23:49:11.307712+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "463440f25884474eee33f3459f1150b0e9abe6ab700a84ea8b520869072e148b",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-18T23:49:05.539261+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 12 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-18 23:46:52.930044+00:00\n+++ C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-18 23:49:10.934821+00:00\n@@ -250,11 +250,13 @@\n     return default\n \n \n def _extract_names(raw: object) -> list[str] | str | None:\n     if isinstance(raw, list):\n-        cleaned = [entry.strip() for entry in raw if isinstance(entry, str) and entry.strip()]\n+        cleaned = [\n+            entry.strip() for entry in raw if isinstance(entry, str) and entry.strip()\n+        ]\n         return cleaned if cleaned else None\n     if isinstance(raw, str) and raw.strip():\n         return raw.strip()\n     return None\n \n@@ -1064,11 +1066,13 @@\n                     root_path = parent\n                     break\n     return root_path\n \n \n-def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n+def main_json(\n+    payload: Mapping[str, object], *, ctx: object | None = None\n+) -> dict[str, object]:\n     try:\n         validate_payload(payload, INPUT_SCHEMA)\n     except ValidationError as exc:\n         return _failure_payload(\n             \"input payload failed validation\",\n@@ -1087,12 +1091,12 @@\n \n     target_dir_obj = parameters.get(\"target_dir\")\n     if isinstance(target_dir_obj, str) and target_dir_obj:\n         target_dir_str = target_dir_obj\n     else:\n-        target_dir_str = (\n-            x_cls_make_github_clones_x.DEFAULT_TARGET_DIR or str(_repo_parent_root())\n+        target_dir_str = x_cls_make_github_clones_x.DEFAULT_TARGET_DIR or str(\n+            _repo_parent_root()\n         )\n     target_dir_path = Path(target_dir_str)\n \n     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n@@ -1175,13 +1179,11 @@\n             return cast(\"Mapping[str, object]\", json.load(handle))\n     return cast(\"Mapping[str, object]\", json.load(sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n-    parser = argparse.ArgumentParser(\n-        description=\"x_make_github_clones_x JSON runner\"\n-    )\n+    parser = argparse.ArgumentParser(description=\"x_make_github_clones_x JSON runner\")\n     parser.add_argument(\n         \"--json\",\n         action=\"store_true\",\n         help=\"Read JSON payload from stdin\",\n     )\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:49:05.539261+00:00\nduration: 5.768s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-18 23:46:52.930044+00:00\n+++ C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-18 23:49:10.934821+00:00\n@@ -250,11 +250,13 @@\n     return default\n \n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 12 files would be left unchanged.",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 12 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-18 23:46:52.930044+00:00\n+++ C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-18 23:49:10.934821+00:00\n@@ -250,11 +250,13 @@\n     return default\n \n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:49:05.53\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:49:12.827663+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 1.3265851000032853,
                "ended_at": "2025-10-18T23:49:12.827663+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "463440f25884474eee33f3459f1150b0e9abe6ab700a84ea8b520869072e148b",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-18T23:49:11.501079+00:00",
                "stderr": "",
                "stdout": "x_cls_make_github_clones_x.py:35: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_github_clones_x.py:35: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_github_clones_x.py:35: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_github_clones_x.py:35: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_github_clones_x.py:39: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import]\nx_cls_make_github_clones_x.py:41: error: Cannot find implementation or library stub for module named \"x_make_github_clones_x.json_contracts\"  [import]\nx_cls_make_github_clones_x.py:235: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:236: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1071: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1072: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1076: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:1076: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1077: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1078: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1149: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1150: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1154: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:1154: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1155: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1156: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1195: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1198: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1198: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:8: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import]\ntests\\test_json_contracts.py:8: note: You may be running mypy in a subpackage, mypy should be run on the package root\ntests\\test_json_contracts.py:10: error: Cannot find implementation or library stub for module named \"x_make_github_clones_x.json_contracts\"  [import]\ntests\\test_json_contracts.py:24: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:24: error: Untyped decorator makes function \"sample_input\" untyped  [misc]\ntests\\test_json_contracts.py:25: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:27: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:27: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:30: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:30: error: Untyped decorator makes function \"sample_output\" untyped  [misc]\ntests\\test_json_contracts.py:31: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:33: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:33: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:36: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:36: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:36: error: Untyped decorator makes function \"sample_error\" untyped  [misc]\ntests\\test_json_contracts.py:37: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:39: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:39: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:43: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:43: error: Expression type contains \"Any\" (has type \"tuple[Any, Any, Any]\")  [misc]\ntests\\test_json_contracts.py:44: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:52: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:53: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:54: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:62: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:64: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:65: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:66: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:76: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:85: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:102: error: Expression type contains \"Any\" (has type \"Callable[[Any, str | None, DefaultNamedArg(bool | None, 'include_forks')], list[RepoRecord]]\")  [misc]\ntests\\test_json_contracts.py:103: error: Expression type contains \"Any\" (has type \"Callable[[Any, Path, str], bool]\")  [misc]\ntests\\test_json_contracts.py:109: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:111: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:113: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:113: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:114: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:114: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:115: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:115: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:123: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:124: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:125: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:126: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:138: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:147: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:164: error: Expression type contains \"Any\" (has type \"Callable[[Any, str | None, DefaultNamedArg(bool | None, 'include_forks')], list[RepoRecord]]\")  [misc]\ntests\\test_json_contracts.py:165: error: Expression type contains \"Any\" (has type \"Callable[[Any, Path, str], bool]\")  [misc]\ntests\\test_json_contracts.py:171: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:173: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:174: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:174: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:183: error: Expression has type \"Any\"  [misc]\nFound 75 errors in 2 files (checked 13 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:49:11.501079+00:00\nduration: 1.327s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_github_clones_x.py:35: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_github_clones_x.py:35: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_github_clones_x.py:35: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_github_clones_x.py:35: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_github_clones_x.py:39: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_github_clones_x.py:35: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_github_clones_x.py:35: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_github_clones_x.py:35: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_github_clones_x.py:35: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_github_clones_x.py:39: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable -\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:49:16.390102+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 3.558099100002437,
                "ended_at": "2025-10-18T23:49:16.390102+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "463440f25884474eee33f3459f1150b0e9abe6ab700a84ea8b520869072e148b",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-18T23:49:12.832001+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:24:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:30:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:36:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:113:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:114:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:115:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:174:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n7 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:49:12.832001+00:00\nduration: 3.558s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:24:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:30:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:36:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:113:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:24:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:30:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:36:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py:113:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:49:12.832001+00:00 duration: 3.558s tool_vers\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:49:11.495200+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 0.18242660000396427,
                "ended_at": "2025-10-18T23:49:11.495200+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "463440f25884474eee33f3459f1150b0e9abe6ab700a84ea8b520869072e148b",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-18T23:49:11.312774+00:00",
                "stderr": "",
                "stdout": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n   |         ^^^^\n78 |         username: str | None = None,\n79 |         *,\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n   |         ^^^^\n78 |         username: str | None = None,\n79 |         *,\n   |\n\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:85:22\n   |\n83 |         return [repo]\n84 |\n85 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n86 |         repo_dir.mkdir(parents=True, exist_ok=True)\n87 |         _ = git_url\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:85:22\n   |\n83 |         return [repo]\n84 |\n85 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n86 |         repo_dir.mkdir(parents=True, exist_ok=True)\n87 |         _ = git_url\n   |\n\nARG001 Unused function argument: `timestamp`\n  --> tests\\test_json_contracts.py:94:9\n   |\n92 |         *,\n93 |         base_dir: Path | str,\n94 |         timestamp: object | None = None,\n   |         ^^^^^^^^^\n95 |     ) -> Path:\n96 |         base = Path(base_dir)\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n114 |     assert result[\"summary\"][\"successful\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:113:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n    |     ^^^^^^\n114 |     assert result[\"summary\"][\"successful\"] == 1\n115 |     assert result[\"repos\"][0][\"status\"] == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n112 |     assert result[\"status\"] == \"success\"\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n114 |     assert result[\"summary\"][\"successful\"] == 1\n    |     ^^^^^^\n115 |     assert result[\"repos\"][0][\"status\"] == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:115:5\n    |\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n114 |     assert result[\"summary\"][\"successful\"] == 1\n115 |     assert result[\"repos\"][0][\"status\"] == \"updated\"\n    |     ^^^^^^\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:139:9\n    |\n138 |     def fake_fetch(\n139 |         self,\n    |         ^^^^\n140 |         username: str | None = None,\n141 |         *,\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:139:9\n    |\n138 |     def fake_fetch(\n139 |         self,\n    |         ^^^^\n140 |         username: str | None = None,\n141 |         *,\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:147:22\n    |\n145 |         return [repo]\n146 |\n147 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n148 |         repo_dir.mkdir(parents=True, exist_ok=True)\n149 |         _ = git_url\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:147:22\n    |\n145 |         return [repo]\n146 |\n147 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n148 |         repo_dir.mkdir(parents=True, exist_ok=True)\n149 |         _ = git_url\n    |\n\nARG001 Unused function argument: `timestamp`\n   --> tests\\test_json_contracts.py:156:9\n    |\n154 |         *,\n155 |         base_dir: Path | str,\n156 |         timestamp: object | None = None,\n    |         ^^^^^^^^^\n157 |     ) -> Path:\n158 |         base = Path(base_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:174:5\n    |\n173 |     validate_payload(result, OUTPUT_SCHEMA)\n174 |     assert result[\"invocation\"][\"allow_token_clone\"] is False\n    |     ^^^^^^\n175 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:175:5\n    |\n173 |     validate_payload(result, OUTPUT_SCHEMA)\n174 |     assert result[\"invocation\"][\"allow_token_clone\"] is False\n175 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:184:5\n    |\n183 |     validate_payload(result, ERROR_SCHEMA)\n184 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n185 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:185:5\n    |\n183 |     validate_payload(result, ERROR_SCHEMA)\n184 |     assert result[\"status\"] == \"failure\"\n185 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_github_clones_x.py:39:1\n   |\n37 | IsoformatTimestamp = Callable[[datetime | None], str]\n38 |\n39 | from x_make_common_x.json_contracts import validate_payload\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n40 |\n41 | from x_make_github_clones_x.json_contracts import (\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_github_clones_x.py:41:1\n   |\n39 |   from x_make_common_x.json_contracts import validate_payload\n40 |\n41 | / from x_make_github_clones_x.json_contracts import (\n42 | |     ERROR_SCHEMA,\n43 | |     INPUT_SCHEMA,\n44 | |     OUTPUT_SCHEMA,\n45 | | )\n   | |_^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:234:5\n    |\n232 |       if details:\n233 |           payload[\"details\"] = dict(details)\n234 | /     try:\n235 | |         validate_payload(payload, ERROR_SCHEMA)\n236 | |     except ValidationError:\n237 | |         pass\n    | |____________^\n238 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:241:33\n    |\n241 | def _coerce_bool(value: object, default: bool) -> bool:\n    |                                 ^^^^^^^\n242 |     if isinstance(value, bool):\n243 |         return value\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_github_clones_x.py:255:89\n    |\n253 | def _extract_names(raw: object) -> list[str] | str | None:\n254 |     if isinstance(raw, list):\n255 |         cleaned = [entry.strip() for entry in raw if isinstance(entry, str) and entry.strip()]\n    |                                                                                         ^^^^^^\n256 |         return cleaned if cleaned else None\n257 |     if isinstance(raw, str) and raw.strip():\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_github_clones_x.py:269:59\n    |\n267 |         os.environ[env_name] = \"1\" if value else \"0\"\n268 |     elif isinstance(value, str):\n269 |         os.environ[env_name] = \"1\" if _coerce_bool(value, False) else \"0\"\n    |                                                           ^^^^^\n270 |     return original, original_present\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:273:58\n    |\n273 | def _restore_allow_token_clone_env(original: str | None, present: bool) -> None:\n    |                                                          ^^^^^^^\n274 |     env_name = x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV\n275 |     if present:\n    |\n\nE501 Line too long (96 > 88)\n    --> x_cls_make_github_clones_x.py:1069:89\n     |\n1069 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |                                                                                         ^^^^^^^^\n1070 |     try:\n1071 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1097:55\n     |\n1095 |     target_dir_path = Path(target_dir_str)\n1096 |\n1097 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n     |                                                       ^^^^^\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1098:67\n     |\n1097 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n     |                                                                   ^^^^^\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1100 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1099:67\n     |\n1097 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |                                                                   ^^^^^\n1100 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n1101 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1100:71\n     |\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1100 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |                                                                       ^^^^\n1101 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFound 30 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:49:11.312774+00:00\nduration: 0.182s\ntool_version: ruff 0.14.1\nstdout:\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py3\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:49:05.519171+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 1.022614400004386,
                "ended_at": "2025-10-18T23:49:05.519171+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "463440f25884474eee33f3459f1150b0e9abe6ab700a84ea8b520869072e148b",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-18T23:49:04.496560+00:00",
                "stderr": "",
                "stdout": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n   |         ^^^^\n78 |         username: str | None = None,\n79 |         *,\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n   |         ^^^^\n78 |         username: str | None = None,\n79 |         *,\n   |\n\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:85:22\n   |\n83 |         return [repo]\n84 |\n85 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n86 |         repo_dir.mkdir(parents=True, exist_ok=True)\n87 |         _ = git_url\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:85:22\n   |\n83 |         return [repo]\n84 |\n85 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n86 |         repo_dir.mkdir(parents=True, exist_ok=True)\n87 |         _ = git_url\n   |\n\nARG001 Unused function argument: `timestamp`\n  --> tests\\test_json_contracts.py:94:9\n   |\n92 |         *,\n93 |         base_dir: Path | str,\n94 |         timestamp: object | None = None,\n   |         ^^^^^^^^^\n95 |     ) -> Path:\n96 |         base = Path(base_dir)\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n114 |     assert result[\"summary\"][\"successful\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:113:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n    |     ^^^^^^\n114 |     assert result[\"summary\"][\"successful\"] == 1\n115 |     assert result[\"repos\"][0][\"status\"] == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n112 |     assert result[\"status\"] == \"success\"\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n114 |     assert result[\"summary\"][\"successful\"] == 1\n    |     ^^^^^^\n115 |     assert result[\"repos\"][0][\"status\"] == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:115:5\n    |\n113 |     assert result[\"invocation\"][\"target_dir\"] == str(target_dir)\n114 |     assert result[\"summary\"][\"successful\"] == 1\n115 |     assert result[\"repos\"][0][\"status\"] == \"updated\"\n    |     ^^^^^^\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:139:9\n    |\n138 |     def fake_fetch(\n139 |         self,\n    |         ^^^^\n140 |         username: str | None = None,\n141 |         *,\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:139:9\n    |\n138 |     def fake_fetch(\n139 |         self,\n    |         ^^^^\n140 |         username: str | None = None,\n141 |         *,\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:147:22\n    |\n145 |         return [repo]\n146 |\n147 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n148 |         repo_dir.mkdir(parents=True, exist_ok=True)\n149 |         _ = git_url\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:147:22\n    |\n145 |         return [repo]\n146 |\n147 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n148 |         repo_dir.mkdir(parents=True, exist_ok=True)\n149 |         _ = git_url\n    |\n\nARG001 Unused function argument: `timestamp`\n   --> tests\\test_json_contracts.py:156:9\n    |\n154 |         *,\n155 |         base_dir: Path | str,\n156 |         timestamp: object | None = None,\n    |         ^^^^^^^^^\n157 |     ) -> Path:\n158 |         base = Path(base_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:174:5\n    |\n173 |     validate_payload(result, OUTPUT_SCHEMA)\n174 |     assert result[\"invocation\"][\"allow_token_clone\"] is False\n    |     ^^^^^^\n175 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:175:5\n    |\n173 |     validate_payload(result, OUTPUT_SCHEMA)\n174 |     assert result[\"invocation\"][\"allow_token_clone\"] is False\n175 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:184:5\n    |\n183 |     validate_payload(result, ERROR_SCHEMA)\n184 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n185 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:185:5\n    |\n183 |     validate_payload(result, ERROR_SCHEMA)\n184 |     assert result[\"status\"] == \"failure\"\n185 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_github_clones_x.py:39:1\n   |\n37 | IsoformatTimestamp = Callable[[datetime | None], str]\n38 |\n39 | from x_make_common_x.json_contracts import validate_payload\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n40 |\n41 | from x_make_github_clones_x.json_contracts import (\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_github_clones_x.py:41:1\n   |\n39 |   from x_make_common_x.json_contracts import validate_payload\n40 |\n41 | / from x_make_github_clones_x.json_contracts import (\n42 | |     ERROR_SCHEMA,\n43 | |     INPUT_SCHEMA,\n44 | |     OUTPUT_SCHEMA,\n45 | | )\n   | |_^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:234:5\n    |\n232 |       if details:\n233 |           payload[\"details\"] = dict(details)\n234 | /     try:\n235 | |         validate_payload(payload, ERROR_SCHEMA)\n236 | |     except ValidationError:\n237 | |         pass\n    | |____________^\n238 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:241:33\n    |\n241 | def _coerce_bool(value: object, default: bool) -> bool:\n    |                                 ^^^^^^^\n242 |     if isinstance(value, bool):\n243 |         return value\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_github_clones_x.py:255:89\n    |\n253 | def _extract_names(raw: object) -> list[str] | str | None:\n254 |     if isinstance(raw, list):\n255 |         cleaned = [entry.strip() for entry in raw if isinstance(entry, str) and entry.strip()]\n    |                                                                                         ^^^^^^\n256 |         return cleaned if cleaned else None\n257 |     if isinstance(raw, str) and raw.strip():\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_github_clones_x.py:269:59\n    |\n267 |         os.environ[env_name] = \"1\" if value else \"0\"\n268 |     elif isinstance(value, str):\n269 |         os.environ[env_name] = \"1\" if _coerce_bool(value, False) else \"0\"\n    |                                                           ^^^^^\n270 |     return original, original_present\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:273:58\n    |\n273 | def _restore_allow_token_clone_env(original: str | None, present: bool) -> None:\n    |                                                          ^^^^^^^\n274 |     env_name = x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV\n275 |     if present:\n    |\n\nE501 Line too long (96 > 88)\n    --> x_cls_make_github_clones_x.py:1069:89\n     |\n1069 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |                                                                                         ^^^^^^^^\n1070 |     try:\n1071 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1097:55\n     |\n1095 |     target_dir_path = Path(target_dir_str)\n1096 |\n1097 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n     |                                                       ^^^^^\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1098:67\n     |\n1097 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n     |                                                                   ^^^^^\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1100 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1099:67\n     |\n1097 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |                                                                   ^^^^^\n1100 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n1101 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1100:71\n     |\n1098 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1099 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1100 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |                                                                       ^^^^\n1101 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFound 30 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:49:04.496560+00:00\nduration: 1.023s\ntool_version: ruff 0.14.1\nstdout:\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:77:9\n   |\n76 |     def fake_fetch(\n77 |         self,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:49:25.244705+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 6.68832570000086,
                "ended_at": "2025-10-18T23:49:25.244705+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "inspection_flow.py",
                    "json_contracts.py",
                    "run_external.py",
                    "run_visitor_no_cache.py",
                    "runner.py",
                    "tests/__init__.py",
                    "tests/test_github_visitor.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_github_visitor_x.py"
                ],
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2d540b74a87514aaaf04d40006d7b3c009eb1a051c863011a7d3935b37d97fe6",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-18T23:49:18.556359+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_github_visitor_x\\runner.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 8 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\t2025-10-18 23:46:56.125085+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\t2025-10-18 23:49:21.793543+00:00\n@@ -97,11 +97,13 @@\n             failure_messages=(),\n             failure_details=(),\n             skipped=False,\n         )\n \n-    monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n+    monkeypatch.setattr(\n+        x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False\n+    )\n \n     result = main_json(payload)\n \n     validate_payload(result, OUTPUT_SCHEMA)\n     assert result[\"status\"] == \"success\"\n@@ -123,11 +125,13 @@\n     payload[\"parameters\"][\"root_dir\"] = str(workspace)\n \n     def fake_run(self: x_cls_make_github_visitor_x) -> None:  # type: ignore[override]\n         raise AssertionError(\"no child git repositories found under workspace\")\n \n-    monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n+    monkeypatch.setattr(\n+        x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False\n+    )\n \n     result = main_json(payload)\n \n     validate_payload(result, OUTPUT_SCHEMA)\n     assert result[\"status\"] == \"skipped\"\n--- C:\\x_runner_x\\x_make_github_visitor_x\\runner.py\t2025-10-18 23:46:55.935232+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\runner.py\t2025-10-18 23:49:24.657532+00:00\n@@ -49,14 +49,16 @@\n \n _LOGGER = get_logger(\"x_make_github_visitor\")\n \n SCHEMA_VERSION = \"x_make_github_visitor_x.run/1.0\"\n \n+\n def _info(*args: object) -> None:\n     msg = \" \".join(str(a) for a in args)\n     with suppress(Exception):\n         _LOGGER.info(\"%s\", msg)\n+\n \n def _failure_payload(\n     message: str,\n     *,\n     details: Mapping[str, object] | None = None,\n@@ -75,10 +77,11 @@\n \n \n def _timestamp() -> str:\n     current = datetime.now(UTC).replace(microsecond=0)\n     return current.isoformat().replace(\"+00:00\", \"Z\")\n+\n \n \"\"\"Visitor to run ruff/black/mypy/pyright on immediate child git clones.\n \n Hidden and cache directories (for example: .mypy_cache, .ruff_cache,\n __pycache__, .pyright) are ignored when discovering child repositories.\n@@ -738,13 +741,11 @@\n             payload=payload,\n             files_checked=files_checked,\n             files_for_event=files_for_event,\n             failure_entries=failure_entries,\n         )\n-        status_line = (\n-            f\"[visitor] {payload.repo.rel_path}::{payload.module_name} -> {payload.status}\"\n-        )\n+        status_line = f\"[visitor] {payload.repo.rel_path}::{payload.module_name} -> {payload.status}\"\n         if duration_ms is not None:\n             status_line += f\" ({duration_ms} ms)\"\n         _info(status_line)\n         if failure_entries:\n             preview = failure_entries[0]\n@@ -1575,11 +1576,13 @@\n         report_path=report_path,\n         had_failures=False,\n     )\n \n \n-def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n+def main_json(\n+    payload: Mapping[str, object], *, ctx: object | None = None\n+) -> dict[str, object]:\n     try:\n         validate_payload(payload, INPUT_SCHEMA)\n     except ValidationError as exc:\n         return _failure_payload(\n             \"input payload failed validation\",\n@@ -1636,15 +1639,11 @@\n         for repo_name, rel_paths in file_allowlist_obj.items():\n             if not isinstance(repo_name, str) or not repo_name:\n                 continue\n             if not isinstance(rel_paths, list):\n                 continue\n-            cleaned_paths = [\n-                rel\n-                for rel in rel_paths\n-                if isinstance(rel, str) and rel\n-            ]\n+            cleaned_paths = [rel for rel in rel_paths if isinstance(rel, str) and rel]\n             if cleaned_paths:\n                 cleaned_allowlist[repo_name] = tuple(cleaned_paths)\n         if cleaned_allowlist:\n             file_allowlist = cleaned_allowlist\n \n@@ -1714,13 +1713,11 @@\n     failure_details = [dict(detail) for detail in run_result.failure_details]\n     detail_pairs: list[tuple[Mapping[str, object], str]] = [\n         (detail, message)\n         for detail, message in zip(failure_details, failure_messages, strict=False)\n     ]\n-    failures_payload = (\n-        visitor._serialize_failures(detail_pairs) if detail_pairs else []\n-    )\n+    failures_payload = visitor._serialize_failures(detail_pairs) if detail_pairs else []\n \n     status: str\n     if run_result.skipped:\n         status = \"skipped\"\n     elif run_result.had_failures:\n@@ -1774,13 +1771,11 @@\n             return cast(\"Mapping[str, object]\", json.load(handle))\n     return cast(\"Mapping[str, object]\", json.load(sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n-    parser = argparse.ArgumentParser(\n-        description=\"x_make_github_visitor_x JSON runner\"\n-    )\n+    parser = argparse.ArgumentParser(description=\"x_make_github_visitor_x JSON runner\")\n     parser.add_argument(\n         \"--json\",\n         action=\"store_true\",\n         help=\"Read JSON payload from stdin\",\n     )\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:49:18.556359+00:00\nduration: 6.688s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\t2025-10-18 23:46:56.125085+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\t2025-10-18 23:49:21.793543+00:00\n@@ -97,11 +97,13 @@\n             failure_messages=(),\n             failure_details=(),\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_github_visitor_x\\runner.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 8 files would be left unchanged.",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_github_visitor_x\\runner.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 8 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\t2025-10-18 23:46:56.125085+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\t2025-10-18 23:49:21.793543+00:00\n@@ -97,11 +97,13 @@\n             failure_messages=(),\n             failure_details=(),\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:49:18.\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:49:33.764980+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 8.207719199999701,
                "ended_at": "2025-10-18T23:49:33.764980+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "inspection_flow.py",
                    "json_contracts.py",
                    "run_external.py",
                    "run_visitor_no_cache.py",
                    "runner.py",
                    "tests/__init__.py",
                    "tests/test_github_visitor.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_github_visitor_x.py"
                ],
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2d540b74a87514aaaf04d40006d7b3c009eb1a051c863011a7d3935b37d97fe6",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-18T23:49:25.557256+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nrunner.py:19: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nrunner.py:19: note: Hint: \"python3 -m pip install types-jsonschema\"\nrunner.py:19: note: (or run \"mypy --install-types\" to install all missing stub packages)\nrunner.py:19: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nrunner.py:72: error: Expression has type \"Any\"  [misc]\nrunner.py:1583: error: Expression has type \"Any\"  [misc]\nrunner.py:1587: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nrunner.py:1587: error: Expression has type \"Any\"  [misc]\nrunner.py:1588: error: Expression has type \"Any\"  [misc]\nrunner.py:1589: error: Expression has type \"Any\"  [misc]\nrunner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"str\"  [arg-type]\nrunner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"bool\"  [arg-type]\nrunner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"Sequence[str] | None\"  [arg-type]\nrunner.py:1662: error: Argument 2 to \"x_cls_make_github_visitor_x\" has incompatible type \"**dict[str, object]\"; expected \"Mapping[str, Sequence[str]] | None\"  [arg-type]\nrunner.py:1735: error: Statement is unreachable  [unreachable]\nrunner.py:1757: error: Expression has type \"Any\"  [misc]\nrunner.py:1761: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nrunner.py:1761: error: Expression has type \"Any\"  [misc]\nrunner.py:1762: error: Expression has type \"Any\"  [misc]\nrunner.py:1763: error: Expression has type \"Any\"  [misc]\nrunner.py:1794: error: Expression has type \"Any\"  [misc]\nrunner.py:1797: error: Expression has type \"Any\"  [misc]\nrunner.py:1797: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:27: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:27: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:33: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:33: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:39: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:39: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:62: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:65: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:67: error: Unused \"type: ignore\" comment  [unused-ignore]\ntests\\test_json_contracts.py:104: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:112: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:120: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:123: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:125: error: Unused \"type: ignore\" comment  [unused-ignore]\ntests\\test_json_contracts.py:130: error: Expression has type \"Any\"  [misc]\nFound 38 errors in 3 files (checked 10 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:49:25.557256+00:00\nduration: 8.208s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nrunner.py:19: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nrunner.py:19: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nrunner.py:19: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nrunner.py:19: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:49:39.184565+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 5.415916899990407,
                "ended_at": "2025-10-18T23:49:39.184565+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "inspection_flow.py",
                    "json_contracts.py",
                    "run_external.py",
                    "run_visitor_no_cache.py",
                    "runner.py",
                    "tests/__init__.py",
                    "tests/test_github_visitor.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_github_visitor_x.py"
                ],
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2d540b74a87514aaaf04d40006d7b3c009eb1a051c863011a7d3935b37d97fe6",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-18T23:49:33.768647+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_github_visitor_x\\runner.py\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"output_filename\" of type \"str\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"str\" (reportArgumentType)\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"enable_cache\" of type \"bool\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"bool\" (reportArgumentType)\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"allowed_repositories\" of type \"Sequence[str] | None\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"object\" is not assignable to type \"Sequence[str] | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"Sequence[str]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"None\" (reportArgumentType)\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"file_allowlist\" of type \"Mapping[str, Sequence[str]] | None\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"object\" is not assignable to type \"Mapping[str, Sequence[str]] | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"Mapping[str, Sequence[str]]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"None\" (reportArgumentType)\nc:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py:24:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py:30:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_github_visitor_x\\tests\\test_json_contracts.py:36:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n7 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:49:33.768647+00:00\nduration: 5.416s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_github_visitor_x\\runner.py\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"output_filename\" of type \"str\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"str\" (reportArgumentType)\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"enable_cache\" of type \"bool\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"bool\" (reportArgumentType)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_github_visitor_x\\runner.py\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"output_filename\" of type \"str\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"str\" (reportArgumentType)\n  c:\\x_runner_x\\x_make_github_visitor_x\\runner.py:1662:15 - error: Argument of type \"object\" cannot be assigned to parameter \"enable_cache\" of type \"bool\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"bool\" (reportArgumentType)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:49:33.768647+00:00 duration: 5.416s tool_ve\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:49:25.551690+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 0.3020049999904586,
                "ended_at": "2025-10-18T23:49:25.551690+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "inspection_flow.py",
                    "json_contracts.py",
                    "run_external.py",
                    "run_visitor_no_cache.py",
                    "runner.py",
                    "tests/__init__.py",
                    "tests/test_github_visitor.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_github_visitor_x.py"
                ],
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2d540b74a87514aaaf04d40006d7b3c009eb1a051c863011a7d3935b37d97fe6",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-18T23:49:25.249685+00:00",
                "stderr": "",
                "stdout": "E402 Module level import not at top of file\n  --> runner.py:42:1\n   |\n40 |         from x_4357_make_common_x import get_logger  # type: ignore[attr-defined]\n41 |\n42 | from x_make_common_x.json_contracts import validate_payload\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n43 |\n44 | from x_make_github_visitor_x.json_contracts import (\n   |\n\nE402 Module level import not at top of file\n  --> runner.py:44:1\n   |\n42 |   from x_make_common_x.json_contracts import validate_payload\n43 |\n44 | / from x_make_github_visitor_x.json_contracts import (\n45 | |     ERROR_SCHEMA,\n46 | |     INPUT_SCHEMA,\n47 | |     OUTPUT_SCHEMA,\n48 | | )\n   | |_^\n49 |\n50 |   _LOGGER = get_logger(\"x_make_github_visitor\")\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n  --> runner.py:70:5\n   |\n68 |       if failure_messages:\n69 |           payload[\"failure_messages\"] = list(failure_messages)\n70 | /     try:\n71 | |         validate_payload(payload, ERROR_SCHEMA)\n72 | |     except ValidationError:\n73 | |         pass\n   | |____________^\n74 |       return payload\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nF841 Local variable `details` is assigned to but never used\n   --> runner.py:737:9\n    |\n735 |             failed_files=failed_files_for_event,\n736 |         )\n737 |         details = self._build_event_details(\n    |         ^^^^^^^\n738 |             payload=payload,\n739 |             files_checked=files_checked,\n    |\nhelp: Remove assignment to unused variable `details`\n\nE501 Line too long (91 > 88)\n   --> runner.py:744:89\n    |\n742 |         )\n743 |         status_line = (\n744 |             f\"[visitor] {payload.repo.rel_path}::{payload.module_name} -> {payload.status}\"\n    |                                                                                         ^^^\n745 |         )\n746 |         if duration_ms is not None:\n    |\n\nC901 `main_json` is too complex (25 > 10)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nPLR0911 Too many return statements (8 > 6)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nPLR0912 Too many branches (28 > 12)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nPLR0915 Too many statements (87 > 50)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nE501 Line too long (96 > 88)\n    --> runner.py:1580:89\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |                                                                                         ^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nS101 Use of `assert` detected\n    --> runner.py:1706:5\n     |\n1704 |             )\n1705 |\n1706 |     assert run_result is not None  # for type-checkers\n     |     ^^^^^^\n1707 |\n1708 |     summary = visitor.generate_summary_report()\n     |\n\nSLF001 Private member accessed: `_runtime_snapshot`\n    --> runner.py:1709:29\n     |\n1708 |     summary = visitor.generate_summary_report()\n1709 |     runtime_snapshot = dict(visitor._runtime_snapshot)\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^\n1710 |     runtime_snapshot.setdefault(\"workspace_root\", str(root_dir_path))\n1711 |     tool_versions = dict(visitor._tool_versions)\n     |\n\nSLF001 Private member accessed: `_tool_versions`\n    --> runner.py:1711:26\n     |\n1709 |     runtime_snapshot = dict(visitor._runtime_snapshot)\n1710 |     runtime_snapshot.setdefault(\"workspace_root\", str(root_dir_path))\n1711 |     tool_versions = dict(visitor._tool_versions)\n     |                          ^^^^^^^^^^^^^^^^^^^^^^\n1712 |\n1713 |     failure_messages = list(run_result.failure_messages)\n     |\n\nSLF001 Private member accessed: `_serialize_failures`\n    --> runner.py:1720:9\n     |\n1718 |     ]\n1719 |     failures_payload = (\n1720 |         visitor._serialize_failures(detail_pairs) if detail_pairs else []\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1721 |     )\n     |\n\nE501 Line too long (97 > 88)\n   --> tests\\test_json_contracts.py:102:89\n    |\n100 |         )\n101 |\n102 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |                                                                                         ^^^^^^^^^\n103 |\n104 |     result = main_json(payload)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:107:5\n    |\n106 |     validate_payload(result, OUTPUT_SCHEMA)\n107 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n108 |     assert result[\"workspace_root\"] == str(workspace)\n109 |     assert result[\"failures\"] == []\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:108:5\n    |\n106 |     validate_payload(result, OUTPUT_SCHEMA)\n107 |     assert result[\"status\"] == \"success\"\n108 |     assert result[\"workspace_root\"] == str(workspace)\n    |     ^^^^^^\n109 |     assert result[\"failures\"] == []\n110 |     summary = result[\"summary\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:109:5\n    |\n107 |     assert result[\"status\"] == \"success\"\n108 |     assert result[\"workspace_root\"] == str(workspace)\n109 |     assert result[\"failures\"] == []\n    |     ^^^^^^\n110 |     summary = result[\"summary\"]\n111 |     assert isinstance(summary, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:111:5\n    |\n109 |     assert result[\"failures\"] == []\n110 |     summary = result[\"summary\"]\n111 |     assert isinstance(summary, dict)\n    |     ^^^^^^\n112 |     assert summary[\"total_repos\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n110 |     summary = result[\"summary\"]\n111 |     assert isinstance(summary, dict)\n112 |     assert summary[\"total_repos\"] == 1\n    |     ^^^^^^\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:125:18\n    |\n123 |     payload[\"parameters\"][\"root_dir\"] = str(workspace)\n124 |\n125 |     def fake_run(self: x_cls_make_github_visitor_x) -> None:  # type: ignore[override]\n    |                  ^^^^\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> tests\\test_json_contracts.py:126:15\n    |\n125 |     def fake_run(self: x_cls_make_github_visitor_x) -> None:  # type: ignore[override]\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n127 |\n128 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> tests\\test_json_contracts.py:126:30\n    |\n125 |     def fake_run(self: x_cls_make_github_visitor_x) -> None:  # type: ignore[override]\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n127 |\n128 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (97 > 88)\n   --> tests\\test_json_contracts.py:128:89\n    |\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n127 |\n128 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |                                                                                         ^^^^^^^^^\n129 |\n130 |     result = main_json(payload)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n132 |     validate_payload(result, OUTPUT_SCHEMA)\n133 |     assert result[\"status\"] == \"skipped\"\n    |     ^^^^^^\n134 |     assert result[\"skipped\"] is True\n135 |     assert result[\"report_path\"] is None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     validate_payload(result, OUTPUT_SCHEMA)\n133 |     assert result[\"status\"] == \"skipped\"\n134 |     assert result[\"skipped\"] is True\n    |     ^^^^^^\n135 |     assert result[\"report_path\"] is None\n136 |     assert result[\"failures\"] == []\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:135:5\n    |\n133 |     assert result[\"status\"] == \"skipped\"\n134 |     assert result[\"skipped\"] is True\n135 |     assert result[\"report_path\"] is None\n    |     ^^^^^^\n136 |     assert result[\"failures\"] == []\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     assert result[\"skipped\"] is True\n135 |     assert result[\"report_path\"] is None\n136 |     assert result[\"failures\"] == []\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:145:5\n    |\n144 |     validate_payload(result, ERROR_SCHEMA)\n145 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n146 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:146:5\n    |\n144 |     validate_payload(result, ERROR_SCHEMA)\n145 |     assert result[\"status\"] == \"failure\"\n146 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nFound 30 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:49:25.249685+00:00\nduration: 0.302s\ntool_version: ruff 0.14.1\nstdout:\nE402 Module level import not at top of file\n  --> runner.py:42:1\n   |\n40 |         from x_4357_make_common_x import get_logger  # type: ignore[attr-defined]\n41 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": null,
            "stdout_preview": "E402 Module level import not at top of file\n  --> runner.py:42:1\n   |\n40 |         from x_4357_make_common_x import get_logger  # type: ignore[attr-defined]\n41 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version p\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:49:18.536295+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 0.40254840000125114,
                "ended_at": "2025-10-18T23:49:18.536295+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "inspection_flow.py",
                    "json_contracts.py",
                    "run_external.py",
                    "run_visitor_no_cache.py",
                    "runner.py",
                    "tests/__init__.py",
                    "tests/test_github_visitor.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_github_visitor_x.py"
                ],
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2d540b74a87514aaaf04d40006d7b3c009eb1a051c863011a7d3935b37d97fe6",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-18T23:49:18.133758+00:00",
                "stderr": "",
                "stdout": "E402 Module level import not at top of file\n  --> runner.py:42:1\n   |\n40 |         from x_4357_make_common_x import get_logger  # type: ignore[attr-defined]\n41 |\n42 | from x_make_common_x.json_contracts import validate_payload\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n43 |\n44 | from x_make_github_visitor_x.json_contracts import (\n   |\n\nE402 Module level import not at top of file\n  --> runner.py:44:1\n   |\n42 |   from x_make_common_x.json_contracts import validate_payload\n43 |\n44 | / from x_make_github_visitor_x.json_contracts import (\n45 | |     ERROR_SCHEMA,\n46 | |     INPUT_SCHEMA,\n47 | |     OUTPUT_SCHEMA,\n48 | | )\n   | |_^\n49 |\n50 |   _LOGGER = get_logger(\"x_make_github_visitor\")\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n  --> runner.py:70:5\n   |\n68 |       if failure_messages:\n69 |           payload[\"failure_messages\"] = list(failure_messages)\n70 | /     try:\n71 | |         validate_payload(payload, ERROR_SCHEMA)\n72 | |     except ValidationError:\n73 | |         pass\n   | |____________^\n74 |       return payload\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nF841 Local variable `details` is assigned to but never used\n   --> runner.py:737:9\n    |\n735 |             failed_files=failed_files_for_event,\n736 |         )\n737 |         details = self._build_event_details(\n    |         ^^^^^^^\n738 |             payload=payload,\n739 |             files_checked=files_checked,\n    |\nhelp: Remove assignment to unused variable `details`\n\nE501 Line too long (91 > 88)\n   --> runner.py:744:89\n    |\n742 |         )\n743 |         status_line = (\n744 |             f\"[visitor] {payload.repo.rel_path}::{payload.module_name} -> {payload.status}\"\n    |                                                                                         ^^^\n745 |         )\n746 |         if duration_ms is not None:\n    |\n\nC901 `main_json` is too complex (25 > 10)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nPLR0911 Too many return statements (8 > 6)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nPLR0912 Too many branches (28 > 12)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nPLR0915 Too many statements (87 > 50)\n    --> runner.py:1580:5\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nE501 Line too long (96 > 88)\n    --> runner.py:1580:89\n     |\n1580 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |                                                                                         ^^^^^^^^\n1581 |     try:\n1582 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nS101 Use of `assert` detected\n    --> runner.py:1706:5\n     |\n1704 |             )\n1705 |\n1706 |     assert run_result is not None  # for type-checkers\n     |     ^^^^^^\n1707 |\n1708 |     summary = visitor.generate_summary_report()\n     |\n\nSLF001 Private member accessed: `_runtime_snapshot`\n    --> runner.py:1709:29\n     |\n1708 |     summary = visitor.generate_summary_report()\n1709 |     runtime_snapshot = dict(visitor._runtime_snapshot)\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^\n1710 |     runtime_snapshot.setdefault(\"workspace_root\", str(root_dir_path))\n1711 |     tool_versions = dict(visitor._tool_versions)\n     |\n\nSLF001 Private member accessed: `_tool_versions`\n    --> runner.py:1711:26\n     |\n1709 |     runtime_snapshot = dict(visitor._runtime_snapshot)\n1710 |     runtime_snapshot.setdefault(\"workspace_root\", str(root_dir_path))\n1711 |     tool_versions = dict(visitor._tool_versions)\n     |                          ^^^^^^^^^^^^^^^^^^^^^^\n1712 |\n1713 |     failure_messages = list(run_result.failure_messages)\n     |\n\nSLF001 Private member accessed: `_serialize_failures`\n    --> runner.py:1720:9\n     |\n1718 |     ]\n1719 |     failures_payload = (\n1720 |         visitor._serialize_failures(detail_pairs) if detail_pairs else []\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1721 |     )\n     |\n\nE501 Line too long (97 > 88)\n   --> tests\\test_json_contracts.py:102:89\n    |\n100 |         )\n101 |\n102 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |                                                                                         ^^^^^^^^^\n103 |\n104 |     result = main_json(payload)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:107:5\n    |\n106 |     validate_payload(result, OUTPUT_SCHEMA)\n107 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n108 |     assert result[\"workspace_root\"] == str(workspace)\n109 |     assert result[\"failures\"] == []\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:108:5\n    |\n106 |     validate_payload(result, OUTPUT_SCHEMA)\n107 |     assert result[\"status\"] == \"success\"\n108 |     assert result[\"workspace_root\"] == str(workspace)\n    |     ^^^^^^\n109 |     assert result[\"failures\"] == []\n110 |     summary = result[\"summary\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:109:5\n    |\n107 |     assert result[\"status\"] == \"success\"\n108 |     assert result[\"workspace_root\"] == str(workspace)\n109 |     assert result[\"failures\"] == []\n    |     ^^^^^^\n110 |     summary = result[\"summary\"]\n111 |     assert isinstance(summary, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:111:5\n    |\n109 |     assert result[\"failures\"] == []\n110 |     summary = result[\"summary\"]\n111 |     assert isinstance(summary, dict)\n    |     ^^^^^^\n112 |     assert summary[\"total_repos\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n110 |     summary = result[\"summary\"]\n111 |     assert isinstance(summary, dict)\n112 |     assert summary[\"total_repos\"] == 1\n    |     ^^^^^^\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:125:18\n    |\n123 |     payload[\"parameters\"][\"root_dir\"] = str(workspace)\n124 |\n125 |     def fake_run(self: x_cls_make_github_visitor_x) -> None:  # type: ignore[override]\n    |                  ^^^^\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> tests\\test_json_contracts.py:126:15\n    |\n125 |     def fake_run(self: x_cls_make_github_visitor_x) -> None:  # type: ignore[override]\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n127 |\n128 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> tests\\test_json_contracts.py:126:30\n    |\n125 |     def fake_run(self: x_cls_make_github_visitor_x) -> None:  # type: ignore[override]\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n127 |\n128 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (97 > 88)\n   --> tests\\test_json_contracts.py:128:89\n    |\n126 |         raise AssertionError(\"no child git repositories found under workspace\")\n127 |\n128 |     monkeypatch.setattr(x_cls_make_github_visitor_x, \"run_inspect_flow\", fake_run, raising=False)\n    |                                                                                         ^^^^^^^^^\n129 |\n130 |     result = main_json(payload)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n132 |     validate_payload(result, OUTPUT_SCHEMA)\n133 |     assert result[\"status\"] == \"skipped\"\n    |     ^^^^^^\n134 |     assert result[\"skipped\"] is True\n135 |     assert result[\"report_path\"] is None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     validate_payload(result, OUTPUT_SCHEMA)\n133 |     assert result[\"status\"] == \"skipped\"\n134 |     assert result[\"skipped\"] is True\n    |     ^^^^^^\n135 |     assert result[\"report_path\"] is None\n136 |     assert result[\"failures\"] == []\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:135:5\n    |\n133 |     assert result[\"status\"] == \"skipped\"\n134 |     assert result[\"skipped\"] is True\n135 |     assert result[\"report_path\"] is None\n    |     ^^^^^^\n136 |     assert result[\"failures\"] == []\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     assert result[\"skipped\"] is True\n135 |     assert result[\"report_path\"] is None\n136 |     assert result[\"failures\"] == []\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:145:5\n    |\n144 |     validate_payload(result, ERROR_SCHEMA)\n145 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n146 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:146:5\n    |\n144 |     validate_payload(result, ERROR_SCHEMA)\n145 |     assert result[\"status\"] == \"failure\"\n146 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nFound 30 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:49:18.133758+00:00\nduration: 0.403s\ntool_version: ruff 0.14.1\nstdout:\nE402 Module level import not at top of file\n  --> runner.py:42:1\n   |\n40 |         from x_4357_make_common_x import get_logger  # type: ignore[attr-defined]\n41 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": null,
            "stdout_preview": "E402 Module level import not at top of file\n  --> runner.py:42:1\n   |\n40 |         from x_4357_make_common_x import get_logger  # type: ignore[attr-defined]\n41 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-versi\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:49:57.564200+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 7.0046294999920065,
                "ended_at": "2025-10-18T23:49:57.564200+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43f38ac01a775b0d8dcf65d3e63cf333be159f40fe373cf0a698dcb27f67461c",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-18T23:49:50.559577+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n3 files would be reformatted, 3 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\t2025-10-18 23:49:50.458854+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\t2025-10-18 23:49:54.390141+00:00\n@@ -5,25 +5,25 @@\n _NODE_SCHEMA: dict[str, object] = {\n     \"type\": \"object\",\n     \"properties\": {\n         \"id\": {\"type\": \"string\"},\n         \"label\": {\"type\": [\"string\", \"null\"]},\n-        \"attributes\": {\"type\": \"object\"}\n+        \"attributes\": {\"type\": \"object\"},\n     },\n     \"required\": [\"id\"],\n-    \"additionalProperties\": True\n+    \"additionalProperties\": True,\n }\n \n _EDGE_SCHEMA: dict[str, object] = {\n     \"type\": \"object\",\n     \"properties\": {\n         \"source\": {\"type\": \"string\"},\n         \"target\": {\"type\": \"string\"},\n-        \"attributes\": {\"type\": \"object\"}\n+        \"attributes\": {\"type\": \"object\"},\n     },\n     \"required\": [\"source\", \"target\"],\n-    \"additionalProperties\": True\n+    \"additionalProperties\": True,\n }\n \n INPUT_SCHEMA: dict[str, object] = {\n     \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n     \"title\": \"x_make_graphviz_x input\",\n@@ -34,61 +34,54 @@\n             \"type\": \"object\",\n             \"properties\": {\n                 \"directed\": {\"type\": \"boolean\"},\n                 \"engine\": {\"type\": [\"string\", \"null\"], \"minLength\": 1},\n                 \"graph_attributes\": {\"type\": \"object\"},\n-                \"nodes\": {\n-                    \"type\": \"array\",\n-                    \"items\": _NODE_SCHEMA,\n-                    \"minItems\": 1\n-                },\n-                \"edges\": {\n-                    \"type\": \"array\",\n-                    \"items\": _EDGE_SCHEMA\n-                },\n+                \"nodes\": {\"type\": \"array\", \"items\": _NODE_SCHEMA, \"minItems\": 1},\n+                \"edges\": {\"type\": \"array\", \"items\": _EDGE_SCHEMA},\n                 \"export\": {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"enable\": {\"type\": \"boolean\"},\n                         \"filename\": {\"type\": [\"string\", \"null\"]},\n-                        \"directory\": {\"type\": [\"string\", \"null\"]}\n+                        \"directory\": {\"type\": [\"string\", \"null\"]},\n                     },\n                     \"required\": [\"enable\"],\n-                    \"additionalProperties\": False\n-                }\n+                    \"additionalProperties\": False,\n+                },\n             },\n             \"required\": [\"nodes\", \"edges\"],\n-            \"additionalProperties\": False\n-        }\n+            \"additionalProperties\": False,\n+        },\n     },\n     \"required\": [\"command\", \"parameters\"],\n-    \"additionalProperties\": False\n+    \"additionalProperties\": False,\n }\n \n OUTPUT_SCHEMA: dict[str, object] = {\n     \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n     \"title\": \"x_make_graphviz_x output\",\n     \"type\": \"object\",\n     \"properties\": {\n         \"status\": {\"enum\": [\"success\", \"failure\"]},\n         \"dot_source\": {\"type\": \"string\"},\n         \"svg_path\": {\"type\": [\"string\", \"null\"]},\n-        \"report_path\": {\"type\": [\"string\", \"null\"]}\n+        \"report_path\": {\"type\": [\"string\", \"null\"]},\n     },\n     \"required\": [\"status\", \"dot_source\"],\n-    \"additionalProperties\": True\n+    \"additionalProperties\": True,\n }\n \n ERROR_SCHEMA: dict[str, object] = {\n     \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n     \"title\": \"x_make_graphviz_x error\",\n     \"type\": \"object\",\n     \"properties\": {\n         \"status\": {\"const\": \"failure\"},\n         \"message\": {\"type\": \"string\"},\n-        \"details\": {\"type\": \"object\"}\n+        \"details\": {\"type\": \"object\"},\n     },\n     \"required\": [\"status\", \"message\"],\n-    \"additionalProperties\": True\n+    \"additionalProperties\": True,\n }\n \n __all__ = [\"ERROR_SCHEMA\", \"INPUT_SCHEMA\", \"OUTPUT_SCHEMA\"]\n--- C:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\t2025-10-18 23:49:50.458854+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\t2025-10-18 23:49:54.437855+00:00\n@@ -67,11 +67,13 @@\n     validate_payload(result, OUTPUT_SCHEMA)\n     assert result[\"status\"] == \"success\"\n     assert \"dot_source\" in result\n \n \n-def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n+def test_main_json_returns_error_for_invalid_payload(\n+    sample_input: dict[str, object],\n+) -> None:\n     invalid = copy.deepcopy(sample_input)\n     parameters = invalid.setdefault(\"parameters\", {})\n     if isinstance(parameters, dict):\n         parameters.pop(\"nodes\", None)\n     result = main_json(invalid)\n--- C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\t2025-10-18 23:49:50.511337+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\t2025-10-18 23:49:56.563903+00:00\n@@ -466,11 +466,13 @@\n             label = str(label_obj)\n         attrs = _coerce_attr_map(entry.get(\"attributes\"))\n         builder.add_edge(source, target, label=label, **attrs)\n \n \n-def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n+def _failure_payload(\n+    message: str, *, details: Mapping[str, object] | None = None\n+) -> dict[str, object]:\n     payload: dict[str, object] = {\n         \"status\": \"failure\",\n         \"message\": message,\n     }\n     if details:\n@@ -499,11 +501,13 @@\n \n     parameters_obj = payload.get(\"parameters\", {})\n     parameters = cast(\"Mapping[str, object]\", parameters_obj)\n \n     directed_value = parameters.get(\"directed\", True)\n-    directed = bool(directed_value) if not isinstance(directed_value, bool) else directed_value\n+    directed = (\n+        bool(directed_value) if not isinstance(directed_value, bool) else directed_value\n+    )\n     builder = GraphvizBuilder(ctx=ctx, directed=directed)\n \n     engine_obj = parameters.get(\"engine\")\n     if isinstance(engine_obj, str) and engine_obj:\n         builder.engine(engine_obj)\n@@ -525,12 +529,18 @@\n     svg_path: str | None = None\n     if isinstance(export_obj, Mapping) and export_obj.get(\"enable\"):\n         export_mapping = cast(\"Mapping[str, object]\", export_obj)\n         filename_obj = export_mapping.get(\"filename\")\n         directory_obj = export_mapping.get(\"directory\")\n-        filename = filename_obj if isinstance(filename_obj, str) and filename_obj else \"graph\"\n-        base = Path(directory_obj) if isinstance(directory_obj, str) and directory_obj else Path()\n+        filename = (\n+            filename_obj if isinstance(filename_obj, str) and filename_obj else \"graph\"\n+        )\n+        base = (\n+            Path(directory_obj)\n+            if isinstance(directory_obj, str) and directory_obj\n+            else Path()\n+        )\n         target = base / filename\n         svg_result = builder.to_svg(str(target))\n         svg_path = svg_result if svg_result else None\n \n     dot_source = builder._dot_source()\n@@ -562,11 +572,13 @@\n     return cast(\"Mapping[str, object]\", json.load(_sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n     parser = argparse.ArgumentParser(description=\"x_make_graphviz_x JSON runner\")\n-    parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n+    parser.add_argument(\n+        \"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\"\n+    )\n     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n     parsed = parser.parse_args(args)\n \n     if not (parsed.json or parsed.json_file):\n         parser.error(\"JSON input required. Use --json for stdin or --json-file <path>.\")\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:49:50.559577+00:00\nduration: 7.005s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\t2025-10-18 23:49:50.458854+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\t2025-10-18 23:49:54.390141+00:00\n@@ -5,25 +5,25 @@\n _NODE_SCHEMA: dict[str, object] = {\n     \"type\": \"object\",\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n\u2026",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n\u2026",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\t2025-10-18 23:49:50.458854+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\json_contracts.py\t2025-10-18 23:49:54.390141+00:00\n@@ -5,25 +5,25 @@\n _NODE_SCHEMA: dict[str, object] = {\n     \"type\": \"object\",\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:49:50.559577+00:00\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:49:59.090257+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 1.2069109000003664,
                "ended_at": "2025-10-18T23:49:59.090257+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43f38ac01a775b0d8dcf65d3e63cf333be159f40fe373cf0a698dcb27f67461c",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-18T23:49:57.883346+00:00",
                "stderr": "",
                "stdout": "tests\\test_json_contracts.py:8: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import-not-found]\ntests\\test_json_contracts.py:8: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ntests\\test_json_contracts.py:9: error: Cannot find implementation or library stub for module named \"x_make_graphviz_x.json_contracts\"  [import-not-found]\ntests\\test_json_contracts.py:14: error: Cannot find implementation or library stub for module named \"x_make_graphviz_x.x_cls_make_graphviz_x\"  [import-not-found]\ntests\\test_json_contracts.py:20: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:20: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:20: error: Untyped decorator makes function \"sample_input\" untyped  [misc]\ntests\\test_json_contracts.py:21: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:23: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:23: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:26: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:26: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:26: error: Untyped decorator makes function \"sample_output\" untyped  [misc]\ntests\\test_json_contracts.py:27: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:29: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:29: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:32: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:32: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:32: error: Untyped decorator makes function \"sample_error\" untyped  [misc]\ntests\\test_json_contracts.py:33: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:35: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:35: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:39: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:39: error: Expression type contains \"Any\" (has type \"tuple[Any, Any, Any]\")  [misc]\ntests\\test_json_contracts.py:40: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:48: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:49: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:50: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:55: error: Module has no attribute \"skip\"  [attr-defined]\ntests\\test_json_contracts.py:58: error: Module has no attribute \"skip\"  [attr-defined]\ntests\\test_json_contracts.py:61: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:62: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:66: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:67: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:68: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:69: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:77: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:78: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:79: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_graphviz_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_graphviz_x.py:22: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_graphviz_x.py:28: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import-not-found]\nx_cls_make_graphviz_x.py:29: error: Cannot find implementation or library stub for module named \"x_make_graphviz_x.json_contracts\"  [import-not-found]\nx_cls_make_graphviz_x.py:468: error: Argument 4 to \"add_edge\" of \"GraphvizBuilder\" has incompatible type \"**dict[str, str | int | float | bool | None]\"; expected \"str | None\"  [arg-type]\nx_cls_make_graphviz_x.py:489: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:490: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:494: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:494: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:495: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:496: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:545: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:546: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:550: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:550: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:551: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:552: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:571: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:574: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:574: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_graphviz_x.py:593: error: Statement is unreachable  [unreachable]\nFound 58 errors in 2 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:49:57.883346+00:00\nduration: 1.207s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\ntests\\test_json_contracts.py:8: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import-not-found]\ntests\\test_json_contracts.py:8: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ntests\\test_json_contracts.py:9: error: Cannot find implementation or library stub for module named \"x_make_graphviz_x.json_contracts\"  [import-not-found]\ntests\\test_json_contracts.py:14: error: Cannot find implementation or library stub for module named \"x_make_graphviz_x.x_cls_make_graphviz_x\"  [import-not-found]\ntests\\test_json_contracts.py:20: error: Module has no attribute \"fixture\"  [attr-defined]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "tests\\test_json_contracts.py:8: error: Cannot find implementation or library stub for module named \"x_make_common_x.json_contracts\"  [import-not-found]\ntests\\test_json_contracts.py:8: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ntests\\test_json_contracts.py:9: error: Cannot find implementation or library stub for module named \"x_make_graphviz_x.json_contracts\"  [import-not-found]\ntests\\test_json_contracts.py:14: error: Cannot find implementation or library stub for module named \"x_make_graphviz_x.x_cls_make_graphviz_x\"  [import-not-found]\ntests\\test_json_contracts.py:20: error: Module has no attribute \"fixture\"  [attr-defined]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:50:01.635994+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 2.542010899996967,
                "ended_at": "2025-10-18T23:50:01.635994+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43f38ac01a775b0d8dcf65d3e63cf333be159f40fe373cf0a698dcb27f67461c",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-18T23:49:59.093981+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:20:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:26:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:32:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:55:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:58:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\nc:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\n  c:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:468:57 - error: Argument of type \"AttrValue\" cannot be assigned to parameter \"from_port\" of type \"str | None\" in function \"add_edge\"\n  \u00c2\u00a0\u00c2\u00a0Type \"AttrValue\" is not assignable to type \"str | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"float\" is not assignable to type \"str | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"float\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"float\" is not assignable to \"None\" (reportArgumentType)\n  c:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py:468:57 - error: Argument of type \"AttrValue\" cannot be assigned to parameter \"to_port\" of type \"str | None\" in function \"add_edge\"\n  \u00c2\u00a0\u00c2\u00a0Type \"AttrValue\" is not assignable to type \"str | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"float\" is not assignable to type \"str | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"float\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"float\" is not assignable to \"None\" (reportArgumentType)\n7 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:49:59.093981+00:00\nduration: 2.542s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:20:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:26:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:32:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:55:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:20:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:26:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:32:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_graphviz_x\\tests\\test_json_contracts.py:55:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:49:59.093981+00:00 duration: 2.542s tool_version: pyrig\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:49:57.879633+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.29253109999990556,
                "ended_at": "2025-10-18T23:49:57.879633+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43f38ac01a775b0d8dcf65d3e63cf333be159f40fe373cf0a698dcb27f67461c",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-18T23:49:57.587102+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:68:5\n   |\n66 |     result = main_json(sample_input)\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n68 |     assert result[\"status\"] == \"success\"\n   |     ^^^^^^\n69 |     assert \"dot_source\" in result\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n68 |     assert result[\"status\"] == \"success\"\n69 |     assert \"dot_source\" in result\n   |     ^^^^^^\n   |\n\nE501 Line too long (94 > 88)\n  --> tests\\test_json_contracts.py:72:89\n   |\n72 | def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n   |                                                                                         ^^^^^^\n73 |     invalid = copy.deepcopy(sample_input)\n74 |     parameters = invalid.setdefault(\"parameters\", {})\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     result = main_json(invalid)\n78 |     validate_payload(result, ERROR_SCHEMA)\n79 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:32:43\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                           ^^^^^^^\n33 |\n34 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:32:52\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n33 |\n34 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_graphviz_x.py:471:89\n    |\n471 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n472 |     payload: dict[str, object] = {\n473 |         \"status\": \"failure\",\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_graphviz_x.py:504:89\n    |\n503 |     directed_value = parameters.get(\"directed\", True)\n504 |     directed = bool(directed_value) if not isinstance(directed_value, bool) else directed_value\n    |                                                                                         ^^^^^^^\n505 |     builder = GraphvizBuilder(ctx=ctx, directed=directed)\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_graphviz_x.py:530:89\n    |\n528 |         filename_obj = export_mapping.get(\"filename\")\n529 |         directory_obj = export_mapping.get(\"directory\")\n530 |         filename = filename_obj if isinstance(filename_obj, str) and filename_obj else \"graph\"\n    |                                                                                         ^^^^^^\n531 |         base = Path(directory_obj) if isinstance(directory_obj, str) and directory_obj else Path()\n532 |         target = base / filename\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_graphviz_x.py:531:89\n    |\n529 |         directory_obj = export_mapping.get(\"directory\")\n530 |         filename = filename_obj if isinstance(filename_obj, str) and filename_obj else \"graph\"\n531 |         base = Path(directory_obj) if isinstance(directory_obj, str) and directory_obj else Path()\n    |                                                                                         ^^^^^^^^^^\n532 |         target = base / filename\n533 |         svg_result = builder.to_svg(str(target))\n    |\n\nSLF001 Private member accessed: `_dot_source`\n   --> x_cls_make_graphviz_x.py:536:18\n    |\n534 |         svg_path = svg_result if svg_result else None\n535 |\n536 |     dot_source = builder._dot_source()\n    |                  ^^^^^^^^^^^^^^^^^^^\n537 |     result: dict[str, object] = {\n538 |         \"status\": \"success\",\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_graphviz_x.py:567:89\n    |\n565 | def _run_json_cli(args: Sequence[str]) -> None:\n566 |     parser = argparse.ArgumentParser(description=\"x_make_graphviz_x JSON runner\")\n567 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n568 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n569 |     parsed = parser.parse_args(args)\n    |\n\nFound 12 errors.\nNo fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:49:57.587102+00:00\nduration: 0.293s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:68:5\n   |\n66 |     result = main_json(sample_input)\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:68:5\n   |\n66 |     result = main_json(sample_input)\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:49:50.556439+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.35457229999883566,
                "ended_at": "2025-10-18T23:49:50.556439+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43f38ac01a775b0d8dcf65d3e63cf333be159f40fe373cf0a698dcb27f67461c",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-18T23:49:50.201862+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:68:5\n   |\n66 |     result = main_json(sample_input)\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n68 |     assert result[\"status\"] == \"success\"\n   |     ^^^^^^\n69 |     assert \"dot_source\" in result\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n68 |     assert result[\"status\"] == \"success\"\n69 |     assert \"dot_source\" in result\n   |     ^^^^^^\n   |\n\nE501 Line too long (94 > 88)\n  --> tests\\test_json_contracts.py:72:89\n   |\n72 | def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n   |                                                                                         ^^^^^^\n73 |     invalid = copy.deepcopy(sample_input)\n74 |     parameters = invalid.setdefault(\"parameters\", {})\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     result = main_json(invalid)\n78 |     validate_payload(result, ERROR_SCHEMA)\n79 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:32:43\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                           ^^^^^^^\n33 |\n34 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:32:52\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n33 |\n34 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_graphviz_x.py:471:89\n    |\n471 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n472 |     payload: dict[str, object] = {\n473 |         \"status\": \"failure\",\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_graphviz_x.py:504:89\n    |\n503 |     directed_value = parameters.get(\"directed\", True)\n504 |     directed = bool(directed_value) if not isinstance(directed_value, bool) else directed_value\n    |                                                                                         ^^^^^^^\n505 |     builder = GraphvizBuilder(ctx=ctx, directed=directed)\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_graphviz_x.py:530:89\n    |\n528 |         filename_obj = export_mapping.get(\"filename\")\n529 |         directory_obj = export_mapping.get(\"directory\")\n530 |         filename = filename_obj if isinstance(filename_obj, str) and filename_obj else \"graph\"\n    |                                                                                         ^^^^^^\n531 |         base = Path(directory_obj) if isinstance(directory_obj, str) and directory_obj else Path()\n532 |         target = base / filename\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_graphviz_x.py:531:89\n    |\n529 |         directory_obj = export_mapping.get(\"directory\")\n530 |         filename = filename_obj if isinstance(filename_obj, str) and filename_obj else \"graph\"\n531 |         base = Path(directory_obj) if isinstance(directory_obj, str) and directory_obj else Path()\n    |                                                                                         ^^^^^^^^^^\n532 |         target = base / filename\n533 |         svg_result = builder.to_svg(str(target))\n    |\n\nSLF001 Private member accessed: `_dot_source`\n   --> x_cls_make_graphviz_x.py:536:18\n    |\n534 |         svg_path = svg_result if svg_result else None\n535 |\n536 |     dot_source = builder._dot_source()\n    |                  ^^^^^^^^^^^^^^^^^^^\n537 |     result: dict[str, object] = {\n538 |         \"status\": \"success\",\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_graphviz_x.py:567:89\n    |\n565 | def _run_json_cli(args: Sequence[str]) -> None:\n566 |     parser = argparse.ArgumentParser(description=\"x_make_graphviz_x JSON runner\")\n567 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n568 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n569 |     parsed = parser.parse_args(args)\n    |\n\nFound 16 errors (4 fixed, 12 remaining).\nNo fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:49:50.201862+00:00\nduration: 0.355s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:68:5\n   |\n66 |     result = main_json(sample_input)\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:68:5\n   |\n66 |     result = main_json(sample_input)\n67 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 sta\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:50:13.946497+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 3.499250499997288,
                "ended_at": "2025-10-18T23:50:13.946497+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "007c0cd82cf69ebfcfdc5936391ad9a1c4fed748d5927c39241617410c2f2035",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-18T23:50:10.447251+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 4 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:10.396591+00:00\n+++ C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:13.101167+00:00\n@@ -67,11 +67,13 @@\n     result = main_json(sample_input)\n     validate_payload(result, OUTPUT_SCHEMA)\n     assert result[\"status\"] == \"success\"\n \n \n-def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n+def test_main_json_returns_error_for_invalid_payload(\n+    sample_input: dict[str, object],\n+) -> None:\n     invalid = copy.deepcopy(sample_input)\n     parameters = invalid.get(\"parameters\")\n     if isinstance(parameters, dict):\n         parameters.pop(\"output_markdown\", None)\n     result = main_json(invalid)\n--- C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\t2025-10-18 23:50:10.420918+00:00\n+++ C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\t2025-10-18 23:50:13.725160+00:00\n@@ -272,11 +272,13 @@\n \n def _coerce_table_rows(value: object) -> list[list[str]]:\n     rows: list[list[str]] = []\n     if isinstance(value, Sequence) and not isinstance(value, (str, bytes, bytearray)):\n         for entry in value:\n-            if isinstance(entry, Sequence) and not isinstance(entry, (str, bytes, bytearray)):\n+            if isinstance(entry, Sequence) and not isinstance(\n+                entry, (str, bytes, bytearray)\n+            ):\n                 rows.append([str(cell) for cell in entry])\n     return rows\n \n \n def _render_blocks(\n@@ -438,11 +440,13 @@\n     return cast(\"Mapping[str, object]\", json.load(_sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n     parser = argparse.ArgumentParser(description=\"x_make_markdown_x JSON runner\")\n-    parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n+    parser.add_argument(\n+        \"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\"\n+    )\n     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n     parsed = parser.parse_args(args)\n \n     if not (parsed.json or parsed.json_file):\n         parser.error(\"JSON input required. Use --json for stdin or --json-file <path>.\")\n@@ -518,10 +522,12 @@\n     if not maker.wkhtmltopdf_path:\n         _info(\n             \"[markdown] PDF not generated: set \"\n             f\"{XClsMakeMarkdownX.WKHTMLTOPDF_ENV_VAR} to wkhtmltopdf.exe\"\n         )\n+\n+\n if __name__ == \"__main__\":\n     _run_json_cli(_sys.argv[1:])\n \n \n x_cls_make_markdown_x = XClsMakeMarkdownX\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:50:10.447251+00:00\nduration: 3.499s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:10.396591+00:00\n+++ C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:13.101167+00:00\n@@ -67,11 +67,13 @@\n     result = main_json(sample_input)\n     validate_payload(result, OUTPUT_SCHEMA)\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 4 files would be left unchanged.",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 4 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:10.396591+00:00\n+++ C:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:13.101167+00:00\n@@ -67,11 +67,13 @@\n     result = main_json(sample_input)\n     validate_payload(result, OUTPUT_SCHEMA)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:50:10.447251+00:00\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:50:15.373191+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 1.2697533999889856,
                "ended_at": "2025-10-18T23:50:15.373191+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "007c0cd82cf69ebfcfdc5936391ad9a1c4fed748d5927c39241617410c2f2035",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-18T23:50:14.103437+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_markdown_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_markdown_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_markdown_x.py:22: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_markdown_x.py:22: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_markdown_x.py:262: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:293: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:299: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:301: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:306: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:311: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:316: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:340: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:344: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_markdown_x.py:344: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:345: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:346: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:421: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:425: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_markdown_x.py:425: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:426: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:427: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:447: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:450: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:450: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:24: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:30: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:36: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:36: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:62: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:63: error: Expression has type \"Any\"  [misc]\nFound 32 errors in 3 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:50:14.103437+00:00\nduration: 1.270s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_markdown_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_markdown_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_markdown_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_markdown_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:50:17.598755+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 2.219349599996349,
                "ended_at": "2025-10-18T23:50:17.598755+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "007c0cd82cf69ebfcfdc5936391ad9a1c4fed748d5927c39241617410c2f2035",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-18T23:50:15.379407+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:56:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:59:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n5 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:50:15.379407+00:00\nduration: 2.219s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:56:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_markdown_x\\tests\\test_json_contracts.py:56:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:50:15.379407+00:00 duration: 2.219s tool_version: pyrig\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:50:14.099433+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 0.1451191999949515,
                "ended_at": "2025-10-18T23:50:14.099433+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "007c0cd82cf69ebfcfdc5936391ad9a1c4fed748d5927c39241617410c2f2035",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-18T23:50:13.954309+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     result = main_json(sample_input)\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     assert result[\"status\"] == \"success\"\n   |     ^^^^^^\n   |\n\nE501 Line too long (94 > 88)\n  --> tests\\test_json_contracts.py:72:89\n   |\n72 | def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n   |                                                                                         ^^^^^^\n73 |     invalid = copy.deepcopy(sample_input)\n74 |     parameters = invalid.get(\"parameters\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     result = main_json(invalid)\n78 |     validate_payload(result, ERROR_SCHEMA)\n79 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_markdown_x.py:260:5\n    |\n258 |       if details:\n259 |           payload[\"details\"] = dict(details)\n260 | /     try:\n261 | |         validate_payload(payload, ERROR_SCHEMA)\n262 | |     except ValidationError:\n263 | |         pass\n    | |____________^\n264 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_markdown_x.py:277:89\n    |\n275 |     if isinstance(value, Sequence) and not isinstance(value, (str, bytes, bytearray)):\n276 |         for entry in value:\n277 |             if isinstance(entry, Sequence) and not isinstance(entry, (str, bytes, bytearray)):\n    |                                                                                         ^^^^^^\n278 |                 rows.append([str(cell) for cell in entry])\n279 |     return rows\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:278:17\n    |\n276 |         for entry in value:\n277 |             if isinstance(entry, Sequence) and not isinstance(entry, (str, bytes, bytearray)):\n278 |                 rows.append([str(cell) for cell in entry])\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n279 |     return rows\n    |\nhelp: Replace for loop with list.extend\n\nC901 `main_json` is too complex (11 > 10)\n   --> x_cls_make_markdown_x.py:331:5\n    |\n331 | def main_json(\n    |     ^^^^^^^^^\n332 |     payload: Mapping[str, object],\n333 |     *,\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_markdown_x.py:443:89\n    |\n441 | def _run_json_cli(args: Sequence[str]) -> None:\n442 |     parser = argparse.ArgumentParser(description=\"x_make_markdown_x JSON runner\")\n443 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n444 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n445 |     parsed = parser.parse_args(args)\n    |\n\nFound 8 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:50:13.954309+00:00\nduration: 0.145s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     result = main_json(sample_input)\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     result = main_json(sample_input)\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:50:10.443791+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 0.16462480000336654,
                "ended_at": "2025-10-18T23:50:10.443791+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "007c0cd82cf69ebfcfdc5936391ad9a1c4fed748d5927c39241617410c2f2035",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-18T23:50:10.279167+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     result = main_json(sample_input)\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     assert result[\"status\"] == \"success\"\n   |     ^^^^^^\n   |\n\nE501 Line too long (94 > 88)\n  --> tests\\test_json_contracts.py:72:89\n   |\n72 | def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n   |                                                                                         ^^^^^^\n73 |     invalid = copy.deepcopy(sample_input)\n74 |     parameters = invalid.get(\"parameters\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     result = main_json(invalid)\n78 |     validate_payload(result, ERROR_SCHEMA)\n79 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_markdown_x.py:260:5\n    |\n258 |       if details:\n259 |           payload[\"details\"] = dict(details)\n260 | /     try:\n261 | |         validate_payload(payload, ERROR_SCHEMA)\n262 | |     except ValidationError:\n263 | |         pass\n    | |____________^\n264 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_markdown_x.py:277:89\n    |\n275 |     if isinstance(value, Sequence) and not isinstance(value, (str, bytes, bytearray)):\n276 |         for entry in value:\n277 |             if isinstance(entry, Sequence) and not isinstance(entry, (str, bytes, bytearray)):\n    |                                                                                         ^^^^^^\n278 |                 rows.append([str(cell) for cell in entry])\n279 |     return rows\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:278:17\n    |\n276 |         for entry in value:\n277 |             if isinstance(entry, Sequence) and not isinstance(entry, (str, bytes, bytearray)):\n278 |                 rows.append([str(cell) for cell in entry])\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n279 |     return rows\n    |\nhelp: Replace for loop with list.extend\n\nC901 `main_json` is too complex (11 > 10)\n   --> x_cls_make_markdown_x.py:331:5\n    |\n331 | def main_json(\n    |     ^^^^^^^^^\n332 |     payload: Mapping[str, object],\n333 |     *,\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_markdown_x.py:443:89\n    |\n441 | def _run_json_cli(args: Sequence[str]) -> None:\n442 |     parser = argparse.ArgumentParser(description=\"x_make_markdown_x JSON runner\")\n443 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n444 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n445 |     parsed = parser.parse_args(args)\n    |\n\nFound 12 errors (4 fixed, 8 remaining).\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:50:10.279167+00:00\nduration: 0.165s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     result = main_json(sample_input)\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:69:5\n   |\n67 |     result = main_json(sample_input)\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 sta\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:50:32.891903+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 5.988526900007855,
                "ended_at": "2025-10-18T23:50:32.891903+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "c63f34b6c21a388b14f351a3b16e505d9d97c7a1309a4eeea59cd3fb45b3400c",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-18T23:50:26.903395+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-18 23:50:26.858282+00:00\n+++ C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-18 23:50:32.309847+00:00\n@@ -90,16 +90,11 @@\n \n SCHEMA_VERSION = \"x_make_mermaid_x.run/1.0\"\n \n \n def _timestamp() -> str:\n-    return (\n-        datetime.now(UTC)\n-        .replace(microsecond=0)\n-        .isoformat()\n-        .replace(\"+00:00\", \"Z\")\n-    )\n+    return datetime.now(UTC).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\")\n \n \n def _ensure_trailing_newline(text: str) -> str:\n     return text if text.endswith(\"\\n\") else text + \"\\n\"\n \n@@ -164,16 +159,16 @@\n     comments: list[str] = field(default_factory=_new_str_list)\n \n \n def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n     diagram_obj = document.get(\"diagram\")\n-    diagram = str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n+    diagram = (\n+        str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n+    )\n     direction_obj = document.get(\"direction\")\n     direction = (\n-        str(direction_obj)\n-        if isinstance(direction_obj, str) and direction_obj\n-        else \"LR\"\n+        str(direction_obj) if isinstance(direction_obj, str) and direction_obj else \"LR\"\n     )\n     title_obj = document.get(\"title\")\n     title = str(title_obj) if isinstance(title_obj, str) and title_obj else None\n     date_format_obj = document.get(\"date_format\")\n     date_format = (\n@@ -298,11 +293,13 @@\n     for line in lines:\n         if isinstance(line, str) and line:\n             builder.raw(line)\n \n \n-def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n+def _apply_instruction(\n+    builder: MermaidBuilder, instr_type: str, payload: object\n+) -> None:\n     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n         builder.raw(payload)\n         return\n     if not isinstance(payload, Mapping):\n         return\n@@ -340,11 +337,15 @@\n             builder.deactivate(pid)\n     elif instr_type == \"block\":\n         kind = payload.get(\"kind\")\n         title = payload.get(\"title\")\n         body = payload.get(\"body\")\n-        if isinstance(kind, str) and isinstance(title, str) and isinstance(body, Sequence):\n+        if (\n+            isinstance(kind, str)\n+            and isinstance(title, str)\n+            and isinstance(body, Sequence)\n+        ):\n             lines = [str(entry) for entry in body]\n             builder.block(kind, title, lines)\n     elif instr_type == \"gantt_section\":\n         name = payload.get(\"name\")\n         if isinstance(name, str):\n@@ -360,11 +361,15 @@\n             builder.raw(f\"section {_esc(name)}\")\n     elif instr_type == \"journey_step\":\n         text = payload.get(\"text\")\n         score = payload.get(\"score\")\n         actor = payload.get(\"actor\")\n-        if isinstance(text, str) and isinstance(score, (int, float)) and isinstance(actor, str):\n+        if (\n+            isinstance(text, str)\n+            and isinstance(score, (int, float))\n+            and isinstance(actor, str)\n+        ):\n             builder.raw(f\"  {_esc(text)}: {float(score)}, {_esc(actor)}\")\n     elif instr_type == \"pie_slice\":\n         label = payload.get(\"label\")\n         value = payload.get(\"value\")\n         if isinstance(label, str) and isinstance(value, (int, float)):\n@@ -397,11 +402,15 @@\n             builder.mindmap_node(nodes)\n     elif instr_type == \"req\":\n         kind = payload.get(\"kind\")\n         ident = payload.get(\"id\")\n         attrs = payload.get(\"attributes\")\n-        if isinstance(kind, str) and isinstance(ident, str) and isinstance(attrs, Mapping):\n+        if (\n+            isinstance(kind, str)\n+            and isinstance(ident, str)\n+            and isinstance(attrs, Mapping)\n+        ):\n             builder.req(kind, ident, {str(k): str(v) for k, v in attrs.items()})\n     elif instr_type == \"req_link\":\n         a = payload.get(\"source\")\n         op = payload.get(\"operator\")\n         b = payload.get(\"target\")\n@@ -415,11 +424,15 @@\n             builder.quadrant(idx, name)\n     elif instr_type == \"quadrant_point\":\n         label = payload.get(\"label\")\n         x = payload.get(\"x\")\n         y = payload.get(\"y\")\n-        if isinstance(label, str) and isinstance(x, (int, float)) and isinstance(y, (int, float)):\n+        if (\n+            isinstance(label, str)\n+            and isinstance(x, (int, float))\n+            and isinstance(y, (int, float))\n+        ):\n             builder.quad_point(label, float(x), float(y))\n \n \n def _apply_instructions(builder: MermaidBuilder, instructions: object) -> None:\n     if not isinstance(instructions, Sequence):\n@@ -1008,11 +1021,13 @@\n     m.save(\"example.mmd\")\n     svg = m.to_svg(\"example.mmd\", \"example.svg\")\n     return svg or \"example.mmd\"\n \n \n-def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n+def main_json(\n+    payload: Mapping[str, object], *, ctx: object | None = None\n+) -> dict[str, object]:\n     try:\n         validate_payload(payload, INPUT_SCHEMA)\n     except ValidationError as exc:\n         return _failure_payload(\n             \"input payload failed validation\",\n@@ -1034,23 +1049,29 @@\n         )\n     output_mermaid_path = Path(output_mermaid_obj)\n \n     export_svg_obj = parameters.get(\"export_svg\", False)\n     export_svg = (\n-        export_svg_obj\n-        if isinstance(export_svg_obj, bool)\n-        else bool(export_svg_obj)\n+        export_svg_obj if isinstance(export_svg_obj, bool) else bool(export_svg_obj)\n     )\n     output_svg_obj = parameters.get(\"output_svg\")\n-    output_svg = output_svg_obj if isinstance(output_svg_obj, str) and output_svg_obj else None\n+    output_svg = (\n+        output_svg_obj if isinstance(output_svg_obj, str) and output_svg_obj else None\n+    )\n     mermaid_cli_obj = parameters.get(\"mermaid_cli_path\")\n     mermaid_cli_path = (\n-        mermaid_cli_obj if isinstance(mermaid_cli_obj, str) and mermaid_cli_obj else None\n+        mermaid_cli_obj\n+        if isinstance(mermaid_cli_obj, str) and mermaid_cli_obj\n+        else None\n     )\n \n     document_obj = parameters.get(\"document\")\n-    document = cast(\"Mapping[str, object]\", document_obj) if isinstance(document_obj, Mapping) else None\n+    document = (\n+        cast(\"Mapping[str, object]\", document_obj)\n+        if isinstance(document_obj, Mapping)\n+        else None\n+    )\n     source_obj = parameters.get(\"source\")\n     explicit_source = source_obj if isinstance(source_obj, str) and source_obj else None\n \n     builder: MermaidBuilder | None = None\n     summary_data: dict[str, object] = {}\n@@ -1060,19 +1081,23 @@\n         if document is not None:\n             builder = MermaidBuilder(ctx=ctx)\n             summary_data = _apply_document(builder, document)\n             document_source = builder.source()\n \n-        mermaid_source = explicit_source if explicit_source is not None else document_source\n+        mermaid_source = (\n+            explicit_source if explicit_source is not None else document_source\n+        )\n         if mermaid_source is None:\n             return _failure_payload(\n                 \"no Mermaid document or source provided\",\n                 details={\"reason\": \"document and source were empty\"},\n             )\n \n         mermaid_source = _ensure_trailing_newline(mermaid_source)\n-        source_path_str, source_bytes = _write_mermaid_source(output_mermaid_path, mermaid_source)\n+        source_path_str, source_bytes = _write_mermaid_source(\n+            output_mermaid_path, mermaid_source\n+        )\n \n         messages: list[str] = []\n         mermaid_artifact: dict[str, object] = {\n             \"source_path\": source_path_str,\n             \"source_bytes\": source_bytes,\n@@ -1135,11 +1160,13 @@\n     return cast(\"Mapping[str, object]\", json.load(_sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n     parser = argparse.ArgumentParser(description=\"x_make_mermaid_x JSON runner\")\n-    parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n+    parser.add_argument(\n+        \"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\"\n+    )\n     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n     parsed = parser.parse_args(args)\n \n     if not (parsed.json or parsed.json_file):\n         parser.error(\"JSON input required. Use --json for stdin or --json-file <path>.\")\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:50:26.903395+00:00\nduration: 5.989s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-18 23:50:26.858282+00:00\n+++ C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-18 23:50:32.309847+00:00\n@@ -90,16 +90,11 @@\n \n SCHEMA_VERSION = \"x_make_mermaid_x.run/1.0\"\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-18 23:50:26.858282+00:00\n+++ C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-18 23:50:32.309847+00:00\n@@ -90,16 +90,11 @@\n \n SCHEMA_VERSION = \"x_make_mermaid_x.run/1.0\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:50:26.903395+00:00 d\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:50:36.055281+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 2.9847659000079148,
                "ended_at": "2025-10-18T23:50:36.055281+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "c63f34b6c21a388b14f351a3b16e505d9d97c7a1309a4eeea59cd3fb45b3400c",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-18T23:50:33.070512+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_mermaid_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_mermaid_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_mermaid_x.py:22: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_mermaid_x.py:22: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_mermaid_x.py:120: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:454: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1016: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1020: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1020: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1021: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1022: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1118: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1122: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1122: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1123: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1124: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1128: error: Incompatible return value type (got \"dict[str, Collection[str]]\", expected \"dict[str, object]\")  [return-value]\nx_cls_make_mermaid_x.py:1128: note: \"dict\" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance\nx_cls_make_mermaid_x.py:1128: note: Consider using \"Mapping\" instead, which is covariant in the value type\nx_cls_make_mermaid_x.py:1128: note: Perhaps you need a type annotation for \"result\"? Suggestion: \"dict[str, object]\"\nx_cls_make_mermaid_x.py:1144: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1147: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1147: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:24: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:30: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:36: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:36: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:62: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:63: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:71: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:73: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:74: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:78: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:80: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:108: error: Expression type contains \"Any\" (has type \"Callable[[str, NamedArg(Path, 'output_dir'), NamedArg(str, 'stem'), DefaultNamedArg(str | None, 'mermaid_cli_path'), DefaultNamedArg(Any, 'runner'), DefaultNamedArg(Any, 'extra_args')], ExportResult]\")  [misc]\ntests\\test_json_contracts.py:111: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:116: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:116: note: Error code \"misc\" not covered by \"type: ignore\" comment\ntests\\test_json_contracts.py:118: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:118: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:119: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:119: note: Error code \"misc\" not covered by \"type: ignore\" comment\ntests\\test_json_contracts.py:120: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:122: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:122: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:123: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:123: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:124: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:124: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:125: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:125: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:140: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:140: note: Error code \"misc\" not covered by \"type: ignore\" comment\ntests\\test_json_contracts.py:142: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:142: error: Expression has type \"Any\"  [misc]\nFound 51 errors in 3 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:50:33.070512+00:00\nduration: 2.985s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_mermaid_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_mermaid_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_mermaid_x.py:22: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_mermaid_x.py:22: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-an\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:50:42.220056+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 6.159296700003324,
                "ended_at": "2025-10-18T23:50:42.220056+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "c63f34b6c21a388b14f351a3b16e505d9d97c7a1309a4eeea59cd3fb45b3400c",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-18T23:50:36.060738+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:56:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:59:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:118:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:122:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:123:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:124:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:125:51 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:142:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n11 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:50:36.060738+00:00\nduration: 6.159s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:56:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_mermaid_x\\tests\\test_json_contracts.py:56:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:50:36.060738+00:00 duration: 6.159s tool_version: pyright\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:50:33.066046+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 0.1659689999942202,
                "ended_at": "2025-10-18T23:50:33.066046+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "c63f34b6c21a388b14f351a3b16e505d9d97c7a1309a4eeea59cd3fb45b3400c",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-18T23:50:32.900071+00:00",
                "stderr": "",
                "stdout": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:80:9\n   |\n78 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n79 |\n80 |     def fake_export(\n   |         ^^^^^^^^^^^\n81 |         mermaid_source: str,\n82 |         *,\n   |\n\nANN001 Missing type annotation for function argument `runner`\n  --> tests\\test_json_contracts.py:86:9\n   |\n84 |         stem: str,\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n   |         ^^^^^^\n87 |         extra_args=None,\n88 |     ) -> ExportResult:\n   |\n\nARG001 Unused function argument: `runner`\n  --> tests\\test_json_contracts.py:86:9\n   |\n84 |         stem: str,\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n   |         ^^^^^^\n87 |         extra_args=None,\n88 |     ) -> ExportResult:\n   |\n\nANN001 Missing type annotation for function argument `extra_args`\n  --> tests\\test_json_contracts.py:87:9\n   |\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n87 |         extra_args=None,\n   |         ^^^^^^^^^^\n88 |     ) -> ExportResult:\n89 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nARG001 Unused function argument: `extra_args`\n  --> tests\\test_json_contracts.py:87:9\n   |\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n87 |         extra_args=None,\n   |         ^^^^^^^^^^\n88 |     ) -> ExportResult:\n89 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n113 |     validate_payload(result, OUTPUT_SCHEMA)\n114 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n115 |     artifact = result[\"mermaid\"]\n116 |     mermaid_path = Path(artifact[\"source_path\"])  # type: ignore[index]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:117:5\n    |\n115 |     artifact = result[\"mermaid\"]\n116 |     mermaid_path = Path(artifact[\"source_path\"])  # type: ignore[index]\n117 |     assert mermaid_path.exists()\n    |     ^^^^^^\n118 |     assert artifact[\"source_bytes\"] > 0\n119 |     svg_info = artifact[\"svg\"]  # type: ignore[index]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:118:5\n    |\n116 |     mermaid_path = Path(artifact[\"source_path\"])  # type: ignore[index]\n117 |     assert mermaid_path.exists()\n118 |     assert artifact[\"source_bytes\"] > 0\n    |     ^^^^^^\n119 |     svg_info = artifact[\"svg\"]  # type: ignore[index]\n120 |     assert svg_info[\"succeeded\"] is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:120:5\n    |\n118 |     assert artifact[\"source_bytes\"] > 0\n119 |     svg_info = artifact[\"svg\"]  # type: ignore[index]\n120 |     assert svg_info[\"succeeded\"] is True\n    |     ^^^^^^\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     assert svg_info[\"succeeded\"] is True\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n    |     ^^^^^^\n123 |     assert summary[\"nodes\"] == 2\n124 |     assert summary[\"edges\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n123 |     assert summary[\"nodes\"] == 2\n    |     ^^^^^^\n124 |     assert summary[\"edges\"] == 1\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:123:32\n    |\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n123 |     assert summary[\"nodes\"] == 2\n    |                                ^\n124 |     assert summary[\"edges\"] == 1\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n123 |     assert summary[\"nodes\"] == 2\n124 |     assert summary[\"edges\"] == 1\n    |     ^^^^^^\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:125:5\n    |\n123 |     assert summary[\"nodes\"] == 2\n124 |     assert summary[\"edges\"] == 1\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n139 |     validate_payload(result, OUTPUT_SCHEMA)\n140 |     mermaid_path = Path(result[\"mermaid\"][\"source_path\"])  # type: ignore[index]\n141 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |     ^^^^^^\n142 |     assert result[\"summary\"][\"export_svg\"] is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n140 |     mermaid_path = Path(result[\"mermaid\"][\"source_path\"])  # type: ignore[index]\n141 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n142 |     assert result[\"summary\"][\"export_svg\"] is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:151:5\n    |\n150 |     validate_payload(result, ERROR_SCHEMA)\n151 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n152 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:152:5\n    |\n150 |     validate_payload(result, ERROR_SCHEMA)\n151 |     assert result[\"status\"] == \"failure\"\n152 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_mermaid_x.py:118:5\n    |\n116 |       if details:\n117 |           payload[\"details\"] = dict(details)\n118 | /     try:\n119 | |         validate_payload(payload, ERROR_SCHEMA)\n120 | |     except ValidationError:\n121 | |         pass\n    | |____________^\n122 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `_set_diagram` is too complex (20 > 10)\n   --> x_cls_make_mermaid_x.py:167:5\n    |\n167 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n168 |     diagram_obj = document.get(\"diagram\")\n169 |     diagram = str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n    |\n\nPLR0912 Too many branches (20 > 12)\n   --> x_cls_make_mermaid_x.py:167:5\n    |\n167 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n168 |     diagram_obj = document.get(\"diagram\")\n169 |     diagram = str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_mermaid_x.py:169:89\n    |\n167 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n168 |     diagram_obj = document.get(\"diagram\")\n169 |     diagram = str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n    |                                                                                         ^\n170 |     direction_obj = document.get(\"direction\")\n171 |     direction = (\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:216:9\n    |\n214 |         builder.quadrants(title)\n215 |     elif diagram == _SANKEY:\n216 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n    |         ^^^^^^^^^^^^\n217 |     elif diagram == _XY:\n218 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:218:9\n    |\n216 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n217 |     elif diagram == _XY:\n218 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |         ^^^^^^^^^^^^\n219 |     elif diagram == _BLOCK:\n220 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:220:9\n    |\n218 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n219 |     elif diagram == _BLOCK:\n220 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |         ^^^^^^^^^^^^\n221 |     else:\n222 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:222:9\n    |\n220 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n221 |     else:\n222 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |         ^^^^^^^^^^^^\n223 |         if title:\n224 |             builder.raw(f\"title {_esc(title)}\")\n    |\n\nC901 `_apply_instruction` is too complex (48 > 10)\n   --> x_cls_make_mermaid_x.py:303:5\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |     ^^^^^^^^^^^^^^^^^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nPLR0912 Too many branches (47 > 12)\n   --> x_cls_make_mermaid_x.py:303:5\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |     ^^^^^^^^^^^^^^^^^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nPLR0915 Too many statements (115 > 50)\n   --> x_cls_make_mermaid_x.py:303:5\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |     ^^^^^^^^^^^^^^^^^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nE501 Line too long (90 > 88)\n   --> x_cls_make_mermaid_x.py:303:89\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |                                                                                         ^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> x_cls_make_mermaid_x.py:326:63\n    |\n324 |         text = payload.get(\"text\")\n325 |         if isinstance(text, str):\n326 |             if isinstance(who, (list, tuple)) and len(who) == 2:\n    |                                                               ^\n327 |                 first, second = who\n328 |                 if isinstance(first, str) and isinstance(second, str):\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_mermaid_x.py:345:89\n    |\n343 |         title = payload.get(\"title\")\n344 |         body = payload.get(\"body\")\n345 |         if isinstance(kind, str) and isinstance(title, str) and isinstance(body, Sequence):\n    |                                                                                         ^^^\n346 |             lines = [str(entry) for entry in body]\n347 |             builder.block(kind, title, lines)\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_mermaid_x.py:365:89\n    |\n363 |         score = payload.get(\"score\")\n364 |         actor = payload.get(\"actor\")\n365 |         if isinstance(text, str) and isinstance(score, (int, float)) and isinstance(actor, str):\n    |                                                                                         ^^^^^^^^\n366 |             builder.raw(f\"  {_esc(text)}: {float(score)}, {_esc(actor)}\")\n367 |     elif instr_type == \"pie_slice\":\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_mermaid_x.py:402:89\n    |\n400 |         ident = payload.get(\"id\")\n401 |         attrs = payload.get(\"attributes\")\n402 |         if isinstance(kind, str) and isinstance(ident, str) and isinstance(attrs, Mapping):\n    |                                                                                         ^^^\n403 |             builder.req(kind, ident, {str(k): str(v) for k, v in attrs.items()})\n404 |     elif instr_type == \"req_link\":\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_mermaid_x.py:420:89\n    |\n418 |         x = payload.get(\"x\")\n419 |         y = payload.get(\"y\")\n420 |         if isinstance(label, str) and isinstance(x, (int, float)) and isinstance(y, (int, float)):\n    |                                                                                         ^^^^^^^^^^\n421 |             builder.quad_point(label, float(x), float(y))\n    |\n\nSLF001 Private member accessed: `_runner`\n   --> x_cls_make_mermaid_x.py:474:16\n    |\n472 |         stem=output_path.stem,\n473 |         mermaid_cli_path=mermaid_cli_path,\n474 |         runner=builder._runner if builder else None,\n    |                ^^^^^^^^^^^^^^^\n475 |     )\n476 |     if export.succeeded:\n    |\n\nC901 `main_json` is too complex (11 > 10)\n    --> x_cls_make_mermaid_x.py:1013:5\n     |\n1013 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1014 |     try:\n1015 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nE501 Line too long (96 > 88)\n    --> x_cls_make_mermaid_x.py:1013:89\n     |\n1013 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |                                                                                         ^^^^^^^^\n1014 |     try:\n1015 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_make_mermaid_x.py:1044:89\n     |\n1042 |     )\n1043 |     output_svg_obj = parameters.get(\"output_svg\")\n1044 |     output_svg = output_svg_obj if isinstance(output_svg_obj, str) and output_svg_obj else None\n     |                                                                                         ^^^^^^^\n1045 |     mermaid_cli_obj = parameters.get(\"mermaid_cli_path\")\n1046 |     mermaid_cli_path = (\n     |\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_mermaid_x.py:1047:89\n     |\n1045 |     mermaid_cli_obj = parameters.get(\"mermaid_cli_path\")\n1046 |     mermaid_cli_path = (\n1047 |         mermaid_cli_obj if isinstance(mermaid_cli_obj, str) and mermaid_cli_obj else None\n     |                                                                                         ^\n1048 |     )\n     |\n\nE501 Line too long (104 > 88)\n    --> x_cls_make_mermaid_x.py:1051:89\n     |\n1050 |     document_obj = parameters.get(\"document\")\n1051 |     document = cast(\"Mapping[str, object]\", document_obj) if isinstance(document_obj, Mapping) else None\n     |                                                                                         ^^^^^^^^^^^^^^^^\n1052 |     source_obj = parameters.get(\"source\")\n1053 |     explicit_source = source_obj if isinstance(source_obj, str) and source_obj else None\n     |\n\nE501 Line too long (92 > 88)\n    --> x_cls_make_mermaid_x.py:1065:89\n     |\n1063 |             document_source = builder.source()\n1064 |\n1065 |         mermaid_source = explicit_source if explicit_source is not None else document_source\n     |                                                                                         ^^^^\n1066 |         if mermaid_source is None:\n1067 |             return _failure_payload(\n     |\n\nE501 Line too long (98 > 88)\n    --> x_cls_make_mermaid_x.py:1073:89\n     |\n1072 |         mermaid_source = _ensure_trailing_newline(mermaid_source)\n1073 |         source_path_str, source_bytes = _write_mermaid_source(output_mermaid_path, mermaid_source)\n     |                                                                                         ^^^^^^^^^^\n1074 |\n1075 |         messages: list[str] = []\n     |\n\nE501 Line too long (91 > 88)\n    --> x_cls_make_mermaid_x.py:1140:89\n     |\n1138 | def _run_json_cli(args: Sequence[str]) -> None:\n1139 |     parser = argparse.ArgumentParser(description=\"x_make_mermaid_x JSON runner\")\n1140 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n     |                                                                                         ^^^\n1141 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n1142 |     parsed = parser.parse_args(args)\n     |\n\nFound 44 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:50:32.900071+00:00\nduration: 0.166s\ntool_version: ruff 0.14.1\nstdout:\nPLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:80:9\n   |\n78 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n79 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:80:9\n   |\n78 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n79 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_a\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:50:26.896790+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 0.4345505000092089,
                "ended_at": "2025-10-18T23:50:26.896790+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "c63f34b6c21a388b14f351a3b16e505d9d97c7a1309a4eeea59cd3fb45b3400c",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-18T23:50:26.462241+00:00",
                "stderr": "",
                "stdout": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:80:9\n   |\n78 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n79 |\n80 |     def fake_export(\n   |         ^^^^^^^^^^^\n81 |         mermaid_source: str,\n82 |         *,\n   |\n\nANN001 Missing type annotation for function argument `runner`\n  --> tests\\test_json_contracts.py:86:9\n   |\n84 |         stem: str,\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n   |         ^^^^^^\n87 |         extra_args=None,\n88 |     ) -> ExportResult:\n   |\n\nARG001 Unused function argument: `runner`\n  --> tests\\test_json_contracts.py:86:9\n   |\n84 |         stem: str,\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n   |         ^^^^^^\n87 |         extra_args=None,\n88 |     ) -> ExportResult:\n   |\n\nANN001 Missing type annotation for function argument `extra_args`\n  --> tests\\test_json_contracts.py:87:9\n   |\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n87 |         extra_args=None,\n   |         ^^^^^^^^^^\n88 |     ) -> ExportResult:\n89 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nARG001 Unused function argument: `extra_args`\n  --> tests\\test_json_contracts.py:87:9\n   |\n85 |         mermaid_cli_path: str | None = None,\n86 |         runner=None,\n87 |         extra_args=None,\n   |         ^^^^^^^^^^\n88 |     ) -> ExportResult:\n89 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n113 |     validate_payload(result, OUTPUT_SCHEMA)\n114 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n115 |     artifact = result[\"mermaid\"]\n116 |     mermaid_path = Path(artifact[\"source_path\"])  # type: ignore[index]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:117:5\n    |\n115 |     artifact = result[\"mermaid\"]\n116 |     mermaid_path = Path(artifact[\"source_path\"])  # type: ignore[index]\n117 |     assert mermaid_path.exists()\n    |     ^^^^^^\n118 |     assert artifact[\"source_bytes\"] > 0\n119 |     svg_info = artifact[\"svg\"]  # type: ignore[index]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:118:5\n    |\n116 |     mermaid_path = Path(artifact[\"source_path\"])  # type: ignore[index]\n117 |     assert mermaid_path.exists()\n118 |     assert artifact[\"source_bytes\"] > 0\n    |     ^^^^^^\n119 |     svg_info = artifact[\"svg\"]  # type: ignore[index]\n120 |     assert svg_info[\"succeeded\"] is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:120:5\n    |\n118 |     assert artifact[\"source_bytes\"] > 0\n119 |     svg_info = artifact[\"svg\"]  # type: ignore[index]\n120 |     assert svg_info[\"succeeded\"] is True\n    |     ^^^^^^\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     assert svg_info[\"succeeded\"] is True\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n    |     ^^^^^^\n123 |     assert summary[\"nodes\"] == 2\n124 |     assert summary[\"edges\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n123 |     assert summary[\"nodes\"] == 2\n    |     ^^^^^^\n124 |     assert summary[\"edges\"] == 1\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:123:32\n    |\n121 |     summary = result[\"summary\"]\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n123 |     assert summary[\"nodes\"] == 2\n    |                                ^\n124 |     assert summary[\"edges\"] == 1\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     assert summary[\"diagram\"] == \"flowchart\"\n123 |     assert summary[\"nodes\"] == 2\n124 |     assert summary[\"edges\"] == 1\n    |     ^^^^^^\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:125:5\n    |\n123 |     assert summary[\"nodes\"] == 2\n124 |     assert summary[\"edges\"] == 1\n125 |     assert \"Mermaid CLI executed successfully\" in result[\"messages\"][0]\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n139 |     validate_payload(result, OUTPUT_SCHEMA)\n140 |     mermaid_path = Path(result[\"mermaid\"][\"source_path\"])  # type: ignore[index]\n141 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |     ^^^^^^\n142 |     assert result[\"summary\"][\"export_svg\"] is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n140 |     mermaid_path = Path(result[\"mermaid\"][\"source_path\"])  # type: ignore[index]\n141 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n142 |     assert result[\"summary\"][\"export_svg\"] is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:151:5\n    |\n150 |     validate_payload(result, ERROR_SCHEMA)\n151 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n152 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:152:5\n    |\n150 |     validate_payload(result, ERROR_SCHEMA)\n151 |     assert result[\"status\"] == \"failure\"\n152 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_mermaid_x.py:118:5\n    |\n116 |       if details:\n117 |           payload[\"details\"] = dict(details)\n118 | /     try:\n119 | |         validate_payload(payload, ERROR_SCHEMA)\n120 | |     except ValidationError:\n121 | |         pass\n    | |____________^\n122 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `_set_diagram` is too complex (20 > 10)\n   --> x_cls_make_mermaid_x.py:167:5\n    |\n167 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n168 |     diagram_obj = document.get(\"diagram\")\n169 |     diagram = str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n    |\n\nPLR0912 Too many branches (20 > 12)\n   --> x_cls_make_mermaid_x.py:167:5\n    |\n167 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n168 |     diagram_obj = document.get(\"diagram\")\n169 |     diagram = str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_mermaid_x.py:169:89\n    |\n167 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n168 |     diagram_obj = document.get(\"diagram\")\n169 |     diagram = str(diagram_obj) if isinstance(diagram_obj, str) and diagram_obj else _FLOW\n    |                                                                                         ^\n170 |     direction_obj = document.get(\"direction\")\n171 |     direction = (\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:216:9\n    |\n214 |         builder.quadrants(title)\n215 |     elif diagram == _SANKEY:\n216 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n    |         ^^^^^^^^^^^^\n217 |     elif diagram == _XY:\n218 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:218:9\n    |\n216 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n217 |     elif diagram == _XY:\n218 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |         ^^^^^^^^^^^^\n219 |     elif diagram == _BLOCK:\n220 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:220:9\n    |\n218 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n219 |     elif diagram == _BLOCK:\n220 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |         ^^^^^^^^^^^^\n221 |     else:\n222 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:222:9\n    |\n220 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n221 |     else:\n222 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |         ^^^^^^^^^^^^\n223 |         if title:\n224 |             builder.raw(f\"title {_esc(title)}\")\n    |\n\nC901 `_apply_instruction` is too complex (48 > 10)\n   --> x_cls_make_mermaid_x.py:303:5\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |     ^^^^^^^^^^^^^^^^^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nPLR0912 Too many branches (47 > 12)\n   --> x_cls_make_mermaid_x.py:303:5\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |     ^^^^^^^^^^^^^^^^^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nPLR0915 Too many statements (115 > 50)\n   --> x_cls_make_mermaid_x.py:303:5\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |     ^^^^^^^^^^^^^^^^^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nE501 Line too long (90 > 88)\n   --> x_cls_make_mermaid_x.py:303:89\n    |\n303 | def _apply_instruction(builder: MermaidBuilder, instr_type: str, payload: object) -> None:\n    |                                                                                         ^^\n304 |     if instr_type in {\"line\", \"raw\"} and isinstance(payload, str):\n305 |         builder.raw(payload)\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> x_cls_make_mermaid_x.py:326:63\n    |\n324 |         text = payload.get(\"text\")\n325 |         if isinstance(text, str):\n326 |             if isinstance(who, (list, tuple)) and len(who) == 2:\n    |                                                               ^\n327 |                 first, second = who\n328 |                 if isinstance(first, str) and isinstance(second, str):\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_mermaid_x.py:345:89\n    |\n343 |         title = payload.get(\"title\")\n344 |         body = payload.get(\"body\")\n345 |         if isinstance(kind, str) and isinstance(title, str) and isinstance(body, Sequence):\n    |                                                                                         ^^^\n346 |             lines = [str(entry) for entry in body]\n347 |             builder.block(kind, title, lines)\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_mermaid_x.py:365:89\n    |\n363 |         score = payload.get(\"score\")\n364 |         actor = payload.get(\"actor\")\n365 |         if isinstance(text, str) and isinstance(score, (int, float)) and isinstance(actor, str):\n    |                                                                                         ^^^^^^^^\n366 |             builder.raw(f\"  {_esc(text)}: {float(score)}, {_esc(actor)}\")\n367 |     elif instr_type == \"pie_slice\":\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_mermaid_x.py:402:89\n    |\n400 |         ident = payload.get(\"id\")\n401 |         attrs = payload.get(\"attributes\")\n402 |         if isinstance(kind, str) and isinstance(ident, str) and isinstance(attrs, Mapping):\n    |                                                                                         ^^^\n403 |             builder.req(kind, ident, {str(k): str(v) for k, v in attrs.items()})\n404 |     elif instr_type == \"req_link\":\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_mermaid_x.py:420:89\n    |\n418 |         x = payload.get(\"x\")\n419 |         y = payload.get(\"y\")\n420 |         if isinstance(label, str) and isinstance(x, (int, float)) and isinstance(y, (int, float)):\n    |                                                                                         ^^^^^^^^^^\n421 |             builder.quad_point(label, float(x), float(y))\n    |\n\nSLF001 Private member accessed: `_runner`\n   --> x_cls_make_mermaid_x.py:474:16\n    |\n472 |         stem=output_path.stem,\n473 |         mermaid_cli_path=mermaid_cli_path,\n474 |         runner=builder._runner if builder else None,\n    |                ^^^^^^^^^^^^^^^\n475 |     )\n476 |     if export.succeeded:\n    |\n\nC901 `main_json` is too complex (11 > 10)\n    --> x_cls_make_mermaid_x.py:1013:5\n     |\n1013 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |     ^^^^^^^^^\n1014 |     try:\n1015 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nE501 Line too long (96 > 88)\n    --> x_cls_make_mermaid_x.py:1013:89\n     |\n1013 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n     |                                                                                         ^^^^^^^^\n1014 |     try:\n1015 |         validate_payload(payload, INPUT_SCHEMA)\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_make_mermaid_x.py:1044:89\n     |\n1042 |     )\n1043 |     output_svg_obj = parameters.get(\"output_svg\")\n1044 |     output_svg = output_svg_obj if isinstance(output_svg_obj, str) and output_svg_obj else None\n     |                                                                                         ^^^^^^^\n1045 |     mermaid_cli_obj = parameters.get(\"mermaid_cli_path\")\n1046 |     mermaid_cli_path = (\n     |\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_mermaid_x.py:1047:89\n     |\n1045 |     mermaid_cli_obj = parameters.get(\"mermaid_cli_path\")\n1046 |     mermaid_cli_path = (\n1047 |         mermaid_cli_obj if isinstance(mermaid_cli_obj, str) and mermaid_cli_obj else None\n     |                                                                                         ^\n1048 |     )\n     |\n\nE501 Line too long (104 > 88)\n    --> x_cls_make_mermaid_x.py:1051:89\n     |\n1050 |     document_obj = parameters.get(\"document\")\n1051 |     document = cast(\"Mapping[str, object]\", document_obj) if isinstance(document_obj, Mapping) else None\n     |                                                                                         ^^^^^^^^^^^^^^^^\n1052 |     source_obj = parameters.get(\"source\")\n1053 |     explicit_source = source_obj if isinstance(source_obj, str) and source_obj else None\n     |\n\nE501 Line too long (92 > 88)\n    --> x_cls_make_mermaid_x.py:1065:89\n     |\n1063 |             document_source = builder.source()\n1064 |\n1065 |         mermaid_source = explicit_source if explicit_source is not None else document_source\n     |                                                                                         ^^^^\n1066 |         if mermaid_source is None:\n1067 |             return _failure_payload(\n     |\n\nE501 Line too long (98 > 88)\n    --> x_cls_make_mermaid_x.py:1073:89\n     |\n1072 |         mermaid_source = _ensure_trailing_newline(mermaid_source)\n1073 |         source_path_str, source_bytes = _write_mermaid_source(output_mermaid_path, mermaid_source)\n     |                                                                                         ^^^^^^^^^^\n1074 |\n1075 |         messages: list[str] = []\n     |\n\nE501 Line too long (91 > 88)\n    --> x_cls_make_mermaid_x.py:1140:89\n     |\n1138 | def _run_json_cli(args: Sequence[str]) -> None:\n1139 |     parser = argparse.ArgumentParser(description=\"x_make_mermaid_x JSON runner\")\n1140 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n     |                                                                                         ^^^\n1141 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n1142 |     parsed = parser.parse_args(args)\n     |\n\nFound 51 errors (7 fixed, 44 remaining).\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:50:26.462241+00:00\nduration: 0.435s\ntool_version: ruff 0.14.1\nstdout:\nPLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:80:9\n   |\n78 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n79 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:80:9\n   |\n78 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n79 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 start\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:50:50.059896+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 3.8980400000000373,
                "ended_at": "2025-10-18T23:50:50.059896+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "eb7daef8b99b4f5d6f840585b04f293f47af9251712dfac2cf513a5a8907980e",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-18T23:50:46.161854+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_persistent_env.py\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n3 files would be reformatted, 3 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:46.085466+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:48.316392+00:00\n@@ -130,11 +130,13 @@\n     snapshot = result[\"environment_snapshot\"]\n     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n     assert snapshot[\"user\"][\"DEBUG\"] == \"1\"\n \n \n-def test_main_json_persist_current_handles_missing(monkeypatch: pytest.MonkeyPatch) -> None:\n+def test_main_json_persist_current_handles_missing(\n+    monkeypatch: pytest.MonkeyPatch,\n+) -> None:\n     payload = {\n         \"command\": \"x_make_persistent_env_var_x\",\n         \"parameters\": {\n             \"action\": \"persist-current\",\n             \"tokens\": [\n--- C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_persistent_env.py\t2025-10-18 23:47:07.474421+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_persistent_env.py\t2025-10-18 23:50:48.462522+00:00\n@@ -229,14 +229,16 @@\n         setattr(module, open_gui_attr, original)\n \n \n @contextmanager\n def override_prompt_for_values(\n-    replacer: Callable[[Sequence[tuple[str, str]], bool], dict[str, str] | None]\n+    replacer: Callable[[Sequence[tuple[str, str]], bool], dict[str, str] | None],\n ) -> Iterator[None]:\n     prompt_attr = \"_prompt_for_values\"\n-    original = cast(\"Callable[..., dict[str, str] | None]\", getattr(module, prompt_attr))\n+    original = cast(\n+        \"Callable[..., dict[str, str] | None]\", getattr(module, prompt_attr)\n+    )\n \n     def wrapper(\n         tokens: Sequence[tuple[str, str]], *, quiet: bool\n     ) -> dict[str, str] | None:\n         return replacer(tokens, quiet)\n--- C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\t2025-10-18 23:50:46.125441+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\t2025-10-18 23:50:49.732320+00:00\n@@ -188,13 +188,11 @@\n     messages: list[str]\n     snapshot: dict[str, object]\n \n \n def _timestamp() -> str:\n-    return datetime.now(UTC).replace(microsecond=0).isoformat().replace(\n-        \"+00:00\", \"Z\"\n-    )\n+    return datetime.now(UTC).replace(microsecond=0).isoformat().replace(\"+00:00\", \"Z\")\n \n \n def _hash_value(value: str | None) -> str | None:\n     if not value:\n         return None\n@@ -687,12 +685,11 @@\n         )\n \n     snapshot_user = _collect_user_environment(token_specs, quiet=quiet, ctx=ctx)\n     snapshot: dict[str, object] = {\n         \"user\": {\n-            name: _display_value(name, value)\n-            for name, value in snapshot_user.items()\n+            name: _display_value(name, value) for name, value in snapshot_user.items()\n         }\n     }\n     if include_existing:\n         snapshot[\"session\"] = {\n             spec.name: _display_value(spec.name, os.environ.get(spec.name))\n@@ -725,12 +722,11 @@\n     results: list[dict[str, object]] = []\n     tokens_modified = 0\n     tokens_skipped = 0\n     tokens_failed = 0\n     provided_redacted = {\n-        name: _display_value(name, value)\n-        for name, value in values.items()\n+        name: _display_value(name, value) for name, value in values.items()\n     }\n \n     for spec in token_specs:\n         provided = values.get(spec.name)\n         reader = x_cls_make_persistent_env_var_x(\n@@ -810,12 +806,11 @@\n         results.append(entry)\n \n     snapshot_user = _collect_user_environment(token_specs, quiet=quiet, ctx=ctx)\n     snapshot: dict[str, object] = {\n         \"user\": {\n-            name: _display_value(name, value)\n-            for name, value in snapshot_user.items()\n+            name: _display_value(name, value) for name, value in snapshot_user.items()\n         },\n         \"provided\": provided_redacted,\n     }\n     if include_existing:\n         snapshot[\"session\"] = {\n@@ -880,12 +875,11 @@\n             }\n         )\n \n     snapshot: dict[str, object] = {\n         \"user\": {\n-            name: _display_value(name, value)\n-            for name, value in snapshot_user.items()\n+            name: _display_value(name, value) for name, value in snapshot_user.items()\n         }\n     }\n     if include_existing:\n         snapshot[\"session\"] = {\n             spec.name: _display_value(spec.name, os.environ.get(spec.name))\n@@ -905,11 +899,13 @@\n         messages=messages,\n         snapshot=snapshot,\n     )\n \n \n-def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n+def main_json(\n+    payload: Mapping[str, object], *, ctx: object | None = None\n+) -> dict[str, object]:\n     try:\n         validate_payload(payload, INPUT_SCHEMA)\n     except ValidationError as exc:\n         return _failure_payload(\n             \"input payload failed validation\",\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:50:46.161854+00:00\nduration: 3.898s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:46.085466+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:48.316392+00:00\n@@ -130,11 +130,13 @@\n     snapshot = result[\"environment_snapshot\"]\n     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_persistent_env.py\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n\u2026",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_persistent_env.py\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n\u2026",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:46.085466+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-18 23:50:48.316392+00:00\n@@ -130,11 +130,13 @@\n     snapshot = result[\"environment_snapshot\"]\n     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T2\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:50:56.682849+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 6.4216285000002244,
                "ended_at": "2025-10-18T23:50:56.682849+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "eb7daef8b99b4f5d6f840585b04f293f47af9251712dfac2cf513a5a8907980e",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-18T23:50:50.261221+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_persistent_env_var_x.py:20: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_persistent_env_var_x.py:20: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_persistent_env_var_x.py:20: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_persistent_env_var_x.py:20: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_persistent_env_var_x.py:268: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:506: error: \"TkFrame\" has no attribute \"grid_columnconfigure\"  [attr-defined]\nx_cls_make_persistent_env_var_x.py:534: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:535: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:536: error: Expression type contains \"Any\" (has type \"Callable[[], Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:536: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:913: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:918: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:918: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:919: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:920: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1000: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1005: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:1005: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1006: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1007: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1011: error: Incompatible return value type (got \"dict[str, Collection[Collection[str]]]\", expected \"dict[str, object]\")  [return-value]\nx_cls_make_persistent_env_var_x.py:1011: note: \"dict\" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance\nx_cls_make_persistent_env_var_x.py:1011: note: Consider using \"Mapping\" instead, which is covariant in the value type\nx_cls_make_persistent_env_var_x.py:1011: note: Perhaps you need a type annotation for \"result\"? Suggestion: \"dict[str, object]\"\nx_cls_make_persistent_env_var_x.py:1037: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1040: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1040: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_persistent_env.py:237: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_persistent_env.py:237: error: Expression type contains \"Any\" (has type \"Callable[..., dict[str, str] | None]\")  [misc]\ntests\\test_persistent_env.py:248: error: Expression type contains \"Any\" (has type \"Callable[..., dict[str, str] | None]\")  [misc]\ntests\\test_json_contracts.py:27: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:27: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:33: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:33: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:39: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:39: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:65: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:66: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:73: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:109: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:114: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:114: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:115: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:115: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:116: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:116: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:117: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:117: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:119: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:119: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ntests\\test_json_contracts.py:119: error: \"object\" has no attribute \"__iter__\"; maybe \"__dir__\" or \"__str__\"? (not iterable)  [attr-defined]\ntests\\test_json_contracts.py:120: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ntests\\test_json_contracts.py:120: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:121: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:122: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:123: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:124: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:126: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ntests\\test_json_contracts.py:126: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:127: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:128: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:131: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:131: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:132: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:132: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:187: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:187: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:188: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:188: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:189: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:189: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:190: error: Value of type \"object\" is not indexable  [index]\ntests\\test_json_contracts.py:190: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:192: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:192: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ntests\\test_json_contracts.py:192: error: \"object\" has no attribute \"__iter__\"; maybe \"__dir__\" or \"__str__\"? (not iterable)  [attr-defined]\ntests\\test_json_contracts.py:193: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ntests\\test_json_contracts.py:193: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:194: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ntests\\test_json_contracts.py:194: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:195: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:196: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:197: error: Expression has type \"Any\"  [misc]\nFound 80 errors in 4 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:50:50.261221+00:00\nduration: 6.422s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_persistent_env_var_x.py:20: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_persistent_env_var_x.py:20: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_persistent_env_var_x.py:20: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_persistent_env_var_x.py:20: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unr\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:51:00.323066+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 3.636594099996728,
                "ended_at": "2025-10-18T23:51:00.323066+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "eb7daef8b99b4f5d6f840585b04f293f47af9251712dfac2cf513a5a8907980e",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-18T23:50:56.686474+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:24:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:30:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:36:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:59:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:62:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:114:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:115:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:116:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:117:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:119:50 - error: \"object\" is not iterable\n  \u00c2\u00a0\u00c2\u00a0\"__iter__\" method not defined (reportGeneralTypeIssues)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:131:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:132:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:187:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:188:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:189:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:190:12 - error: \"__getitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:192:50 - error: \"object\" is not iterable\n  \u00c2\u00a0\u00c2\u00a0\"__iter__\" method not defined (reportGeneralTypeIssues)\nc:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py:506:15 - error: Cannot access attribute \"grid_columnconfigure\" for class \"TkFrame\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"grid_columnconfigure\" is unknown (reportAttributeAccessIssue)\n18 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:50:56.686474+00:00\nduration: 3.637s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:24:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:30:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:36:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:59:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:24:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:30:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:36:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py:59:16 - error: \"skip\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:50:56.686474+00:00 duration: 3.637s\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:50:50.251717+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 0.18801129999337718,
                "ended_at": "2025-10-18T23:50:50.251717+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "eb7daef8b99b4f5d6f840585b04f293f47af9251712dfac2cf513a5a8907980e",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-18T23:50:50.063706+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n112 |     assert result[\"status\"] == \"success\"\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n    |     ^^^^^^\n115 |     assert summary[\"tokens_modified\"] == 2\n116 |     assert summary[\"tokens_failed\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:115:5\n    |\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n115 |     assert summary[\"tokens_modified\"] == 2\n    |     ^^^^^^\n116 |     assert summary[\"tokens_failed\"] == 0\n117 |     assert summary[\"exit_code\"] == 0\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:115:42\n    |\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n115 |     assert summary[\"tokens_modified\"] == 2\n    |                                          ^\n116 |     assert summary[\"tokens_failed\"] == 0\n117 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:116:5\n    |\n114 |     assert summary[\"action\"] == \"persist-values\"\n115 |     assert summary[\"tokens_modified\"] == 2\n116 |     assert summary[\"tokens_failed\"] == 0\n    |     ^^^^^^\n117 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:117:5\n    |\n115 |     assert summary[\"tokens_modified\"] == 2\n116 |     assert summary[\"tokens_failed\"] == 0\n117 |     assert summary[\"exit_code\"] == 0\n    |     ^^^^^^\n118 |\n119 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:121:5\n    |\n119 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n120 |     api_result = entries[\"API_TOKEN\"]\n121 |     assert api_result[\"status\"] == \"persisted\"\n    |     ^^^^^^\n122 |     assert api_result[\"changed\"] is True\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     api_result = entries[\"API_TOKEN\"]\n121 |     assert api_result[\"status\"] == \"persisted\"\n122 |     assert api_result[\"changed\"] is True\n    |     ^^^^^^\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n124 |     assert isinstance(api_result[\"stored_hash\"], str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     assert api_result[\"status\"] == \"persisted\"\n122 |     assert api_result[\"changed\"] is True\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n    |     ^^^^^^\n124 |     assert isinstance(api_result[\"stored_hash\"], str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     assert api_result[\"changed\"] is True\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n124 |     assert isinstance(api_result[\"stored_hash\"], str)\n    |     ^^^^^^\n125 |\n126 |     debug_result = entries[\"DEBUG\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:127:5\n    |\n126 |     debug_result = entries[\"DEBUG\"]\n127 |     assert debug_result[\"status\"] == \"persisted\"\n    |     ^^^^^^\n128 |     assert debug_result[\"stored\"] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:128:5\n    |\n126 |     debug_result = entries[\"DEBUG\"]\n127 |     assert debug_result[\"status\"] == \"persisted\"\n128 |     assert debug_result[\"stored\"] == \"1\"\n    |     ^^^^^^\n129 |\n130 |     snapshot = result[\"environment_snapshot\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:131:5\n    |\n130 |     snapshot = result[\"environment_snapshot\"]\n131 |     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n    |     ^^^^^^\n132 |     assert snapshot[\"user\"][\"DEBUG\"] == \"1\"\n    |\n\nS105 Possible hardcoded password assigned to: \"API_TOKEN\"\n   --> tests\\test_json_contracts.py:131:49\n    |\n130 |     snapshot = result[\"environment_snapshot\"]\n131 |     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n    |                                                 ^^^^^^^^^^\n132 |     assert snapshot[\"user\"][\"DEBUG\"] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:132:5\n    |\n130 |     snapshot = result[\"environment_snapshot\"]\n131 |     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n132 |     assert snapshot[\"user\"][\"DEBUG\"] == \"1\"\n    |     ^^^^^^\n    |\n\nE501 Line too long (92 > 88)\n   --> tests\\test_json_contracts.py:135:89\n    |\n135 | def test_main_json_persist_current_handles_missing(monkeypatch: pytest.MonkeyPatch) -> None:\n    |                                                                                         ^^^^\n136 |     payload = {\n137 |         \"command\": \"x_make_persistent_env_var_x\",\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:187:5\n    |\n185 |     validate_payload(result, OUTPUT_SCHEMA)\n186 |     summary = result[\"summary\"]\n187 |     assert summary[\"tokens_modified\"] == 1\n    |     ^^^^^^\n188 |     assert summary[\"tokens_skipped\"] == 1\n189 |     assert summary[\"tokens_failed\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:188:5\n    |\n186 |     summary = result[\"summary\"]\n187 |     assert summary[\"tokens_modified\"] == 1\n188 |     assert summary[\"tokens_skipped\"] == 1\n    |     ^^^^^^\n189 |     assert summary[\"tokens_failed\"] == 0\n190 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:189:5\n    |\n187 |     assert summary[\"tokens_modified\"] == 1\n188 |     assert summary[\"tokens_skipped\"] == 1\n189 |     assert summary[\"tokens_failed\"] == 0\n    |     ^^^^^^\n190 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:190:5\n    |\n188 |     assert summary[\"tokens_skipped\"] == 1\n189 |     assert summary[\"tokens_failed\"] == 0\n190 |     assert summary[\"exit_code\"] == 0\n    |     ^^^^^^\n191 |\n192 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:193:5\n    |\n192 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n193 |     assert entries[\"ALPHA\"][\"status\"] in {\"persisted\", \"unchanged\"}\n    |     ^^^^^^\n194 |     beta_entry = entries[\"BETA\"]\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:195:5\n    |\n193 |     assert entries[\"ALPHA\"][\"status\"] in {\"persisted\", \"unchanged\"}\n194 |     beta_entry = entries[\"BETA\"]\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n    |     ^^^^^^\n196 |     assert beta_entry[\"attempted\"] is False\n197 |     assert beta_entry[\"changed\"] is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:196:5\n    |\n194 |     beta_entry = entries[\"BETA\"]\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n196 |     assert beta_entry[\"attempted\"] is False\n    |     ^^^^^^\n197 |     assert beta_entry[\"changed\"] is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:197:5\n    |\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n196 |     assert beta_entry[\"attempted\"] is False\n197 |     assert beta_entry[\"changed\"] is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:209:5\n    |\n208 |     validate_payload(result, ERROR_SCHEMA)\n209 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n210 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:210:5\n    |\n208 |     validate_payload(result, ERROR_SCHEMA)\n209 |     assert result[\"status\"] == \"failure\"\n210 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> tests\\test_persistent_env.py:182:44\n    |\n181 |     def fake_prompt(\n182 |         tokens: Sequence[tuple[str, str]], quiet: bool\n    |                                            ^^^^^\n183 |     ) -> dict[str, str] | None:\n184 |         prompt_calls.append((tuple(tokens), quiet))\n    |\n\nE501 Line too long (89 > 88)\n   --> tests\\test_persistent_env.py:237:89\n    |\n235 | ) -> Iterator[None]:\n236 |     prompt_attr = \"_prompt_for_values\"\n237 |     original = cast(\"Callable[..., dict[str, str] | None]\", getattr(module, prompt_attr))\n    |                                                                                         ^\n238 |\n239 |     def wrapper(\n    |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:43\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                           ^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:52\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_persistent_env_var_x.py:251:13\n    |\n249 |     for key, value in raw.items():\n250 |         if isinstance(key, str) and isinstance(value, str) and value:\n251 |             result[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^\n252 |     return result\n    |\nhelp: Replace for loop with dict comprehension\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_persistent_env_var_x.py:266:5\n    |\n264 |       if details:\n265 |           payload[\"details\"] = dict(details)\n266 | /     try:\n267 | |         validate_payload(payload, ERROR_SCHEMA)\n268 | |     except ValidationError:\n269 | |         pass\n    | |____________^\n270 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> x_cls_make_persistent_env_var_x.py:276:9\n    |\n274 |     \"\"\"Persistent environment variable setter (Windows user scope).\"\"\"\n275 |\n276 |     def __init__(\n    |         ^^^^^^^^\n277 |         self,\n278 |         var: str = \"\",\n    |\n\nC901 `run_gui` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:397:9\n    |\n395 |         return summaries, ok_all\n396 |\n397 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n398 |         values = _open_gui_and_collect(self.tokens, ctx=self._ctx, quiet=self.quiet)\n399 |         if values is None or all(not val for val in values.values()):\n    |\n\nARG001 Unused function argument: `quiet`\n   --> x_cls_make_persistent_env_var_x.py:442:33\n    |\n441 | def _prompt_for_values(\n442 |     tokens: Sequence[Token], *, quiet: bool\n    |                                 ^^^^^\n443 | ) -> dict[str, str] | None:\n444 |     print(\"GUI unavailable. Falling back to console prompts.\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_persistent_env_var_x.py:446:89\n    |\n444 |     print(\"GUI unavailable. Falling back to console prompts.\")\n445 |     print(\n446 |         \"Provide secrets for each token. Leave blank to skip and keep existing user-scoped values.\"\n    |                                                                                         ^^^^^^^^^^^\n447 |     )\n448 |     collected: dict[str, str] = {}\n    |\n\nC901 `_build_gui_parts` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:478:5\n    |\n478 | def _build_gui_parts(\n    |     ^^^^^^^^^^^^^^^^\n479 |     tk_mod: ModuleType,\n480 |     tokens: Sequence[Token],\n    |\n\nC901 `_perform_persist_current` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:595:5\n    |\n595 | def _perform_persist_current(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n596 |     token_specs: Sequence[TokenSpec],\n597 |     *,\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_persistent_env_var_x.py:678:89\n    |\n676 |     if tokens_modified:\n677 |         messages.append(\n678 |             f\"Persisted {tokens_modified} token{'s' if tokens_modified != 1 else ''} from session\"\n    |                                                                                         ^^^^^^^^^^\n679 |         )\n680 |     if tokens_skipped:\n    |\n\nE501 Line too long (105 > 88)\n   --> x_cls_make_persistent_env_var_x.py:682:89\n    |\n680 |     if tokens_skipped:\n681 |         messages.append(\n682 |             f\"Skipped {tokens_skipped} token{'s' if tokens_skipped != 1 else ''} (missing session value)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n683 |         )\n684 |     if tokens_failed:\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:686:89\n    |\n684 |     if tokens_failed:\n685 |         messages.append(\n686 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n687 |         )\n    |\n\nC901 `_perform_persist_values` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:715:5\n    |\n715 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n716 |     token_specs: Sequence[TokenSpec],\n717 |     values: Mapping[str, str],\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_persistent_env_var_x.py:715:5\n    |\n715 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n716 |     token_specs: Sequence[TokenSpec],\n717 |     values: Mapping[str, str],\n    |\n\nSIM108 Use ternary operator `exit_code = 1 if tokens_failed else 0` instead of `if`-`else`-block\n   --> x_cls_make_persistent_env_var_x.py:826:5\n    |\n824 |           }\n825 |\n826 | /     if tokens_failed:\n827 | |         exit_code = 1\n828 | |     else:\n829 | |         exit_code = 0\n    | |_____________________^\n830 |\n831 |       messages: list[str] = []\n    |\nhelp: Replace `if`-`else`-block with `exit_code = 1 if tokens_failed else 0`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:842:89\n    |\n840 |     if tokens_failed:\n841 |         messages.append(\n842 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n843 |         )\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_persistent_env_var_x.py:910:89\n    |\n910 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^\n911 |     try:\n912 |         validate_payload(payload, INPUT_SCHEMA)\n    |\n\nFound 46 errors.\nNo fixes available (4 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:50:50.063706+00:00\nduration: 0.188s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-v\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:50:46.153861+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 0.22951740000280552,
                "ended_at": "2025-10-18T23:50:46.153861+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "eb7daef8b99b4f5d6f840585b04f293f47af9251712dfac2cf513a5a8907980e",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-18T23:50:45.924346+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n112 |     assert result[\"status\"] == \"success\"\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n    |     ^^^^^^\n115 |     assert summary[\"tokens_modified\"] == 2\n116 |     assert summary[\"tokens_failed\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:115:5\n    |\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n115 |     assert summary[\"tokens_modified\"] == 2\n    |     ^^^^^^\n116 |     assert summary[\"tokens_failed\"] == 0\n117 |     assert summary[\"exit_code\"] == 0\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:115:42\n    |\n113 |     summary = result[\"summary\"]\n114 |     assert summary[\"action\"] == \"persist-values\"\n115 |     assert summary[\"tokens_modified\"] == 2\n    |                                          ^\n116 |     assert summary[\"tokens_failed\"] == 0\n117 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:116:5\n    |\n114 |     assert summary[\"action\"] == \"persist-values\"\n115 |     assert summary[\"tokens_modified\"] == 2\n116 |     assert summary[\"tokens_failed\"] == 0\n    |     ^^^^^^\n117 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:117:5\n    |\n115 |     assert summary[\"tokens_modified\"] == 2\n116 |     assert summary[\"tokens_failed\"] == 0\n117 |     assert summary[\"exit_code\"] == 0\n    |     ^^^^^^\n118 |\n119 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:121:5\n    |\n119 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n120 |     api_result = entries[\"API_TOKEN\"]\n121 |     assert api_result[\"status\"] == \"persisted\"\n    |     ^^^^^^\n122 |     assert api_result[\"changed\"] is True\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     api_result = entries[\"API_TOKEN\"]\n121 |     assert api_result[\"status\"] == \"persisted\"\n122 |     assert api_result[\"changed\"] is True\n    |     ^^^^^^\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n124 |     assert isinstance(api_result[\"stored_hash\"], str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     assert api_result[\"status\"] == \"persisted\"\n122 |     assert api_result[\"changed\"] is True\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n    |     ^^^^^^\n124 |     assert isinstance(api_result[\"stored_hash\"], str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     assert api_result[\"changed\"] is True\n123 |     assert api_result[\"stored\"] == \"<hidden>\"\n124 |     assert isinstance(api_result[\"stored_hash\"], str)\n    |     ^^^^^^\n125 |\n126 |     debug_result = entries[\"DEBUG\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:127:5\n    |\n126 |     debug_result = entries[\"DEBUG\"]\n127 |     assert debug_result[\"status\"] == \"persisted\"\n    |     ^^^^^^\n128 |     assert debug_result[\"stored\"] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:128:5\n    |\n126 |     debug_result = entries[\"DEBUG\"]\n127 |     assert debug_result[\"status\"] == \"persisted\"\n128 |     assert debug_result[\"stored\"] == \"1\"\n    |     ^^^^^^\n129 |\n130 |     snapshot = result[\"environment_snapshot\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:131:5\n    |\n130 |     snapshot = result[\"environment_snapshot\"]\n131 |     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n    |     ^^^^^^\n132 |     assert snapshot[\"user\"][\"DEBUG\"] == \"1\"\n    |\n\nS105 Possible hardcoded password assigned to: \"API_TOKEN\"\n   --> tests\\test_json_contracts.py:131:49\n    |\n130 |     snapshot = result[\"environment_snapshot\"]\n131 |     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n    |                                                 ^^^^^^^^^^\n132 |     assert snapshot[\"user\"][\"DEBUG\"] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:132:5\n    |\n130 |     snapshot = result[\"environment_snapshot\"]\n131 |     assert snapshot[\"provided\"][\"API_TOKEN\"] == \"<hidden>\"\n132 |     assert snapshot[\"user\"][\"DEBUG\"] == \"1\"\n    |     ^^^^^^\n    |\n\nE501 Line too long (92 > 88)\n   --> tests\\test_json_contracts.py:135:89\n    |\n135 | def test_main_json_persist_current_handles_missing(monkeypatch: pytest.MonkeyPatch) -> None:\n    |                                                                                         ^^^^\n136 |     payload = {\n137 |         \"command\": \"x_make_persistent_env_var_x\",\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:187:5\n    |\n185 |     validate_payload(result, OUTPUT_SCHEMA)\n186 |     summary = result[\"summary\"]\n187 |     assert summary[\"tokens_modified\"] == 1\n    |     ^^^^^^\n188 |     assert summary[\"tokens_skipped\"] == 1\n189 |     assert summary[\"tokens_failed\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:188:5\n    |\n186 |     summary = result[\"summary\"]\n187 |     assert summary[\"tokens_modified\"] == 1\n188 |     assert summary[\"tokens_skipped\"] == 1\n    |     ^^^^^^\n189 |     assert summary[\"tokens_failed\"] == 0\n190 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:189:5\n    |\n187 |     assert summary[\"tokens_modified\"] == 1\n188 |     assert summary[\"tokens_skipped\"] == 1\n189 |     assert summary[\"tokens_failed\"] == 0\n    |     ^^^^^^\n190 |     assert summary[\"exit_code\"] == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:190:5\n    |\n188 |     assert summary[\"tokens_skipped\"] == 1\n189 |     assert summary[\"tokens_failed\"] == 0\n190 |     assert summary[\"exit_code\"] == 0\n    |     ^^^^^^\n191 |\n192 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:193:5\n    |\n192 |     entries = {entry[\"name\"]: entry for entry in result[\"results\"]}\n193 |     assert entries[\"ALPHA\"][\"status\"] in {\"persisted\", \"unchanged\"}\n    |     ^^^^^^\n194 |     beta_entry = entries[\"BETA\"]\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:195:5\n    |\n193 |     assert entries[\"ALPHA\"][\"status\"] in {\"persisted\", \"unchanged\"}\n194 |     beta_entry = entries[\"BETA\"]\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n    |     ^^^^^^\n196 |     assert beta_entry[\"attempted\"] is False\n197 |     assert beta_entry[\"changed\"] is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:196:5\n    |\n194 |     beta_entry = entries[\"BETA\"]\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n196 |     assert beta_entry[\"attempted\"] is False\n    |     ^^^^^^\n197 |     assert beta_entry[\"changed\"] is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:197:5\n    |\n195 |     assert beta_entry[\"status\"] == \"skipped\"\n196 |     assert beta_entry[\"attempted\"] is False\n197 |     assert beta_entry[\"changed\"] is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:209:5\n    |\n208 |     validate_payload(result, ERROR_SCHEMA)\n209 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n210 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:210:5\n    |\n208 |     validate_payload(result, ERROR_SCHEMA)\n209 |     assert result[\"status\"] == \"failure\"\n210 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> tests\\test_persistent_env.py:182:44\n    |\n181 |     def fake_prompt(\n182 |         tokens: Sequence[tuple[str, str]], quiet: bool\n    |                                            ^^^^^\n183 |     ) -> dict[str, str] | None:\n184 |         prompt_calls.append((tuple(tokens), quiet))\n    |\n\nE501 Line too long (89 > 88)\n   --> tests\\test_persistent_env.py:237:89\n    |\n235 | ) -> Iterator[None]:\n236 |     prompt_attr = \"_prompt_for_values\"\n237 |     original = cast(\"Callable[..., dict[str, str] | None]\", getattr(module, prompt_attr))\n    |                                                                                         ^\n238 |\n239 |     def wrapper(\n    |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:43\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                           ^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:52\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_persistent_env_var_x.py:251:13\n    |\n249 |     for key, value in raw.items():\n250 |         if isinstance(key, str) and isinstance(value, str) and value:\n251 |             result[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^\n252 |     return result\n    |\nhelp: Replace for loop with dict comprehension\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_persistent_env_var_x.py:266:5\n    |\n264 |       if details:\n265 |           payload[\"details\"] = dict(details)\n266 | /     try:\n267 | |         validate_payload(payload, ERROR_SCHEMA)\n268 | |     except ValidationError:\n269 | |         pass\n    | |____________^\n270 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> x_cls_make_persistent_env_var_x.py:276:9\n    |\n274 |     \"\"\"Persistent environment variable setter (Windows user scope).\"\"\"\n275 |\n276 |     def __init__(\n    |         ^^^^^^^^\n277 |         self,\n278 |         var: str = \"\",\n    |\n\nC901 `run_gui` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:397:9\n    |\n395 |         return summaries, ok_all\n396 |\n397 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n398 |         values = _open_gui_and_collect(self.tokens, ctx=self._ctx, quiet=self.quiet)\n399 |         if values is None or all(not val for val in values.values()):\n    |\n\nARG001 Unused function argument: `quiet`\n   --> x_cls_make_persistent_env_var_x.py:442:33\n    |\n441 | def _prompt_for_values(\n442 |     tokens: Sequence[Token], *, quiet: bool\n    |                                 ^^^^^\n443 | ) -> dict[str, str] | None:\n444 |     print(\"GUI unavailable. Falling back to console prompts.\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_persistent_env_var_x.py:446:89\n    |\n444 |     print(\"GUI unavailable. Falling back to console prompts.\")\n445 |     print(\n446 |         \"Provide secrets for each token. Leave blank to skip and keep existing user-scoped values.\"\n    |                                                                                         ^^^^^^^^^^^\n447 |     )\n448 |     collected: dict[str, str] = {}\n    |\n\nC901 `_build_gui_parts` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:478:5\n    |\n478 | def _build_gui_parts(\n    |     ^^^^^^^^^^^^^^^^\n479 |     tk_mod: ModuleType,\n480 |     tokens: Sequence[Token],\n    |\n\nC901 `_perform_persist_current` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:595:5\n    |\n595 | def _perform_persist_current(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n596 |     token_specs: Sequence[TokenSpec],\n597 |     *,\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_persistent_env_var_x.py:678:89\n    |\n676 |     if tokens_modified:\n677 |         messages.append(\n678 |             f\"Persisted {tokens_modified} token{'s' if tokens_modified != 1 else ''} from session\"\n    |                                                                                         ^^^^^^^^^^\n679 |         )\n680 |     if tokens_skipped:\n    |\n\nE501 Line too long (105 > 88)\n   --> x_cls_make_persistent_env_var_x.py:682:89\n    |\n680 |     if tokens_skipped:\n681 |         messages.append(\n682 |             f\"Skipped {tokens_skipped} token{'s' if tokens_skipped != 1 else ''} (missing session value)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n683 |         )\n684 |     if tokens_failed:\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:686:89\n    |\n684 |     if tokens_failed:\n685 |         messages.append(\n686 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n687 |         )\n    |\n\nC901 `_perform_persist_values` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:715:5\n    |\n715 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n716 |     token_specs: Sequence[TokenSpec],\n717 |     values: Mapping[str, str],\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_persistent_env_var_x.py:715:5\n    |\n715 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n716 |     token_specs: Sequence[TokenSpec],\n717 |     values: Mapping[str, str],\n    |\n\nSIM108 Use ternary operator `exit_code = 1 if tokens_failed else 0` instead of `if`-`else`-block\n   --> x_cls_make_persistent_env_var_x.py:826:5\n    |\n824 |           }\n825 |\n826 | /     if tokens_failed:\n827 | |         exit_code = 1\n828 | |     else:\n829 | |         exit_code = 0\n    | |_____________________^\n830 |\n831 |       messages: list[str] = []\n    |\nhelp: Replace `if`-`else`-block with `exit_code = 1 if tokens_failed else 0`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:842:89\n    |\n840 |     if tokens_failed:\n841 |         messages.append(\n842 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n843 |         )\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_persistent_env_var_x.py:910:89\n    |\n910 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^\n911 |     try:\n912 |         validate_payload(payload, INPUT_SCHEMA)\n    |\n\nFound 55 errors (9 fixed, 46 remaining).\nNo fixes available (4 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:50:45.924346+00:00\nduration: 0.230s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     assert result[\"status\"] == \"success\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --targ\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:51:18.525169+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 5.341953800001647,
                "ended_at": "2025-10-18T23:51:18.525169+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "51833a5129d72088cd908244b4484351fd5ebea3a3685bf996c7249fb07ac78d",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-18T23:51:13.183217+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n3 files would be reformatted, 4 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\t2025-10-18 23:51:13.128920+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\t2025-10-18 23:51:17.112434+00:00\n@@ -64,11 +64,13 @@\n     result = main_json(sample_input)\n     validate_payload(result, OUTPUT_SCHEMA)\n     assert result[\"status\"] in {\"success\", \"error\"}\n \n \n-def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n+def test_main_json_returns_error_for_invalid_payload(\n+    sample_input: dict[str, object],\n+) -> None:\n     invalid = copy.deepcopy(sample_input)\n     parameters = invalid.get(\"parameters\")\n     if isinstance(parameters, dict):\n         parameters.pop(\"repo_parent_root\", None)\n     result = main_json(invalid)\n--- C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\t2025-10-18 23:51:13.141006+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\t2025-10-18 23:51:17.510039+00:00\n@@ -287,20 +287,23 @@\n         return 1 if any_fail else 0\n \n \n x_cls_make_pip_updates_x = PipUpdatesRunner\n \n+\n def _load_json_payload(file_path: str | None) -> Mapping[str, object]:\n     if file_path:\n         with Path(file_path).open(\"r\", encoding=\"utf-8\") as handle:\n             return cast(\"Mapping[str, object]\", json.load(handle))\n     return cast(\"Mapping[str, object]\", json.load(sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n     parser = argparse.ArgumentParser(description=\"x_make_pip_updates_x JSON runner\")\n-    parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n+    parser.add_argument(\n+        \"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\"\n+    )\n     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n     parsed = parser.parse_args(args)\n \n     if not (parsed.json or parsed.json_file):\n         parser.error(\"JSON input required. Use --json for stdin or --json-file <path>.\")\n--- C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-18 23:51:13.136975+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-18 23:51:18.109291+00:00\n@@ -654,11 +654,13 @@\n         cloner_obj = SimpleNamespace(**dict(cloner_obj_raw))\n     else:\n         cloner_obj = SimpleNamespace()\n \n     class _NoopRunner(PipUpdatesRunnerProtocol):\n-        def batch_install(self, packages: Sequence[str], *, use_user: bool) -> int:  # noqa: ARG002\n+        def batch_install(\n+            self, packages: Sequence[str], *, use_user: bool\n+        ) -> int:  # noqa: ARG002\n             return 0\n \n     def _default_factory(*_args: object, **_kwargs: object) -> PipUpdatesRunnerProtocol:\n         return _NoopRunner()\n \n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:51:13.183217+00:00\nduration: 5.342s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\t2025-10-18 23:51:13.128920+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\t2025-10-18 23:51:17.112434+00:00\n@@ -64,11 +64,13 @@\n     result = main_json(sample_input)\n     validate_payload(result, OUTPUT_SCHEMA)\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n\u2026",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n\u2026",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\t2025-10-18 23:51:13.128920+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\t2025-10-18 23:51:17.112434+00:00\n@@ -64,11 +64,13 @@\n     result = main_json(sample_input)\n     validate_payload(result, OUTPUT_SCHEMA)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:51:13.183217\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:51:19.763172+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 1.061620500011486,
                "ended_at": "2025-10-18T23:51:19.763172+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "51833a5129d72088cd908244b4484351fd5ebea3a3685bf996c7249fb07ac78d",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-18T23:51:18.701548+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nupdate_flow.py:16: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nupdate_flow.py:16: note: Hint: \"python3 -m pip install types-jsonschema\"\nupdate_flow.py:16: note: (or run \"mypy --install-types\" to install all missing stub packages)\nupdate_flow.py:16: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nupdate_flow.py:600: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:615: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:619: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nupdate_flow.py:619: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:620: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:621: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:654: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nupdate_flow.py:697: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:701: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nupdate_flow.py:701: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:702: error: Expression has type \"Any\"  [misc]\nupdate_flow.py:703: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:305: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:21: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:21: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:21: error: Untyped decorator makes function \"sample_input\" untyped  [misc]\ntests\\test_json_contracts.py:22: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:24: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:27: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:27: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:27: error: Untyped decorator makes function \"sample_output\" untyped  [misc]\ntests\\test_json_contracts.py:28: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:30: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:33: error: Module has no attribute \"fixture\"  [attr-defined]\ntests\\test_json_contracts.py:33: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:33: error: Untyped decorator makes function \"sample_error\" untyped  [misc]\ntests\\test_json_contracts.py:34: error: Function is untyped after decorator transformation  [misc]\ntests\\test_json_contracts.py:36: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:36: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:59: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:60: error: Expression has type \"Any\"  [misc]\nFound 39 errors in 4 files (checked 7 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:51:18.701548+00:00\nduration: 1.062s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nupdate_flow.py:16: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nupdate_flow.py:16: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nupdate_flow.py:16: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nupdate_flow.py:16: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --dis\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:51:23.868679+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 4.100744600000326,
                "ended_at": "2025-10-18T23:51:23.868679+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "51833a5129d72088cd908244b4484351fd5ebea3a3685bf996c7249fb07ac78d",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-18T23:51:19.767937+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n3 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:51:19.767937+00:00\nduration: 4.101s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n3 errors, 0 warnings, 0 informations\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:21:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:27:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_pip_updates_x\\tests\\test_json_contracts.py:33:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n3 errors, 0 warnings, 0 informations",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:51:19.767937+00:00 duration: 4.101s tool_version:\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:51:18.697417+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.16688970000541303,
                "ended_at": "2025-10-18T23:51:18.697417+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "51833a5129d72088cd908244b4484351fd5ebea3a3685bf996c7249fb07ac78d",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-18T23:51:18.530531+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n56 |     assert report_files, \"expected at least one pip-updates run report to validate\"\n   |     ^^^^^^\n57 |     for report_file in report_files:\n58 |         with report_file.open(\"r\", encoding=\"utf-8\") as handle:\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:66:5\n   |\n64 |     result = main_json(sample_input)\n65 |     validate_payload(result, OUTPUT_SCHEMA)\n66 |     assert result[\"status\"] in {\"success\", \"error\"}\n   |     ^^^^^^\n   |\n\nE501 Line too long (94 > 88)\n  --> tests\\test_json_contracts.py:69:89\n   |\n69 | def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n   |                                                                                         ^^^^^^\n70 |     invalid = copy.deepcopy(sample_input)\n71 |     parameters = invalid.get(\"parameters\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:76:5\n   |\n74 |     result = main_json(invalid)\n75 |     validate_payload(result, ERROR_SCHEMA)\n76 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> update_flow.py:598:5\n    |\n596 |       if details:\n597 |           payload[\"details\"] = dict(details)\n598 | /     try:\n599 | |         validate_payload(payload, ERROR_SCHEMA)\n600 | |     except ValidationError:\n601 | |         pass\n    | |____________^\n602 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n606 |     payload: Mapping[str, object],\n607 |     *,\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_pip_updates_x.py:301:89\n    |\n299 | def _run_json_cli(args: Sequence[str]) -> None:\n300 |     parser = argparse.ArgumentParser(description=\"x_make_pip_updates_x JSON runner\")\n301 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n302 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n303 |     parsed = parser.parse_args(args)\n    |\n\nFound 7 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:51:18.530531+00:00\nduration: 0.167s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 s\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:51:13.180138+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.19829120000940748,
                "ended_at": "2025-10-18T23:51:13.180138+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "51833a5129d72088cd908244b4484351fd5ebea3a3685bf996c7249fb07ac78d",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-18T23:51:12.981847+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n56 |     assert report_files, \"expected at least one pip-updates run report to validate\"\n   |     ^^^^^^\n57 |     for report_file in report_files:\n58 |         with report_file.open(\"r\", encoding=\"utf-8\") as handle:\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:66:5\n   |\n64 |     result = main_json(sample_input)\n65 |     validate_payload(result, OUTPUT_SCHEMA)\n66 |     assert result[\"status\"] in {\"success\", \"error\"}\n   |     ^^^^^^\n   |\n\nE501 Line too long (94 > 88)\n  --> tests\\test_json_contracts.py:69:89\n   |\n69 | def test_main_json_returns_error_for_invalid_payload(sample_input: dict[str, object]) -> None:\n   |                                                                                         ^^^^^^\n70 |     invalid = copy.deepcopy(sample_input)\n71 |     parameters = invalid.get(\"parameters\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:76:5\n   |\n74 |     result = main_json(invalid)\n75 |     validate_payload(result, ERROR_SCHEMA)\n76 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> update_flow.py:598:5\n    |\n596 |       if details:\n597 |           payload[\"details\"] = dict(details)\n598 | /     try:\n599 | |         validate_payload(payload, ERROR_SCHEMA)\n600 | |     except ValidationError:\n601 | |         pass\n    | |____________^\n602 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n606 |     payload: Mapping[str, object],\n607 |     *,\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_pip_updates_x.py:301:89\n    |\n299 | def _run_json_cli(args: Sequence[str]) -> None:\n300 |     parser = argparse.ArgumentParser(description=\"x_make_pip_updates_x JSON runner\")\n301 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n302 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n303 |     parsed = parser.parse_args(args)\n    |\n\nFound 17 errors (10 fixed, 7 remaining).\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:51:12.981847+00:00\nduration: 0.198s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py3\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:51:32.082699+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 3.9915583999973023,
                "ended_at": "2025-10-18T23:51:32.082699+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "7daf205a8de40a738c9d3f284000920c0a24be3b7112c78a97e5eaeb319ca4d9",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-18T23:51:28.091141+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-18 23:51:28.039371+00:00\n+++ C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-18 23:51:31.801718+00:00\n@@ -154,11 +154,13 @@\n         obj: optional attribute name to return from the module\n         \"\"\"\n         return super().run(base_path, module, obj)\n \n \n-def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n+def _failure_payload(\n+    message: str, *, details: Mapping[str, object] | None = None\n+) -> dict[str, object]:\n     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n     if details:\n         payload[\"details\"] = dict(details)\n     try:\n         validate_payload(payload, ERROR_SCHEMA)\n@@ -177,11 +179,13 @@\n     if isinstance(raw, Mapping):\n         return {str(key): value for key, value in raw.items()}\n     return {}\n \n \n-def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n+def main_json(\n+    payload: Mapping[str, object], *, ctx: object | None = None\n+) -> dict[str, object]:\n     del ctx\n     try:\n         validate_payload(payload, INPUT_SCHEMA)\n     except ValidationError as exc:\n         return _failure_payload(\n@@ -233,11 +237,13 @@\n                 \"base_path\": base_path,\n                 \"module\": module_name,\n             },\n         )\n \n-    module_file_obj = cast(\"object | None\", getattr(module_obj_loaded, \"__file__\", None))\n+    module_file_obj = cast(\n+        \"object | None\", getattr(module_obj_loaded, \"__file__\", None)\n+    )\n     module_file = module_file_obj if isinstance(module_file_obj, str) else None\n     if module_file is None:\n         module_file = _resolve_module_file(base_path, module_name)\n \n     messages.append(f\"Loaded {module_name}\")\n@@ -294,11 +300,13 @@\n     return cast(\"Mapping[str, object]\", json.load(sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n     parser = argparse.ArgumentParser(description=\"x_make_py_mod_sideload_x JSON runner\")\n-    parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n+    parser.add_argument(\n+        \"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\"\n+    )\n     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n     parsed = parser.parse_args(args)\n \n     if not (parsed.json or parsed.json_file):\n         parser.error(\"JSON input required. Use --json for stdin or --json-file <path>.\")\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:51:28.091141+00:00\nduration: 3.992s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-18 23:51:28.039371+00:00\n+++ C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-18 23:51:31.801718+00:00\n@@ -154,11 +154,13 @@\n         obj: optional attribute name to return from the module\n         \"\"\"\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-18 23:51:28.039371+00:00\n+++ C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-18 23:51:31.801718+00:00\n@@ -154,11 +154,13 @@\n         obj: optional attribute name to return from the module\n         \"\"\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:51:2\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:51:39.522772+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 7.2634856999939075,
                "ended_at": "2025-10-18T23:51:39.522772+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "7daf205a8de40a738c9d3f284000920c0a24be3b7112c78a97e5eaeb319ca4d9",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-18T23:51:32.259292+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:16: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_py_mod_sideload_x.py:16: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_py_mod_sideload_x.py:16: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_py_mod_sideload_x.py:16: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_py_mod_sideload_x.py:165: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:186: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:190: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:190: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:191: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:192: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:227: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:249: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:277: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:281: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:281: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:282: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:283: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:303: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:306: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:306: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:21: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:21: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:44: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:44: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:50: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:50: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:56: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:56: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:93: error: Unsupported target for indexed assignment (\"object\")  [index]\ntests\\test_json_contracts.py:101: error: Argument 1 to \"Path\" has incompatible type \"object\"; expected \"str | PathLike[str]\"  [arg-type]\ntests\\test_json_contracts.py:104: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:112: error: Unsupported target for indexed assignment (\"object\")  [index]\ntests\\test_json_contracts.py:124: error: Unsupported target for indexed assignment (\"object\")  [index]\nFound 33 errors in 3 files (checked 7 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:51:32.259292+00:00\nduration: 7.263s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:16: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_py_mod_sideload_x.py:16: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:16: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_py_mod_sideload_x.py:16: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachab\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:51:42.994053+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 3.465637899993453,
                "ended_at": "2025-10-18T23:51:42.994053+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "7daf205a8de40a738c9d3f284000920c0a24be3b7112c78a97e5eaeb319ca4d9",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-18T23:51:39.528414+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:41:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:47:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:53:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:93:5 - error: \"__setitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:101:17 - error: Argument of type \"object\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__new__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"object\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is incompatible with protocol \"PathLike[str]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"__fspath__\" is not present (reportArgumentType)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:101:17 - error: Argument of type \"object\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"object\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"object\" is incompatible with protocol \"PathLike[str]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"__fspath__\" is not present (reportArgumentType)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:112:5 - error: \"__setitem__\" method not defined on type \"object\" (reportIndexIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:124:5 - error: \"__setitem__\" method not defined on type \"object\" (reportIndexIssue)\n8 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:51:39.528414+00:00\nduration: 3.466s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:41:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:47:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:53:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:93:5 - error: \"__setitem__\" method not defined on type \"object\" (reportIndexIssue)\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:41:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:47:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:53:9 - error: \"fixture\" is not a known attribute of module \"pytest\" (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_py_mod_sideload_x\\tests\\test_json_contracts.py:93:5 - error: \"__setitem__\" method not defined on type \"object\" (reportIndexIssue)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:51:39.528414+00:00 duration: 3.466s tool_\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:51:32.255648+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 0.16833059999044053,
                "ended_at": "2025-10-18T23:51:32.255648+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "7daf205a8de40a738c9d3f284000920c0a24be3b7112c78a97e5eaeb319ca4d9",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-18T23:51:32.087317+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:98:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n100 |     assert result[\"attribute\"] == \"run\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:99:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n    |     ^^^^^^\n100 |     assert result[\"attribute\"] == \"run\"\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:100:5\n    |\n 98 |     assert result[\"status\"] == \"success\"\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n100 |     assert result[\"attribute\"] == \"run\"\n    |     ^^^^^^\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n102 |     metadata = result.get(\"metadata\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:101:5\n    |\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n100 |     assert result[\"attribute\"] == \"run\"\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n    |     ^^^^^^\n102 |     metadata = result.get(\"metadata\")\n103 |     assert isinstance(metadata, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:103:5\n    |\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n102 |     metadata = result.get(\"metadata\")\n103 |     assert isinstance(metadata, dict)\n    |     ^^^^^^\n104 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:104:5\n    |\n102 |     metadata = result.get(\"metadata\")\n103 |     assert isinstance(metadata, dict)\n104 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n128 |     validate_payload(result, ERROR_SCHEMA)\n129 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n130 |     assert result[\"message\"] == \"attribute resolution failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     validate_payload(result, ERROR_SCHEMA)\n129 |     assert result[\"status\"] == \"failure\"\n130 |     assert result[\"message\"] == \"attribute resolution failed\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n136 |     validate_payload(result, ERROR_SCHEMA)\n137 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n138 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:138:5\n    |\n136 |     validate_payload(result, ERROR_SCHEMA)\n137 |     assert result[\"status\"] == \"failure\"\n138 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:159:89\n    |\n159 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n160 |     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n161 |     if details:\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_py_mod_sideload_x.py:163:5\n    |\n161 |       if details:\n162 |           payload[\"details\"] = dict(details)\n163 | /     try:\n164 | |         validate_payload(payload, ERROR_SCHEMA)\n165 | |     except ValidationError:\n166 | |         pass\n    | |____________^\n167 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:182:5\n    |\n182 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |     ^^^^^^^^^\n183 |     del ctx\n184 |     try:\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_py_mod_sideload_x.py:182:5\n    |\n182 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |     ^^^^^^^^^\n183 |     del ctx\n184 |     try:\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:182:89\n    |\n182 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^\n183 |     del ctx\n184 |     try:\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:227:29\n    |\n226 |     try:\n227 |         module_obj_loaded = runner._module_loader.load_module(base_path, module_name)  # type: ignore[attr-defined]\n    |                             ^^^^^^^^^^^^^^^^^^^^^\n228 |     except (FileNotFoundError, ImportError, ValueError, OSError) as exc:\n229 |         return _failure_payload(\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:238:89\n    |\n236 |         )\n237 |\n238 |     module_file_obj = cast(\"object | None\", getattr(module_obj_loaded, \"__file__\", None))\n    |                                                                                         ^\n239 |     module_file = module_file_obj if isinstance(module_file_obj, str) else None\n240 |     if module_file is None:\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:249:32\n    |\n247 |     if attribute_name:\n248 |         try:\n249 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n250 |         except AttributeError as exc:\n251 |             return _failure_payload(\n    |\n\nE501 Line too long (101 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:249:89\n    |\n247 |     if attribute_name:\n248 |         try:\n249 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                                                                         ^^^^^^^^^^^^^\n250 |         except AttributeError as exc:\n251 |             return _failure_payload(\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:299:89\n    |\n297 | def _run_json_cli(args: Sequence[str]) -> None:\n298 |     parser = argparse.ArgumentParser(description=\"x_make_py_mod_sideload_x JSON runner\")\n299 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n300 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n301 |     parsed = parser.parse_args(args)\n    |\n\nFound 20 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:51:32.087317+00:00\nduration: 0.168s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:98:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:98:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:51:28.086413+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 0.383085099994787,
                "ended_at": "2025-10-18T23:51:28.086413+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "7daf205a8de40a738c9d3f284000920c0a24be3b7112c78a97e5eaeb319ca4d9",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-18T23:51:27.703326+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:98:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n    |     ^^^^^^\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n100 |     assert result[\"attribute\"] == \"run\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:99:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n    |     ^^^^^^\n100 |     assert result[\"attribute\"] == \"run\"\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:100:5\n    |\n 98 |     assert result[\"status\"] == \"success\"\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n100 |     assert result[\"attribute\"] == \"run\"\n    |     ^^^^^^\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n102 |     metadata = result.get(\"metadata\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:101:5\n    |\n 99 |     assert result[\"object_kind\"] == \"attribute\"\n100 |     assert result[\"attribute\"] == \"run\"\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n    |     ^^^^^^\n102 |     metadata = result.get(\"metadata\")\n103 |     assert isinstance(metadata, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:103:5\n    |\n101 |     assert Path(result[\"module_file\"]).resolve() == module_path.resolve()\n102 |     metadata = result.get(\"metadata\")\n103 |     assert isinstance(metadata, dict)\n    |     ^^^^^^\n104 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:104:5\n    |\n102 |     metadata = result.get(\"metadata\")\n103 |     assert isinstance(metadata, dict)\n104 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n128 |     validate_payload(result, ERROR_SCHEMA)\n129 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n130 |     assert result[\"message\"] == \"attribute resolution failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     validate_payload(result, ERROR_SCHEMA)\n129 |     assert result[\"status\"] == \"failure\"\n130 |     assert result[\"message\"] == \"attribute resolution failed\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n136 |     validate_payload(result, ERROR_SCHEMA)\n137 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n138 |     assert result[\"message\"] == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:138:5\n    |\n136 |     validate_payload(result, ERROR_SCHEMA)\n137 |     assert result[\"status\"] == \"failure\"\n138 |     assert result[\"message\"] == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:159:89\n    |\n159 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n160 |     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n161 |     if details:\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_py_mod_sideload_x.py:163:5\n    |\n161 |       if details:\n162 |           payload[\"details\"] = dict(details)\n163 | /     try:\n164 | |         validate_payload(payload, ERROR_SCHEMA)\n165 | |     except ValidationError:\n166 | |         pass\n    | |____________^\n167 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:182:5\n    |\n182 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |     ^^^^^^^^^\n183 |     del ctx\n184 |     try:\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_py_mod_sideload_x.py:182:5\n    |\n182 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |     ^^^^^^^^^\n183 |     del ctx\n184 |     try:\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:182:89\n    |\n182 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^\n183 |     del ctx\n184 |     try:\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:227:29\n    |\n226 |     try:\n227 |         module_obj_loaded = runner._module_loader.load_module(base_path, module_name)  # type: ignore[attr-defined]\n    |                             ^^^^^^^^^^^^^^^^^^^^^\n228 |     except (FileNotFoundError, ImportError, ValueError, OSError) as exc:\n229 |         return _failure_payload(\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:238:89\n    |\n236 |         )\n237 |\n238 |     module_file_obj = cast(\"object | None\", getattr(module_obj_loaded, \"__file__\", None))\n    |                                                                                         ^\n239 |     module_file = module_file_obj if isinstance(module_file_obj, str) else None\n240 |     if module_file is None:\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:249:32\n    |\n247 |     if attribute_name:\n248 |         try:\n249 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n250 |         except AttributeError as exc:\n251 |             return _failure_payload(\n    |\n\nE501 Line too long (101 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:249:89\n    |\n247 |     if attribute_name:\n248 |         try:\n249 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                                                                         ^^^^^^^^^^^^^\n250 |         except AttributeError as exc:\n251 |             return _failure_payload(\n    |\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:299:89\n    |\n297 | def _run_json_cli(args: Sequence[str]) -> None:\n298 |     parser = argparse.ArgumentParser(description=\"x_make_py_mod_sideload_x JSON runner\")\n299 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n300 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n301 |     parsed = parser.parse_args(args)\n    |\n\nFound 27 errors (7 fixed, 20 remaining).\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:51:27.703326+00:00\nduration: 0.383s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:98:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:98:5\n    |\n 97 |     validate_payload(result, OUTPUT_SCHEMA)\n 98 |     assert result[\"status\"] == \"success\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-ver\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:51:54.303036+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 5.514750899994397,
                "ended_at": "2025-10-18T23:51:54.303036+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "258a549f71997cbe43477f0fa8475555513030f4513d3497b8edb5103139294b",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-18T23:51:48.788284+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\nwould reformat C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 6 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\t2025-10-18 23:51:48.737516+00:00\n+++ C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\t2025-10-18 23:51:53.179737+00:00\n@@ -136,11 +136,13 @@\n         report_payload = _run_report_payload(tmp_path)\n         report_path = tmp_path / \"reports\" / \"x_make_pypi_x_run_test.json\"\n         report_path.parent.mkdir(parents=True, exist_ok=True)\n         report_path.write_text(json.dumps(report_payload), encoding=\"utf-8\")\n         versions = {\"demo_pkg\": \"1.2.3\"}\n-        artifacts = {\"demo_pkg\": {\"main\": \"x_cls_make_demo_pkg.py\", \"anc\": [\"README.md\"]}}\n+        artifacts = {\n+            \"demo_pkg\": {\"main\": \"x_cls_make_demo_pkg.py\", \"anc\": [\"README.md\"]}\n+        }\n         return versions, artifacts, report_path\n \n     monkeypatch.setattr(pypi_module, \"publish_manifest_entries\", fake_publish)\n \n     payload = _payload(tmp_path, f\"{module_name}:FakePublisher\")\n@@ -157,12 +159,16 @@\n     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n     assert result[\"status\"] == \"completed\"\n \n \n-def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n-    def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n+def test_main_json_publish_failure(\n+    monkeypatch: pytest.MonkeyPatch, tmp_path: Path\n+) -> None:\n+    def failing_publish(\n+        *_: Any, **__: Any\n+    ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n         report_path = tmp_path / \"reports\" / \"failed.json\"\n         exc = RuntimeError(\"publish boom\")\n         exc.run_report_path = report_path\n         raise exc\n \n--- C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\t2025-10-18 23:51:48.737516+00:00\n+++ C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\t2025-10-18 23:51:53.959272+00:00\n@@ -519,11 +519,13 @@\n         # Always validate inputs (evidence cleanup is enforced unconditionally).\n         self.prepare(main_file, ancillary_files or [])\n         self.publish(main_file, ancillary_files or [])\n \n \n-def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n+def _failure_payload(\n+    message: str, *, details: Mapping[str, object] | None = None\n+) -> dict[str, object]:\n     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n     if details:\n         payload[\"details\"] = {str(key): value for key, value in details.items()}\n     try:\n         validate_payload(payload, ERROR_SCHEMA)\n@@ -562,11 +564,13 @@\n         return ManifestOptions()\n     dependencies = _normalize_string_list(raw.get(\"dependencies\"))\n     allowlist = _normalize_string_list(raw.get(\"ancillary_allowlist\"))\n     ancillary_list = _normalize_string_list(raw.get(\"ancillary_list\"))\n     extra_dict = _mapping_from_object(raw.get(\"extra\"))\n-    extra_proxy = MappingProxyType(dict(extra_dict)) if extra_dict else MappingProxyType({})\n+    extra_proxy = (\n+        MappingProxyType(dict(extra_dict)) if extra_dict else MappingProxyType({})\n+    )\n     return ManifestOptions(\n         author=_normalize_string(raw.get(\"author\")),\n         email=_normalize_string(raw.get(\"email\")),\n         description=_normalize_string(raw.get(\"description\")),\n         license_text=_normalize_string(raw.get(\"license_text\")),\n@@ -578,11 +582,16 @@\n     )\n \n \n def _entry_from_json(entry: Mapping[str, object]) -> ManifestEntry:\n     options_raw = entry.get(\"options\")\n-    options = _options_from_json(cast(\"Mapping[str, object] | None\", options_raw if isinstance(options_raw, Mapping) else None))\n+    options = _options_from_json(\n+        cast(\n+            \"Mapping[str, object] | None\",\n+            options_raw if isinstance(options_raw, Mapping) else None,\n+        )\n+    )\n     ancillary = _normalize_string_list(entry.get(\"ancillary\"))\n     package = _normalize_string(entry.get(\"package\"))\n     version = _normalize_string(entry.get(\"version\"))\n     assert package and version  # schema validation guarantees presence\n     return ManifestEntry(\n@@ -615,20 +624,24 @@\n         message = f\"publisher_factory '{identifier}' did not resolve to a callable\"\n         raise TypeError(message)\n     return cast(\"Callable[..., object]\", candidate)\n \n \n-def _build_context(ctx: object | None, overrides: Mapping[str, object] | None) -> object | None:\n+def _build_context(\n+    ctx: object | None, overrides: Mapping[str, object] | None\n+) -> object | None:\n     if not overrides:\n         return ctx\n     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n     if ctx is not None:\n         namespace._parent_ctx = ctx\n     return namespace\n \n \n-def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n+def main_json(\n+    payload: Mapping[str, object], *, ctx: object | None = None\n+) -> dict[str, object]:\n     try:\n         validate_payload(payload, INPUT_SCHEMA)\n     except ValidationError as exc:\n         return _failure_payload(\n             \"input payload failed validation\",\n@@ -739,11 +752,13 @@\n     return cast(\"Mapping[str, object]\", json.load(sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n     parser = argparse.ArgumentParser(description=\"x_make_pypi_x JSON runner\")\n-    parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n+    parser.add_argument(\n+        \"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\"\n+    )\n     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n     parsed = parser.parse_args(args)\n \n     if not (parsed.json or parsed.json_file):\n         parser.error(\"JSON input required. Use --json for stdin or --json-file <path>.\")\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:51:48.788284+00:00\nduration: 5.515s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\t2025-10-18 23:51:48.737516+00:00\n+++ C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\t2025-10-18 23:51:53.179737+00:00\n@@ -136,11 +136,13 @@\n         report_payload = _run_report_payload(tmp_path)\n         report_path = tmp_path / \"reports\" / \"x_make_pypi_x_run_test.json\"\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\nwould reformat C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 6 files would be left unchanged.",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\nwould reformat C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted, 6 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\t2025-10-18 23:51:48.737516+00:00\n+++ C:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\t2025-10-18 23:51:53.179737+00:00\n@@ -136,11 +136,13 @@\n         report_payload = _run_report_payload(tmp_path)\n         report_path = tmp_path / \"reports\" / \"x_make_pypi_x_run_test.json\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:51:48.788284+00:00 duratio\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:52:00.600736+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 6.11354730000312,
                "ended_at": "2025-10-18T23:52:00.600736+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "258a549f71997cbe43477f0fa8475555513030f4513d3497b8edb5103139294b",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-18T23:51:54.487188+00:00",
                "stderr": "",
                "stdout": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_pypi_x.py:30: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_pypi_x.py:30: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_pypi_x.py:30: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_pypi_x.py:30: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_pypi_x.py:530: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:596: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:613: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:614: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:617: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:617: error: Expression type contains \"Any\" (has type \"Callable[..., object]\")  [misc]\nx_cls_make_pypi_x.py:632: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:636: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:636: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:637: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:638: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:666: error: Expression type contains \"Any\" (has type \"Callable[..., object]\")  [misc]\nx_cls_make_pypi_x.py:689: error: Redundant cast to \"Callable[..., object]\"  [redundant-cast]\nx_cls_make_pypi_x.py:689: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:689: error: Expression type contains \"Any\" (has type \"Callable[..., object]\")  [misc]\nx_cls_make_pypi_x.py:689: error: Argument \"publisher_factory\" to \"publish_manifest_entries\" has incompatible type \"Callable[..., object]\"; expected \"PublisherFactory\"  [arg-type]\nx_cls_make_pypi_x.py:689: note: \"PublisherFactory.__call__\" has type \"Callable[[VarArg(object), KwArg(object)], PublisherProtocol]\"\nx_cls_make_pypi_x.py:694: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_pypi_x.py:695: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_pypi_x.py:701: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:711: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:717: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:718: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:718: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_pypi_x.py:723: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:727: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:727: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:728: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:729: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:748: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:751: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:751: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_main_json.py:25: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:86: error: Module has no attribute \"FakePublisher\"  [attr-defined]\ntests\\test_main_json.py:119: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:121: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:130: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:130: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:131: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:132: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:133: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:134: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:136: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:139: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:142: error: Incompatible return value type (got \"tuple[dict[str, str], dict[str, dict[str, Sequence[str]]], Path]\", expected \"tuple[dict[str, str | None], dict[str, dict[str, object]], Path]\")  [return-value]\ntests\\test_main_json.py:144: error: Expression type contains \"Any\" (has type \"Callable[[Sequence[Any], NamedArg(object, 'cloner'), NamedArg(object | None, 'ctx'), NamedArg(str, 'repo_parent_root'), NamedArg(object, 'publisher_factory'), NamedArg(str, 'token_env')], tuple[dict[str, str | None], dict[str, dict[str, object]], Path]]\")  [misc]\ntests\\test_main_json.py:151: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:151: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:151: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:152: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:152: error: Expression type contains \"Any\" (has type \"Sequence[Any] | Any\")  [misc]\ntests\\test_main_json.py:152: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:153: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:153: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:154: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:154: error: Expression type contains \"Any\" (has type \"type[SimpleNamespace]\")  [misc]\ntests\\test_main_json.py:155: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_main_json.py:156: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:156: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:157: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:157: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:158: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:158: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:163: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:166: error: \"RuntimeError\" has no attribute \"run_report_path\"  [attr-defined]\ntests\\test_main_json.py:169: error: Expression type contains \"Any\" (has type \"Callable[[VarArg(Any), KwArg(Any)], tuple[dict[str, str | None], dict[str, dict[str, object]], Path]]\")  [misc]\ntests\\test_json_contracts.py:22: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:22: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:28: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:28: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:34: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:34: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:60: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:61: error: Expression has type \"Any\"  [misc]\nFound 77 errors in 4 files (checked 8 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:51:54.487188+00:00\nduration: 6.114s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_pypi_x.py:30: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_pypi_x.py:30: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "C:\\x_runner_x\\x_make_common_x\\json_contracts.py:26: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_pypi_x.py:30: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_pypi_x.py:30: note: Hint: \"python3 -m pip install types-jsonschema\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unim\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:52:04.812480+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 4.207812199994805,
                "ended_at": "2025-10-18T23:52:04.812480+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "258a549f71997cbe43477f0fa8475555513030f4513d3497b8edb5103139294b",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-18T23:52:00.604667+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:6:8 - error: Import \"pytest\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:7:6 - error: Import \"x_make_common_x.json_contracts\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:9:6 - error: Import \"x_make_pypi_x.json_contracts\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py:12:8 - error: Import \"pytest\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py:13:6 - error: Import \"x_make_common_x.json_contracts\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py:15:6 - error: Import \"x_make_pypi_x.json_contracts\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py:16:6 - error: Import \"x_make_pypi_x.x_cls_make_pypi_x\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py:86:17 - error: Cannot assign to attribute \"FakePublisher\" for class \"ModuleType\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"FakePublisher\" is unknown (reportAttributeAccessIssue)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py:142:16 - error: Type \"tuple[dict[str, str], dict[str, dict[str, Unknown]], Path]\" is not assignable to return type \"tuple[dict[str, str | None], dict[str, dict[str, object]], Path]\"\n  \u00c2\u00a0\u00c2\u00a0\"dict[str, str]\" is not assignable to \"dict[str, str | None]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type parameter \"_VT@dict\" is invariant, but \"str\" is not the same as \"str | None\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Consider switching from \"dict\" to \"Mapping\" which is covariant in the value type (reportReturnType)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py:166:13 - error: Cannot assign to attribute \"run_report_path\" for class \"RuntimeError\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"run_report_path\" is unknown (reportAttributeAccessIssue)\nc:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\n  c:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:31:6 - error: Import \"x_0_make_all_x.manifest\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:32:6 - error: Import \"x_make_common_x.json_contracts\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:34:6 - error: Import \"x_make_pypi_x.json_contracts\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py:35:6 - error: Import \"x_make_pypi_x.publish_flow\" could not be resolved (reportMissingImports)\n14 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:52:00.604667+00:00\nduration: 4.208s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:6:8 - error: Import \"pytest\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:7:6 - error: Import \"x_make_common_x.json_contracts\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:9:6 - error: Import \"x_make_pypi_x.json_contracts\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:6:8 - error: Import \"pytest\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:7:6 - error: Import \"x_make_common_x.json_contracts\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_make_pypi_x\\tests\\test_json_contracts.py:9:6 - error: Import \"x_make_pypi_x.json_contracts\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_make_pypi_x\\tests\\test_main_json.py\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:52:00.604667+00:00 duration: 4.208s tool_version: pyright 1.1.4\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:51:54.482412+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 0.17190669999399688,
                "ended_at": "2025-10-18T23:51:54.482412+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "258a549f71997cbe43477f0fa8475555513030f4513d3497b8edb5103139294b",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-18T23:51:54.310503+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:6:29\n  |\n4 | import json\n5 | import sys\n6 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n7 | from datetime import datetime\n8 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_main_json.py:6:38\n  |\n4 | import json\n5 | import sys\n6 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n7 | from datetime import datetime\n8 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> tests\\test_main_json.py:8:21\n   |\n 6 | from collections.abc import Mapping, Sequence\n 7 | from datetime import datetime\n 8 | from pathlib import Path\n   |                     ^^^^\n 9 | from types import ModuleType, SimpleNamespace\n10 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:12:8\n   |\n10 | from typing import Any, cast\n11 |\n12 | import pytest\n   |        ^^^^^^\n13 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:28:28\n   |\n26 |     return {\n27 |         \"run_id\": \"0123456789abcdef0123456789abcdef\",\n28 |         \"started_at\": _iso(datetime(2025, 1, 1, 12, 0, 0)),\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n29 |         \"inputs\": {\n30 |             \"entry_count\": 1,\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:65:30\n   |\n63 |         },\n64 |         \"status\": \"completed\",\n65 |         \"completed_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n66 |         \"duration_seconds\": 300.0,\n67 |         \"tool\": \"x_make_pypi_x\",\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:68:30\n   |\n66 |         \"duration_seconds\": 300.0,\n67 |         \"tool\": \"x_make_pypi_x\",\n68 |         \"generated_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n69 |         \"errors\": [],\n70 |     }\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> tests\\test_main_json.py:121:9\n    |\n119 |     calls: dict[str, Any] = {}\n120 |\n121 |     def fake_publish(\n    |         ^^^^^^^^^^^^\n122 |         entries: Sequence[Any],\n123 |         *,\n    |\n\nARG001 Unused function argument: `cloner`\n   --> tests\\test_main_json.py:124:9\n    |\n122 |         entries: Sequence[Any],\n123 |         *,\n124 |         cloner: object,\n    |         ^^^^^^\n125 |         ctx: object | None,\n126 |         repo_parent_root: str,\n    |\n\nE501 Line too long (90 > 88)\n   --> tests\\test_main_json.py:141:89\n    |\n139 |         report_path.write_text(json.dumps(report_payload), encoding=\"utf-8\")\n140 |         versions = {\"demo_pkg\": \"1.2.3\"}\n141 |         artifacts = {\"demo_pkg\": {\"main\": \"x_cls_make_demo_pkg.py\", \"anc\": [\"README.md\"]}}\n    |                                                                                         ^^\n142 |         return versions, artifacts, report_path\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:152:5\n    |\n151 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n152 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_main_json.py:152:5\n    |\n151 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n152 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:154:5\n    |\n152 |     assert entries and entries[0].package == \"demo_pkg\"\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n    |     ^^^^^^\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:155:5\n    |\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n    |     ^^^^^^\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:156:5\n    |\n154 |     assert isinstance(ctx, SimpleNamespace)\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |     ^^^^^^\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:157:5\n    |\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |     ^^^^^^\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n159 |     assert result[\"status\"] == \"completed\"\n    |\n\nS105 Possible hardcoded password assigned to: \"token_env\"\n   --> tests\\test_main_json.py:157:34\n    |\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |                                  ^^^^^^^^^^^^\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n159 |     assert result[\"status\"] == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:158:5\n    |\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n    |     ^^^^^^\n159 |     assert result[\"status\"] == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:159:5\n    |\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n159 |     assert result[\"status\"] == \"completed\"\n    |     ^^^^^^\n    |\n\nE501 Line too long (92 > 88)\n   --> tests\\test_main_json.py:162:89\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n    |                                                                                         ^^^^\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*_`\n   --> tests\\test_main_json.py:163:29\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n    |                             ^^^\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n165 |         exc = RuntimeError(\"publish boom\")\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**__`\n   --> tests\\test_main_json.py:163:40\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n    |                                        ^^^\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n165 |         exc = RuntimeError(\"publish boom\")\n    |\n\nE501 Line too long (112 > 88)\n   --> tests\\test_main_json.py:163:89\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n165 |         exc = RuntimeError(\"publish boom\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:177:5\n    |\n176 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n177 |     assert details_obj is not None\n    |     ^^^^^^\n178 |     assert \"run_report_path\" in details_obj\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:178:5\n    |\n176 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n177 |     assert details_obj is not None\n178 |     assert \"run_report_path\" in details_obj\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:184:5\n    |\n182 |     result = main_json({})\n183 |     validate_payload(result, ERROR_SCHEMA)\n184 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:30:1\n   |\n28 | _T = TypeVar(\"_T\")\n29 |\n30 | from jsonschema import ValidationError\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 | from x_0_make_all_x.manifest import ManifestEntry, ManifestOptions\n32 | from x_make_common_x.json_contracts import validate_payload\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:31:1\n   |\n30 | from jsonschema import ValidationError\n31 | from x_0_make_all_x.manifest import ManifestEntry, ManifestOptions\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n32 | from x_make_common_x.json_contracts import validate_payload\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:32:1\n   |\n30 | from jsonschema import ValidationError\n31 | from x_0_make_all_x.manifest import ManifestEntry, ManifestOptions\n32 | from x_make_common_x.json_contracts import validate_payload\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n33 |\n34 | from x_make_pypi_x.json_contracts import ERROR_SCHEMA, INPUT_SCHEMA, OUTPUT_SCHEMA\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:34:1\n   |\n32 | from x_make_common_x.json_contracts import validate_payload\n33 |\n34 | from x_make_pypi_x.json_contracts import ERROR_SCHEMA, INPUT_SCHEMA, OUTPUT_SCHEMA\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n35 | from x_make_pypi_x.publish_flow import publish_manifest_entries\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:35:1\n   |\n34 | from x_make_pypi_x.json_contracts import ERROR_SCHEMA, INPUT_SCHEMA, OUTPUT_SCHEMA\n35 | from x_make_pypi_x.publish_flow import publish_manifest_entries\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_pypi_x.py:524:89\n    |\n524 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n525 |     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n526 |     if details:\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:528:5\n    |\n526 |       if details:\n527 |           payload[\"details\"] = {str(key): value for key, value in details.items()}\n528 | /     try:\n529 | |         validate_payload(payload, ERROR_SCHEMA)\n530 | |     except ValidationError:\n531 | |         pass\n    | |____________^\n532 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nE501 Line too long (92 > 88)\n   --> x_cls_make_pypi_x.py:567:89\n    |\n565 |     ancillary_list = _normalize_string_list(raw.get(\"ancillary_list\"))\n566 |     extra_dict = _mapping_from_object(raw.get(\"extra\"))\n567 |     extra_proxy = MappingProxyType(dict(extra_dict)) if extra_dict else MappingProxyType({})\n    |                                                                                         ^^^^\n568 |     return ManifestOptions(\n569 |         author=_normalize_string(raw.get(\"author\")),\n    |\n\nE501 Line too long (128 > 88)\n   --> x_cls_make_pypi_x.py:583:89\n    |\n581 | def _entry_from_json(entry: Mapping[str, object]) -> ManifestEntry:\n582 |     options_raw = entry.get(\"options\")\n583 |     options = _options_from_json(cast(\"Mapping[str, object] | None\", options_raw if isinstance(options_raw, Mapping) else None))\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n584 |     ancillary = _normalize_string_list(entry.get(\"ancillary\"))\n585 |     package = _normalize_string(entry.get(\"package\"))\n    |\n\nS101 Use of `assert` detected\n   --> x_cls_make_pypi_x.py:587:5\n    |\n585 |     package = _normalize_string(entry.get(\"package\"))\n586 |     version = _normalize_string(entry.get(\"version\"))\n587 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^\n588 |     return ManifestEntry(\n589 |         package=package,\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_pypi_x.py:587:5\n    |\n585 |     package = _normalize_string(entry.get(\"package\"))\n586 |     version = _normalize_string(entry.get(\"version\"))\n587 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n588 |     return ManifestEntry(\n589 |         package=package,\n    |\nhelp: Break down assertion into multiple parts\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_pypi_x.py:620:89\n    |\n620 | def _build_context(ctx: object | None, overrides: Mapping[str, object] | None) -> object | None:\n    |                                                                                         ^^^^^^^^\n621 |     if not overrides:\n622 |         return ctx\n    |\n\nSLF001 Private member accessed: `_parent_ctx`\n   --> x_cls_make_pypi_x.py:625:9\n    |\n623 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n624 |     if ctx is not None:\n625 |         namespace._parent_ctx = ctx\n    |         ^^^^^^^^^^^^^^^^^^^^^\n626 |     return namespace\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_pypi_x.py:629:5\n    |\n629 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |     ^^^^^^^^^\n630 |     try:\n631 |         validate_payload(payload, INPUT_SCHEMA)\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_pypi_x.py:629:89\n    |\n629 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^\n630 |     try:\n631 |         validate_payload(payload, INPUT_SCHEMA)\n    |\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_pypi_x.py:649:13\n    |\n647 |     for entry_obj in entries_raw:\n648 |         if isinstance(entry_obj, Mapping):\n649 |             manifest_entries.append(_entry_from_json(entry_obj))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n650 |\n651 |     repo_root_obj = parameters.get(\"repo_parent_root\")\n    |\nhelp: Replace for loop with list comprehension\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_pypi_x.py:744:89\n    |\n742 | def _run_json_cli(args: Sequence[str]) -> None:\n743 |     parser = argparse.ArgumentParser(description=\"x_make_pypi_x JSON runner\")\n744 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n745 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n746 |     parsed = parser.parse_args(args)\n    |\n\nFound 43 errors.\nNo fixes available (7 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:51:54.310503+00:00\nduration: 0.172s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:6:29\n  |\n4 | import json\n5 | import sys\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:6:29\n  |\n4 | import json\n5 | import sys\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 202\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:51:48.782849+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 0.22723200000473298,
                "ended_at": "2025-10-18T23:51:48.782849+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "258a549f71997cbe43477f0fa8475555513030f4513d3497b8edb5103139294b",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-18T23:51:48.555612+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:6:29\n  |\n4 | import json\n5 | import sys\n6 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n7 | from datetime import datetime\n8 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_main_json.py:6:38\n  |\n4 | import json\n5 | import sys\n6 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n7 | from datetime import datetime\n8 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> tests\\test_main_json.py:8:21\n   |\n 6 | from collections.abc import Mapping, Sequence\n 7 | from datetime import datetime\n 8 | from pathlib import Path\n   |                     ^^^^\n 9 | from types import ModuleType, SimpleNamespace\n10 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:12:8\n   |\n10 | from typing import Any, cast\n11 |\n12 | import pytest\n   |        ^^^^^^\n13 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:28:28\n   |\n26 |     return {\n27 |         \"run_id\": \"0123456789abcdef0123456789abcdef\",\n28 |         \"started_at\": _iso(datetime(2025, 1, 1, 12, 0, 0)),\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n29 |         \"inputs\": {\n30 |             \"entry_count\": 1,\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:65:30\n   |\n63 |         },\n64 |         \"status\": \"completed\",\n65 |         \"completed_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n66 |         \"duration_seconds\": 300.0,\n67 |         \"tool\": \"x_make_pypi_x\",\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:68:30\n   |\n66 |         \"duration_seconds\": 300.0,\n67 |         \"tool\": \"x_make_pypi_x\",\n68 |         \"generated_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n69 |         \"errors\": [],\n70 |     }\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> tests\\test_main_json.py:121:9\n    |\n119 |     calls: dict[str, Any] = {}\n120 |\n121 |     def fake_publish(\n    |         ^^^^^^^^^^^^\n122 |         entries: Sequence[Any],\n123 |         *,\n    |\n\nARG001 Unused function argument: `cloner`\n   --> tests\\test_main_json.py:124:9\n    |\n122 |         entries: Sequence[Any],\n123 |         *,\n124 |         cloner: object,\n    |         ^^^^^^\n125 |         ctx: object | None,\n126 |         repo_parent_root: str,\n    |\n\nE501 Line too long (90 > 88)\n   --> tests\\test_main_json.py:141:89\n    |\n139 |         report_path.write_text(json.dumps(report_payload), encoding=\"utf-8\")\n140 |         versions = {\"demo_pkg\": \"1.2.3\"}\n141 |         artifacts = {\"demo_pkg\": {\"main\": \"x_cls_make_demo_pkg.py\", \"anc\": [\"README.md\"]}}\n    |                                                                                         ^^\n142 |         return versions, artifacts, report_path\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:152:5\n    |\n151 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n152 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_main_json.py:152:5\n    |\n151 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n152 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:154:5\n    |\n152 |     assert entries and entries[0].package == \"demo_pkg\"\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n    |     ^^^^^^\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:155:5\n    |\n153 |     ctx = calls[\"ctx\"]\n154 |     assert isinstance(ctx, SimpleNamespace)\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n    |     ^^^^^^\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:156:5\n    |\n154 |     assert isinstance(ctx, SimpleNamespace)\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |     ^^^^^^\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:157:5\n    |\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |     ^^^^^^\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n159 |     assert result[\"status\"] == \"completed\"\n    |\n\nS105 Possible hardcoded password assigned to: \"token_env\"\n   --> tests\\test_main_json.py:157:34\n    |\n155 |     assert getattr(ctx, \"dry_run\", False) is True\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |                                  ^^^^^^^^^^^^\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n159 |     assert result[\"status\"] == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:158:5\n    |\n156 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n    |     ^^^^^^\n159 |     assert result[\"status\"] == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:159:5\n    |\n157 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n158 |     assert calls[\"publisher_factory\"].__name__ == \"FakePublisher\"\n159 |     assert result[\"status\"] == \"completed\"\n    |     ^^^^^^\n    |\n\nE501 Line too long (92 > 88)\n   --> tests\\test_main_json.py:162:89\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n    |                                                                                         ^^^^\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*_`\n   --> tests\\test_main_json.py:163:29\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n    |                             ^^^\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n165 |         exc = RuntimeError(\"publish boom\")\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**__`\n   --> tests\\test_main_json.py:163:40\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n    |                                        ^^^\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n165 |         exc = RuntimeError(\"publish boom\")\n    |\n\nE501 Line too long (112 > 88)\n   --> tests\\test_main_json.py:163:89\n    |\n162 | def test_main_json_publish_failure(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n163 |     def failing_publish(*_: Any, **__: Any) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n164 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n165 |         exc = RuntimeError(\"publish boom\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:177:5\n    |\n176 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n177 |     assert details_obj is not None\n    |     ^^^^^^\n178 |     assert \"run_report_path\" in details_obj\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:178:5\n    |\n176 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n177 |     assert details_obj is not None\n178 |     assert \"run_report_path\" in details_obj\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:184:5\n    |\n182 |     result = main_json({})\n183 |     validate_payload(result, ERROR_SCHEMA)\n184 |     assert result[\"status\"] == \"failure\"\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:30:1\n   |\n28 | _T = TypeVar(\"_T\")\n29 |\n30 | from jsonschema import ValidationError\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 | from x_0_make_all_x.manifest import ManifestEntry, ManifestOptions\n32 | from x_make_common_x.json_contracts import validate_payload\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:31:1\n   |\n30 | from jsonschema import ValidationError\n31 | from x_0_make_all_x.manifest import ManifestEntry, ManifestOptions\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n32 | from x_make_common_x.json_contracts import validate_payload\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:32:1\n   |\n30 | from jsonschema import ValidationError\n31 | from x_0_make_all_x.manifest import ManifestEntry, ManifestOptions\n32 | from x_make_common_x.json_contracts import validate_payload\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n33 |\n34 | from x_make_pypi_x.json_contracts import ERROR_SCHEMA, INPUT_SCHEMA, OUTPUT_SCHEMA\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:34:1\n   |\n32 | from x_make_common_x.json_contracts import validate_payload\n33 |\n34 | from x_make_pypi_x.json_contracts import ERROR_SCHEMA, INPUT_SCHEMA, OUTPUT_SCHEMA\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n35 | from x_make_pypi_x.publish_flow import publish_manifest_entries\n   |\n\nE402 Module level import not at top of file\n  --> x_cls_make_pypi_x.py:35:1\n   |\n34 | from x_make_pypi_x.json_contracts import ERROR_SCHEMA, INPUT_SCHEMA, OUTPUT_SCHEMA\n35 | from x_make_pypi_x.publish_flow import publish_manifest_entries\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_pypi_x.py:524:89\n    |\n524 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^^^^^^^^^\n525 |     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n526 |     if details:\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:528:5\n    |\n526 |       if details:\n527 |           payload[\"details\"] = {str(key): value for key, value in details.items()}\n528 | /     try:\n529 | |         validate_payload(payload, ERROR_SCHEMA)\n530 | |     except ValidationError:\n531 | |         pass\n    | |____________^\n532 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nE501 Line too long (92 > 88)\n   --> x_cls_make_pypi_x.py:567:89\n    |\n565 |     ancillary_list = _normalize_string_list(raw.get(\"ancillary_list\"))\n566 |     extra_dict = _mapping_from_object(raw.get(\"extra\"))\n567 |     extra_proxy = MappingProxyType(dict(extra_dict)) if extra_dict else MappingProxyType({})\n    |                                                                                         ^^^^\n568 |     return ManifestOptions(\n569 |         author=_normalize_string(raw.get(\"author\")),\n    |\n\nE501 Line too long (128 > 88)\n   --> x_cls_make_pypi_x.py:583:89\n    |\n581 | def _entry_from_json(entry: Mapping[str, object]) -> ManifestEntry:\n582 |     options_raw = entry.get(\"options\")\n583 |     options = _options_from_json(cast(\"Mapping[str, object] | None\", options_raw if isinstance(options_raw, Mapping) else None))\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n584 |     ancillary = _normalize_string_list(entry.get(\"ancillary\"))\n585 |     package = _normalize_string(entry.get(\"package\"))\n    |\n\nS101 Use of `assert` detected\n   --> x_cls_make_pypi_x.py:587:5\n    |\n585 |     package = _normalize_string(entry.get(\"package\"))\n586 |     version = _normalize_string(entry.get(\"version\"))\n587 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^\n588 |     return ManifestEntry(\n589 |         package=package,\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_pypi_x.py:587:5\n    |\n585 |     package = _normalize_string(entry.get(\"package\"))\n586 |     version = _normalize_string(entry.get(\"version\"))\n587 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n588 |     return ManifestEntry(\n589 |         package=package,\n    |\nhelp: Break down assertion into multiple parts\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_pypi_x.py:620:89\n    |\n620 | def _build_context(ctx: object | None, overrides: Mapping[str, object] | None) -> object | None:\n    |                                                                                         ^^^^^^^^\n621 |     if not overrides:\n622 |         return ctx\n    |\n\nSLF001 Private member accessed: `_parent_ctx`\n   --> x_cls_make_pypi_x.py:625:9\n    |\n623 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n624 |     if ctx is not None:\n625 |         namespace._parent_ctx = ctx\n    |         ^^^^^^^^^^^^^^^^^^^^^\n626 |     return namespace\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_pypi_x.py:629:5\n    |\n629 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |     ^^^^^^^^^\n630 |     try:\n631 |         validate_payload(payload, INPUT_SCHEMA)\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_pypi_x.py:629:89\n    |\n629 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n    |                                                                                         ^^^^^^^^\n630 |     try:\n631 |         validate_payload(payload, INPUT_SCHEMA)\n    |\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_pypi_x.py:649:13\n    |\n647 |     for entry_obj in entries_raw:\n648 |         if isinstance(entry_obj, Mapping):\n649 |             manifest_entries.append(_entry_from_json(entry_obj))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n650 |\n651 |     repo_root_obj = parameters.get(\"repo_parent_root\")\n    |\nhelp: Replace for loop with list comprehension\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_pypi_x.py:744:89\n    |\n742 | def _run_json_cli(args: Sequence[str]) -> None:\n743 |     parser = argparse.ArgumentParser(description=\"x_make_pypi_x JSON runner\")\n744 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n745 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n746 |     parsed = parser.parse_args(args)\n    |\n\nFound 52 errors (9 fixed, 43 remaining).\nNo fixes available (7 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:51:48.555612+00:00\nduration: 0.227s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:6:29\n  |\n4 | import json\n5 | import sys\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:6:29\n  |\n4 | import json\n5 | import sys\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:52:19.749358+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 5.005313200003002,
                "ended_at": "2025-10-18T23:52:19.749358+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "a50c38fd707d7234c369591450e2f17d4ca25ea5534bea17a6a36de7f5d1ac31",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-18T23:52:14.744060+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 7 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\t2025-10-18 23:52:14.690039+00:00\n+++ C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\t2025-10-18 23:52:19.364917+00:00\n@@ -28,31 +28,37 @@\n \n \n SCHEMA_VERSION = \"x_make_yahw_x.run/1.0\"\n \n \n-def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n+def _failure_payload(\n+    message: str, *, details: Mapping[str, object] | None = None\n+) -> dict[str, object]:\n     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n     if details:\n         payload[\"details\"] = dict(details)\n     try:\n         validate_payload(payload, ERROR_SCHEMA)\n     except ValidationError:\n         pass\n     return payload\n \n \n-def _build_context(ctx: object | None, overrides: Mapping[str, object] | None) -> object | None:\n+def _build_context(\n+    ctx: object | None, overrides: Mapping[str, object] | None\n+) -> object | None:\n     if not overrides:\n         return ctx\n     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n     if ctx is not None:\n         namespace._parent_ctx = ctx\n     return namespace\n \n \n-def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n+def main_json(\n+    payload: Mapping[str, object], *, ctx: object | None = None\n+) -> dict[str, object]:\n     try:\n         validate_payload(payload, INPUT_SCHEMA)\n     except ValidationError as exc:\n         return _failure_payload(\n             \"input payload failed validation\",\n@@ -64,11 +70,14 @@\n         )\n \n     parameters_obj = payload.get(\"parameters\", {})\n     parameters = cast(\"Mapping[str, object]\", parameters_obj)\n     context_obj = parameters.get(\"context\")\n-    context_mapping = cast(\"Mapping[str, object] | None\", context_obj if isinstance(context_obj, Mapping) else None)\n+    context_mapping = cast(\n+        \"Mapping[str, object] | None\",\n+        context_obj if isinstance(context_obj, Mapping) else None,\n+    )\n \n     runtime_ctx = _build_context(ctx, context_mapping)\n \n     try:\n         runner = XClsMakeYahwX(ctx=runtime_ctx)\n@@ -122,11 +131,13 @@\n     return cast(\"Mapping[str, object]\", json.load(sys.stdin))\n \n \n def _run_json_cli(args: Sequence[str]) -> None:\n     parser = argparse.ArgumentParser(description=\"x_make_yahw_x JSON runner\")\n-    parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n+    parser.add_argument(\n+        \"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\"\n+    )\n     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n     parsed = parser.parse_args(args)\n \n     if not (parsed.json or parsed.json_file):\n         parser.error(\"JSON input required. Use --json for stdin or --json-file <path>.\")\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-18T23:52:14.744060+00:00\nduration: 5.005s\ntool_version: python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0\nstdout:\n--- C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\t2025-10-18 23:52:14.690039+00:00\n+++ C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\t2025-10-18 23:52:19.364917+00:00\n@@ -28,31 +28,37 @@\n \n \n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 7 files would be left unchanged.",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 7 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\t2025-10-18 23:52:14.690039+00:00\n+++ C:\\x_runner_x\\x_make_yahw_x\\x_cls_make_yahw_x.py\t2025-10-18 23:52:19.364917+00:00\n@@ -28,31 +28,37 @@\n \n \n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-18T23:52:14.744060+00:00 duratio\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0"
        },
        {
            "captured_at": "2025-10-18T23:52:24.150813+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 3.856829199998174,
                "ended_at": "2025-10-18T23:52:24.150813+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "a50c38fd707d7234c369591450e2f17d4ca25ea5534bea17a6a36de7f5d1ac31",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-18T23:52:20.293967+00:00",
                "stderr": "",
                "stdout": "__init__.py:7: error: Expression has type \"Any\"  [misc]\n__init__.py:8: error: Expression has type \"Any\"  [misc]\n__init__.py:9: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_yahw_x.py:11: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\nx_cls_make_yahw_x.py:11: note: Hint: \"python3 -m pip install types-jsonschema\"\nx_cls_make_yahw_x.py:11: note: (or run \"mypy --install-types\" to install all missing stub packages)\nx_cls_make_yahw_x.py:11: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_yahw_x.py:39: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:56: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:60: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_yahw_x.py:60: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:61: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:62: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:91: error: Argument 1 to \"len\" has incompatible type \"object\"; expected \"Sized\"  [arg-type]\nx_cls_make_yahw_x.py:105: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:109: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_yahw_x.py:109: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:110: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:111: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:131: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:134: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:134: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:26: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:28: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:31: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:32: error: Expression has type \"Any\"  [misc]\ntests\\test_yahw.py:52: error: Argument 1 to \"Path\" has incompatible type \"str | None\"; expected \"str | PathLike[str]\"  [arg-type]\ntests\\test_yahw.py:57: error: Argument 1 to \"Path\" has incompatible type \"str | None\"; expected \"str | PathLike[str]\"  [arg-type]\ntests\\test_main_json.py:49: error: Expression type contains \"Any\" (has type \"type[SimpleNamespace]\")  [misc]\ntests\\test_main_json.py:50: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:51: error: Expression has type \"Any\"  [misc]\nFound 31 errors in 6 files (checked 8 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-18T23:52:20.293967+00:00\nduration: 3.857s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\n__init__.py:7: error: Expression has type \"Any\"  [misc]\n__init__.py:8: error: Expression has type \"Any\"  [misc]\n__init__.py:9: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_yahw_x.py:11: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "__init__.py:7: error: Expression has type \"Any\"  [misc]\n__init__.py:8: error: Expression has type \"Any\"  [misc]\n__init__.py:9: error: Expression has type \"Any\"  [misc]\nC:\\x_runner_x\\x_make_common_x\\json_contracts.py:27: error: Expression type contains \"Any\" (has type \"type[type]\")  [misc]\nx_cls_make_yahw_x.py:11: error: Library stubs not installed for \"jsonschema\"  [import-untyped]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unim\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-18T23:52:31.811848+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 7.655755700005102,
                "ended_at": "2025-10-18T23:52:31.811848+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "a50c38fd707d7234c369591450e2f17d4ca25ea5534bea17a6a36de7f5d1ac31",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-18T23:52:24.156094+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py\n  c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py:52:14 - error: Argument of type \"str | None\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__new__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"str | None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is incompatible with protocol \"PathLike[str]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"__fspath__\" is not present (reportArgumentType)\n  c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py:52:14 - error: Argument of type \"str | None\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"str | None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is incompatible with protocol \"PathLike[str]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"__fspath__\" is not present (reportArgumentType)\n  c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py:57:28 - error: Argument of type \"str | None\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__new__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"str | None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is incompatible with protocol \"PathLike[str]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"__fspath__\" is not present (reportArgumentType)\n  c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py:57:28 - error: Argument of type \"str | None\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__init__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"str | None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"str\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is incompatible with protocol \"PathLike[str]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"__fspath__\" is not present (reportArgumentType)\n  c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py:63:20 - error: Cannot access attribute \"value\" for class \"None\"\n  \u00c2\u00a0\u00c2\u00a0Attribute \"value\" is unknown (reportAttributeAccessIssue)\n5 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-18T23:52:24.156094+00:00\nduration: 7.656s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py\n  c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py:52:14 - error: Argument of type \"str | None\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__new__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"str | None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"str\"\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py\n  c:\\x_runner_x\\x_make_yahw_x\\tests\\test_yahw.py:52:14 - error: Argument of type \"str | None\" cannot be assigned to parameter \"args\" of type \"StrPath\" in function \"__new__\"\n  \u00c2\u00a0\u00c2\u00a0Type \"str | None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"None\" is not assignable to type \"StrPath\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"str\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-18T23:52:24.156094+00:00 duration: 7.656s tool_version: pyright 1.1.4\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-18T23:52:20.286199+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 0.5299212000099942,
                "ended_at": "2025-10-18T23:52:20.286199+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "a50c38fd707d7234c369591450e2f17d4ca25ea5534bea17a6a36de7f5d1ac31",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-18T23:52:19.756292+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Mapping\n  |                             ^^^^^^^\n5 | from types import SimpleNamespace\n6 | from typing import cast\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n --> tests\\test_main_json.py:8:8\n  |\n6 | from typing import cast\n7 |\n8 | import pytest\n  |        ^^^^^^\n9 | from x_make_common_x.json_contracts import validate_payload\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:43:5\n   |\n41 |     validate_payload(result, OUTPUT_SCHEMA)\n42 |\n43 |     assert result[\"message\"] == \"Hello integration!\"\n   |     ^^^^^^\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:45:5\n   |\n43 |     assert result[\"message\"] == \"Hello integration!\"\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n   |     ^^^^^^\n46 |     assert metadata.get(\"context_entries\") == 2\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:46:5\n   |\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n46 |     assert metadata.get(\"context_entries\") == 2\n   |     ^^^^^^\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n48 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_main_json.py:46:47\n   |\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n46 |     assert metadata.get(\"context_entries\") == 2\n   |                                               ^\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n48 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:47:5\n   |\n45 |     assert metadata\n46 |     assert metadata.get(\"context_entries\") == 2\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |     ^^^^^^\n48 |     ctx_obj = captured_context[\"ctx\"]\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:49:5\n   |\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n48 |     ctx_obj = captured_context[\"ctx\"]\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |     ^^^^^^\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n51 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:50:5\n   |\n48 |     ctx_obj = captured_context[\"ctx\"]\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n   |     ^^^^^^\n51 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:51:5\n   |\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n51 |     assert ctx_obj.attempt == 3\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> tests\\test_main_json.py:51:31\n   |\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n51 |     assert ctx_obj.attempt == 3\n   |                               ^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_main_json.py:57:32\n   |\n55 |     class FailingRunner(XClsMakeYahwX):\n56 |         def run(self) -> str:\n57 |             raise RuntimeError(\"boom\")\n   |                                ^^^^^^\n58 |\n59 |     monkeypatch.setattr(yahw_module, \"XClsMakeYahwX\", FailingRunner)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:65:5\n   |\n64 |     validate_payload(result, ERROR_SCHEMA)\n65 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n66 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n67 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:67:5\n   |\n65 |     assert result[\"status\"] == \"failure\"\n66 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n67 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_main_json.py:67:5\n   |\n65 |     assert result[\"status\"] == \"failure\"\n66 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n67 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:73:5\n   |\n71 |     result = main_json({})\n72 |     validate_payload(result, ERROR_SCHEMA)\n73 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_yahw.py:63:34\n   |\n61 |         spec.loader.exec_module(module)\n62 |\n63 |     assert excinfo.value.code == 2\n   |                                  ^\n64 |     output = capsys.readouterr()\n65 |     assert \"JSON input required\" in output.err\n   |\n\nE501 Line too long (104 > 88)\n  --> x_cls_make_yahw_x.py:33:89\n   |\n33 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n   |                                                                                         ^^^^^^^^^^^^^^^^\n34 |     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n35 |     if details:\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:37:5\n   |\n35 |       if details:\n36 |           payload[\"details\"] = dict(details)\n37 | /     try:\n38 | |         validate_payload(payload, ERROR_SCHEMA)\n39 | |     except ValidationError:\n40 | |         pass\n   | |____________^\n41 |       return payload\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nE501 Line too long (96 > 88)\n  --> x_cls_make_yahw_x.py:44:89\n   |\n44 | def _build_context(ctx: object | None, overrides: Mapping[str, object] | None) -> object | None:\n   |                                                                                         ^^^^^^^^\n45 |     if not overrides:\n46 |         return ctx\n   |\n\nSLF001 Private member accessed: `_parent_ctx`\n  --> x_cls_make_yahw_x.py:49:9\n   |\n47 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n48 |     if ctx is not None:\n49 |         namespace._parent_ctx = ctx\n   |         ^^^^^^^^^^^^^^^^^^^^^\n50 |     return namespace\n   |\n\nE501 Line too long (96 > 88)\n  --> x_cls_make_yahw_x.py:53:89\n   |\n53 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n   |                                                                                         ^^^^^^^^\n54 |     try:\n55 |         validate_payload(payload, INPUT_SCHEMA)\n   |\n\nE501 Line too long (116 > 88)\n  --> x_cls_make_yahw_x.py:69:89\n   |\n67 |     parameters = cast(\"Mapping[str, object]\", parameters_obj)\n68 |     context_obj = parameters.get(\"context\")\n69 |     context_mapping = cast(\"Mapping[str, object] | None\", context_obj if isinstance(context_obj, Mapping) else None)\n   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n70 |\n71 |     runtime_ctx = _build_context(ctx, context_mapping)\n   |\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n  --> x_cls_make_yahw_x.py:90:56\n   |\n88 |     metadata: dict[str, object] = {}\n89 |     if context_mapping:\n90 |         metadata[\"context_keys\"] = sorted(str(key) for key in context_mapping.keys())\n   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n91 |         metadata[\"context_entries\"] = len(metadata[\"context_keys\"])\n92 |     if runtime_ctx is not ctx and runtime_ctx is not None and ctx is not None:\n   |\nhelp: Remove `.keys()`\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_yahw_x.py:127:89\n    |\n125 | def _run_json_cli(args: Sequence[str]) -> None:\n126 |     parser = argparse.ArgumentParser(description=\"x_make_yahw_x JSON runner\")\n127 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n128 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n129 |     parsed = parser.parse_args(args)\n    |\n\nFound 25 errors.\nNo fixes available (6 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:52:19.756292+00:00\nduration: 0.530s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Mapping\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Mapping\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 202\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-18T23:52:14.739024+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 0.23249749999376945,
                "ended_at": "2025-10-18T23:52:14.739024+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "a50c38fd707d7234c369591450e2f17d4ca25ea5534bea17a6a36de7f5d1ac31",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-18T23:52:14.506530+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Mapping\n  |                             ^^^^^^^\n5 | from types import SimpleNamespace\n6 | from typing import cast\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n --> tests\\test_main_json.py:8:8\n  |\n6 | from typing import cast\n7 |\n8 | import pytest\n  |        ^^^^^^\n9 | from x_make_common_x.json_contracts import validate_payload\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:43:5\n   |\n41 |     validate_payload(result, OUTPUT_SCHEMA)\n42 |\n43 |     assert result[\"message\"] == \"Hello integration!\"\n   |     ^^^^^^\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:45:5\n   |\n43 |     assert result[\"message\"] == \"Hello integration!\"\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n   |     ^^^^^^\n46 |     assert metadata.get(\"context_entries\") == 2\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:46:5\n   |\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n46 |     assert metadata.get(\"context_entries\") == 2\n   |     ^^^^^^\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n48 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_main_json.py:46:47\n   |\n44 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n45 |     assert metadata\n46 |     assert metadata.get(\"context_entries\") == 2\n   |                                               ^\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n48 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:47:5\n   |\n45 |     assert metadata\n46 |     assert metadata.get(\"context_entries\") == 2\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |     ^^^^^^\n48 |     ctx_obj = captured_context[\"ctx\"]\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:49:5\n   |\n47 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n48 |     ctx_obj = captured_context[\"ctx\"]\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |     ^^^^^^\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n51 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:50:5\n   |\n48 |     ctx_obj = captured_context[\"ctx\"]\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n   |     ^^^^^^\n51 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:51:5\n   |\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n51 |     assert ctx_obj.attempt == 3\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> tests\\test_main_json.py:51:31\n   |\n49 |     assert isinstance(ctx_obj, SimpleNamespace)\n50 |     assert ctx_obj.invoked_by == \"json-test\"\n51 |     assert ctx_obj.attempt == 3\n   |                               ^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_main_json.py:57:32\n   |\n55 |     class FailingRunner(XClsMakeYahwX):\n56 |         def run(self) -> str:\n57 |             raise RuntimeError(\"boom\")\n   |                                ^^^^^^\n58 |\n59 |     monkeypatch.setattr(yahw_module, \"XClsMakeYahwX\", FailingRunner)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:65:5\n   |\n64 |     validate_payload(result, ERROR_SCHEMA)\n65 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n66 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n67 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:67:5\n   |\n65 |     assert result[\"status\"] == \"failure\"\n66 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n67 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_main_json.py:67:5\n   |\n65 |     assert result[\"status\"] == \"failure\"\n66 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n67 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:73:5\n   |\n71 |     result = main_json({})\n72 |     validate_payload(result, ERROR_SCHEMA)\n73 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_yahw.py:63:34\n   |\n61 |         spec.loader.exec_module(module)\n62 |\n63 |     assert excinfo.value.code == 2\n   |                                  ^\n64 |     output = capsys.readouterr()\n65 |     assert \"JSON input required\" in output.err\n   |\n\nE501 Line too long (104 > 88)\n  --> x_cls_make_yahw_x.py:33:89\n   |\n33 | def _failure_payload(message: str, *, details: Mapping[str, object] | None = None) -> dict[str, object]:\n   |                                                                                         ^^^^^^^^^^^^^^^^\n34 |     payload: dict[str, object] = {\"status\": \"failure\", \"message\": message}\n35 |     if details:\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:37:5\n   |\n35 |       if details:\n36 |           payload[\"details\"] = dict(details)\n37 | /     try:\n38 | |         validate_payload(payload, ERROR_SCHEMA)\n39 | |     except ValidationError:\n40 | |         pass\n   | |____________^\n41 |       return payload\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nE501 Line too long (96 > 88)\n  --> x_cls_make_yahw_x.py:44:89\n   |\n44 | def _build_context(ctx: object | None, overrides: Mapping[str, object] | None) -> object | None:\n   |                                                                                         ^^^^^^^^\n45 |     if not overrides:\n46 |         return ctx\n   |\n\nSLF001 Private member accessed: `_parent_ctx`\n  --> x_cls_make_yahw_x.py:49:9\n   |\n47 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n48 |     if ctx is not None:\n49 |         namespace._parent_ctx = ctx\n   |         ^^^^^^^^^^^^^^^^^^^^^\n50 |     return namespace\n   |\n\nE501 Line too long (96 > 88)\n  --> x_cls_make_yahw_x.py:53:89\n   |\n53 | def main_json(payload: Mapping[str, object], *, ctx: object | None = None) -> dict[str, object]:\n   |                                                                                         ^^^^^^^^\n54 |     try:\n55 |         validate_payload(payload, INPUT_SCHEMA)\n   |\n\nE501 Line too long (116 > 88)\n  --> x_cls_make_yahw_x.py:69:89\n   |\n67 |     parameters = cast(\"Mapping[str, object]\", parameters_obj)\n68 |     context_obj = parameters.get(\"context\")\n69 |     context_mapping = cast(\"Mapping[str, object] | None\", context_obj if isinstance(context_obj, Mapping) else None)\n   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n70 |\n71 |     runtime_ctx = _build_context(ctx, context_mapping)\n   |\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n  --> x_cls_make_yahw_x.py:90:56\n   |\n88 |     metadata: dict[str, object] = {}\n89 |     if context_mapping:\n90 |         metadata[\"context_keys\"] = sorted(str(key) for key in context_mapping.keys())\n   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n91 |         metadata[\"context_entries\"] = len(metadata[\"context_keys\"])\n92 |     if runtime_ctx is not ctx and runtime_ctx is not None and ctx is not None:\n   |\nhelp: Remove `.keys()`\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_yahw_x.py:127:89\n    |\n125 | def _run_json_cli(args: Sequence[str]) -> None:\n126 |     parser = argparse.ArgumentParser(description=\"x_make_yahw_x JSON runner\")\n127 |     parser.add_argument(\"--json\", action=\"store_true\", help=\"Read JSON payload from stdin\")\n    |                                                                                         ^^^\n128 |     parser.add_argument(\"--json-file\", type=str, help=\"Path to JSON payload file\")\n129 |     parsed = parser.parse_args(args)\n    |\n\nFound 35 errors (10 fixed, 25 remaining).\nNo fixes available (6 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-18T23:52:14.506530+00:00\nduration: 0.232s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Mapping\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Mapping\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        }
    ],
    "generated_at": "2025-10-18T23:52:31.839691+00:00",
    "runtime": {
        "environment": {
            "PATH": "C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\eye43\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\eye43\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\eye43\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;c:\\Users\\eye43\\.vscode\\extensions\\ms-python.debugpy-2025.14.1-win32-x64\\bundled\\scripts\\noConfigScripts;c:\\Users\\eye43\\AppData\\Roaming\\Code\\User\\globalStorage\\github.copilot-chat\\debugCommand"
        },
        "platform": "Windows-11-10.0.26100-SP0",
        "python_executable": "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
        "python_version": "3.14.0 (tags/v3.14.0:ebf955d, Oct  7 2025, 10:15:03) [MSC v.1944 64 bit (AMD64)]",
        "run_completed_at": "2025-10-18T23:52:31.824816+00:00",
        "run_started_at": "2025-10-18T23:47:45.790320+00:00",
        "workspace_root": "C:\\x_runner_x"
    },
    "schema_version": "1.0",
    "summary": {
        "overall_stats": {
            "cache_hits": 0,
            "cache_misses": 60,
            "failed_tools": 59,
            "had_failures": true,
            "total_tools_run": 60
        },
        "repos": {
            "x_0_make_all_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "660c6e75ed5113f10ab8d70d3f09734e217d064b41941093f2f29091abcd5d6e",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_common_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "bf7966a40c0b5bd2acce8e7755cf129fe99edd56e5ec70e719d01823ba212c0e",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_clones_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "463440f25884474eee33f3459f1150b0e9abe6ab700a84ea8b520869072e148b",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_visitor_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "2d540b74a87514aaaf04d40006d7b3c009eb1a051c863011a7d3935b37d97fe6",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_graphviz_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "43f38ac01a775b0d8dcf65d3e63cf333be159f40fe373cf0a698dcb27f67461c",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_markdown_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "007c0cd82cf69ebfcfdc5936391ad9a1c4fed748d5927c39241617410c2f2035",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_mermaid_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "c63f34b6c21a388b14f351a3b16e505d9d97c7a1309a4eeea59cd3fb45b3400c",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_persistent_env_var_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "eb7daef8b99b4f5d6f840585b04f293f47af9251712dfac2cf513a5a8907980e",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_pip_updates_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "51833a5129d72088cd908244b4484351fd5ebea3a3685bf996c7249fb07ac78d",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_py_mod_sideload_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "7daf205a8de40a738c9d3f284000920c0a24be3b7112c78a97e5eaeb319ca4d9",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_pypi_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "258a549f71997cbe43477f0fa8475555513030f4513d3497b8edb5103139294b",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_yahw_x": {
                "cached": 0,
                "failed": 5,
                "repo_hash": "a50c38fd707d7234c369591450e2f17d4ca25ea5534bea17a6a36de7f5d1ac31",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            }
        },
        "timestamp": "2025-10-18T23:52:31.855951+00:00",
        "total_repos": 12
    },
    "tool_versions": {
        "black": "python -m black, 25.9.0 (compiled: no)\nPython (CPython) 3.14.0",
        "mypy": "mypy 1.18.2 (compiled: yes)",
        "pyright": "pyright 1.1.406",
        "ruff": "ruff 0.14.1"
    },
    "workspace_root": "C:\\x_runner_x"
}