{
    "failures": [
        {
            "captured_at": "2025-10-21T18:50:46.955171+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 4.734081200003857,
                "ended_at": "2025-10-21T18:50:46.955171+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/progress_board.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_orchestrator_visitor_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "cf15ac467210269842587148d4426c671d53b74d9607cb58fef95b0d4c8b9b1d",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-21T18:50:42.220823+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 28 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-21 18:49:56.654901+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-21 18:50:46.553427+00:00\n@@ -1642,13 +1642,11 @@\n                 message=message,\n                 context=_StageFailureContext(exception=exc),\n             )\n             raise RuntimeError(message) from exc\n         if exit_code is None:\n-            message = (\n-                \"Environment vault did not report an exit code; aborting run.\"\n-            )\n+            message = \"Environment vault did not report an exit code; aborting run.\"\n             self._record_environment_stage_failure(\n                 stage_id=stage_id,\n                 stage_title=stage_title,\n                 metadata=metadata,\n                 message=message,\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T18:50:42.220823+00:00\nduration: 4.734s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-21 18:49:56.654901+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-21 18:50:46.553427+00:00\n@@ -1642,13 +1642,11 @@\n                 message=message,\n                 context=_StageFailureContext(exception=exc),\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 28 files would be left unchanged.",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 28 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-21 18:49:56.654901+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-21 18:50:46.553427+00:00\n@@ -1642,13 +1642,11 @@\n                 message=message,\n                 context=_StageFailureContext(exception=exc),\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T18:50:42.220823+00:00 durat\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T18:50:48.795389+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 1.58437330002198,
                "ended_at": "2025-10-21T18:50:48.795389+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/progress_board.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_orchestrator_visitor_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "cf15ac467210269842587148d4426c671d53b74d9607cb58fef95b0d4c8b9b1d",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-21T18:50:47.224784+00:00",
                "stderr": "",
                "stdout": "interface\\gui\\prototypes\\shared.py:1042: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1045: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1104: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1107: error: Expression has type \"Any\"  [misc]\nFound 4 errors in 1 file (checked 25 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:50:47.224784+00:00\nduration: 1.584s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\ninterface\\gui\\prototypes\\shared.py:1042: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1045: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1104: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1107: error: Expression has type \"Any\"  [misc]\nFound 4 errors in 1 file (checked 25 source files)\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "interface\\gui\\prototypes\\shared.py:1042: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1045: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1104: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1107: error: Expression has type \"Any\"  [misc]\nFound 4 errors in 1 file (checked 25 source files)",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-un\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:52:57.677319+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 1.5414629000006244,
                "ended_at": "2025-10-21T18:52:57.677319+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "e6d3fd499066fcda507baba13e50d3cd6fdce4393cad13e34049c3d78420e562",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-21T18:52:56.137484+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 12 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\t2025-10-21 18:49:34.451615+00:00\n+++ C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\t2025-10-21 18:52:57.472211+00:00\n@@ -101,11 +101,11 @@\n \n     def fake_write(\n         payload_data: dict[str, object],\n         *,\n         base_dir: Path | str,\n-    _timestamp: object | None = None,\n+        _timestamp: object | None = None,\n     ) -> Path:\n         base = Path(base_dir)\n         report_path = base / \"reports\" / \"run.json\"\n         report_path.parent.mkdir(parents=True, exist_ok=True)\n         report_path.write_text(json.dumps(payload_data), encoding=\"utf-8\")\n@@ -180,11 +180,11 @@\n \n     def fake_write(\n         payload_data: dict[str, object],\n         *,\n         base_dir: Path | str,\n-    _timestamp: object | None = None,\n+        _timestamp: object | None = None,\n     ) -> Path:\n         base = Path(base_dir)\n         report_path = base / \"reports\" / \"run.json\"\n         report_path.parent.mkdir(parents=True, exist_ok=True)\n         report_path.write_text(json.dumps(payload_data), encoding=\"utf-8\")\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T18:52:56.137484+00:00\nduration: 1.541s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\t2025-10-21 18:49:34.451615+00:00\n+++ C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\t2025-10-21 18:52:57.472211+00:00\n@@ -101,11 +101,11 @@\n \n     def fake_write(\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 12 files would be left unchanged.",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 12 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\t2025-10-21 18:49:34.451615+00:00\n+++ C:\\x_runner_x\\x_make_github_clones_x\\tests\\test_json_contracts.py\t2025-10-21 18:52:57.472211+00:00\n@@ -101,11 +101,11 @@\n \n     def fake_write(\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T18:52:56.13\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T18:52:58.401822+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 0.4766001999960281,
                "ended_at": "2025-10-21T18:52:58.401822+00:00",
                "exit": 2,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "e6d3fd499066fcda507baba13e50d3cd6fdce4393cad13e34049c3d78420e562",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-21T18:52:57.930099+00:00",
                "stderr": "",
                "stdout": "json_contracts.py: error: Source file found twice under different module names: \"json_contracts\" and \"x_make_github_clones_x.json_contracts\"\nFound 1 error in 1 file (errors prevented further checking)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 2",
            "message": "mypy failed for x_make_github_clones_x (exit 2)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:52:57.930099+00:00\nduration: 0.477s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\njson_contracts.py: error: Source file found twice under different module names: \"json_contracts\" and \"x_make_github_clones_x.json_contracts\"\nFound 1 error in 1 file (errors prevented further checking)\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "json_contracts.py: error: Source file found twice under different module names: \"json_contracts\" and \"x_make_github_clones_x.json_contracts\"\nFound 1 error in 1 file (errors prevented further checking)",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_github_clones_x (exit 2) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable -\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:52:57.920812+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 0.24274159999913536,
                "ended_at": "2025-10-21T18:52:57.920812+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "e6d3fd499066fcda507baba13e50d3cd6fdce4393cad13e34049c3d78420e562",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-21T18:52:57.682348+00:00",
                "stderr": "",
                "stdout": "E501 Line too long (91 > 88)\n --> __init__.py:5:89\n  |\n3 | from __future__ import annotations\n4 |\n5 | from x_make_github_clones_x.x_cls_make_github_clones_x import (  # re-export public surface\n  |                                                                                         ^^^\n6 |     RepoRecord,\n7 |     main_json,\n  |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     validate_payload(result, OUTPUT_SCHEMA)\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n123 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n123 |     assert status_value == \"success\"\n    |     ^^^^^^\n124 |\n125 |     invocation_obj = result.get(\"invocation\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:126:5\n    |\n125 |     invocation_obj = result.get(\"invocation\")\n126 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n    |     ^^^^^^\n130 |     assert target_dir_value == str(target_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n130 |     assert target_dir_value == str(target_dir)\n    |     ^^^^^^\n131 |\n132 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n132 |     summary_obj = result.get(\"summary\")\n133 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n    |     ^^^^^^\n137 |     assert successful_value == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n137 |     assert successful_value == 1\n    |     ^^^^^^\n138 |\n139 |     repos_obj = result.get(\"repos\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:140:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n    |     ^^^^^^\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n141 |     assert repos_obj, \"repo list should not be empty\"\n    |     ^^^^^^\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |     ^^^^^^\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:201:5\n    |\n199 |     validate_payload(result, OUTPUT_SCHEMA)\n200 |     invocation_obj = result.get(\"invocation\")\n201 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:204:5\n    |\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n    |     ^^^^^^\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:205:5\n    |\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:216:5\n    |\n214 |     status_value = result.get(\"status\")\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:217:5\n    |\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:218:5\n    |\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |     ^^^^^^\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:219:5\n    |\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:235:5\n    |\n233 |       if details:\n234 |           payload[\"details\"] = dict(details)\n235 | /     try:\n236 | |         validate_payload(payload, ERROR_SCHEMA)\n237 | |     except ValidationError:\n238 | |         pass\n    | |____________^\n239 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:242:33\n    |\n242 | def _coerce_bool(value: object, default: bool) -> bool:\n    |                                 ^^^^^^^\n243 |     if isinstance(value, bool):\n244 |         return value\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_github_clones_x.py:272:59\n    |\n270 |         os.environ[env_name] = \"1\" if value else \"0\"\n271 |     elif isinstance(value, str):\n272 |         os.environ[env_name] = \"1\" if _coerce_bool(value, False) else \"0\"\n    |                                                           ^^^^^\n273 |     return original, original_present\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:276:58\n    |\n276 | def _restore_allow_token_clone_env(original: str | None, present: bool) -> None:\n    |                                                          ^^^^^^^\n277 |     env_name = x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV\n278 |     if present:\n    |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1182:55\n     |\n1180 |     target_dir_path = Path(target_dir_str)\n1181 |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n     |                                                       ^^^^^\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1183:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n     |                                                                   ^^^^^\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1184:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |                                                                   ^^^^^\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1185:71\n     |\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |                                                                       ^^^^\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nFound 30 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:52:57.682348+00:00\nduration: 0.243s\ntool_version: ruff 0.14.1\nstdout:\nE501 Line too long (91 > 88)\n --> __init__.py:5:89\n  |\n3 | from __future__ import annotations\n4 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "E501 Line too long (91 > 88)\n --> __init__.py:5:89\n  |\n3 | from __future__ import annotations\n4 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py3\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:52:56.129589+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 0.28615759999956936,
                "ended_at": "2025-10-21T18:52:56.129589+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "e6d3fd499066fcda507baba13e50d3cd6fdce4393cad13e34049c3d78420e562",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-21T18:52:55.844435+00:00",
                "stderr": "",
                "stdout": "E501 Line too long (91 > 88)\n --> __init__.py:5:89\n  |\n3 | from __future__ import annotations\n4 |\n5 | from x_make_github_clones_x.x_cls_make_github_clones_x import (  # re-export public surface\n  |                                                                                         ^^^\n6 |     RepoRecord,\n7 |     main_json,\n  |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     validate_payload(result, OUTPUT_SCHEMA)\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n123 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n123 |     assert status_value == \"success\"\n    |     ^^^^^^\n124 |\n125 |     invocation_obj = result.get(\"invocation\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:126:5\n    |\n125 |     invocation_obj = result.get(\"invocation\")\n126 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n    |     ^^^^^^\n130 |     assert target_dir_value == str(target_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n130 |     assert target_dir_value == str(target_dir)\n    |     ^^^^^^\n131 |\n132 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n132 |     summary_obj = result.get(\"summary\")\n133 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n    |     ^^^^^^\n137 |     assert successful_value == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n137 |     assert successful_value == 1\n    |     ^^^^^^\n138 |\n139 |     repos_obj = result.get(\"repos\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:140:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n    |     ^^^^^^\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n141 |     assert repos_obj, \"repo list should not be empty\"\n    |     ^^^^^^\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |     ^^^^^^\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:201:5\n    |\n199 |     validate_payload(result, OUTPUT_SCHEMA)\n200 |     invocation_obj = result.get(\"invocation\")\n201 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:204:5\n    |\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n    |     ^^^^^^\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:205:5\n    |\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:216:5\n    |\n214 |     status_value = result.get(\"status\")\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:217:5\n    |\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:218:5\n    |\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |     ^^^^^^\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:219:5\n    |\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:235:5\n    |\n233 |       if details:\n234 |           payload[\"details\"] = dict(details)\n235 | /     try:\n236 | |         validate_payload(payload, ERROR_SCHEMA)\n237 | |     except ValidationError:\n238 | |         pass\n    | |____________^\n239 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:242:33\n    |\n242 | def _coerce_bool(value: object, default: bool) -> bool:\n    |                                 ^^^^^^^\n243 |     if isinstance(value, bool):\n244 |         return value\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_github_clones_x.py:272:59\n    |\n270 |         os.environ[env_name] = \"1\" if value else \"0\"\n271 |     elif isinstance(value, str):\n272 |         os.environ[env_name] = \"1\" if _coerce_bool(value, False) else \"0\"\n    |                                                           ^^^^^\n273 |     return original, original_present\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:276:58\n    |\n276 | def _restore_allow_token_clone_env(original: str | None, present: bool) -> None:\n    |                                                          ^^^^^^^\n277 |     env_name = x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV\n278 |     if present:\n    |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1182:55\n     |\n1180 |     target_dir_path = Path(target_dir_str)\n1181 |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n     |                                                       ^^^^^\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1183:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n     |                                                                   ^^^^^\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1184:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |                                                                   ^^^^^\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1185:71\n     |\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |                                                                       ^^^^\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nFound 30 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:52:55.844435+00:00\nduration: 0.286s\ntool_version: ruff 0.14.1\nstdout:\nE501 Line too long (91 > 88)\n --> __init__.py:5:89\n  |\n3 | from __future__ import annotations\n4 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "E501 Line too long (91 > 88)\n --> __init__.py:5:89\n  |\n3 | from __future__ import annotations\n4 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:54:00.382417+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 1.6209311000129674,
                "ended_at": "2025-10-21T18:54:00.382417+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43da14231f363990dd945df31aa5c9f6b3ae3de5116e7f8326c3ffdf02b6af36",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-21T18:53:58.761206+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\t2025-10-21 18:49:38.073201+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\t2025-10-21 18:53:59.983608+00:00\n@@ -1,11 +1,11 @@\n \"\"\"x_make_graphviz_x package.\"\"\"\n \n from __future__ import annotations\n \n from x_make_graphviz_x.x_cls_make_graphviz_x import (\n-\tGraphvizBuilder,\n-\tmain_json,\n-\tx_cls_make_graphviz_x,\n+    GraphvizBuilder,\n+    main_json,\n+    x_cls_make_graphviz_x,\n )\n \n __all__ = [\"GraphvizBuilder\", \"main_json\", \"x_cls_make_graphviz_x\"]\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T18:53:58.761206+00:00\nduration: 1.621s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\t2025-10-21 18:49:38.073201+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\t2025-10-21 18:53:59.983608+00:00\n@@ -1,11 +1,11 @@\n \"\"\"x_make_graphviz_x package.\"\"\"\n \n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\t2025-10-21 18:49:38.073201+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\__init__.py\t2025-10-21 18:53:59.983608+00:00\n@@ -1,11 +1,11 @@\n \"\"\"x_make_graphviz_x package.\"\"\"\n \n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T18:53:58.761206+00:00\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T18:54:01.022897+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.3817740000085905,
                "ended_at": "2025-10-21T18:54:01.022897+00:00",
                "exit": 2,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43da14231f363990dd945df31aa5c9f6b3ae3de5116e7f8326c3ffdf02b6af36",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-21T18:54:00.642515+00:00",
                "stderr": "",
                "stdout": "x_cls_make_graphviz_x.py: error: Source file found twice under different module names: \"x_cls_make_graphviz_x\" and \"x_make_graphviz_x.x_cls_make_graphviz_x\"\nFound 1 error in 1 file (errors prevented further checking)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 2",
            "message": "mypy failed for x_make_graphviz_x (exit 2)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:54:00.642515+00:00\nduration: 0.382s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_graphviz_x.py: error: Source file found twice under different module names: \"x_cls_make_graphviz_x\" and \"x_make_graphviz_x.x_cls_make_graphviz_x\"\nFound 1 error in 1 file (errors prevented further checking)\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_graphviz_x.py: error: Source file found twice under different module names: \"x_cls_make_graphviz_x\" and \"x_make_graphviz_x.x_cls_make_graphviz_x\"\nFound 1 error in 1 file (errors prevented further checking)",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_graphviz_x (exit 2) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:54:00.638888+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.13796399999409914,
                "ended_at": "2025-10-21T18:54:00.638888+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43da14231f363990dd945df31aa5c9f6b3ae3de5116e7f8326c3ffdf02b6af36",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-21T18:54:00.501260+00:00",
                "stderr": "",
                "stdout": "W191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n  | ^^^^\n7 |     main_json,\n8 |     x_cls_make_graphviz_x,\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:7:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n7 |     main_json,\n  | ^^^^\n8 |     x_cls_make_graphviz_x,\n9 | )\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:8:1\n  |\n6 |     GraphvizBuilder,\n7 |     main_json,\n8 |     x_cls_make_graphviz_x,\n  | ^^^^\n9 | )\n  |\n\nSLF001 Private member accessed: `_dot_source`\n   --> x_cls_make_graphviz_x.py:560:18\n    |\n558 |         svg_path = svg_result if svg_result else None\n559 |\n560 |     dot_source = builder._dot_source()\n    |                  ^^^^^^^^^^^^^^^^^^^\n561 |     result: dict[str, object] = {\n562 |         \"status\": \"success\",\n    |\n\nFound 4 errors.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:54:00.501260+00:00\nduration: 0.138s\ntool_version: ruff 0.14.1\nstdout:\nW191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "W191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:53:58.749029+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.13478310001664795,
                "ended_at": "2025-10-21T18:53:58.749029+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "43da14231f363990dd945df31aa5c9f6b3ae3de5116e7f8326c3ffdf02b6af36",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-21T18:53:58.621308+00:00",
                "stderr": "",
                "stdout": "W191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n  | ^^^^\n7 |     main_json,\n8 |     x_cls_make_graphviz_x,\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:7:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n7 |     main_json,\n  | ^^^^\n8 |     x_cls_make_graphviz_x,\n9 | )\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:8:1\n  |\n6 |     GraphvizBuilder,\n7 |     main_json,\n8 |     x_cls_make_graphviz_x,\n  | ^^^^\n9 | )\n  |\n\nSLF001 Private member accessed: `_dot_source`\n   --> x_cls_make_graphviz_x.py:560:18\n    |\n558 |         svg_path = svg_result if svg_result else None\n559 |\n560 |     dot_source = builder._dot_source()\n    |                  ^^^^^^^^^^^^^^^^^^^\n561 |     result: dict[str, object] = {\n562 |         \"status\": \"success\",\n    |\n\nFound 4 errors.\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:53:58.621308+00:00\nduration: 0.135s\ntool_version: ruff 0.14.1\nstdout:\nW191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "W191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n5 | from x_make_graphviz_x.x_cls_make_graphviz_x import (\n6 |     GraphvizBuilder,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 sta\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:54:28.906090+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 1.3847740999772213,
                "ended_at": "2025-10-21T18:54:28.906090+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "c568f0be6d2c020ebd5b0adb9123aa8e5595df40125273f67b589bd546821ab2",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-21T18:54:27.523819+00:00",
                "stderr": "",
                "stdout": "x_cls_make_markdown_x.py:295: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:301: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:303: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:308: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:313: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:318: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:342: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_markdown_x.py:423: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_markdown_x.py:451: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:454: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:454: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\nFound 12 errors in 2 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:54:27.523819+00:00\nduration: 1.385s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_markdown_x.py:295: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:301: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:303: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:308: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:313: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_markdown_x.py:295: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:301: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:303: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:308: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:313: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:54:27.520429+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 0.14393109999946319,
                "ended_at": "2025-10-21T18:54:27.520429+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "c568f0be6d2c020ebd5b0adb9123aa8e5595df40125273f67b589bd546821ab2",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-21T18:54:27.376838+00:00",
                "stderr": "",
                "stdout": "PERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n280 |                 rows.append([str(cell) for cell in entry])\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n281 |     return rows\n    |\nhelp: Replace for loop with list.extend\n\nC901 `main_json` is too complex (11 > 10)\n   --> x_cls_make_markdown_x.py:333:5\n    |\n333 | def main_json(\n    |     ^^^^^^^^^\n334 |     payload: Mapping[str, object],\n335 |     *,\n    |\n\nFound 2 errors.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:54:27.376838+00:00\nduration: 0.144s\ntool_version: ruff 0.14.1\nstdout:\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "PERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:54:25.770058+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 0.1645450000069104,
                "ended_at": "2025-10-21T18:54:25.770058+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "c568f0be6d2c020ebd5b0adb9123aa8e5595df40125273f67b589bd546821ab2",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-21T18:54:25.608416+00:00",
                "stderr": "",
                "stdout": "PERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n280 |                 rows.append([str(cell) for cell in entry])\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n281 |     return rows\n    |\nhelp: Replace for loop with list.extend\n\nC901 `main_json` is too complex (11 > 10)\n   --> x_cls_make_markdown_x.py:333:5\n    |\n333 | def main_json(\n    |     ^^^^^^^^^\n334 |     payload: Mapping[str, object],\n335 |     *,\n    |\n\nFound 2 errors.\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:54:25.608416+00:00\nduration: 0.165s\ntool_version: ruff 0.14.1\nstdout:\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "PERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 sta\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:54:57.993909+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 1.385470199980773,
                "ended_at": "2025-10-21T18:54:57.993909+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "2917e3caf3adf1a3dc56d94a48d730cfb9021188ed4208c03f5ee944ac8aa28a",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-21T18:54:56.613090+00:00",
                "stderr": "",
                "stdout": "x_cls_make_mermaid_x.py:467: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1031: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1144: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1172: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1175: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1175: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:29: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:71: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:72: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:80: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:82: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:83: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:87: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:119: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:142: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:143: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:144: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 17 errors in 2 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:54:56.613090+00:00\nduration: 1.385s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_mermaid_x.py:467: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1031: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1144: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1172: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1175: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_mermaid_x.py:467: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1031: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1144: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1172: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1175: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-an\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:54:56.599445+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 0.14398910000454634,
                "ended_at": "2025-10-21T18:54:56.599445+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "2917e3caf3adf1a3dc56d94a48d730cfb9021188ed4208c03f5ee944ac8aa28a",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-21T18:54:56.465051+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     validate_payload(result, OUTPUT_SCHEMA)\n122 |     status_value = result.get(\"status\")\n123 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n124 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     status_value = result.get(\"status\")\n123 |     assert isinstance(status_value, str)\n124 |     assert status_value == \"success\"\n    |     ^^^^^^\n125 |\n126 |     artifact_obj = result.get(\"mermaid\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:127:5\n    |\n126 |     artifact_obj = result.get(\"mermaid\")\n127 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n128 |     source_path_value = artifact_obj.get(\"source_path\")\n129 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n127 |     assert isinstance(artifact_obj, dict)\n128 |     source_path_value = artifact_obj.get(\"source_path\")\n129 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n130 |     mermaid_path = Path(source_path_value)\n131 |     assert mermaid_path.exists()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:131:5\n    |\n129 |     assert isinstance(source_path_value, str)\n130 |     mermaid_path = Path(source_path_value)\n131 |     assert mermaid_path.exists()\n    |     ^^^^^^\n132 |     source_bytes = artifact_obj.get(\"source_bytes\")\n133 |     assert isinstance(source_bytes, int)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n131 |     assert mermaid_path.exists()\n132 |     source_bytes = artifact_obj.get(\"source_bytes\")\n133 |     assert isinstance(source_bytes, int)\n    |     ^^^^^^\n134 |     assert source_bytes > 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     source_bytes = artifact_obj.get(\"source_bytes\")\n133 |     assert isinstance(source_bytes, int)\n134 |     assert source_bytes > 0\n    |     ^^^^^^\n135 |\n136 |     svg_info_obj = artifact_obj.get(\"svg\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n136 |     svg_info_obj = artifact_obj.get(\"svg\")\n137 |     assert isinstance(svg_info_obj, dict)\n    |     ^^^^^^\n138 |     assert svg_info_obj.get(\"succeeded\") is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:138:5\n    |\n136 |     svg_info_obj = artifact_obj.get(\"svg\")\n137 |     assert isinstance(svg_info_obj, dict)\n138 |     assert svg_info_obj.get(\"succeeded\") is True\n    |     ^^^^^^\n139 |\n140 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n140 |     summary_obj = result.get(\"summary\")\n141 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n140 |     summary_obj = result.get(\"summary\")\n141 |     assert isinstance(summary_obj, dict)\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n    |     ^^^^^^\n143 |     assert summary_obj.get(\"nodes\") == 2\n144 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     assert isinstance(summary_obj, dict)\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n    |     ^^^^^^\n144 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:143:40\n    |\n141 |     assert isinstance(summary_obj, dict)\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n    |                                        ^\n144 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n144 |     assert summary_obj.get(\"edges\") == 1\n    |     ^^^^^^\n145 |\n146 |     messages_obj = result.get(\"messages\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:147:5\n    |\n146 |     messages_obj = result.get(\"messages\")\n147 |     assert isinstance(messages_obj, list)\n    |     ^^^^^^\n148 |     assert messages_obj\n149 |     first_message = messages_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:148:5\n    |\n146 |     messages_obj = result.get(\"messages\")\n147 |     assert isinstance(messages_obj, list)\n148 |     assert messages_obj\n    |     ^^^^^^\n149 |     first_message = messages_obj[0]\n150 |     assert isinstance(first_message, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:150:5\n    |\n148 |     assert messages_obj\n149 |     first_message = messages_obj[0]\n150 |     assert isinstance(first_message, str)\n    |     ^^^^^^\n151 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:151:5\n    |\n149 |     first_message = messages_obj[0]\n150 |     assert isinstance(first_message, str)\n151 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:167:5\n    |\n165 |     validate_payload(result, OUTPUT_SCHEMA)\n166 |     artifact_obj = result.get(\"mermaid\")\n167 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n168 |     source_path_value = artifact_obj.get(\"source_path\")\n169 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:169:5\n    |\n167 |     assert isinstance(artifact_obj, dict)\n168 |     source_path_value = artifact_obj.get(\"source_path\")\n169 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n170 |     mermaid_path = Path(source_path_value)\n171 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:171:5\n    |\n169 |     assert isinstance(source_path_value, str)\n170 |     mermaid_path = Path(source_path_value)\n171 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |     ^^^^^^\n172 |\n173 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:174:5\n    |\n173 |     summary_obj = result.get(\"summary\")\n174 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n175 |     assert summary_obj.get(\"export_svg\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:175:5\n    |\n173 |     summary_obj = result.get(\"summary\")\n174 |     assert isinstance(summary_obj, dict)\n175 |     assert summary_obj.get(\"export_svg\") is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:186:5\n    |\n184 |     status_value = result.get(\"status\")\n185 |     message_value = result.get(\"message\")\n186 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n187 |     assert isinstance(message_value, str)\n188 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:187:5\n    |\n185 |     message_value = result.get(\"message\")\n186 |     assert isinstance(status_value, str)\n187 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n188 |     assert status_value == \"failure\"\n189 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:188:5\n    |\n186 |     assert isinstance(status_value, str)\n187 |     assert isinstance(message_value, str)\n188 |     assert status_value == \"failure\"\n    |     ^^^^^^\n189 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:189:5\n    |\n187 |     assert isinstance(message_value, str)\n188 |     assert status_value == \"failure\"\n189 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nC901 `_set_diagram` is too complex (20 > 10)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nPLR0912 Too many branches (20 > 12)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:211:9\n    |\n209 |         builder.quadrants(title)\n210 |     elif diagram == _SANKEY:\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n    |         ^^^^^^^^^^^^\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:213:9\n    |\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |         ^^^^^^^^^^^^\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:215:9\n    |\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |         ^^^^^^^^^^^^\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:217:9\n    |\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |         ^^^^^^^^^^^^\n218 |         if title:\n219 |             builder.raw(f\"title {_esc(title)}\")\n    |\n\nC901 `_apply_instruction` is too complex (48 > 10)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0912 Too many branches (47 > 12)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0915 Too many statements (115 > 50)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> x_cls_make_mermaid_x.py:323:63\n    |\n321 |         text = payload.get(\"text\")\n322 |         if isinstance(text, str):\n323 |             if isinstance(who, (list, tuple)) and len(who) == 2:\n    |                                                               ^\n324 |                 first, second = who\n325 |                 if isinstance(first, str) and isinstance(second, str):\n    |\n\nSLF001 Private member accessed: `_runner`\n   --> x_cls_make_mermaid_x.py:487:16\n    |\n485 |         stem=output_path.stem,\n486 |         mermaid_cli_path=mermaid_cli_path,\n487 |         runner=builder._runner if builder else None,\n    |                ^^^^^^^^^^^^^^^\n488 |     )\n489 |     if export.succeeded:\n    |\n\nC901 `main_json` is too complex (11 > 10)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nPLR0915 Too many statements (51 > 50)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nFound 40 errors.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:54:56.465051+00:00\nduration: 0.144s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     validate_payload(result, OUTPUT_SCHEMA)\n122 |     status_value = result.get(\"status\")\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     validate_payload(result, OUTPUT_SCHEMA)\n122 |     status_value = result.get(\"status\")\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_a\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:54:54.840693+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 0.17647480001323856,
                "ended_at": "2025-10-21T18:54:54.840693+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "2917e3caf3adf1a3dc56d94a48d730cfb9021188ed4208c03f5ee944ac8aa28a",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-21T18:54:54.663367+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     validate_payload(result, OUTPUT_SCHEMA)\n122 |     status_value = result.get(\"status\")\n123 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n124 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     status_value = result.get(\"status\")\n123 |     assert isinstance(status_value, str)\n124 |     assert status_value == \"success\"\n    |     ^^^^^^\n125 |\n126 |     artifact_obj = result.get(\"mermaid\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:127:5\n    |\n126 |     artifact_obj = result.get(\"mermaid\")\n127 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n128 |     source_path_value = artifact_obj.get(\"source_path\")\n129 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n127 |     assert isinstance(artifact_obj, dict)\n128 |     source_path_value = artifact_obj.get(\"source_path\")\n129 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n130 |     mermaid_path = Path(source_path_value)\n131 |     assert mermaid_path.exists()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:131:5\n    |\n129 |     assert isinstance(source_path_value, str)\n130 |     mermaid_path = Path(source_path_value)\n131 |     assert mermaid_path.exists()\n    |     ^^^^^^\n132 |     source_bytes = artifact_obj.get(\"source_bytes\")\n133 |     assert isinstance(source_bytes, int)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n131 |     assert mermaid_path.exists()\n132 |     source_bytes = artifact_obj.get(\"source_bytes\")\n133 |     assert isinstance(source_bytes, int)\n    |     ^^^^^^\n134 |     assert source_bytes > 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     source_bytes = artifact_obj.get(\"source_bytes\")\n133 |     assert isinstance(source_bytes, int)\n134 |     assert source_bytes > 0\n    |     ^^^^^^\n135 |\n136 |     svg_info_obj = artifact_obj.get(\"svg\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n136 |     svg_info_obj = artifact_obj.get(\"svg\")\n137 |     assert isinstance(svg_info_obj, dict)\n    |     ^^^^^^\n138 |     assert svg_info_obj.get(\"succeeded\") is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:138:5\n    |\n136 |     svg_info_obj = artifact_obj.get(\"svg\")\n137 |     assert isinstance(svg_info_obj, dict)\n138 |     assert svg_info_obj.get(\"succeeded\") is True\n    |     ^^^^^^\n139 |\n140 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n140 |     summary_obj = result.get(\"summary\")\n141 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n140 |     summary_obj = result.get(\"summary\")\n141 |     assert isinstance(summary_obj, dict)\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n    |     ^^^^^^\n143 |     assert summary_obj.get(\"nodes\") == 2\n144 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     assert isinstance(summary_obj, dict)\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n    |     ^^^^^^\n144 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:143:40\n    |\n141 |     assert isinstance(summary_obj, dict)\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n    |                                        ^\n144 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n143 |     assert summary_obj.get(\"nodes\") == 2\n144 |     assert summary_obj.get(\"edges\") == 1\n    |     ^^^^^^\n145 |\n146 |     messages_obj = result.get(\"messages\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:147:5\n    |\n146 |     messages_obj = result.get(\"messages\")\n147 |     assert isinstance(messages_obj, list)\n    |     ^^^^^^\n148 |     assert messages_obj\n149 |     first_message = messages_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:148:5\n    |\n146 |     messages_obj = result.get(\"messages\")\n147 |     assert isinstance(messages_obj, list)\n148 |     assert messages_obj\n    |     ^^^^^^\n149 |     first_message = messages_obj[0]\n150 |     assert isinstance(first_message, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:150:5\n    |\n148 |     assert messages_obj\n149 |     first_message = messages_obj[0]\n150 |     assert isinstance(first_message, str)\n    |     ^^^^^^\n151 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:151:5\n    |\n149 |     first_message = messages_obj[0]\n150 |     assert isinstance(first_message, str)\n151 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:167:5\n    |\n165 |     validate_payload(result, OUTPUT_SCHEMA)\n166 |     artifact_obj = result.get(\"mermaid\")\n167 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n168 |     source_path_value = artifact_obj.get(\"source_path\")\n169 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:169:5\n    |\n167 |     assert isinstance(artifact_obj, dict)\n168 |     source_path_value = artifact_obj.get(\"source_path\")\n169 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n170 |     mermaid_path = Path(source_path_value)\n171 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:171:5\n    |\n169 |     assert isinstance(source_path_value, str)\n170 |     mermaid_path = Path(source_path_value)\n171 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |     ^^^^^^\n172 |\n173 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:174:5\n    |\n173 |     summary_obj = result.get(\"summary\")\n174 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n175 |     assert summary_obj.get(\"export_svg\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:175:5\n    |\n173 |     summary_obj = result.get(\"summary\")\n174 |     assert isinstance(summary_obj, dict)\n175 |     assert summary_obj.get(\"export_svg\") is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:186:5\n    |\n184 |     status_value = result.get(\"status\")\n185 |     message_value = result.get(\"message\")\n186 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n187 |     assert isinstance(message_value, str)\n188 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:187:5\n    |\n185 |     message_value = result.get(\"message\")\n186 |     assert isinstance(status_value, str)\n187 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n188 |     assert status_value == \"failure\"\n189 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:188:5\n    |\n186 |     assert isinstance(status_value, str)\n187 |     assert isinstance(message_value, str)\n188 |     assert status_value == \"failure\"\n    |     ^^^^^^\n189 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:189:5\n    |\n187 |     assert isinstance(message_value, str)\n188 |     assert status_value == \"failure\"\n189 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nC901 `_set_diagram` is too complex (20 > 10)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nPLR0912 Too many branches (20 > 12)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:211:9\n    |\n209 |         builder.quadrants(title)\n210 |     elif diagram == _SANKEY:\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n    |         ^^^^^^^^^^^^\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:213:9\n    |\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |         ^^^^^^^^^^^^\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:215:9\n    |\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |         ^^^^^^^^^^^^\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:217:9\n    |\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |         ^^^^^^^^^^^^\n218 |         if title:\n219 |             builder.raw(f\"title {_esc(title)}\")\n    |\n\nC901 `_apply_instruction` is too complex (48 > 10)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0912 Too many branches (47 > 12)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0915 Too many statements (115 > 50)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> x_cls_make_mermaid_x.py:323:63\n    |\n321 |         text = payload.get(\"text\")\n322 |         if isinstance(text, str):\n323 |             if isinstance(who, (list, tuple)) and len(who) == 2:\n    |                                                               ^\n324 |                 first, second = who\n325 |                 if isinstance(first, str) and isinstance(second, str):\n    |\n\nSLF001 Private member accessed: `_runner`\n   --> x_cls_make_mermaid_x.py:487:16\n    |\n485 |         stem=output_path.stem,\n486 |         mermaid_cli_path=mermaid_cli_path,\n487 |         runner=builder._runner if builder else None,\n    |                ^^^^^^^^^^^^^^^\n488 |     )\n489 |     if export.succeeded:\n    |\n\nC901 `main_json` is too complex (11 > 10)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nPLR0915 Too many statements (51 > 50)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nFound 40 errors.\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:54:54.663367+00:00\nduration: 0.176s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     validate_payload(result, OUTPUT_SCHEMA)\n122 |     status_value = result.get(\"status\")\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     validate_payload(result, OUTPUT_SCHEMA)\n122 |     status_value = result.get(\"status\")\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 start\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:55:25.805220+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 1.938518099981593,
                "ended_at": "2025-10-21T18:55:25.805220+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "e3826cdb38153623aef20e091eb80825371801db1170b969666cbcab199b2309",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-21T18:55:23.866116+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-21 18:49:43.099833+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-21 18:55:25.560107+00:00\n@@ -43,11 +43,11 @@\n     with (FIXTURE_DIR / \"error.json\").open(\"r\", encoding=\"utf-8\") as handle:\n         return json.load(handle)\n \n \n def _create_fake_run(\n-    user_env: dict[str, str]\n+    user_env: dict[str, str],\n ) -> Callable[[str], subprocess.CompletedProcess[str]]:\n     def fake_run(command: str) -> subprocess.CompletedProcess[str]:\n         parts = command.split('\"')\n         if \"SetEnvironmentVariable\" in command:\n             name = parts[1]\n@@ -84,11 +84,13 @@\n             if isinstance(name_value, str):\n                 entries[name_value] = entry_obj\n     return entries\n \n \n-def _snapshot_mappings(result: Mapping[str, object]) -> tuple[dict[str, object], dict[str, object]]:\n+def _snapshot_mappings(\n+    result: Mapping[str, object],\n+) -> tuple[dict[str, object], dict[str, object]]:\n     snapshot_obj = result.get(\"environment_snapshot\")\n     if not isinstance(snapshot_obj, dict):\n         raise AssertionError(\"snapshot missing\")\n     provided_obj = snapshot_obj.get(\"provided\")\n     user_obj = snapshot_obj.get(\"user\")\n@@ -166,12 +168,11 @@\n         and isinstance(api_result.get(\"stored_hash\"), str)\n     )\n \n     debug_result = entries[\"DEBUG\"]\n     assert (\n-        debug_result.get(\"status\") == \"persisted\"\n-        and debug_result.get(\"stored\") == \"1\"\n+        debug_result.get(\"status\") == \"persisted\" and debug_result.get(\"stored\") == \"1\"\n     )\n \n     provided_snapshot, user_snapshot = _snapshot_mappings(result)\n     assert (\n         provided_snapshot.get(\"API_TOKEN\") == \"<hidden>\"\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T18:55:23.866116+00:00\nduration: 1.939s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-21 18:49:43.099833+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-21 18:55:25.560107+00:00\n@@ -43,11 +43,11 @@\n     with (FIXTURE_DIR / \"error.json\").open(\"r\", encoding=\"utf-8\") as handle:\n         return json.load(handle)\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-21 18:49:43.099833+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\tests\\test_json_contracts.py\t2025-10-21 18:55:25.560107+00:00\n@@ -43,11 +43,11 @@\n     with (FIXTURE_DIR / \"error.json\").open(\"r\", encoding=\"utf-8\") as handle:\n         return json.load(handle)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T1\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T18:55:27.086173+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 1.1260156000207644,
                "ended_at": "2025-10-21T18:55:27.086173+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "e3826cdb38153623aef20e091eb80825371801db1170b969666cbcab199b2309",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-21T18:55:25.959326+00:00",
                "stderr": "",
                "stdout": "x_cls_make_persistent_env_var_x.py:532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:533: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression type contains \"Any\" (has type \"Callable[[], Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:909: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_persistent_env_var_x.py:996: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_persistent_env_var_x.py:1007: error: Incompatible return value type (got \"dict[str, Collection[Collection[str]]]\", expected \"dict[str, object]\")  [return-value]\nx_cls_make_persistent_env_var_x.py:1007: note: \"dict\" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance\nx_cls_make_persistent_env_var_x.py:1007: note: Consider using \"Mapping\" instead, which is covariant in the value type\nx_cls_make_persistent_env_var_x.py:1007: note: Perhaps you need a type annotation for \"result\"? Suggestion: \"dict[str, object]\"\nx_cls_make_persistent_env_var_x.py:1033: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1036: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1036: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_persistent_env.py:237: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_persistent_env.py:237: error: Expression type contains \"Any\" (has type \"Callable[..., dict[str, str] | None]\")  [misc]\ntests\\test_persistent_env.py:250: error: Expression type contains \"Any\" (has type \"Callable[..., dict[str, str] | None]\")  [misc]\ntests\\test_json_contracts.py:32: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:32: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:38: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:38: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:44: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:44: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:123: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:124: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:131: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:143: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:237: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:238: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:239: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:240: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 27 errors in 3 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:55:25.959326+00:00\nduration: 1.126s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_persistent_env_var_x.py:532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:533: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression type contains \"Any\" (has type \"Callable[[], Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:909: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_persistent_env_var_x.py:532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:533: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression type contains \"Any\" (has type \"Callable[[], Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:909: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unr\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:55:25.954413+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 0.1471636999922339,
                "ended_at": "2025-10-21T18:55:25.954413+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "e3826cdb38153623aef20e091eb80825371801db1170b969666cbcab199b2309",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-21T18:55:25.807652+00:00",
                "stderr": "",
                "stdout": "E501 Line too long (100 > 88)\n  --> tests\\test_json_contracts.py:89:89\n   |\n89 | def _snapshot_mappings(result: Mapping[str, object]) -> tuple[dict[str, object], dict[str, object]]:\n   |                                                                                         ^^^^^^^^^^^^\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n   |\n\nTRY004 Prefer `TypeError` exception for invalid type\n  --> tests\\test_json_contracts.py:92:9\n   |\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n92 |         raise AssertionError(\"snapshot missing\")\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n93 |     provided_obj = snapshot_obj.get(\"provided\")\n94 |     user_obj = snapshot_obj.get(\"user\")\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_json_contracts.py:92:15\n   |\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n92 |         raise AssertionError(\"snapshot missing\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n93 |     provided_obj = snapshot_obj.get(\"provided\")\n94 |     user_obj = snapshot_obj.get(\"user\")\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_json_contracts.py:92:30\n   |\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n92 |         raise AssertionError(\"snapshot missing\")\n   |                              ^^^^^^^^^^^^^^^^^^\n93 |     provided_obj = snapshot_obj.get(\"provided\")\n94 |     user_obj = snapshot_obj.get(\"user\")\n   |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n  --> tests\\test_json_contracts.py:96:9\n   |\n94 |     user_obj = snapshot_obj.get(\"user\")\n95 |     if not isinstance(provided_obj, dict) or not isinstance(user_obj, dict):\n96 |         raise AssertionError(\"snapshot payload malformed\")\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n97 |     return provided_obj, user_obj\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_json_contracts.py:96:15\n   |\n94 |     user_obj = snapshot_obj.get(\"user\")\n95 |     if not isinstance(provided_obj, dict) or not isinstance(user_obj, dict):\n96 |         raise AssertionError(\"snapshot payload malformed\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n97 |     return provided_obj, user_obj\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_json_contracts.py:96:30\n   |\n94 |     user_obj = snapshot_obj.get(\"user\")\n95 |     if not isinstance(provided_obj, dict) or not isinstance(user_obj, dict):\n96 |         raise AssertionError(\"snapshot payload malformed\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n97 |     return provided_obj, user_obj\n   |\nhelp: Assign to variable; remove string literal\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:147:5\n    |\n145 |     validate_payload(result, OUTPUT_SCHEMA)\n146 |     status_value = result.get(\"status\")\n147 |     assert isinstance(status_value, str) and status_value == \"success\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n148 |\n149 |     summary_obj = result.get(\"summary\")\n    |\nhelp: Break down assertion into multiple parts\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:162:5\n    |\n160 |       entries = _entries_by_name(result)\n161 |       api_result = entries[\"API_TOKEN\"]\n162 | /     assert (\n163 | |         api_result.get(\"status\") == \"persisted\"\n164 | |         and api_result.get(\"changed\") is True\n165 | |         and api_result.get(\"stored\") == \"<hidden>\"\n166 | |         and isinstance(api_result.get(\"stored_hash\"), str)\n167 | |     )\n    | |_____^\n168 |\n169 |       debug_result = entries[\"DEBUG\"]\n    |\nhelp: Break down assertion into multiple parts\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:170:5\n    |\n169 |       debug_result = entries[\"DEBUG\"]\n170 | /     assert (\n171 | |         debug_result.get(\"status\") == \"persisted\"\n172 | |         and debug_result.get(\"stored\") == \"1\"\n173 | |     )\n    | |_____^\n174 |\n175 |       provided_snapshot, user_snapshot = _snapshot_mappings(result)\n    |\nhelp: Break down assertion into multiple parts\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:176:5\n    |\n175 |       provided_snapshot, user_snapshot = _snapshot_mappings(result)\n176 | /     assert (\n177 | |         provided_snapshot.get(\"API_TOKEN\") == \"<hidden>\"\n178 | |         and user_snapshot.get(\"DEBUG\") == \"1\"\n179 | |     )\n    | |_____^\n    |\nhelp: Break down assertion into multiple parts\n\nFBT001 Boolean-typed positional argument in function definition\n   --> tests\\test_persistent_env.py:182:44\n    |\n181 |     def fake_prompt(\n182 |         tokens: Sequence[tuple[str, str]], quiet: bool\n    |                                            ^^^^^\n183 |     ) -> dict[str, str] | None:\n184 |         prompt_calls.append((tuple(tokens), quiet))\n    |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:34:43\n   |\n33 | if TYPE_CHECKING:\n34 |     from collections.abc import Callable, Mapping, Sequence\n   |                                           ^^^^^^^\n35 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:34:52\n   |\n33 | if TYPE_CHECKING:\n34 |     from collections.abc import Callable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n35 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_persistent_env_var_x.py:251:13\n    |\n249 |     for key, value in raw.items():\n250 |         if isinstance(key, str) and isinstance(value, str) and value:\n251 |             result[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^\n252 |     return result\n    |\nhelp: Replace for loop with dict comprehension\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> x_cls_make_persistent_env_var_x.py:274:9\n    |\n272 |     \"\"\"Persistent environment variable setter (Windows user scope).\"\"\"\n273 |\n274 |     def __init__(\n    |         ^^^^^^^^\n275 |         self,\n276 |         var: str = \"\",\n    |\n\nC901 `run_gui` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:395:9\n    |\n393 |         return summaries, ok_all\n394 |\n395 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n396 |         values = _open_gui_and_collect(self.tokens, ctx=self._ctx, quiet=self.quiet)\n397 |         if values is None or all(not val for val in values.values()):\n    |\n\nARG001 Unused function argument: `quiet`\n   --> x_cls_make_persistent_env_var_x.py:440:33\n    |\n439 | def _prompt_for_values(\n440 |     tokens: Sequence[Token], *, quiet: bool\n    |                                 ^^^^^\n441 | ) -> dict[str, str] | None:\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_persistent_env_var_x.py:444:89\n    |\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n443 |     print(\n444 |         \"Provide secrets for each token. Leave blank to skip and keep existing user-scoped values.\"\n    |                                                                                         ^^^^^^^^^^^\n445 |     )\n446 |     collected: dict[str, str] = {}\n    |\n\nC901 `_build_gui_parts` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:476:5\n    |\n476 | def _build_gui_parts(\n    |     ^^^^^^^^^^^^^^^^\n477 |     tk_mod: ModuleType,\n478 |     tokens: Sequence[Token],\n    |\n\nC901 `_perform_persist_current` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:593:5\n    |\n593 | def _perform_persist_current(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n594 |     token_specs: Sequence[TokenSpec],\n595 |     *,\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_persistent_env_var_x.py:676:89\n    |\n674 |     if tokens_modified:\n675 |         messages.append(\n676 |             f\"Persisted {tokens_modified} token{'s' if tokens_modified != 1 else ''} from session\"\n    |                                                                                         ^^^^^^^^^^\n677 |         )\n678 |     if tokens_skipped:\n    |\n\nE501 Line too long (105 > 88)\n   --> x_cls_make_persistent_env_var_x.py:680:89\n    |\n678 |     if tokens_skipped:\n679 |         messages.append(\n680 |             f\"Skipped {tokens_skipped} token{'s' if tokens_skipped != 1 else ''} (missing session value)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n681 |         )\n682 |     if tokens_failed:\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:684:89\n    |\n682 |     if tokens_failed:\n683 |         messages.append(\n684 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n685 |         )\n    |\n\nC901 `_perform_persist_values` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nSIM108 Use ternary operator `exit_code = 1 if tokens_failed else 0` instead of `if`-`else`-block\n   --> x_cls_make_persistent_env_var_x.py:821:5\n    |\n819 |           }\n820 |\n821 | /     if tokens_failed:\n822 | |         exit_code = 1\n823 | |     else:\n824 | |         exit_code = 0\n    | |_____________________^\n825 |\n826 |       messages: list[str] = []\n    |\nhelp: Replace `if`-`else`-block with `exit_code = 1 if tokens_failed else 0`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:837:89\n    |\n835 |     if tokens_failed:\n836 |         messages.append(\n837 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n838 |         )\n    |\n\nFound 28 errors.\nNo fixes available (9 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:55:25.807652+00:00\nduration: 0.147s\ntool_version: ruff 0.14.1\nstdout:\nE501 Line too long (100 > 88)\n  --> tests\\test_json_contracts.py:89:89\n   |\n89 | def _snapshot_mappings(result: Mapping[str, object]) -> tuple[dict[str, object], dict[str, object]]:\n   |                                                                                         ^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "E501 Line too long (100 > 88)\n  --> tests\\test_json_contracts.py:89:89\n   |\n89 | def _snapshot_mappings(result: Mapping[str, object]) -> tuple[dict[str, object], dict[str, object]]:\n   |                                                                                         ^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-v\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:55:23.859734+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 0.15813409999827854,
                "ended_at": "2025-10-21T18:55:23.859734+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "e3826cdb38153623aef20e091eb80825371801db1170b969666cbcab199b2309",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-21T18:55:23.702721+00:00",
                "stderr": "",
                "stdout": "E501 Line too long (100 > 88)\n  --> tests\\test_json_contracts.py:89:89\n   |\n89 | def _snapshot_mappings(result: Mapping[str, object]) -> tuple[dict[str, object], dict[str, object]]:\n   |                                                                                         ^^^^^^^^^^^^\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n   |\n\nTRY004 Prefer `TypeError` exception for invalid type\n  --> tests\\test_json_contracts.py:92:9\n   |\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n92 |         raise AssertionError(\"snapshot missing\")\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n93 |     provided_obj = snapshot_obj.get(\"provided\")\n94 |     user_obj = snapshot_obj.get(\"user\")\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_json_contracts.py:92:15\n   |\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n92 |         raise AssertionError(\"snapshot missing\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n93 |     provided_obj = snapshot_obj.get(\"provided\")\n94 |     user_obj = snapshot_obj.get(\"user\")\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_json_contracts.py:92:30\n   |\n90 |     snapshot_obj = result.get(\"environment_snapshot\")\n91 |     if not isinstance(snapshot_obj, dict):\n92 |         raise AssertionError(\"snapshot missing\")\n   |                              ^^^^^^^^^^^^^^^^^^\n93 |     provided_obj = snapshot_obj.get(\"provided\")\n94 |     user_obj = snapshot_obj.get(\"user\")\n   |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n  --> tests\\test_json_contracts.py:96:9\n   |\n94 |     user_obj = snapshot_obj.get(\"user\")\n95 |     if not isinstance(provided_obj, dict) or not isinstance(user_obj, dict):\n96 |         raise AssertionError(\"snapshot payload malformed\")\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n97 |     return provided_obj, user_obj\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_json_contracts.py:96:15\n   |\n94 |     user_obj = snapshot_obj.get(\"user\")\n95 |     if not isinstance(provided_obj, dict) or not isinstance(user_obj, dict):\n96 |         raise AssertionError(\"snapshot payload malformed\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n97 |     return provided_obj, user_obj\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_json_contracts.py:96:30\n   |\n94 |     user_obj = snapshot_obj.get(\"user\")\n95 |     if not isinstance(provided_obj, dict) or not isinstance(user_obj, dict):\n96 |         raise AssertionError(\"snapshot payload malformed\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n97 |     return provided_obj, user_obj\n   |\nhelp: Assign to variable; remove string literal\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:147:5\n    |\n145 |     validate_payload(result, OUTPUT_SCHEMA)\n146 |     status_value = result.get(\"status\")\n147 |     assert isinstance(status_value, str) and status_value == \"success\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n148 |\n149 |     summary_obj = result.get(\"summary\")\n    |\nhelp: Break down assertion into multiple parts\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:162:5\n    |\n160 |       entries = _entries_by_name(result)\n161 |       api_result = entries[\"API_TOKEN\"]\n162 | /     assert (\n163 | |         api_result.get(\"status\") == \"persisted\"\n164 | |         and api_result.get(\"changed\") is True\n165 | |         and api_result.get(\"stored\") == \"<hidden>\"\n166 | |         and isinstance(api_result.get(\"stored_hash\"), str)\n167 | |     )\n    | |_____^\n168 |\n169 |       debug_result = entries[\"DEBUG\"]\n    |\nhelp: Break down assertion into multiple parts\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:170:5\n    |\n169 |       debug_result = entries[\"DEBUG\"]\n170 | /     assert (\n171 | |         debug_result.get(\"status\") == \"persisted\"\n172 | |         and debug_result.get(\"stored\") == \"1\"\n173 | |     )\n    | |_____^\n174 |\n175 |       provided_snapshot, user_snapshot = _snapshot_mappings(result)\n    |\nhelp: Break down assertion into multiple parts\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_json_contracts.py:176:5\n    |\n175 |       provided_snapshot, user_snapshot = _snapshot_mappings(result)\n176 | /     assert (\n177 | |         provided_snapshot.get(\"API_TOKEN\") == \"<hidden>\"\n178 | |         and user_snapshot.get(\"DEBUG\") == \"1\"\n179 | |     )\n    | |_____^\n    |\nhelp: Break down assertion into multiple parts\n\nFBT001 Boolean-typed positional argument in function definition\n   --> tests\\test_persistent_env.py:182:44\n    |\n181 |     def fake_prompt(\n182 |         tokens: Sequence[tuple[str, str]], quiet: bool\n    |                                            ^^^^^\n183 |     ) -> dict[str, str] | None:\n184 |         prompt_calls.append((tuple(tokens), quiet))\n    |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:34:43\n   |\n33 | if TYPE_CHECKING:\n34 |     from collections.abc import Callable, Mapping, Sequence\n   |                                           ^^^^^^^\n35 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:34:52\n   |\n33 | if TYPE_CHECKING:\n34 |     from collections.abc import Callable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n35 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_persistent_env_var_x.py:251:13\n    |\n249 |     for key, value in raw.items():\n250 |         if isinstance(key, str) and isinstance(value, str) and value:\n251 |             result[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^\n252 |     return result\n    |\nhelp: Replace for loop with dict comprehension\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> x_cls_make_persistent_env_var_x.py:274:9\n    |\n272 |     \"\"\"Persistent environment variable setter (Windows user scope).\"\"\"\n273 |\n274 |     def __init__(\n    |         ^^^^^^^^\n275 |         self,\n276 |         var: str = \"\",\n    |\n\nC901 `run_gui` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:395:9\n    |\n393 |         return summaries, ok_all\n394 |\n395 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n396 |         values = _open_gui_and_collect(self.tokens, ctx=self._ctx, quiet=self.quiet)\n397 |         if values is None or all(not val for val in values.values()):\n    |\n\nARG001 Unused function argument: `quiet`\n   --> x_cls_make_persistent_env_var_x.py:440:33\n    |\n439 | def _prompt_for_values(\n440 |     tokens: Sequence[Token], *, quiet: bool\n    |                                 ^^^^^\n441 | ) -> dict[str, str] | None:\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_persistent_env_var_x.py:444:89\n    |\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n443 |     print(\n444 |         \"Provide secrets for each token. Leave blank to skip and keep existing user-scoped values.\"\n    |                                                                                         ^^^^^^^^^^^\n445 |     )\n446 |     collected: dict[str, str] = {}\n    |\n\nC901 `_build_gui_parts` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:476:5\n    |\n476 | def _build_gui_parts(\n    |     ^^^^^^^^^^^^^^^^\n477 |     tk_mod: ModuleType,\n478 |     tokens: Sequence[Token],\n    |\n\nC901 `_perform_persist_current` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:593:5\n    |\n593 | def _perform_persist_current(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n594 |     token_specs: Sequence[TokenSpec],\n595 |     *,\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_persistent_env_var_x.py:676:89\n    |\n674 |     if tokens_modified:\n675 |         messages.append(\n676 |             f\"Persisted {tokens_modified} token{'s' if tokens_modified != 1 else ''} from session\"\n    |                                                                                         ^^^^^^^^^^\n677 |         )\n678 |     if tokens_skipped:\n    |\n\nE501 Line too long (105 > 88)\n   --> x_cls_make_persistent_env_var_x.py:680:89\n    |\n678 |     if tokens_skipped:\n679 |         messages.append(\n680 |             f\"Skipped {tokens_skipped} token{'s' if tokens_skipped != 1 else ''} (missing session value)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n681 |         )\n682 |     if tokens_failed:\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:684:89\n    |\n682 |     if tokens_failed:\n683 |         messages.append(\n684 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n685 |         )\n    |\n\nC901 `_perform_persist_values` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nSIM108 Use ternary operator `exit_code = 1 if tokens_failed else 0` instead of `if`-`else`-block\n   --> x_cls_make_persistent_env_var_x.py:821:5\n    |\n819 |           }\n820 |\n821 | /     if tokens_failed:\n822 | |         exit_code = 1\n823 | |     else:\n824 | |         exit_code = 0\n    | |_____________________^\n825 |\n826 |       messages: list[str] = []\n    |\nhelp: Replace `if`-`else`-block with `exit_code = 1 if tokens_failed else 0`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:837:89\n    |\n835 |     if tokens_failed:\n836 |         messages.append(\n837 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n838 |         )\n    |\n\nFound 28 errors.\nNo fixes available (9 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:55:23.702721+00:00\nduration: 0.158s\ntool_version: ruff 0.14.1\nstdout:\nE501 Line too long (100 > 88)\n  --> tests\\test_json_contracts.py:89:89\n   |\n89 | def _snapshot_mappings(result: Mapping[str, object]) -> tuple[dict[str, object], dict[str, object]]:\n   |                                                                                         ^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "E501 Line too long (100 > 88)\n  --> tests\\test_json_contracts.py:89:89\n   |\n89 | def _snapshot_mappings(result: Mapping[str, object]) -> tuple[dict[str, object], dict[str, object]]:\n   |                                                                                         ^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --targ\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:55:49.449593+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 1.7325220000057016,
                "ended_at": "2025-10-21T18:55:49.449593+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "420939d9b44b8ea30a45961e1b3e3f12d4a3505655748e1435ebcab4bd7c1360",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T18:55:47.722963+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 18:49:45.103153+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 18:55:49.260732+00:00\n@@ -654,13 +654,11 @@\n         cloner_obj = SimpleNamespace(**dict(cloner_obj_raw))\n     else:\n         cloner_obj = SimpleNamespace()\n \n     class _NoopRunner(PipUpdatesRunnerProtocol):\n-        def batch_install(\n-            self, packages: Sequence[str], *, use_user: bool\n-        ) -> int:\n+        def batch_install(self, packages: Sequence[str], *, use_user: bool) -> int:\n             return 0\n \n     def _default_factory(*_args: object, **_kwargs: object) -> PipUpdatesRunnerProtocol:\n         return _NoopRunner()\n \n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T18:55:47.722963+00:00\nduration: 1.733s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 18:49:45.103153+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 18:55:49.260732+00:00\n@@ -654,13 +654,11 @@\n         cloner_obj = SimpleNamespace(**dict(cloner_obj_raw))\n     else:\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 18:49:45.103153+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 18:55:49.260732+00:00\n@@ -654,13 +654,11 @@\n         cloner_obj = SimpleNamespace(**dict(cloner_obj_raw))\n     else:\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T18:55:47.722963\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T18:55:50.344077+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.7504387000226416,
                "ended_at": "2025-10-21T18:55:50.344077+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "420939d9b44b8ea30a45961e1b3e3f12d4a3505655748e1435ebcab4bd7c1360",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T18:55:49.594241+00:00",
                "stderr": "",
                "stdout": "update_flow.py:654: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:22: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:25: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:25: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:28: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:31: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:31: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:34: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:37: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:37: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:60: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:61: error: Expression has type \"Any\"  [misc]\nFound 15 errors in 3 files (checked 7 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:55:49.594241+00:00\nduration: 0.750s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nupdate_flow.py:654: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:22: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "update_flow.py:654: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:22: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --dis\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:55:49.591020+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.13245000000461005,
                "ended_at": "2025-10-21T18:55:49.591020+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "420939d9b44b8ea30a45961e1b3e3f12d4a3505655748e1435ebcab4bd7c1360",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T18:55:49.459207+00:00",
                "stderr": "",
                "stdout": "C901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n606 |     payload: Mapping[str, object],\n607 |     *,\n    |\n\nARG002 Unused method argument: `packages`\n   --> update_flow.py:660:19\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                   ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nARG002 Unused method argument: `use_user`\n   --> update_flow.py:660:47\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                                               ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nFound 3 errors.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:55:49.459207+00:00\nduration: 0.132s\ntool_version: ruff 0.14.1\nstdout:\nC901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 s\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:55:47.719570+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.2500018999853637,
                "ended_at": "2025-10-21T18:55:47.719570+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "420939d9b44b8ea30a45961e1b3e3f12d4a3505655748e1435ebcab4bd7c1360",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T18:55:47.469866+00:00",
                "stderr": "",
                "stdout": "C901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n606 |     payload: Mapping[str, object],\n607 |     *,\n    |\n\nARG002 Unused method argument: `packages`\n   --> update_flow.py:660:19\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                   ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nARG002 Unused method argument: `use_user`\n   --> update_flow.py:660:47\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                                               ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nFound 3 errors.\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:55:47.469866+00:00\nduration: 0.250s\ntool_version: ruff 0.14.1\nstdout:\nC901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py3\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:56:19.315259+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 1.256289699987974,
                "ended_at": "2025-10-21T18:56:19.315259+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "56d61dcd33f09048c06b7bf248c5801e382c058db215de100995e1d21d376388",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-21T18:56:18.066490+00:00",
                "stderr": "",
                "stdout": "x_cls_make_py_mod_sideload_x.py:197: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:293: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:321: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:324: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:324: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:23: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:23: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:46: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:46: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:52: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:52: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:58: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:58: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:113: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 14 errors in 2 files (checked 7 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:56:18.066490+00:00\nduration: 1.256s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_py_mod_sideload_x.py:197: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:293: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:321: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:324: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:324: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_py_mod_sideload_x.py:197: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:293: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:321: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:324: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:324: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachab\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:56:18.063054+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 0.14019829998142086,
                "ended_at": "2025-10-21T18:56:18.063054+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "56d61dcd33f09048c06b7bf248c5801e382c058db215de100995e1d21d376388",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-21T18:56:17.923014+00:00",
                "stderr": "",
                "stdout": "C901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n192 |     payload: Mapping[str, object], *, ctx: object | None = None\n193 | ) -> dict[str, object]:\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n192 |     payload: Mapping[str, object], *, ctx: object | None = None\n193 | ) -> dict[str, object]:\n    |\n\nFound 2 errors.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:56:17.923014+00:00\nduration: 0.140s\ntool_version: ruff 0.14.1\nstdout:\nC901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:56:16.407365+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 0.14751239999895915,
                "ended_at": "2025-10-21T18:56:16.407365+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "56d61dcd33f09048c06b7bf248c5801e382c058db215de100995e1d21d376388",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-21T18:56:16.258453+00:00",
                "stderr": "",
                "stdout": "C901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n192 |     payload: Mapping[str, object], *, ctx: object | None = None\n193 | ) -> dict[str, object]:\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n192 |     payload: Mapping[str, object], *, ctx: object | None = None\n193 | ) -> dict[str, object]:\n    |\n\nFound 2 errors.\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:56:16.258453+00:00\nduration: 0.148s\ntool_version: ruff 0.14.1\nstdout:\nC901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:191:5\n    |\n191 | def main_json(\n    |     ^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-ver\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:56:29.020930+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_py_venv_x",
                "duration_seconds": 0.8120367999945302,
                "ended_at": "2025-10-21T18:56:29.020930+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "x_cls_make_py_venv_x.py"
                ],
                "repo": "x_make_py_venv_x",
                "repo_hash": "a044394e25c4e0774808e2e34ba21b4ebc963babaed1354e64061d898384629f",
                "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
                "started_at": "2025-10-21T18:56:28.217418+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\t2025-10-21 18:56:28.185776+00:00\n+++ C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\t2025-10-21 18:56:28.991261+00:00\n@@ -476,13 +476,11 @@\n     requirement_args = cast(\"list[str]\", args.requirements)\n     requirements = [\n         (Path(path) if Path(path).is_absolute() else project_root / path)\n         for path in requirement_args\n     ]\n-    default_requirement_candidates = cast(\n-        \"list[str]\", args.default_requirements or []\n-    )\n+    default_requirement_candidates = cast(\"list[str]\", args.default_requirements or [])\n     if not args.no_auto_requirements and not requirements:\n         for candidate in default_requirement_candidates:\n             candidate_path = Path(candidate)\n             if not candidate_path.is_absolute():\n                 candidate_path = project_root / candidate\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_py_venv_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_venv_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T18:56:28.217418+00:00\nduration: 0.812s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\t2025-10-21 18:56:28.185776+00:00\n+++ C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\t2025-10-21 18:56:28.991261+00:00\n@@ -476,13 +476,11 @@\n     requirement_args = cast(\"list[str]\", args.requirements)\n     requirements = [\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.",
            "repo": "x_make_py_venv_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\t2025-10-21 18:56:28.185776+00:00\n+++ C:\\x_runner_x\\x_make_py_venv_x\\x_cls_make_py_venv_x.py\t2025-10-21 18:56:28.991261+00:00\n@@ -476,13 +476,11 @@\n     requirement_args = cast(\"list[str]\", args.requirements)\n     requirements = [\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_py_venv_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_venv_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T18:56:28.217418+00:00 d\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T18:56:29.805350+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_py_venv_x",
                "duration_seconds": 0.6318789999932051,
                "ended_at": "2025-10-21T18:56:29.805350+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "x_cls_make_py_venv_x.py"
                ],
                "repo": "x_make_py_venv_x",
                "repo_hash": "a044394e25c4e0774808e2e34ba21b4ebc963babaed1354e64061d898384629f",
                "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
                "started_at": "2025-10-21T18:56:29.173141+00:00",
                "stderr": "",
                "stdout": "x_cls_make_py_venv_x.py:268: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:397: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:403: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:410: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:461: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:465: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:467: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:468: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:469: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:471: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:472: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:482: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:482: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:484: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:495: error: Expression type contains \"Any\" (has type \"dict[Path, Any | None]\")  [misc]\nx_cls_make_py_venv_x.py:496: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:496: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:497: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\nx_cls_make_py_venv_x.py:503: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:509: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:512: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:514: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:515: error: Expression has type \"Any\"  [misc]\nFound 23 errors in 1 file (checked 1 source file)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_py_venv_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_venv_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:56:29.173141+00:00\nduration: 0.632s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_py_venv_x.py:268: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:397: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:403: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:410: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:461: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_venv_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_py_venv_x.py:268: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:397: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:403: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:410: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:461: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_py_venv_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_venv_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-an\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:56:29.158599+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_venv_x",
                "duration_seconds": 0.13654330000281334,
                "ended_at": "2025-10-21T18:56:29.158599+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "x_cls_make_py_venv_x.py"
                ],
                "repo": "x_make_py_venv_x",
                "repo_hash": "a044394e25c4e0774808e2e34ba21b4ebc963babaed1354e64061d898384629f",
                "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
                "started_at": "2025-10-21T18:56:29.032741+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                             ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:39\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                                       ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> x_cls_make_py_venv_x.py:50:47\n   |\n48 |         major = int(parts[0])\n49 |         minor = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0\n50 |         patch = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None\n   |                                               ^\n51 |         return cls(raw=text, major=major, minor=minor, patch=patch)\n   |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:134:13\n    |\n132 |               )\n133 |           elif self.tool is Tool.CURRENT:\n134 | /             logging.info(\n135 | |                 \"Using current interpreter at %s for Python %s\",\n136 | |                 sys.executable,\n137 | |                 version.raw,\n138 | |             )\n    | |_____________^\n139 |           else:  # Tool.AUTO should never reach here\n140 |               msg = f\"Unhandled tool: {self.tool}\"\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:145:13\n    |\n143 |     def _ensure_environment(self, version: VersionRequest, env_path: Path) -> bool:\n144 |         if env_path.exists():\n145 |             logging.info(\"Environment already exists at %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n146 |             return False\n147 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:148:13\n    |\n146 |             return False\n147 |         if self.dry_run:\n148 |             logging.info(\"[dry-run] Would create %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n149 |             return False\n150 |         env_path.parent.mkdir(parents=True, exist_ok=True)\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:185:9\n    |\n183 |             msg = f\"Unhandled tool: {self.tool}\"\n184 |             raise RuntimeError(msg)\n185 |         logging.info(\"Created environment at %s\", env_path)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n186 |         return True\n    |\nhelp: Use own logger instead\n\nLOG015 `warning()` call on root logger\n   --> x_cls_make_py_venv_x.py:219:17\n    |\n217 |         for requirement in requirement_files:\n218 |             if not requirement.exists():\n219 |                 logging.warning(\"Requirement file %s missing; skipping\", requirement)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n220 |                 continue\n221 |             self._run_command(\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:245:9\n    |\n243 |         env: dict[str, str] | None = None,\n244 |     ) -> None:\n245 |         logging.info(reason)\n    |         ^^^^^^^^^^^^^^^^^^^^\n246 |         logging.debug(\"Command: %s\", \" \".join(command))\n247 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `debug()` call on root logger\n   --> x_cls_make_py_venv_x.py:246:9\n    |\n244 |     ) -> None:\n245 |         logging.info(reason)\n246 |         logging.debug(\"Command: %s\", \" \".join(command))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n247 |         if self.dry_run:\n248 |             logging.info(\"[dry-run] Skipped execution\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:248:13\n    |\n246 |         logging.debug(\"Command: %s\", \" \".join(command))\n247 |         if self.dry_run:\n248 |             logging.info(\"[dry-run] Skipped execution\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n249 |             return\n250 |         try:\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:251:13\n    |\n249 |             return\n250 |         try:\n251 |             subprocess.run(command, check=True, env=env)\n    |             ^^^^^^^^^^^^^^\n252 |         except subprocess.CalledProcessError as exc:\n253 |             msg = f\"Command failed ({reason}): {exc}\"\n    |\n\nSIM103 Return the condition `tool is Tool.CURRENT` directly\n   --> x_cls_make_py_venv_x.py:285:5\n    |\n283 |       if tool is Tool.PYLAUNCHER:\n284 |           return shutil.which(\"py\") is not None\n285 | /     if tool is Tool.CURRENT:\n286 | |         return True\n287 | |     return False\n    | |________________^\n    |\nhelp: Replace with `return tool is Tool.CURRENT`\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:298:13\n    |\n296 |     if tool is Tool.UV and _resolve_uv_executable() is None and bootstrap_uv:\n297 |         if dry_run:\n298 |             logging.info(\"[dry-run] Would install uv via pip\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n299 |             return\n300 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:300:9\n    |\n298 |             logging.info(\"[dry-run] Would install uv via pip\")\n299 |             return\n300 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n301 |         try:\n302 |             subprocess.run(\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:302:13\n    |\n300 |         logging.info(\"Installing uv via pip to provision interpreters\")\n301 |         try:\n302 |             subprocess.run(\n    |             ^^^^^^^^^^^^^^\n303 |                 [sys.executable, \"-m\", \"pip\", \"install\", \"--upgrade\", \"uv\"],\n304 |                 check=True,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:324:5\n    |\n322 |     target = project_root / \".python-version\"\n323 |     target.write_text(f\"{version.raw}\\n\", encoding=\"utf-8\")\n324 |     logging.info(\"Pinned .python-version to %s\", version.raw)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nARG001 Unused function argument: `project_root`\n   --> x_cls_make_py_venv_x.py:328:5\n    |\n327 | def update_tox_ini(\n328 |     project_root: Path,\n    |     ^^^^^^^^^^^^\n329 |     versions: Sequence[VersionRequest],\n330 |     *,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:350:5\n    |\n348 |     with tox_path.open(\"w\", encoding=\"utf-8\") as handle:\n349 |         config.write(handle)\n350 |     logging.info(\"Updated %s with envlist=%s\", tox_path, env_names)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:490:17\n    |\n488 |                   candidate_path = project_root / candidate\n489 |               if candidate_path.exists():\n490 | /                 logging.info(\n491 | |                     \"Auto-including requirements file at %s\",\n492 | |                     candidate_path,\n493 | |                 )\n    | |_________________^\n494 |                   requirements.append(candidate_path)\n495 |       requirements = list(dict.fromkeys(requirements))\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:520:5\n    |\n518 |         update_tox_ini(project_root, versions, tox_path=tox_path)\n519 |\n520 |     logging.info(\"Provisioned %d environment(s)\", len(created))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n521 |     return 0\n    |\nhelp: Use own logger instead\n\nFound 21 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_py_venv_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_venv_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:56:29.032741+00:00\nduration: 0.137s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_venv_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_py_venv_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_venv_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_a\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:56:28.211244+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_venv_x",
                "duration_seconds": 0.15915209997911006,
                "ended_at": "2025-10-21T18:56:28.211244+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "x_cls_make_py_venv_x.py"
                ],
                "repo": "x_make_py_venv_x",
                "repo_hash": "a044394e25c4e0774808e2e34ba21b4ebc963babaed1354e64061d898384629f",
                "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
                "started_at": "2025-10-21T18:56:28.055190+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                             ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:39\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                                       ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> x_cls_make_py_venv_x.py:50:47\n   |\n48 |         major = int(parts[0])\n49 |         minor = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0\n50 |         patch = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None\n   |                                               ^\n51 |         return cls(raw=text, major=major, minor=minor, patch=patch)\n   |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:134:13\n    |\n132 |               )\n133 |           elif self.tool is Tool.CURRENT:\n134 | /             logging.info(\n135 | |                 \"Using current interpreter at %s for Python %s\",\n136 | |                 sys.executable,\n137 | |                 version.raw,\n138 | |             )\n    | |_____________^\n139 |           else:  # Tool.AUTO should never reach here\n140 |               msg = f\"Unhandled tool: {self.tool}\"\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:145:13\n    |\n143 |     def _ensure_environment(self, version: VersionRequest, env_path: Path) -> bool:\n144 |         if env_path.exists():\n145 |             logging.info(\"Environment already exists at %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n146 |             return False\n147 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:148:13\n    |\n146 |             return False\n147 |         if self.dry_run:\n148 |             logging.info(\"[dry-run] Would create %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n149 |             return False\n150 |         env_path.parent.mkdir(parents=True, exist_ok=True)\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:185:9\n    |\n183 |             msg = f\"Unhandled tool: {self.tool}\"\n184 |             raise RuntimeError(msg)\n185 |         logging.info(\"Created environment at %s\", env_path)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n186 |         return True\n    |\nhelp: Use own logger instead\n\nLOG015 `warning()` call on root logger\n   --> x_cls_make_py_venv_x.py:219:17\n    |\n217 |         for requirement in requirement_files:\n218 |             if not requirement.exists():\n219 |                 logging.warning(\"Requirement file %s missing; skipping\", requirement)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n220 |                 continue\n221 |             self._run_command(\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:245:9\n    |\n243 |         env: dict[str, str] | None = None,\n244 |     ) -> None:\n245 |         logging.info(reason)\n    |         ^^^^^^^^^^^^^^^^^^^^\n246 |         logging.debug(\"Command: %s\", \" \".join(command))\n247 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `debug()` call on root logger\n   --> x_cls_make_py_venv_x.py:246:9\n    |\n244 |     ) -> None:\n245 |         logging.info(reason)\n246 |         logging.debug(\"Command: %s\", \" \".join(command))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n247 |         if self.dry_run:\n248 |             logging.info(\"[dry-run] Skipped execution\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:248:13\n    |\n246 |         logging.debug(\"Command: %s\", \" \".join(command))\n247 |         if self.dry_run:\n248 |             logging.info(\"[dry-run] Skipped execution\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n249 |             return\n250 |         try:\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:251:13\n    |\n249 |             return\n250 |         try:\n251 |             subprocess.run(command, check=True, env=env)\n    |             ^^^^^^^^^^^^^^\n252 |         except subprocess.CalledProcessError as exc:\n253 |             msg = f\"Command failed ({reason}): {exc}\"\n    |\n\nSIM103 Return the condition `tool is Tool.CURRENT` directly\n   --> x_cls_make_py_venv_x.py:285:5\n    |\n283 |       if tool is Tool.PYLAUNCHER:\n284 |           return shutil.which(\"py\") is not None\n285 | /     if tool is Tool.CURRENT:\n286 | |         return True\n287 | |     return False\n    | |________________^\n    |\nhelp: Replace with `return tool is Tool.CURRENT`\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:298:13\n    |\n296 |     if tool is Tool.UV and _resolve_uv_executable() is None and bootstrap_uv:\n297 |         if dry_run:\n298 |             logging.info(\"[dry-run] Would install uv via pip\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n299 |             return\n300 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:300:9\n    |\n298 |             logging.info(\"[dry-run] Would install uv via pip\")\n299 |             return\n300 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n301 |         try:\n302 |             subprocess.run(\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:302:13\n    |\n300 |         logging.info(\"Installing uv via pip to provision interpreters\")\n301 |         try:\n302 |             subprocess.run(\n    |             ^^^^^^^^^^^^^^\n303 |                 [sys.executable, \"-m\", \"pip\", \"install\", \"--upgrade\", \"uv\"],\n304 |                 check=True,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:324:5\n    |\n322 |     target = project_root / \".python-version\"\n323 |     target.write_text(f\"{version.raw}\\n\", encoding=\"utf-8\")\n324 |     logging.info(\"Pinned .python-version to %s\", version.raw)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nARG001 Unused function argument: `project_root`\n   --> x_cls_make_py_venv_x.py:328:5\n    |\n327 | def update_tox_ini(\n328 |     project_root: Path,\n    |     ^^^^^^^^^^^^\n329 |     versions: Sequence[VersionRequest],\n330 |     *,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:350:5\n    |\n348 |     with tox_path.open(\"w\", encoding=\"utf-8\") as handle:\n349 |         config.write(handle)\n350 |     logging.info(\"Updated %s with envlist=%s\", tox_path, env_names)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:490:17\n    |\n488 |                   candidate_path = project_root / candidate\n489 |               if candidate_path.exists():\n490 | /                 logging.info(\n491 | |                     \"Auto-including requirements file at %s\",\n492 | |                     candidate_path,\n493 | |                 )\n    | |_________________^\n494 |                   requirements.append(candidate_path)\n495 |       requirements = list(dict.fromkeys(requirements))\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:520:5\n    |\n518 |         update_tox_ini(project_root, versions, tox_path=tox_path)\n519 |\n520 |     logging.info(\"Provisioned %d environment(s)\", len(created))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n521 |     return 0\n    |\nhelp: Use own logger instead\n\nFound 23 errors (2 fixed, 21 remaining).\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_py_venv_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_venv_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:56:28.055190+00:00\nduration: 0.159s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_venv_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_py_venv_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_venv_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 start\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:57:01.156468+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 1.3836346000025515,
                "ended_at": "2025-10-21T18:57:01.156468+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "cc9ee788e098c76c275561463ccd828587e2a683cef4560adb6082e4b81b314a",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-21T18:56:59.774031+00:00",
                "stderr": "",
                "stdout": "publish_flow.py:63: error: Expression type contains \"Any\" (has type \"tuple[Any, int]\")  [misc]\npublish_flow.py:63: error: Expression has type \"Any\"  [misc]\npublish_flow.py:67: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:27: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_pypi_x.py:546: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_pypi_x.py:637: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:638: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:660: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_pypi_x.py:722: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_pypi_x.py:723: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_pypi_x.py:729: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:739: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:745: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:746: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:746: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_pypi_x.py:751: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_pypi_x.py:778: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:781: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:781: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:22: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:22: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:28: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:28: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:34: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:34: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:60: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:61: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:27: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:121: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:123: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:132: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:132: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:133: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:134: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:135: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:136: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:138: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:141: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:148: error: Expression type contains \"Any\" (has type \"Callable[[Sequence[Any], NamedArg(object, 'cloner'), NamedArg(object | None, 'ctx'), NamedArg(str, 'repo_parent_root'), NamedArg(object, 'publisher_factory'), NamedArg(str, 'token_env')], tuple[dict[str, str | None], dict[str, dict[str, object]], Path]]\")  [misc]\ntests\\test_main_json.py:155: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:155: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:155: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:156: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:156: error: Expression type contains \"Any\" (has type \"Sequence[Any] | Any\")  [misc]\ntests\\test_main_json.py:156: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:157: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:157: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:158: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:158: error: Expression type contains \"Any\" (has type \"type[SimpleNamespace]\")  [misc]\ntests\\test_main_json.py:159: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_main_json.py:160: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:160: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:161: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:161: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:162: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:162: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_main_json.py:163: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_main_json.py:164: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\ntests\\test_main_json.py:164: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_main_json.py:164: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:173: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:181: error: Expression type contains \"Any\" (has type \"Callable[[VarArg(Any), KwArg(Any)], tuple[dict[str, str | None], dict[str, dict[str, object]], Path]]\")  [misc]\nFound 62 errors in 4 files (checked 8 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:56:59.774031+00:00\nduration: 1.384s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\npublish_flow.py:63: error: Expression type contains \"Any\" (has type \"tuple[Any, int]\")  [misc]\npublish_flow.py:63: error: Expression has type \"Any\"  [misc]\npublish_flow.py:67: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:27: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_pypi_x.py:546: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "publish_flow.py:63: error: Expression type contains \"Any\" (has type \"tuple[Any, int]\")  [misc]\npublish_flow.py:63: error: Expression has type \"Any\"  [misc]\npublish_flow.py:67: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:27: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_pypi_x.py:546: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unim\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:56:59.767393+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 0.1387453000061214,
                "ended_at": "2025-10-21T18:56:59.767393+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "cc9ee788e098c76c275561463ccd828587e2a683cef4560adb6082e4b81b314a",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-21T18:56:59.628398+00:00",
                "stderr": "",
                "stdout": "PLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:58:9\n   |\n56 | def _read_windows_user_env(name: str) -> str | None:\n57 |     try:\n58 |         import winreg\n   |         ^^^^^^^^^^^^^\n59 |     except ModuleNotFoundError:\n60 |         return None\n   |\n\nC901 `_prime_twine_credentials` is too complex (12 > 10)\n  --> publish_flow.py:84:5\n   |\n84 | def _prime_twine_credentials(token_env: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n85 |     token_sources: list[str] = []\n86 |     if token_env:\n   |\n\nS105 Possible hardcoded password assigned to: \"password_env\"\n   --> publish_flow.py:129:24\n    |\n127 |     if token_value:\n128 |         username_env = \"TWINE_USERNAME\"\n129 |         password_env = \"TWINE_PASSWORD\"\n    |                        ^^^^^^^^^^^^^^^^\n130 |         os.environ[username_env] = \"__token__\"\n131 |         os.environ[password_env] = token_value\n    |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> publish_flow.py:136:5\n    |\n134 |       repository_env = \"TWINE_REPOSITORY_URL\"\n135 |       repo_present = bool(os.environ.get(repository_env, \"\").strip())\n136 | /     if not repo_present and selected_source:\n137 | |         if \"test\" in selected_source.lower():\n    | |_____________________________________________^\n138 |               os.environ[repository_env] = \"https://test.pypi.org/legacy/\"\n139 |               _info(\"Configured Twine repository for TestPyPI uploads.\")\n    |\nhelp: Combine `if` statements using `and`\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:7:29\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_main_json.py:7:38\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> tests\\test_main_json.py:9:21\n   |\n 7 | from collections.abc import Mapping, Sequence\n 8 | from datetime import datetime\n 9 | from pathlib import Path\n   |                     ^^^^\n10 | from types import ModuleType, SimpleNamespace\n11 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:13:8\n   |\n11 | from typing import Any, cast\n12 |\n13 | import pytest\n   |        ^^^^^^\n14 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:30:28\n   |\n28 |     return {\n29 |         \"run_id\": \"0123456789abcdef0123456789abcdef\",\n30 |         \"started_at\": _iso(datetime(2025, 1, 1, 12, 0, 0)),\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |         \"inputs\": {\n32 |             \"entry_count\": 1,\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:67:30\n   |\n65 |         },\n66 |         \"status\": \"completed\",\n67 |         \"completed_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:70:30\n   |\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n70 |         \"generated_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n71 |         \"errors\": [],\n72 |     }\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> tests\\test_main_json.py:123:9\n    |\n121 |     calls: dict[str, Any] = {}\n122 |\n123 |     def fake_publish(\n    |         ^^^^^^^^^^^^\n124 |         entries: Sequence[Any],\n125 |         *,\n    |\n\nARG001 Unused function argument: `cloner`\n   --> tests\\test_main_json.py:126:9\n    |\n124 |         entries: Sequence[Any],\n125 |         *,\n126 |         cloner: object,\n    |         ^^^^^^\n127 |         ctx: object | None,\n128 |         repo_parent_root: str,\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:158:5\n    |\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |     ^^^^^^\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:159:5\n    |\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n    |     ^^^^^^\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:160:5\n    |\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |     ^^^^^^\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:161:5\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |     ^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS105 Possible hardcoded password assigned to: \"token_env\"\n   --> tests\\test_main_json.py:161:34\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |                                  ^^^^^^^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:163:5\n    |\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |     ^^^^^^\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:164:5\n    |\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n    |     ^^^^^^\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:166:5\n    |\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n167 |     assert status_value == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:167:5\n    |\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n167 |     assert status_value == \"completed\"\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*_`\n   --> tests\\test_main_json.py:174:13\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |             ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**__`\n   --> tests\\test_main_json.py:174:24\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |                        ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:189:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n    |     ^^^^^^\n190 |     assert \"run_report_path\" in details_obj\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:190:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n190 |     assert \"run_report_path\" in details_obj\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:197:5\n    |\n195 |     validate_payload(result, ERROR_SCHEMA)\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n198 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:198:5\n    |\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n198 |     assert status_value == \"failure\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"token_value\"\n   --> tests\\test_main_json.py:204:19\n    |\n202 |     monkeypatch: pytest.MonkeyPatch,\n203 | ) -> None:\n204 |     token_value = \"pypi-AgENdGVzdC10b2tlbg\"\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n205 |     monkeypatch.delenv(\"TWINE_API_TOKEN\", raising=False)\n206 |     monkeypatch.delenv(\"TWINE_USERNAME\", raising=False)\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:211:16\n    |\n209 |     monkeypatch.setenv(custom_env, token_value)\n210 |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n212 |\n213 |     assert selected == custom_env\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:213:5\n    |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n212 |\n213 |     assert selected == custom_env\n    |     ^^^^^^\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:214:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n    |     ^^^^^^\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:215:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:216:5\n    |\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |     ^^^^^^\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:226:16\n    |\n224 |     monkeypatch.setenv(\"TWINE_PASSWORD\", \"custom-pass\")\n225 |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:228:5\n    |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |     ^^^^^^\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:229:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |     ^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_API_TOKEN\"\n   --> tests\\test_main_json.py:229:45\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |                                             ^^^^^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:230:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:231:5\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_PASSWORD\"\n   --> tests\\test_main_json.py:231:44\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |                                            ^^^^^^^^^^\n    |\n\nPLR0915 Too many statements (53 > 50)\n   --> x_cls_make_pypi_x.py:434:9\n    |\n432 |                 raise FileNotFoundError(message)\n433 |\n434 |     def publish(  # noqa: C901, PLR0912\n    |         ^^^^^^^\n435 |         self,\n436 |         main_file: str,\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:544:5\n    |\n542 |       if details:\n543 |           payload[\"details\"] = {str(key): value for key, value in details.items()}\n544 | /     try:\n545 | |         validate_payload(payload, ERROR_SCHEMA)\n546 | |     except ValidationError:\n547 | |         pass\n    | |____________^\n548 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nS101 Use of `assert` detected\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\nhelp: Break down assertion into multiple parts\n\nSLF001 Private member accessed: `_parent_ctx`\n   --> x_cls_make_pypi_x.py:651:9\n    |\n649 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n650 |     if ctx is not None:\n651 |         namespace._parent_ctx = ctx\n    |         ^^^^^^^^^^^^^^^^^^^^^\n652 |     return namespace\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_pypi_x.py:655:5\n    |\n655 | def main_json(\n    |     ^^^^^^^^^\n656 |     payload: Mapping[str, object], *, ctx: object | None = None\n657 | ) -> dict[str, object]:\n    |\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_pypi_x.py:677:13\n    |\n675 |     for entry_obj in entries_raw:\n676 |         if isinstance(entry_obj, Mapping):\n677 |             manifest_entries.append(_entry_from_json(entry_obj))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n678 |\n679 |     repo_root_obj = parameters.get(\"repo_parent_root\")\n    |\nhelp: Replace for loop with list comprehension\n\nFound 50 errors.\nNo fixes available (8 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:56:59.628398+00:00\nduration: 0.139s\ntool_version: ruff 0.14.1\nstdout:\nPLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:58:9\n   |\n56 | def _read_windows_user_env(name: str) -> str | None:\n57 |     try:\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "PLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:58:9\n   |\n56 | def _read_windows_user_env(name: str) -> str | None:\n57 |     try:\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 202\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:56:58.106979+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 0.2581443999952171,
                "ended_at": "2025-10-21T18:56:58.106979+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "cc9ee788e098c76c275561463ccd828587e2a683cef4560adb6082e4b81b314a",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-21T18:56:57.847526+00:00",
                "stderr": "",
                "stdout": "PLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:58:9\n   |\n56 | def _read_windows_user_env(name: str) -> str | None:\n57 |     try:\n58 |         import winreg\n   |         ^^^^^^^^^^^^^\n59 |     except ModuleNotFoundError:\n60 |         return None\n   |\n\nC901 `_prime_twine_credentials` is too complex (12 > 10)\n  --> publish_flow.py:84:5\n   |\n84 | def _prime_twine_credentials(token_env: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n85 |     token_sources: list[str] = []\n86 |     if token_env:\n   |\n\nS105 Possible hardcoded password assigned to: \"password_env\"\n   --> publish_flow.py:129:24\n    |\n127 |     if token_value:\n128 |         username_env = \"TWINE_USERNAME\"\n129 |         password_env = \"TWINE_PASSWORD\"\n    |                        ^^^^^^^^^^^^^^^^\n130 |         os.environ[username_env] = \"__token__\"\n131 |         os.environ[password_env] = token_value\n    |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> publish_flow.py:136:5\n    |\n134 |       repository_env = \"TWINE_REPOSITORY_URL\"\n135 |       repo_present = bool(os.environ.get(repository_env, \"\").strip())\n136 | /     if not repo_present and selected_source:\n137 | |         if \"test\" in selected_source.lower():\n    | |_____________________________________________^\n138 |               os.environ[repository_env] = \"https://test.pypi.org/legacy/\"\n139 |               _info(\"Configured Twine repository for TestPyPI uploads.\")\n    |\nhelp: Combine `if` statements using `and`\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:7:29\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_main_json.py:7:38\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> tests\\test_main_json.py:9:21\n   |\n 7 | from collections.abc import Mapping, Sequence\n 8 | from datetime import datetime\n 9 | from pathlib import Path\n   |                     ^^^^\n10 | from types import ModuleType, SimpleNamespace\n11 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:13:8\n   |\n11 | from typing import Any, cast\n12 |\n13 | import pytest\n   |        ^^^^^^\n14 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:30:28\n   |\n28 |     return {\n29 |         \"run_id\": \"0123456789abcdef0123456789abcdef\",\n30 |         \"started_at\": _iso(datetime(2025, 1, 1, 12, 0, 0)),\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |         \"inputs\": {\n32 |             \"entry_count\": 1,\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:67:30\n   |\n65 |         },\n66 |         \"status\": \"completed\",\n67 |         \"completed_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:70:30\n   |\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n70 |         \"generated_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n71 |         \"errors\": [],\n72 |     }\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> tests\\test_main_json.py:123:9\n    |\n121 |     calls: dict[str, Any] = {}\n122 |\n123 |     def fake_publish(\n    |         ^^^^^^^^^^^^\n124 |         entries: Sequence[Any],\n125 |         *,\n    |\n\nARG001 Unused function argument: `cloner`\n   --> tests\\test_main_json.py:126:9\n    |\n124 |         entries: Sequence[Any],\n125 |         *,\n126 |         cloner: object,\n    |         ^^^^^^\n127 |         ctx: object | None,\n128 |         repo_parent_root: str,\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:158:5\n    |\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |     ^^^^^^\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:159:5\n    |\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n    |     ^^^^^^\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:160:5\n    |\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |     ^^^^^^\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:161:5\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |     ^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS105 Possible hardcoded password assigned to: \"token_env\"\n   --> tests\\test_main_json.py:161:34\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |                                  ^^^^^^^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:163:5\n    |\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |     ^^^^^^\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:164:5\n    |\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n    |     ^^^^^^\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:166:5\n    |\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n167 |     assert status_value == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:167:5\n    |\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n167 |     assert status_value == \"completed\"\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*_`\n   --> tests\\test_main_json.py:174:13\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |             ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**__`\n   --> tests\\test_main_json.py:174:24\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |                        ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:189:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n    |     ^^^^^^\n190 |     assert \"run_report_path\" in details_obj\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:190:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n190 |     assert \"run_report_path\" in details_obj\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:197:5\n    |\n195 |     validate_payload(result, ERROR_SCHEMA)\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n198 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:198:5\n    |\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n198 |     assert status_value == \"failure\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"token_value\"\n   --> tests\\test_main_json.py:204:19\n    |\n202 |     monkeypatch: pytest.MonkeyPatch,\n203 | ) -> None:\n204 |     token_value = \"pypi-AgENdGVzdC10b2tlbg\"\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n205 |     monkeypatch.delenv(\"TWINE_API_TOKEN\", raising=False)\n206 |     monkeypatch.delenv(\"TWINE_USERNAME\", raising=False)\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:211:16\n    |\n209 |     monkeypatch.setenv(custom_env, token_value)\n210 |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n212 |\n213 |     assert selected == custom_env\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:213:5\n    |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n212 |\n213 |     assert selected == custom_env\n    |     ^^^^^^\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:214:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n    |     ^^^^^^\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:215:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:216:5\n    |\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |     ^^^^^^\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:226:16\n    |\n224 |     monkeypatch.setenv(\"TWINE_PASSWORD\", \"custom-pass\")\n225 |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:228:5\n    |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |     ^^^^^^\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:229:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |     ^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_API_TOKEN\"\n   --> tests\\test_main_json.py:229:45\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |                                             ^^^^^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:230:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:231:5\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_PASSWORD\"\n   --> tests\\test_main_json.py:231:44\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |                                            ^^^^^^^^^^\n    |\n\nPLR0915 Too many statements (53 > 50)\n   --> x_cls_make_pypi_x.py:434:9\n    |\n432 |                 raise FileNotFoundError(message)\n433 |\n434 |     def publish(  # noqa: C901, PLR0912\n    |         ^^^^^^^\n435 |         self,\n436 |         main_file: str,\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:544:5\n    |\n542 |       if details:\n543 |           payload[\"details\"] = {str(key): value for key, value in details.items()}\n544 | /     try:\n545 | |         validate_payload(payload, ERROR_SCHEMA)\n546 | |     except ValidationError:\n547 | |         pass\n    | |____________^\n548 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nS101 Use of `assert` detected\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\nhelp: Break down assertion into multiple parts\n\nSLF001 Private member accessed: `_parent_ctx`\n   --> x_cls_make_pypi_x.py:651:9\n    |\n649 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n650 |     if ctx is not None:\n651 |         namespace._parent_ctx = ctx\n    |         ^^^^^^^^^^^^^^^^^^^^^\n652 |     return namespace\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_pypi_x.py:655:5\n    |\n655 | def main_json(\n    |     ^^^^^^^^^\n656 |     payload: Mapping[str, object], *, ctx: object | None = None\n657 | ) -> dict[str, object]:\n    |\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_pypi_x.py:677:13\n    |\n675 |     for entry_obj in entries_raw:\n676 |         if isinstance(entry_obj, Mapping):\n677 |             manifest_entries.append(_entry_from_json(entry_obj))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n678 |\n679 |     repo_root_obj = parameters.get(\"repo_parent_root\")\n    |\nhelp: Replace for loop with list comprehension\n\nFound 50 errors.\nNo fixes available (8 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:56:57.847526+00:00\nduration: 0.258s\ntool_version: ruff 0.14.1\nstdout:\nPLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:58:9\n   |\n56 | def _read_windows_user_env(name: str) -> str | None:\n57 |     try:\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "PLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:58:9\n   |\n56 | def _read_windows_user_env(name: str) -> str | None:\n57 |     try:\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:57:28.912861+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 1.3534400000062305,
                "ended_at": "2025-10-21T18:57:28.912861+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "3a7db4968648fc351e1f4689b2f4ef7596cfc58fcf74068aacdee7d0c3fa86dd",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-21T18:57:27.565944+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_yahw_x\\__init__.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 7 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_yahw_x\\__init__.py\t2025-10-21 18:49:51.466449+00:00\n+++ C:\\x_runner_x\\x_make_yahw_x\\__init__.py\t2025-10-21 18:57:28.517044+00:00\n@@ -1,10 +1,10 @@\n \"\"\"x_make_yahw_x package wrapper.\"\"\"\n \n from x_make_yahw_x.x_cls_make_yahw_x import (\n-\tXClsMakeYahwX,\n-\tmain,\n-\tmain_json,\n-\tx_cls_make_yahw_x,\n+    XClsMakeYahwX,\n+    main,\n+    main_json,\n+    x_cls_make_yahw_x,\n )\n \n __all__ = [\"XClsMakeYahwX\", \"main\", \"main_json\", \"x_cls_make_yahw_x\"]\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T18:57:27.565944+00:00\nduration: 1.353s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_make_yahw_x\\__init__.py\t2025-10-21 18:49:51.466449+00:00\n+++ C:\\x_runner_x\\x_make_yahw_x\\__init__.py\t2025-10-21 18:57:28.517044+00:00\n@@ -1,10 +1,10 @@\n \"\"\"x_make_yahw_x package wrapper.\"\"\"\n \n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_yahw_x\\__init__.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 7 files would be left unchanged.",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_yahw_x\\__init__.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 7 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_yahw_x\\__init__.py\t2025-10-21 18:49:51.466449+00:00\n+++ C:\\x_runner_x\\x_make_yahw_x\\__init__.py\t2025-10-21 18:57:28.517044+00:00\n@@ -1,10 +1,10 @@\n \"\"\"x_make_yahw_x package wrapper.\"\"\"\n \n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T18:57:27.565944+00:00 duratio\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T18:57:30.448582+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 1.3633792000182439,
                "ended_at": "2025-10-21T18:57:30.448582+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "3a7db4968648fc351e1f4689b2f4ef7596cfc58fcf74068aacdee7d0c3fa86dd",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-21T18:57:29.084885+00:00",
                "stderr": "",
                "stdout": "x_cls_make_yahw_x.py:63: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:101: error: Argument 1 to \"len\" has incompatible type \"object\"; expected \"Sized\"  [arg-type]\nx_cls_make_yahw_x.py:115: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:143: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:146: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:146: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:26: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:28: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:31: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:32: error: Expression has type \"Any\"  [misc]\ntests\\test_yahw.py:50: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_yahw.py:51: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_main_json.py:51: error: Expression type contains \"Any\" (has type \"type[SimpleNamespace]\")  [misc]\ntests\\test_main_json.py:52: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:53: error: Expression has type \"Any\"  [misc]\nFound 17 errors in 4 files (checked 8 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T18:57:29.084885+00:00\nduration: 1.363s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_yahw_x.py:63: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:101: error: Argument 1 to \"len\" has incompatible type \"object\"; expected \"Sized\"  [arg-type]\nx_cls_make_yahw_x.py:115: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:143: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:146: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_yahw_x.py:63: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:101: error: Argument 1 to \"len\" has incompatible type \"object\"; expected \"Sized\"  [arg-type]\nx_cls_make_yahw_x.py:115: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:143: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:146: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unim\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T18:57:29.080699+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 0.15870100000756793,
                "ended_at": "2025-10-21T18:57:29.080699+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "3a7db4968648fc351e1f4689b2f4ef7596cfc58fcf74068aacdee7d0c3fa86dd",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-21T18:57:28.922382+00:00",
                "stderr": "",
                "stdout": "W191 Indentation contains tabs\n --> __init__.py:4:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n  | ^^^^\n5 |     main,\n6 |     main_json,\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:5:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n5 |     main,\n  | ^^^^\n6 |     main_json,\n7 |     x_cls_make_yahw_x,\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n4 |     XClsMakeYahwX,\n5 |     main,\n6 |     main_json,\n  | ^^^^\n7 |     x_cls_make_yahw_x,\n8 | )\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:7:1\n  |\n5 |     main,\n6 |     main_json,\n7 |     x_cls_make_yahw_x,\n  | ^^^^\n8 | )\n  |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:45:5\n   |\n43 |     validate_payload(result, OUTPUT_SCHEMA)\n44 |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n   |     ^^^^^^\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:47:5\n   |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |     ^^^^^^\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:48:5\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |     ^^^^^^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_main_json.py:48:47\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |                                               ^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:49:5\n   |\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |     ^^^^^^\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:51:5\n   |\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |     ^^^^^^\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:52:5\n   |\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n   |     ^^^^^^\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:53:5\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> tests\\test_main_json.py:53:31\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |                               ^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_main_json.py:59:32\n   |\n57 |     class FailingRunner(XClsMakeYahwX):\n58 |         def run(self) -> str:\n59 |             raise RuntimeError(\"boom\")\n   |                                ^^^^^^\n60 |\n61 |     monkeypatch.setattr(yahw_module, \"XClsMakeYahwX\", FailingRunner)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:67:5\n   |\n66 |     validate_payload(result, ERROR_SCHEMA)\n67 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:75:5\n   |\n73 |     result = main_json({})\n74 |     validate_payload(result, ERROR_SCHEMA)\n75 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_yahw.py:65:34\n   |\n63 |         spec.loader.exec_module(module)\n64 |\n65 |     assert excinfo.value.code == 2\n   |                                  ^\n66 |     output = capsys.readouterr()\n67 |     assert \"JSON input required\" in output.err\n   |\n\nSLF001 Private member accessed: `_parent_ctx`\n  --> x_cls_make_yahw_x.py:54:9\n   |\n52 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n53 |     if ctx is not None:\n54 |         namespace._parent_ctx = ctx\n   |         ^^^^^^^^^^^^^^^^^^^^^\n55 |     return namespace\n   |\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n   --> x_cls_make_yahw_x.py:100:56\n    |\n 98 |     metadata: dict[str, object] = {}\n 99 |     if context_mapping:\n100 |         metadata[\"context_keys\"] = sorted(str(key) for key in context_mapping.keys())\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n101 |         metadata[\"context_entries\"] = len(metadata[\"context_keys\"])\n102 |     if runtime_ctx is not ctx and runtime_ctx is not None and ctx is not None:\n    |\nhelp: Remove `.keys()`\n\nFound 21 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:57:28.922382+00:00\nduration: 0.159s\ntool_version: ruff 0.14.1\nstdout:\nW191 Indentation contains tabs\n --> __init__.py:4:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "W191 Indentation contains tabs\n --> __init__.py:4:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 202\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T18:57:27.560272+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 0.16364310000790283,
                "ended_at": "2025-10-21T18:57:27.560272+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "3a7db4968648fc351e1f4689b2f4ef7596cfc58fcf74068aacdee7d0c3fa86dd",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-21T18:57:27.396662+00:00",
                "stderr": "",
                "stdout": "W191 Indentation contains tabs\n --> __init__.py:4:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n  | ^^^^\n5 |     main,\n6 |     main_json,\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:5:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n5 |     main,\n  | ^^^^\n6 |     main_json,\n7 |     x_cls_make_yahw_x,\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:6:1\n  |\n4 |     XClsMakeYahwX,\n5 |     main,\n6 |     main_json,\n  | ^^^^\n7 |     x_cls_make_yahw_x,\n8 | )\n  |\n\nW191 Indentation contains tabs\n --> __init__.py:7:1\n  |\n5 |     main,\n6 |     main_json,\n7 |     x_cls_make_yahw_x,\n  | ^^^^\n8 | )\n  |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:45:5\n   |\n43 |     validate_payload(result, OUTPUT_SCHEMA)\n44 |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n   |     ^^^^^^\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:47:5\n   |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |     ^^^^^^\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:48:5\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |     ^^^^^^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_main_json.py:48:47\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |                                               ^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:49:5\n   |\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |     ^^^^^^\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:51:5\n   |\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |     ^^^^^^\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:52:5\n   |\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n   |     ^^^^^^\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:53:5\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> tests\\test_main_json.py:53:31\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |                               ^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_main_json.py:59:32\n   |\n57 |     class FailingRunner(XClsMakeYahwX):\n58 |         def run(self) -> str:\n59 |             raise RuntimeError(\"boom\")\n   |                                ^^^^^^\n60 |\n61 |     monkeypatch.setattr(yahw_module, \"XClsMakeYahwX\", FailingRunner)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:67:5\n   |\n66 |     validate_payload(result, ERROR_SCHEMA)\n67 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:75:5\n   |\n73 |     result = main_json({})\n74 |     validate_payload(result, ERROR_SCHEMA)\n75 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_yahw.py:65:34\n   |\n63 |         spec.loader.exec_module(module)\n64 |\n65 |     assert excinfo.value.code == 2\n   |                                  ^\n66 |     output = capsys.readouterr()\n67 |     assert \"JSON input required\" in output.err\n   |\n\nSLF001 Private member accessed: `_parent_ctx`\n  --> x_cls_make_yahw_x.py:54:9\n   |\n52 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n53 |     if ctx is not None:\n54 |         namespace._parent_ctx = ctx\n   |         ^^^^^^^^^^^^^^^^^^^^^\n55 |     return namespace\n   |\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n   --> x_cls_make_yahw_x.py:100:56\n    |\n 98 |     metadata: dict[str, object] = {}\n 99 |     if context_mapping:\n100 |         metadata[\"context_keys\"] = sorted(str(key) for key in context_mapping.keys())\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n101 |         metadata[\"context_entries\"] = len(metadata[\"context_keys\"])\n102 |     if runtime_ctx is not ctx and runtime_ctx is not None and ctx is not None:\n    |\nhelp: Remove `.keys()`\n\nFound 22 errors (1 fixed, 21 remaining).\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T18:57:27.396662+00:00\nduration: 0.164s\ntool_version: ruff 0.14.1\nstdout:\nW191 Indentation contains tabs\n --> __init__.py:4:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "W191 Indentation contains tabs\n --> __init__.py:4:1\n  |\n3 | from x_make_yahw_x.x_cls_make_yahw_x import (\n4 |     XClsMakeYahwX,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        }
    ],
    "generated_at": "2025-10-21T18:57:32.656097+00:00",
    "runtime": {
        "environment": {
            "PATH": "C:\\x_runner_x\\.venv\\Lib\\site-packages\\PySide6;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\HP\\HP One Agent;C:\\Users\\eye43\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\eye43\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;c:\\Users\\eye43\\.vscode\\extensions\\ms-python.debugpy-2025.14.1-win32-x64\\bundled\\scripts\\noConfigScripts;c:\\Users\\eye43\\AppData\\Roaming\\Code\\User\\globalStorage\\github.copilot-chat\\debugCommand"
        },
        "platform": "Windows-11-10.0.26100-SP0",
        "python_executable": "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
        "python_version": "3.12.6 (main, Sep  9 2024, 20:50:27) [MSC v.1929 64 bit (AMD64)]",
        "run_completed_at": "2025-10-21T18:57:32.656097+00:00",
        "run_started_at": "2025-10-21T18:50:16.300753+00:00",
        "workspace_root": "C:\\x_runner_x"
    },
    "schema_version": "1.0",
    "summary": {
        "overall_stats": {
            "cache_hits": 2,
            "cache_misses": 73,
            "failed_tools": 38,
            "had_failures": true,
            "total_tools_run": 75
        },
        "repos": {
            "x_0_make_all_x": {
                "cached": 0,
                "failed": 2,
                "repo_hash": "cf15ac467210269842587148d4426c671d53b74d9607cb58fef95b0d4c8b9b1d",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_legatus_acta_schedae_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "3709102714589afc84a80f6cb517b668fb567d169b96d51a5219d05e7dbf5125",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_legatus_tactica_impetus_x": {
                "cached": 2,
                "failed": 0,
                "repo_hash": "9fe8fa5da6bb7971aae3acb28f1cc21b176c9c0916997a30407b350986bb270b",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_common_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "8e27c4a251acce2d3f67b34b8b0a3fae1e3377144fdc3a94db5f19900207fec8",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_clones_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "e6d3fd499066fcda507baba13e50d3cd6fdce4393cad13e34049c3d78420e562",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 2,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_visitor_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "0e9c0f09c105b5c3e095b08ee9a8f957f2f788e6e6bc39909f4e29c60359ad2a",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_graphviz_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "43da14231f363990dd945df31aa5c9f6b3ae3de5116e7f8326c3ffdf02b6af36",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 2,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_markdown_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "c568f0be6d2c020ebd5b0adb9123aa8e5595df40125273f67b589bd546821ab2",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_mermaid_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "2917e3caf3adf1a3dc56d94a48d730cfb9021188ed4208c03f5ee944ac8aa28a",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_persistent_env_var_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "e3826cdb38153623aef20e091eb80825371801db1170b969666cbcab199b2309",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_pip_updates_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "420939d9b44b8ea30a45961e1b3e3f12d4a3505655748e1435ebcab4bd7c1360",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_py_mod_sideload_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "56d61dcd33f09048c06b7bf248c5801e382c058db215de100995e1d21d376388",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_py_venv_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "a044394e25c4e0774808e2e34ba21b4ebc963babaed1354e64061d898384629f",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_pypi_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "cc9ee788e098c76c275561463ccd828587e2a683cef4560adb6082e4b81b314a",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_yahw_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "3a7db4968648fc351e1f4689b2f4ef7596cfc58fcf74068aacdee7d0c3fa86dd",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            }
        },
        "timestamp": "2025-10-21T18:57:32.656097+00:00",
        "total_repos": 15
    },
    "tool_versions": {
        "black": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6",
        "mypy": "mypy 1.18.2 (compiled: yes)",
        "pyright": "pyright 1.1.406",
        "ruff": "ruff 0.14.1"
    },
    "workspace_root": "C:\\x_runner_x"
}