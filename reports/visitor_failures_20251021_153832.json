{
    "failures": [
        {
            "captured_at": "2025-10-21T15:33:31.809540+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 2.209824200021103,
                "ended_at": "2025-10-21T15:33:31.809540+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/progress_board.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_orchestrator_visitor_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "f584a6469fe06969a6e4186a8ae3cbfc6aedd94b138cd9dfab129cc88aa5c5d4",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-21T15:33:29.599161+00:00",
                "stderr": "",
                "stdout": "interface\\gui\\prototypes\\shared.py:636: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:771: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:772: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:1030: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1033: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1092: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1095: error: Expression has type \"Any\"  [misc]\nFound 7 errors in 1 file (checked 25 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:33:29.599161+00:00\nduration: 2.210s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\ninterface\\gui\\prototypes\\shared.py:636: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:771: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:772: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:1030: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1033: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "interface\\gui\\prototypes\\shared.py:636: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:771: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:772: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\ninterface\\gui\\prototypes\\shared.py:1030: error: Expression has type \"Any\"  [misc]\ninterface\\gui\\prototypes\\shared.py:1033: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-un\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:33:37.634982+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "pyright",
                    ".",
                    "--level",
                    "error"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 5.8293212999997195,
                "ended_at": "2025-10-21T15:33:37.634982+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/progress_board.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_orchestrator_visitor_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "f584a6469fe06969a6e4186a8ae3cbfc6aedd94b138cd9dfab129cc88aa5c5d4",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-21T15:33:31.812405+00:00",
                "stderr": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\n",
                "stdout": "c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:1620:20 - error: Type \"int | None\" is not assignable to return type \"int\"\n  \u00c2\u00a0\u00c2\u00a0Type \"int | None\" is not assignable to type \"int\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"int\" (reportReturnType)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:2064:37 - error: Argument of type \"(context: object, root: Path, **_: object) -> VisitorProtocol\" cannot be assigned to parameter \"instantiate_visitor\" of type \"VisitorConstructor\" in function \"run_inspection\"\n  \u00c2\u00a0\u00c2\u00a0Type \"(context: object, root: Path, **_: object) -> VisitorProtocol\" is not assignable to type \"(ctx: object | None, root: str, *, progress_writer: RepoProgressReporter | None = None) -> VisitorProtocol\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Parameter name mismatch: \"ctx\" versus \"context\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Parameter 2: type \"str\" is incompatible with type \"Path\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"str\" is not assignable to \"Path\" (reportArgumentType)\n2 errors, 0 warnings, 0 informations\n",
                "tool": "pyright",
                "tool_module": "pyright",
                "tool_version": "pyright 1.1.406"
            },
            "exit": "exit 1",
            "message": "pyright failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error\nstarted_at: 2025-10-21T15:33:31.812405+00:00\nduration: 5.829s\ntool_version: pyright 1.1.406\nstdout:\nc:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:1620:20 - error: Type \"int | None\" is not assignable to return type \"int\"\n  \u00c2\u00a0\u00c2\u00a0Type \"int | None\" is not assignable to type \"int\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"int\" (reportReturnType)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:2064:37 - error: Argument of type \"(context: object, root: Path, **_: object) -> VisitorProtocol\" cannot be assigned to parameter \"instantiate_visitor\" of type \"VisitorConstructor\" in function \"run_inspection\"\n\u2026\nstderr:\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": "Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Apps > Advanced app settings > App execution aliases.",
            "stdout_preview": "c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:1620:20 - error: Type \"int | None\" is not assignable to return type \"int\"\n  \u00c2\u00a0\u00c2\u00a0Type \"int | None\" is not assignable to type \"int\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\"None\" is not assignable to \"int\" (reportReturnType)\n  c:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py:2064:37 - error: Argument of type \"(context: object, root: Path, **_: object) -> VisitorProtocol\" cannot be assigned to parameter \"instantiate_visitor\" of type \"VisitorConstructor\" in function \"run_inspection\"\n\u2026",
            "suggested_action": "Investigate",
            "summary": "pyright failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m pyright . --level error started_at: 2025-10-21T15:33:31.812405+00:00 duration: 5.829s tool_version: pyright 1.1\u2026",
            "tool": "pyright",
            "tool_version": "pyright 1.1.406"
        },
        {
            "captured_at": "2025-10-21T15:33:29.593090+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 0.20607620000373572,
                "ended_at": "2025-10-21T15:33:29.593090+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/progress_board.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_orchestrator_visitor_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "f584a6469fe06969a6e4186a8ae3cbfc6aedd94b138cd9dfab129cc88aa5c5d4",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-21T15:33:29.389582+00:00",
                "stderr": "",
                "stdout": "PLR0913 Too many arguments in function definition (7 > 5)\n    --> x_cls_make_all_x.py:1680:9\n     |\n1678 |         raise RuntimeError(issue)\n1679 |\n1680 |     def _record_environment_stage_failure(\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1681 |         self,\n1682 |         *,\n     |\n\nFound 1 error.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:33:29.389582+00:00\nduration: 0.206s\ntool_version: ruff 0.14.1\nstdout:\nPLR0913 Too many arguments in function definition (7 > 5)\n    --> x_cls_make_all_x.py:1680:9\n     |\n1678 |         raise RuntimeError(issue)\n1679 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0913 Too many arguments in function definition (7 > 5)\n    --> x_cls_make_all_x.py:1680:9\n     |\n1678 |         raise RuntimeError(issue)\n1679 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 2\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:33:25.439631+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 0.295396699977573,
                "ended_at": "2025-10-21T15:33:25.439631+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "forceit.py",
                    "interface/__init__.py",
                    "interface/commit.py",
                    "interface/gui/__init__.py",
                    "interface/gui/app.py",
                    "interface/gui/commit.py",
                    "interface/gui/progress_board.py",
                    "interface/gui/prototypes/__init__.py",
                    "interface/gui/prototypes/form_schemas.py",
                    "interface/gui/prototypes/nicegui_control_center.py",
                    "interface/gui/prototypes/shared.py",
                    "interface/gui/prototypes/textual_control_center.py",
                    "interface/gui/tree.py",
                    "interface/tree.py",
                    "manifest.py",
                    "tests/__init__.py",
                    "tests/test_forceit.py",
                    "tests/test_gui_columns.py",
                    "tests/test_gui_commit.py",
                    "tests/test_gui_exit_code.py",
                    "tests/test_gui_tree.py",
                    "tests/test_make_all_commit_cli.py",
                    "tests/test_make_all_kanban.py",
                    "tests/test_make_all_pip_updates.py",
                    "tests/test_orchestrator_clones_stage.py",
                    "tests/test_orchestrator_visitor_stage.py",
                    "tests/test_publish_manifest.py",
                    "x_cls_make_all_x.py"
                ],
                "repo": "x_0_make_all_x",
                "repo_hash": "f584a6469fe06969a6e4186a8ae3cbfc6aedd94b138cd9dfab129cc88aa5c5d4",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-21T15:33:25.147313+00:00",
                "stderr": "",
                "stdout": "PLR0913 Too many arguments in function definition (7 > 5)\n    --> x_cls_make_all_x.py:1680:9\n     |\n1678 |         raise RuntimeError(issue)\n1679 |\n1680 |     def _record_environment_stage_failure(\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1681 |         self,\n1682 |         *,\n     |\n\nFound 2 errors (1 fixed, 1 remaining).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:33:25.147313+00:00\nduration: 0.295s\ntool_version: ruff 0.14.1\nstdout:\nPLR0913 Too many arguments in function definition (7 > 5)\n    --> x_cls_make_all_x.py:1680:9\n     |\n1678 |         raise RuntimeError(issue)\n1679 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0913 Too many arguments in function definition (7 > 5)\n    --> x_cls_make_all_x.py:1680:9\n     |\n1678 |         raise RuntimeError(issue)\n1679 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_a\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:34:52.633026+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_common_x",
                "duration_seconds": 0.14618869998957962,
                "ended_at": "2025-10-21T15:34:52.633026+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "exporters.py",
                    "json_board.py",
                    "json_contracts.py",
                    "progress_snapshot.py",
                    "run_reports.py",
                    "stage_progress.py",
                    "telemetry.py",
                    "tests/__init__.py",
                    "tests/test_exporters.py",
                    "tests/test_json_board.py",
                    "tests/test_json_contracts.py",
                    "tests/test_subprocess_utils.py",
                    "x_cls_make_common_x.py",
                    "x_env_x.py",
                    "x_http_client_x.py",
                    "x_logging_utils_x.py",
                    "x_subprocess_utils_x.py"
                ],
                "repo": "x_make_common_x",
                "repo_hash": "1f2a561bd591309d0ab7b5045d2787658929c2f4282273605b301da9e588de5e",
                "repo_path": "C:\\x_runner_x\\x_make_common_x",
                "started_at": "2025-10-21T15:34:52.487054+00:00",
                "stderr": "",
                "stdout": "SIM108 Use ternary operator `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event` instead of `if`-`else`-block\n   --> telemetry.py:119:5\n    |\n117 |       logger = get_logger(\"x_make.telemetry\")\n118 |       payload: Mapping[str, JSONValue]\n119 | /     if isinstance(event, TelemetryEvent):\n120 | |         payload = event.as_dict()\n121 | |     else:\n122 | |         payload = event\n    | |_______________________^\n123 |       logger.info(\"telemetry event: %s\", payload)\n    |\nhelp: Replace `if`-`else`-block with `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event`\n\nB017 Do not assert blind exception: `Exception`\n  --> tests\\test_json_contracts.py:34:10\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nPT011 `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception\n  --> tests\\test_json_contracts.py:34:24\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |                        ^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nFound 3 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_common_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_common_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:34:52.487054+00:00\nduration: 0.146s\ntool_version: ruff 0.14.1\nstdout:\nSIM108 Use ternary operator `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event` instead of `if`-`else`-block\n   --> telemetry.py:119:5\n    |\n117 |       logger = get_logger(\"x_make.telemetry\")\n118 |       payload: Mapping[str, JSONValue]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_common_x",
            "repo_path": "C:\\x_runner_x\\x_make_common_x",
            "stderr_preview": null,
            "stdout_preview": "SIM108 Use ternary operator `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event` instead of `if`-`else`-block\n   --> telemetry.py:119:5\n    |\n117 |       logger = get_logger(\"x_make.telemetry\")\n118 |       payload: Mapping[str, JSONValue]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_common_x (exit 1) cwd: C:\\x_runner_x\\x_make_common_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:34:50.523333+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_common_x",
                "duration_seconds": 0.3180483999894932,
                "ended_at": "2025-10-21T15:34:50.523333+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "exporters.py",
                    "json_board.py",
                    "json_contracts.py",
                    "progress_snapshot.py",
                    "run_reports.py",
                    "stage_progress.py",
                    "telemetry.py",
                    "tests/__init__.py",
                    "tests/test_exporters.py",
                    "tests/test_json_board.py",
                    "tests/test_json_contracts.py",
                    "tests/test_subprocess_utils.py",
                    "x_cls_make_common_x.py",
                    "x_env_x.py",
                    "x_http_client_x.py",
                    "x_logging_utils_x.py",
                    "x_subprocess_utils_x.py"
                ],
                "repo": "x_make_common_x",
                "repo_hash": "1f2a561bd591309d0ab7b5045d2787658929c2f4282273605b301da9e588de5e",
                "repo_path": "C:\\x_runner_x\\x_make_common_x",
                "started_at": "2025-10-21T15:34:50.205306+00:00",
                "stderr": "",
                "stdout": "SIM108 Use ternary operator `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event` instead of `if`-`else`-block\n   --> telemetry.py:119:5\n    |\n117 |       logger = get_logger(\"x_make.telemetry\")\n118 |       payload: Mapping[str, JSONValue]\n119 | /     if isinstance(event, TelemetryEvent):\n120 | |         payload = event.as_dict()\n121 | |     else:\n122 | |         payload = event\n    | |_______________________^\n123 |       logger.info(\"telemetry event: %s\", payload)\n    |\nhelp: Replace `if`-`else`-block with `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event`\n\nB017 Do not assert blind exception: `Exception`\n  --> tests\\test_json_contracts.py:34:10\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nPT011 `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception\n  --> tests\\test_json_contracts.py:34:24\n   |\n33 | def test_validate_payload_raises_on_failure(sample_schema: dict[str, object]) -> None:\n34 |     with pytest.raises(Exception):\n   |                        ^^^^^^^^^\n35 |         validate_payload({\"details\": {}}, sample_schema)\n   |\n\nFound 4 errors (1 fixed, 3 remaining).\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_common_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_common_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:34:50.205306+00:00\nduration: 0.318s\ntool_version: ruff 0.14.1\nstdout:\nSIM108 Use ternary operator `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event` instead of `if`-`else`-block\n   --> telemetry.py:119:5\n    |\n117 |       logger = get_logger(\"x_make.telemetry\")\n118 |       payload: Mapping[str, JSONValue]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_common_x",
            "repo_path": "C:\\x_runner_x\\x_make_common_x",
            "stderr_preview": null,
            "stdout_preview": "SIM108 Use ternary operator `payload = event.as_dict() if isinstance(event, TelemetryEvent) else event` instead of `if`-`else`-block\n   --> telemetry.py:119:5\n    |\n117 |       logger = get_logger(\"x_make.telemetry\")\n118 |       payload: Mapping[str, JSONValue]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_common_x (exit 1) cwd: C:\\x_runner_x\\x_make_common_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:35:11.429713+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 0.8690486999985296,
                "ended_at": "2025-10-21T15:35:11.429713+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "9a15238add17d0508429feb188a0e1427461f954b2405a3aade34397137b7a0f",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-21T15:35:10.560013+00:00",
                "stderr": "",
                "stdout": "x_make_github_clones_x\\__init__.py:3: error: Cannot find implementation or library stub for module named \".x_cls_make_github_clones_x\"  [import-not-found]\n__init__.py:5: error: Cannot find implementation or library stub for module named \"__main__.x_cls_make_github_clones_x\"  [import-not-found]\n__init__.py:5: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_github_clones_x.py:40: error: Skipping analyzing \"x_make_github_clones_x.json_contracts\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nx_cls_make_github_clones_x.py:236: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:850: error: Dict entry 1 has incompatible type \"str\": \"bool\"; expected \"str\": \"str | None\"  [dict-item]\nx_cls_make_github_clones_x.py:852: error: Dict entry 2 has incompatible type \"str\": \"float\"; expected \"str\": \"str | None\"  [dict-item]\nx_cls_make_github_clones_x.py:1096: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:1097: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:1156: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1234: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1278: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1281: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:1281: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:13: error: Skipping analyzing \"x_make_github_clones_x.json_contracts\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\ntests\\test_json_contracts.py:35: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:39: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:44: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:49: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:55: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:55: error: Expression type contains \"Any\" (has type \"tuple[Any, Any, Any]\")  [misc]\ntests\\test_json_contracts.py:56: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:64: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:65: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:66: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:74: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:76: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:77: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:78: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:88: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:97: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:114: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:114: error: Expression type contains \"Any\" (has type \"Callable[[Any, str | None, DefaultNamedArg(bool | None, 'include_forks')], list[RepoRecord]]\")  [misc]\ntests\\test_json_contracts.py:115: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:115: error: Expression type contains \"Any\" (has type \"Callable[[Any, Path, str], bool]\")  [misc]\ntests\\test_json_contracts.py:118: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:120: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:144: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:152: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:153: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:154: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:155: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:165: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:167: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:176: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:193: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:193: error: Expression type contains \"Any\" (has type \"Callable[[Any, str | None, DefaultNamedArg(bool | None, 'include_forks')], list[RepoRecord]]\")  [misc]\ntests\\test_json_contracts.py:194: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:194: error: Expression type contains \"Any\" (has type \"Callable[[Any, Path, str], bool]\")  [misc]\ntests\\test_json_contracts.py:197: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:199: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:205: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:213: error: Expression has type \"Any\"  [misc]\nFound 52 errors in 4 files (checked 13 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:35:10.560013+00:00\nduration: 0.869s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_make_github_clones_x\\__init__.py:3: error: Cannot find implementation or library stub for module named \".x_cls_make_github_clones_x\"  [import-not-found]\n__init__.py:5: error: Cannot find implementation or library stub for module named \"__main__.x_cls_make_github_clones_x\"  [import-not-found]\n__init__.py:5: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_github_clones_x.py:40: error: Skipping analyzing \"x_make_github_clones_x.json_contracts\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nx_cls_make_github_clones_x.py:236: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "x_make_github_clones_x\\__init__.py:3: error: Cannot find implementation or library stub for module named \".x_cls_make_github_clones_x\"  [import-not-found]\n__init__.py:5: error: Cannot find implementation or library stub for module named \"__main__.x_cls_make_github_clones_x\"  [import-not-found]\n__init__.py:5: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nx_cls_make_github_clones_x.py:40: error: Skipping analyzing \"x_make_github_clones_x.json_contracts\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nx_cls_make_github_clones_x.py:236: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable -\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:35:10.552059+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 0.13667519998853095,
                "ended_at": "2025-10-21T15:35:10.552059+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "9a15238add17d0508429feb188a0e1427461f954b2405a3aade34397137b7a0f",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-21T15:35:10.417043+00:00",
                "stderr": "",
                "stdout": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n   |         ^^^^\n90 |         username: str | None = None,\n91 |         *,\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n   |         ^^^^\n90 |         username: str | None = None,\n91 |         *,\n   |\n\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:97:22\n   |\n95 |         return [repo]\n96 |\n97 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n98 |         repo_dir.mkdir(parents=True, exist_ok=True)\n99 |         _ = git_url\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:97:22\n   |\n95 |         return [repo]\n96 |\n97 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n98 |         repo_dir.mkdir(parents=True, exist_ok=True)\n99 |         _ = git_url\n   |\n\nARG001 Unused function argument: `timestamp`\n   --> tests\\test_json_contracts.py:106:9\n    |\n104 |         *,\n105 |         base_dir: Path | str,\n106 |         timestamp: object | None = None,\n    |         ^^^^^^^^^\n107 |     ) -> Path:\n108 |         base = Path(base_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     validate_payload(result, OUTPUT_SCHEMA)\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n123 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n123 |     assert status_value == \"success\"\n    |     ^^^^^^\n124 |\n125 |     invocation_obj = result.get(\"invocation\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:126:5\n    |\n125 |     invocation_obj = result.get(\"invocation\")\n126 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n    |     ^^^^^^\n130 |     assert target_dir_value == str(target_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n130 |     assert target_dir_value == str(target_dir)\n    |     ^^^^^^\n131 |\n132 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n132 |     summary_obj = result.get(\"summary\")\n133 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n    |     ^^^^^^\n137 |     assert successful_value == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n137 |     assert successful_value == 1\n    |     ^^^^^^\n138 |\n139 |     repos_obj = result.get(\"repos\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:140:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n    |     ^^^^^^\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n141 |     assert repos_obj, \"repo list should not be empty\"\n    |     ^^^^^^\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |     ^^^^^^\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |     ^^^^^^\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:168:9\n    |\n167 |     def fake_fetch(\n168 |         self,\n    |         ^^^^\n169 |         username: str | None = None,\n170 |         *,\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:168:9\n    |\n167 |     def fake_fetch(\n168 |         self,\n    |         ^^^^\n169 |         username: str | None = None,\n170 |         *,\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:176:22\n    |\n174 |         return [repo]\n175 |\n176 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n177 |         repo_dir.mkdir(parents=True, exist_ok=True)\n178 |         _ = git_url\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:176:22\n    |\n174 |         return [repo]\n175 |\n176 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n177 |         repo_dir.mkdir(parents=True, exist_ok=True)\n178 |         _ = git_url\n    |\n\nARG001 Unused function argument: `timestamp`\n   --> tests\\test_json_contracts.py:185:9\n    |\n183 |         *,\n184 |         base_dir: Path | str,\n185 |         timestamp: object | None = None,\n    |         ^^^^^^^^^\n186 |     ) -> Path:\n187 |         base = Path(base_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:201:5\n    |\n199 |     validate_payload(result, OUTPUT_SCHEMA)\n200 |     invocation_obj = result.get(\"invocation\")\n201 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:204:5\n    |\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n    |     ^^^^^^\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:205:5\n    |\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:216:5\n    |\n214 |     status_value = result.get(\"status\")\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:217:5\n    |\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:218:5\n    |\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |     ^^^^^^\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:219:5\n    |\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:235:5\n    |\n233 |       if details:\n234 |           payload[\"details\"] = dict(details)\n235 | /     try:\n236 | |         validate_payload(payload, ERROR_SCHEMA)\n237 | |     except ValidationError:\n238 | |         pass\n    | |____________^\n239 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:242:33\n    |\n242 | def _coerce_bool(value: object, default: bool) -> bool:\n    |                                 ^^^^^^^\n243 |     if isinstance(value, bool):\n244 |         return value\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_github_clones_x.py:272:59\n    |\n270 |         os.environ[env_name] = \"1\" if value else \"0\"\n271 |     elif isinstance(value, str):\n272 |         os.environ[env_name] = \"1\" if _coerce_bool(value, False) else \"0\"\n    |                                                           ^^^^^\n273 |     return original, original_present\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:276:58\n    |\n276 | def _restore_allow_token_clone_env(original: str | None, present: bool) -> None:\n    |                                                          ^^^^^^^\n277 |     env_name = x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV\n278 |     if present:\n    |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1182:55\n     |\n1180 |     target_dir_path = Path(target_dir_str)\n1181 |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n     |                                                       ^^^^^\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1183:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n     |                                                                   ^^^^^\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1184:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |                                                                   ^^^^^\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1185:71\n     |\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |                                                                       ^^^^\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nFound 39 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:35:10.417043+00:00\nduration: 0.137s\ntool_version: ruff 0.14.1\nstdout:\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py3\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:35:08.846735+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_clones_x",
                "duration_seconds": 0.19756770000094548,
                "ended_at": "2025-10-21T15:35:08.846735+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "fastapi/__init__.py",
                    "fastapi/__main__.py",
                    "fastapi/cli.py",
                    "fastapi_cli/__init__.py",
                    "fastapi_cli/cli.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_make_github_clones.py",
                    "x_cls_make_github_clones_x.py",
                    "x_make_github_clones_x/__init__.py",
                    "x_make_github_clones_x/x_cls_make_github_clones_x.py"
                ],
                "repo": "x_make_github_clones_x",
                "repo_hash": "9a15238add17d0508429feb188a0e1427461f954b2405a3aade34397137b7a0f",
                "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
                "started_at": "2025-10-21T15:35:08.647641+00:00",
                "stderr": "",
                "stdout": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n   |         ^^^^\n90 |         username: str | None = None,\n91 |         *,\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n   |         ^^^^\n90 |         username: str | None = None,\n91 |         *,\n   |\n\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:97:22\n   |\n95 |         return [repo]\n96 |\n97 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n98 |         repo_dir.mkdir(parents=True, exist_ok=True)\n99 |         _ = git_url\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_json_contracts.py:97:22\n   |\n95 |         return [repo]\n96 |\n97 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n   |                      ^^^^\n98 |         repo_dir.mkdir(parents=True, exist_ok=True)\n99 |         _ = git_url\n   |\n\nARG001 Unused function argument: `timestamp`\n   --> tests\\test_json_contracts.py:106:9\n    |\n104 |         *,\n105 |         base_dir: Path | str,\n106 |         timestamp: object | None = None,\n    |         ^^^^^^^^^\n107 |     ) -> Path:\n108 |         base = Path(base_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:122:5\n    |\n120 |     validate_payload(result, OUTPUT_SCHEMA)\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n123 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:123:5\n    |\n121 |     status_value = result.get(\"status\")\n122 |     assert isinstance(status_value, str)\n123 |     assert status_value == \"success\"\n    |     ^^^^^^\n124 |\n125 |     invocation_obj = result.get(\"invocation\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:126:5\n    |\n125 |     invocation_obj = result.get(\"invocation\")\n126 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:129:5\n    |\n127 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n    |     ^^^^^^\n130 |     assert target_dir_value == str(target_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     target_dir_value = invocation.get(\"target_dir\")\n129 |     assert isinstance(target_dir_value, str)\n130 |     assert target_dir_value == str(target_dir)\n    |     ^^^^^^\n131 |\n132 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n132 |     summary_obj = result.get(\"summary\")\n133 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     summary = cast(\"dict[str, object]\", summary_obj)\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n    |     ^^^^^^\n137 |     assert successful_value == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:137:5\n    |\n135 |     successful_value = summary.get(\"successful\")\n136 |     assert isinstance(successful_value, int)\n137 |     assert successful_value == 1\n    |     ^^^^^^\n138 |\n139 |     repos_obj = result.get(\"repos\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:140:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n    |     ^^^^^^\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:141:5\n    |\n139 |     repos_obj = result.get(\"repos\")\n140 |     assert isinstance(repos_obj, list)\n141 |     assert repos_obj, \"repo list should not be empty\"\n    |     ^^^^^^\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     assert repos_obj, \"repo list should not be empty\"\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n    |     ^^^^^^\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     first_repo = repos_obj[0]\n143 |     assert isinstance(first_repo, dict)\n144 |     assert first_repo.get(\"status\") == \"updated\"\n    |     ^^^^^^\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:168:9\n    |\n167 |     def fake_fetch(\n168 |         self,\n    |         ^^^^\n169 |         username: str | None = None,\n170 |         *,\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:168:9\n    |\n167 |     def fake_fetch(\n168 |         self,\n    |         ^^^^\n169 |         username: str | None = None,\n170 |         *,\n    |\n\nANN001 Missing type annotation for function argument `self`\n   --> tests\\test_json_contracts.py:176:22\n    |\n174 |         return [repo]\n175 |\n176 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n177 |         repo_dir.mkdir(parents=True, exist_ok=True)\n178 |         _ = git_url\n    |\n\nARG001 Unused function argument: `self`\n   --> tests\\test_json_contracts.py:176:22\n    |\n174 |         return [repo]\n175 |\n176 |     def fake_attempt(self, repo_dir: Path, git_url: str) -> bool:\n    |                      ^^^^\n177 |         repo_dir.mkdir(parents=True, exist_ok=True)\n178 |         _ = git_url\n    |\n\nARG001 Unused function argument: `timestamp`\n   --> tests\\test_json_contracts.py:185:9\n    |\n183 |         *,\n184 |         base_dir: Path | str,\n185 |         timestamp: object | None = None,\n    |         ^^^^^^^^^\n186 |     ) -> Path:\n187 |         base = Path(base_dir)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:201:5\n    |\n199 |     validate_payload(result, OUTPUT_SCHEMA)\n200 |     invocation_obj = result.get(\"invocation\")\n201 |     assert isinstance(invocation_obj, dict)\n    |     ^^^^^^\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:204:5\n    |\n202 |     invocation = cast(\"dict[str, object]\", invocation_obj)\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n    |     ^^^^^^\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:205:5\n    |\n203 |     allow_token_value = invocation.get(\"allow_token_clone\")\n204 |     assert allow_token_value is False\n205 |     assert os.environ[x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV] == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:216:5\n    |\n214 |     status_value = result.get(\"status\")\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:217:5\n    |\n215 |     message_value = result.get(\"message\")\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:218:5\n    |\n216 |     assert isinstance(status_value, str)\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n    |     ^^^^^^\n219 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:219:5\n    |\n217 |     assert isinstance(message_value, str)\n218 |     assert status_value == \"failure\"\n219 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:235:5\n    |\n233 |       if details:\n234 |           payload[\"details\"] = dict(details)\n235 | /     try:\n236 | |         validate_payload(payload, ERROR_SCHEMA)\n237 | |     except ValidationError:\n238 | |         pass\n    | |____________^\n239 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:242:33\n    |\n242 | def _coerce_bool(value: object, default: bool) -> bool:\n    |                                 ^^^^^^^\n243 |     if isinstance(value, bool):\n244 |         return value\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_github_clones_x.py:272:59\n    |\n270 |         os.environ[env_name] = \"1\" if value else \"0\"\n271 |     elif isinstance(value, str):\n272 |         os.environ[env_name] = \"1\" if _coerce_bool(value, False) else \"0\"\n    |                                                           ^^^^^\n273 |     return original, original_present\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:276:58\n    |\n276 | def _restore_allow_token_clone_env(original: str | None, present: bool) -> None:\n    |                                                          ^^^^^^^\n277 |     env_name = x_cls_make_github_clones_x.ALLOW_TOKEN_CLONE_ENV\n278 |     if present:\n    |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1182:55\n     |\n1180 |     target_dir_path = Path(target_dir_str)\n1181 |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n     |                                                       ^^^^^\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1183:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n     |                                                                   ^^^^^\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1184:67\n     |\n1182 |     shallow = _coerce_bool(parameters.get(\"shallow\"), False)\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n     |                                                                   ^^^^^\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_github_clones_x.py:1185:71\n     |\n1183 |     include_forks = _coerce_bool(parameters.get(\"include_forks\"), False)\n1184 |     force_reclone = _coerce_bool(parameters.get(\"force_reclone\"), False)\n1185 |     include_private = _coerce_bool(parameters.get(\"include_private\"), True)\n     |                                                                       ^^^^\n1186 |     names_param = _extract_names(parameters.get(\"names\"))\n     |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> x_make_github_clones_x\\__init__.py:3:1\n  |\n1 | \"\"\"Package facade for local development tooling.\"\"\"\n2 |\n3 | from ..x_cls_make_github_clones_x import RepoRecord, x_cls_make_github_clones_x\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"RepoRecord\", \"x_cls_make_github_clones_x\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nFound 39 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_github_clones_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_clones_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:35:08.647641+00:00\nduration: 0.198s\ntool_version: ruff 0.14.1\nstdout:\nANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_clones_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_clones_x",
            "stderr_preview": null,
            "stdout_preview": "ANN001 Missing type annotation for function argument `self`\n  --> tests\\test_json_contracts.py:89:9\n   |\n88 |     def fake_fetch(\n89 |         self,\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_github_clones_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_clones_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:35:58.910728+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.8461066999880131,
                "ended_at": "2025-10-21T15:35:58.910728+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "d338951a2fc99596445c3093ec1445c58876febdd34ffdebb4648769abc06d19",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-21T15:35:58.064152+00:00",
                "stderr": "",
                "stdout": "__init__.py:5: error: Cannot find implementation or library stub for module named \"__main__.x_cls_make_graphviz_x\"  [import-not-found]\n__init__.py:5: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ntests\\test_graphviz_builder.py:12: error: Skipping analyzing \"x_make_graphviz_x\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\ntests\\test_graphviz_builder.py:22: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:27: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:28: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:31: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:32: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:45: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:48: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:50: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:54: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:55: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:56: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:67: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:68: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:71: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:73: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:74: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:75: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:77: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:78: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:79: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:86: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:94: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:98: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:10: error: Skipping analyzing \"x_make_graphviz_x.json_contracts\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\ntests\\test_json_contracts.py:15: error: Skipping analyzing \"x_make_graphviz_x.x_cls_make_graphviz_x\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\ntests\\test_json_contracts.py:21: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:24: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:27: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:30: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:33: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:36: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:36: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:40: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:40: error: Expression type contains \"Any\" (has type \"tuple[Any, Any, Any]\")  [misc]\ntests\\test_json_contracts.py:41: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:49: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:50: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:51: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:62: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:63: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:67: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:68: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:69: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:70: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:72: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:82: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:83: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:84: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:85: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:22: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_graphviz_x.py:30: error: Skipping analyzing \"x_make_graphviz_x.json_contracts\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nx_cls_make_graphviz_x.py:505: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:569: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:597: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:600: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:600: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_graphviz_x.py:619: error: Statement is unreachable  [unreachable]\nFound 61 errors in 4 files (checked 7 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:35:58.064152+00:00\nduration: 0.846s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\n__init__.py:5: error: Cannot find implementation or library stub for module named \"__main__.x_cls_make_graphviz_x\"  [import-not-found]\n__init__.py:5: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ntests\\test_graphviz_builder.py:12: error: Skipping analyzing \"x_make_graphviz_x\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\ntests\\test_graphviz_builder.py:22: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:27: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "__init__.py:5: error: Cannot find implementation or library stub for module named \"__main__.x_cls_make_graphviz_x\"  [import-not-found]\n__init__.py:5: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\ntests\\test_graphviz_builder.py:12: error: Skipping analyzing \"x_make_graphviz_x\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\ntests\\test_graphviz_builder.py:22: error: Expression has type \"Any\"  [misc]\ntests\\test_graphviz_builder.py:27: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:35:58.058697+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.13488819997292012,
                "ended_at": "2025-10-21T15:35:58.058697+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "d338951a2fc99596445c3093ec1445c58876febdd34ffdebb4648769abc06d19",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-21T15:35:57.925396+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:70:5\n   |\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     status_value = result.get(\"status\")\n70 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n71 |     assert status_value == \"success\"\n72 |     assert \"dot_source\" in result\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:71:5\n   |\n69 |     status_value = result.get(\"status\")\n70 |     assert isinstance(status_value, str)\n71 |     assert status_value == \"success\"\n   |     ^^^^^^\n72 |     assert \"dot_source\" in result\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:72:5\n   |\n70 |     assert isinstance(status_value, str)\n71 |     assert status_value == \"success\"\n72 |     assert \"dot_source\" in result\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:85:5\n   |\n83 |     validate_payload(result, ERROR_SCHEMA)\n84 |     status_value = result.get(\"status\")\n85 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n86 |     assert status_value == \"failure\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:86:5\n   |\n84 |     status_value = result.get(\"status\")\n85 |     assert isinstance(status_value, str)\n86 |     assert status_value == \"failure\"\n   |     ^^^^^^\n   |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:33:43\n   |\n32 | if TYPE_CHECKING:\n33 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                           ^^^^^^^\n34 |\n35 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:33:52\n   |\n32 | if TYPE_CHECKING:\n33 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n34 |\n35 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nSLF001 Private member accessed: `_dot_source`\n   --> x_cls_make_graphviz_x.py:560:18\n    |\n558 |         svg_path = svg_result if svg_result else None\n559 |\n560 |     dot_source = builder._dot_source()\n    |                  ^^^^^^^^^^^^^^^^^^^\n561 |     result: dict[str, object] = {\n562 |         \"status\": \"success\",\n    |\n\nFound 8 errors.\nNo fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:35:57.925396+00:00\nduration: 0.135s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:70:5\n   |\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     status_value = result.get(\"status\")\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:70:5\n   |\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     status_value = result.get(\"status\")\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:35:56.430823+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_graphviz_x",
                "duration_seconds": 0.1573408999829553,
                "ended_at": "2025-10-21T15:35:56.430823+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_graphviz_builder.py",
                    "tests/test_json_contracts.py",
                    "x_cls_make_graphviz_x.py"
                ],
                "repo": "x_make_graphviz_x",
                "repo_hash": "d338951a2fc99596445c3093ec1445c58876febdd34ffdebb4648769abc06d19",
                "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
                "started_at": "2025-10-21T15:35:56.275984+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:70:5\n   |\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     status_value = result.get(\"status\")\n70 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n71 |     assert status_value == \"success\"\n72 |     assert \"dot_source\" in result\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:71:5\n   |\n69 |     status_value = result.get(\"status\")\n70 |     assert isinstance(status_value, str)\n71 |     assert status_value == \"success\"\n   |     ^^^^^^\n72 |     assert \"dot_source\" in result\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:72:5\n   |\n70 |     assert isinstance(status_value, str)\n71 |     assert status_value == \"success\"\n72 |     assert \"dot_source\" in result\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:85:5\n   |\n83 |     validate_payload(result, ERROR_SCHEMA)\n84 |     status_value = result.get(\"status\")\n85 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n86 |     assert status_value == \"failure\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:86:5\n   |\n84 |     status_value = result.get(\"status\")\n85 |     assert isinstance(status_value, str)\n86 |     assert status_value == \"failure\"\n   |     ^^^^^^\n   |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:33:43\n   |\n32 | if TYPE_CHECKING:\n33 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                           ^^^^^^^\n34 |\n35 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_graphviz_x.py:33:52\n   |\n32 | if TYPE_CHECKING:\n33 |     from collections.abc import Iterable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n34 |\n35 | AttrValue = str | int | float | bool | None\n   |\nhelp: Move out of type-checking block\n\nSLF001 Private member accessed: `_dot_source`\n   --> x_cls_make_graphviz_x.py:560:18\n    |\n558 |         svg_path = svg_result if svg_result else None\n559 |\n560 |     dot_source = builder._dot_source()\n    |                  ^^^^^^^^^^^^^^^^^^^\n561 |     result: dict[str, object] = {\n562 |         \"status\": \"success\",\n    |\n\nFound 8 errors.\nNo fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_graphviz_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_graphviz_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:35:56.275984+00:00\nduration: 0.157s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:70:5\n   |\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     status_value = result.get(\"status\")\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_graphviz_x",
            "repo_path": "C:\\x_runner_x\\x_make_graphviz_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:70:5\n   |\n68 |     validate_payload(result, OUTPUT_SCHEMA)\n69 |     status_value = result.get(\"status\")\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_graphviz_x (exit 1) cwd: C:\\x_runner_x\\x_make_graphviz_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 sta\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:36:18.792359+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 1.062465399998473,
                "ended_at": "2025-10-21T15:36:18.792359+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "d7a25cbef6413a6601e1d48058d945862e8930bc4b265cce2b3557c683388873",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-21T15:36:17.730122+00:00",
                "stderr": "",
                "stdout": "x_cls_make_markdown_x.py:22: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_markdown_x.py:262: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_markdown_x.py:295: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:301: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:303: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:308: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:313: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:318: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:342: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_markdown_x.py:423: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_markdown_x.py:451: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:454: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:454: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:29: error: Expression has type \"Any\"  [misc]\nFound 14 errors in 2 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:36:17.730122+00:00\nduration: 1.062s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_markdown_x.py:22: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_markdown_x.py:262: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_markdown_x.py:295: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:301: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:303: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_markdown_x.py:22: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_markdown_x.py:262: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_markdown_x.py:295: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:301: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_markdown_x.py:303: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:36:17.719129+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 0.1374950000026729,
                "ended_at": "2025-10-21T15:36:17.719129+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "d7a25cbef6413a6601e1d48058d945862e8930bc4b265cce2b3557c683388873",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-21T15:36:17.589369+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     validate_payload(result, OUTPUT_SCHEMA)\n78 |     status_value = result.get(\"status\")\n79 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n80 |     assert status_value == \"success\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:80:5\n   |\n78 |     status_value = result.get(\"status\")\n79 |     assert isinstance(status_value, str)\n80 |     assert status_value == \"success\"\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:93:5\n   |\n91 |     validate_payload(result, ERROR_SCHEMA)\n92 |     status_value = result.get(\"status\")\n93 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n94 |     assert status_value == \"failure\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:94:5\n   |\n92 |     status_value = result.get(\"status\")\n93 |     assert isinstance(status_value, str)\n94 |     assert status_value == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_markdown_x.py:260:5\n    |\n258 |       if details:\n259 |           payload[\"details\"] = dict(details)\n260 | /     try:\n261 | |         validate_payload(payload, ERROR_SCHEMA)\n262 | |     except ValidationError:\n263 | |         pass\n    | |____________^\n264 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n280 |                 rows.append([str(cell) for cell in entry])\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n281 |     return rows\n    |\nhelp: Replace for loop with list.extend\n\nC901 `main_json` is too complex (11 > 10)\n   --> x_cls_make_markdown_x.py:333:5\n    |\n333 | def main_json(\n    |     ^^^^^^^^^\n334 |     payload: Mapping[str, object],\n335 |     *,\n    |\n\nFound 7 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:36:17.589369+00:00\nduration: 0.137s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     validate_payload(result, OUTPUT_SCHEMA)\n78 |     status_value = result.get(\"status\")\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     validate_payload(result, OUTPUT_SCHEMA)\n78 |     status_value = result.get(\"status\")\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:36:16.345741+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_markdown_x",
                "duration_seconds": 0.26042380000581034,
                "ended_at": "2025-10-21T15:36:16.345741+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_markdown_builder.py",
                    "x_cls_make_markdown_x.py"
                ],
                "repo": "x_make_markdown_x",
                "repo_hash": "d7a25cbef6413a6601e1d48058d945862e8930bc4b265cce2b3557c683388873",
                "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
                "started_at": "2025-10-21T15:36:16.084026+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     validate_payload(result, OUTPUT_SCHEMA)\n78 |     status_value = result.get(\"status\")\n79 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n80 |     assert status_value == \"success\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:80:5\n   |\n78 |     status_value = result.get(\"status\")\n79 |     assert isinstance(status_value, str)\n80 |     assert status_value == \"success\"\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:93:5\n   |\n91 |     validate_payload(result, ERROR_SCHEMA)\n92 |     status_value = result.get(\"status\")\n93 |     assert isinstance(status_value, str)\n   |     ^^^^^^\n94 |     assert status_value == \"failure\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:94:5\n   |\n92 |     status_value = result.get(\"status\")\n93 |     assert isinstance(status_value, str)\n94 |     assert status_value == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_markdown_x.py:260:5\n    |\n258 |       if details:\n259 |           payload[\"details\"] = dict(details)\n260 | /     try:\n261 | |         validate_payload(payload, ERROR_SCHEMA)\n262 | |     except ValidationError:\n263 | |         pass\n    | |____________^\n264 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_markdown_x.py:280:17\n    |\n278 |                 entry, (str, bytes, bytearray)\n279 |             ):\n280 |                 rows.append([str(cell) for cell in entry])\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n281 |     return rows\n    |\nhelp: Replace for loop with list.extend\n\nC901 `main_json` is too complex (11 > 10)\n   --> x_cls_make_markdown_x.py:333:5\n    |\n333 | def main_json(\n    |     ^^^^^^^^^\n334 |     payload: Mapping[str, object],\n335 |     *,\n    |\n\nFound 7 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_markdown_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_markdown_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:36:16.084026+00:00\nduration: 0.260s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     validate_payload(result, OUTPUT_SCHEMA)\n78 |     status_value = result.get(\"status\")\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_markdown_x",
            "repo_path": "C:\\x_runner_x\\x_make_markdown_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:79:5\n   |\n77 |     validate_payload(result, OUTPUT_SCHEMA)\n78 |     status_value = result.get(\"status\")\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_markdown_x (exit 1) cwd: C:\\x_runner_x\\x_make_markdown_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 sta\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:36:39.999118+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 1.1281779000128154,
                "ended_at": "2025-10-21T15:36:39.999118+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "97886c963424a76748a262725ed86aed46ea691de8f593f72faeb63118bb1b35",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-21T15:36:38.870660+00:00",
                "stderr": "",
                "stdout": "x_cls_make_mermaid_x.py:22: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_mermaid_x.py:115: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:467: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1031: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1144: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1172: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1175: error: Expression has type \"Any\"  [misc]\nx_cls_make_mermaid_x.py:1175: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:29: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:71: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:72: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:80: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:82: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:83: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:87: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:89: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]\ntests\\test_json_contracts.py:117: error: Expression type contains \"Any\" (has type \"Callable[[str, NamedArg(Path, 'output_dir'), NamedArg(str, 'stem'), DefaultNamedArg(str | None, 'mermaid_cli_path'), DefaultNamedArg(Any, 'runner'), DefaultNamedArg(Any, 'extra_args')], ExportResult]\")  [misc]\ntests\\test_json_contracts.py:120: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:143: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:144: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:145: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 21 errors in 2 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:36:38.870660+00:00\nduration: 1.128s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_mermaid_x.py:22: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_mermaid_x.py:115: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:467: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1031: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1144: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_mermaid_x.py:22: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_mermaid_x.py:115: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:467: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_mermaid_x.py:1031: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_mermaid_x.py:1144: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-an\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:36:38.866523+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 0.14539200000581332,
                "ended_at": "2025-10-21T15:36:38.866523+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "97886c963424a76748a262725ed86aed46ea691de8f593f72faeb63118bb1b35",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-21T15:36:38.720964+00:00",
                "stderr": "",
                "stdout": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:89:9\n   |\n87 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n88 |\n89 |     def fake_export(\n   |         ^^^^^^^^^^^\n90 |         mermaid_source: str,\n91 |         *,\n   |\n\nANN001 Missing type annotation for function argument `runner`\n  --> tests\\test_json_contracts.py:95:9\n   |\n93 |         stem: str,\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n   |         ^^^^^^\n96 |         extra_args=None,\n97 |     ) -> ExportResult:\n   |\n\nARG001 Unused function argument: `runner`\n  --> tests\\test_json_contracts.py:95:9\n   |\n93 |         stem: str,\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n   |         ^^^^^^\n96 |         extra_args=None,\n97 |     ) -> ExportResult:\n   |\n\nANN001 Missing type annotation for function argument `extra_args`\n  --> tests\\test_json_contracts.py:96:9\n   |\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n96 |         extra_args=None,\n   |         ^^^^^^^^^^\n97 |     ) -> ExportResult:\n98 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nARG001 Unused function argument: `extra_args`\n  --> tests\\test_json_contracts.py:96:9\n   |\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n96 |         extra_args=None,\n   |         ^^^^^^^^^^\n97 |     ) -> ExportResult:\n98 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     validate_payload(result, OUTPUT_SCHEMA)\n123 |     status_value = result.get(\"status\")\n124 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n125 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:125:5\n    |\n123 |     status_value = result.get(\"status\")\n124 |     assert isinstance(status_value, str)\n125 |     assert status_value == \"success\"\n    |     ^^^^^^\n126 |\n127 |     artifact_obj = result.get(\"mermaid\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:128:5\n    |\n127 |     artifact_obj = result.get(\"mermaid\")\n128 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n129 |     source_path_value = artifact_obj.get(\"source_path\")\n130 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     assert isinstance(artifact_obj, dict)\n129 |     source_path_value = artifact_obj.get(\"source_path\")\n130 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n131 |     mermaid_path = Path(source_path_value)\n132 |     assert mermaid_path.exists()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:132:5\n    |\n130 |     assert isinstance(source_path_value, str)\n131 |     mermaid_path = Path(source_path_value)\n132 |     assert mermaid_path.exists()\n    |     ^^^^^^\n133 |     source_bytes = artifact_obj.get(\"source_bytes\")\n134 |     assert isinstance(source_bytes, int)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     assert mermaid_path.exists()\n133 |     source_bytes = artifact_obj.get(\"source_bytes\")\n134 |     assert isinstance(source_bytes, int)\n    |     ^^^^^^\n135 |     assert source_bytes > 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:135:5\n    |\n133 |     source_bytes = artifact_obj.get(\"source_bytes\")\n134 |     assert isinstance(source_bytes, int)\n135 |     assert source_bytes > 0\n    |     ^^^^^^\n136 |\n137 |     svg_info_obj = artifact_obj.get(\"svg\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:138:5\n    |\n137 |     svg_info_obj = artifact_obj.get(\"svg\")\n138 |     assert isinstance(svg_info_obj, dict)\n    |     ^^^^^^\n139 |     assert svg_info_obj.get(\"succeeded\") is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:139:5\n    |\n137 |     svg_info_obj = artifact_obj.get(\"svg\")\n138 |     assert isinstance(svg_info_obj, dict)\n139 |     assert svg_info_obj.get(\"succeeded\") is True\n    |     ^^^^^^\n140 |\n141 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n141 |     summary_obj = result.get(\"summary\")\n142 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     summary_obj = result.get(\"summary\")\n142 |     assert isinstance(summary_obj, dict)\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n    |     ^^^^^^\n144 |     assert summary_obj.get(\"nodes\") == 2\n145 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     assert isinstance(summary_obj, dict)\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n    |     ^^^^^^\n145 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:144:40\n    |\n142 |     assert isinstance(summary_obj, dict)\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n    |                                        ^\n145 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:145:5\n    |\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n145 |     assert summary_obj.get(\"edges\") == 1\n    |     ^^^^^^\n146 |\n147 |     messages_obj = result.get(\"messages\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:148:5\n    |\n147 |     messages_obj = result.get(\"messages\")\n148 |     assert isinstance(messages_obj, list)\n    |     ^^^^^^\n149 |     assert messages_obj\n150 |     first_message = messages_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:149:5\n    |\n147 |     messages_obj = result.get(\"messages\")\n148 |     assert isinstance(messages_obj, list)\n149 |     assert messages_obj\n    |     ^^^^^^\n150 |     first_message = messages_obj[0]\n151 |     assert isinstance(first_message, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:151:5\n    |\n149 |     assert messages_obj\n150 |     first_message = messages_obj[0]\n151 |     assert isinstance(first_message, str)\n    |     ^^^^^^\n152 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:152:5\n    |\n150 |     first_message = messages_obj[0]\n151 |     assert isinstance(first_message, str)\n152 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:168:5\n    |\n166 |     validate_payload(result, OUTPUT_SCHEMA)\n167 |     artifact_obj = result.get(\"mermaid\")\n168 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n169 |     source_path_value = artifact_obj.get(\"source_path\")\n170 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:170:5\n    |\n168 |     assert isinstance(artifact_obj, dict)\n169 |     source_path_value = artifact_obj.get(\"source_path\")\n170 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n171 |     mermaid_path = Path(source_path_value)\n172 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:172:5\n    |\n170 |     assert isinstance(source_path_value, str)\n171 |     mermaid_path = Path(source_path_value)\n172 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |     ^^^^^^\n173 |\n174 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:175:5\n    |\n174 |     summary_obj = result.get(\"summary\")\n175 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n176 |     assert summary_obj.get(\"export_svg\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:176:5\n    |\n174 |     summary_obj = result.get(\"summary\")\n175 |     assert isinstance(summary_obj, dict)\n176 |     assert summary_obj.get(\"export_svg\") is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:187:5\n    |\n185 |     status_value = result.get(\"status\")\n186 |     message_value = result.get(\"message\")\n187 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n188 |     assert isinstance(message_value, str)\n189 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:188:5\n    |\n186 |     message_value = result.get(\"message\")\n187 |     assert isinstance(status_value, str)\n188 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n189 |     assert status_value == \"failure\"\n190 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:189:5\n    |\n187 |     assert isinstance(status_value, str)\n188 |     assert isinstance(message_value, str)\n189 |     assert status_value == \"failure\"\n    |     ^^^^^^\n190 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:190:5\n    |\n188 |     assert isinstance(message_value, str)\n189 |     assert status_value == \"failure\"\n190 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_mermaid_x.py:113:5\n    |\n111 |       if details:\n112 |           payload[\"details\"] = dict(details)\n113 | /     try:\n114 | |         validate_payload(payload, ERROR_SCHEMA)\n115 | |     except ValidationError:\n116 | |         pass\n    | |____________^\n117 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `_set_diagram` is too complex (20 > 10)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nPLR0912 Too many branches (20 > 12)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:211:9\n    |\n209 |         builder.quadrants(title)\n210 |     elif diagram == _SANKEY:\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n    |         ^^^^^^^^^^^^\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:213:9\n    |\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |         ^^^^^^^^^^^^\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:215:9\n    |\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |         ^^^^^^^^^^^^\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:217:9\n    |\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |         ^^^^^^^^^^^^\n218 |         if title:\n219 |             builder.raw(f\"title {_esc(title)}\")\n    |\n\nC901 `_apply_instruction` is too complex (48 > 10)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0912 Too many branches (47 > 12)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0915 Too many statements (115 > 50)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> x_cls_make_mermaid_x.py:323:63\n    |\n321 |         text = payload.get(\"text\")\n322 |         if isinstance(text, str):\n323 |             if isinstance(who, (list, tuple)) and len(who) == 2:\n    |                                                               ^\n324 |                 first, second = who\n325 |                 if isinstance(first, str) and isinstance(second, str):\n    |\n\nSLF001 Private member accessed: `_runner`\n   --> x_cls_make_mermaid_x.py:487:16\n    |\n485 |         stem=output_path.stem,\n486 |         mermaid_cli_path=mermaid_cli_path,\n487 |         runner=builder._runner if builder else None,\n    |                ^^^^^^^^^^^^^^^\n488 |     )\n489 |     if export.succeeded:\n    |\n\nC901 `main_json` is too complex (11 > 10)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nPLR0915 Too many statements (51 > 50)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nFound 46 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:36:38.720964+00:00\nduration: 0.145s\ntool_version: ruff 0.14.1\nstdout:\nPLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:89:9\n   |\n87 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n88 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:89:9\n   |\n87 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n88 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_a\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:36:37.123629+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_mermaid_x",
                "duration_seconds": 0.15826840000227094,
                "ended_at": "2025-10-21T15:36:37.123629+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_mermaid_builder.py",
                    "x_cls_make_mermaid_x.py"
                ],
                "repo": "x_make_mermaid_x",
                "repo_hash": "97886c963424a76748a262725ed86aed46ea691de8f593f72faeb63118bb1b35",
                "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
                "started_at": "2025-10-21T15:36:36.968177+00:00",
                "stderr": "",
                "stdout": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:89:9\n   |\n87 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n88 |\n89 |     def fake_export(\n   |         ^^^^^^^^^^^\n90 |         mermaid_source: str,\n91 |         *,\n   |\n\nANN001 Missing type annotation for function argument `runner`\n  --> tests\\test_json_contracts.py:95:9\n   |\n93 |         stem: str,\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n   |         ^^^^^^\n96 |         extra_args=None,\n97 |     ) -> ExportResult:\n   |\n\nARG001 Unused function argument: `runner`\n  --> tests\\test_json_contracts.py:95:9\n   |\n93 |         stem: str,\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n   |         ^^^^^^\n96 |         extra_args=None,\n97 |     ) -> ExportResult:\n   |\n\nANN001 Missing type annotation for function argument `extra_args`\n  --> tests\\test_json_contracts.py:96:9\n   |\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n96 |         extra_args=None,\n   |         ^^^^^^^^^^\n97 |     ) -> ExportResult:\n98 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nARG001 Unused function argument: `extra_args`\n  --> tests\\test_json_contracts.py:96:9\n   |\n94 |         mermaid_cli_path: str | None = None,\n95 |         runner=None,\n96 |         extra_args=None,\n   |         ^^^^^^^^^^\n97 |     ) -> ExportResult:\n98 |         mmd_path = output_dir / f\"{stem}.mmd\"\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n122 |     validate_payload(result, OUTPUT_SCHEMA)\n123 |     status_value = result.get(\"status\")\n124 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n125 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:125:5\n    |\n123 |     status_value = result.get(\"status\")\n124 |     assert isinstance(status_value, str)\n125 |     assert status_value == \"success\"\n    |     ^^^^^^\n126 |\n127 |     artifact_obj = result.get(\"mermaid\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:128:5\n    |\n127 |     artifact_obj = result.get(\"mermaid\")\n128 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n129 |     source_path_value = artifact_obj.get(\"source_path\")\n130 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:130:5\n    |\n128 |     assert isinstance(artifact_obj, dict)\n129 |     source_path_value = artifact_obj.get(\"source_path\")\n130 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n131 |     mermaid_path = Path(source_path_value)\n132 |     assert mermaid_path.exists()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:132:5\n    |\n130 |     assert isinstance(source_path_value, str)\n131 |     mermaid_path = Path(source_path_value)\n132 |     assert mermaid_path.exists()\n    |     ^^^^^^\n133 |     source_bytes = artifact_obj.get(\"source_bytes\")\n134 |     assert isinstance(source_bytes, int)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     assert mermaid_path.exists()\n133 |     source_bytes = artifact_obj.get(\"source_bytes\")\n134 |     assert isinstance(source_bytes, int)\n    |     ^^^^^^\n135 |     assert source_bytes > 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:135:5\n    |\n133 |     source_bytes = artifact_obj.get(\"source_bytes\")\n134 |     assert isinstance(source_bytes, int)\n135 |     assert source_bytes > 0\n    |     ^^^^^^\n136 |\n137 |     svg_info_obj = artifact_obj.get(\"svg\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:138:5\n    |\n137 |     svg_info_obj = artifact_obj.get(\"svg\")\n138 |     assert isinstance(svg_info_obj, dict)\n    |     ^^^^^^\n139 |     assert svg_info_obj.get(\"succeeded\") is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:139:5\n    |\n137 |     svg_info_obj = artifact_obj.get(\"svg\")\n138 |     assert isinstance(svg_info_obj, dict)\n139 |     assert svg_info_obj.get(\"succeeded\") is True\n    |     ^^^^^^\n140 |\n141 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n141 |     summary_obj = result.get(\"summary\")\n142 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     summary_obj = result.get(\"summary\")\n142 |     assert isinstance(summary_obj, dict)\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n    |     ^^^^^^\n144 |     assert summary_obj.get(\"nodes\") == 2\n145 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     assert isinstance(summary_obj, dict)\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n    |     ^^^^^^\n145 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:144:40\n    |\n142 |     assert isinstance(summary_obj, dict)\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n    |                                        ^\n145 |     assert summary_obj.get(\"edges\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:145:5\n    |\n143 |     assert summary_obj.get(\"diagram\") == \"flowchart\"\n144 |     assert summary_obj.get(\"nodes\") == 2\n145 |     assert summary_obj.get(\"edges\") == 1\n    |     ^^^^^^\n146 |\n147 |     messages_obj = result.get(\"messages\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:148:5\n    |\n147 |     messages_obj = result.get(\"messages\")\n148 |     assert isinstance(messages_obj, list)\n    |     ^^^^^^\n149 |     assert messages_obj\n150 |     first_message = messages_obj[0]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:149:5\n    |\n147 |     messages_obj = result.get(\"messages\")\n148 |     assert isinstance(messages_obj, list)\n149 |     assert messages_obj\n    |     ^^^^^^\n150 |     first_message = messages_obj[0]\n151 |     assert isinstance(first_message, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:151:5\n    |\n149 |     assert messages_obj\n150 |     first_message = messages_obj[0]\n151 |     assert isinstance(first_message, str)\n    |     ^^^^^^\n152 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:152:5\n    |\n150 |     first_message = messages_obj[0]\n151 |     assert isinstance(first_message, str)\n152 |     assert \"Mermaid CLI executed successfully\" in first_message\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:168:5\n    |\n166 |     validate_payload(result, OUTPUT_SCHEMA)\n167 |     artifact_obj = result.get(\"mermaid\")\n168 |     assert isinstance(artifact_obj, dict)\n    |     ^^^^^^\n169 |     source_path_value = artifact_obj.get(\"source_path\")\n170 |     assert isinstance(source_path_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:170:5\n    |\n168 |     assert isinstance(artifact_obj, dict)\n169 |     source_path_value = artifact_obj.get(\"source_path\")\n170 |     assert isinstance(source_path_value, str)\n    |     ^^^^^^\n171 |     mermaid_path = Path(source_path_value)\n172 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:172:5\n    |\n170 |     assert isinstance(source_path_value, str)\n171 |     mermaid_path = Path(source_path_value)\n172 |     assert mermaid_path.read_text(encoding=\"utf-8\").endswith(\"\\n\")\n    |     ^^^^^^\n173 |\n174 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:175:5\n    |\n174 |     summary_obj = result.get(\"summary\")\n175 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n176 |     assert summary_obj.get(\"export_svg\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:176:5\n    |\n174 |     summary_obj = result.get(\"summary\")\n175 |     assert isinstance(summary_obj, dict)\n176 |     assert summary_obj.get(\"export_svg\") is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:187:5\n    |\n185 |     status_value = result.get(\"status\")\n186 |     message_value = result.get(\"message\")\n187 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n188 |     assert isinstance(message_value, str)\n189 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:188:5\n    |\n186 |     message_value = result.get(\"message\")\n187 |     assert isinstance(status_value, str)\n188 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n189 |     assert status_value == \"failure\"\n190 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:189:5\n    |\n187 |     assert isinstance(status_value, str)\n188 |     assert isinstance(message_value, str)\n189 |     assert status_value == \"failure\"\n    |     ^^^^^^\n190 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:190:5\n    |\n188 |     assert isinstance(message_value, str)\n189 |     assert status_value == \"failure\"\n190 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_mermaid_x.py:113:5\n    |\n111 |       if details:\n112 |           payload[\"details\"] = dict(details)\n113 | /     try:\n114 | |         validate_payload(payload, ERROR_SCHEMA)\n115 | |     except ValidationError:\n116 | |         pass\n    | |____________^\n117 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `_set_diagram` is too complex (20 > 10)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nPLR0912 Too many branches (20 > 12)\n   --> x_cls_make_mermaid_x.py:162:5\n    |\n162 | def _set_diagram(builder: MermaidBuilder, document: Mapping[str, object]) -> str:\n    |     ^^^^^^^^^^^^\n163 |     diagram_obj = document.get(\"diagram\")\n164 |     diagram = (\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:211:9\n    |\n209 |         builder.quadrants(title)\n210 |     elif diagram == _SANKEY:\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n    |         ^^^^^^^^^^^^\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:213:9\n    |\n211 |         builder._doc = MermaidDoc(kind=_SANKEY, header=_SANKEY)\n212 |     elif diagram == _XY:\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n    |         ^^^^^^^^^^^^\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:215:9\n    |\n213 |         builder._doc = MermaidDoc(kind=_XY, header=_XY)\n214 |     elif diagram == _BLOCK:\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n    |         ^^^^^^^^^^^^\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |\n\nSLF001 Private member accessed: `_doc`\n   --> x_cls_make_mermaid_x.py:217:9\n    |\n215 |         builder._doc = MermaidDoc(kind=_BLOCK, header=_BLOCK)\n216 |     else:\n217 |         builder._doc = MermaidDoc(kind=diagram, header=diagram)\n    |         ^^^^^^^^^^^^\n218 |         if title:\n219 |             builder.raw(f\"title {_esc(title)}\")\n    |\n\nC901 `_apply_instruction` is too complex (48 > 10)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0912 Too many branches (47 > 12)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR0915 Too many statements (115 > 50)\n   --> x_cls_make_mermaid_x.py:298:5\n    |\n298 | def _apply_instruction(\n    |     ^^^^^^^^^^^^^^^^^^\n299 |     builder: MermaidBuilder, instr_type: str, payload: object\n300 | ) -> None:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> x_cls_make_mermaid_x.py:323:63\n    |\n321 |         text = payload.get(\"text\")\n322 |         if isinstance(text, str):\n323 |             if isinstance(who, (list, tuple)) and len(who) == 2:\n    |                                                               ^\n324 |                 first, second = who\n325 |                 if isinstance(first, str) and isinstance(second, str):\n    |\n\nSLF001 Private member accessed: `_runner`\n   --> x_cls_make_mermaid_x.py:487:16\n    |\n485 |         stem=output_path.stem,\n486 |         mermaid_cli_path=mermaid_cli_path,\n487 |         runner=builder._runner if builder else None,\n    |                ^^^^^^^^^^^^^^^\n488 |     )\n489 |     if export.succeeded:\n    |\n\nC901 `main_json` is too complex (11 > 10)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nPLR0915 Too many statements (51 > 50)\n    --> x_cls_make_mermaid_x.py:1026:5\n     |\n1026 | def main_json(\n     |     ^^^^^^^^^\n1027 |     payload: Mapping[str, object], *, ctx: object | None = None\n1028 | ) -> dict[str, object]:\n     |\n\nFound 46 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_mermaid_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_mermaid_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:36:36.968177+00:00\nduration: 0.158s\ntool_version: ruff 0.14.1\nstdout:\nPLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:89:9\n   |\n87 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n88 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_mermaid_x",
            "repo_path": "C:\\x_runner_x\\x_make_mermaid_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0913 Too many arguments in function definition (6 > 5)\n  --> tests\\test_json_contracts.py:89:9\n   |\n87 |     payload[\"parameters\"][\"mermaid_cli_path\"] = str(fake_cli)\n88 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_mermaid_x (exit 1) cwd: C:\\x_runner_x\\x_make_mermaid_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 start\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:37:00.740490+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 1.2554953999933787,
                "ended_at": "2025-10-21T15:37:00.740490+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "47cb3ef8d1fd7b3ba8acd1510b8ca1a5e174794daa4b085fdf3c8437a8f6e637",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-21T15:36:59.491232+00:00",
                "stderr": "",
                "stdout": "x_cls_make_persistent_env_var_x.py:266: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_persistent_env_var_x.py:532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:533: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression type contains \"Any\" (has type \"Callable[[], Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:909: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_persistent_env_var_x.py:996: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_persistent_env_var_x.py:1007: error: Incompatible return value type (got \"dict[str, Collection[Collection[str]]]\", expected \"dict[str, object]\")  [return-value]\nx_cls_make_persistent_env_var_x.py:1007: note: \"dict\" is invariant -- see https://mypy.readthedocs.io/en/stable/common_issues.html#variance\nx_cls_make_persistent_env_var_x.py:1007: note: Consider using \"Mapping\" instead, which is covariant in the value type\nx_cls_make_persistent_env_var_x.py:1007: note: Perhaps you need a type annotation for \"result\"? Suggestion: \"dict[str, object]\"\nx_cls_make_persistent_env_var_x.py:1033: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1036: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:1036: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_persistent_env.py:237: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_persistent_env.py:237: error: Expression type contains \"Any\" (has type \"Callable[..., dict[str, str] | None]\")  [misc]\ntests\\test_persistent_env.py:250: error: Expression type contains \"Any\" (has type \"Callable[..., dict[str, str] | None]\")  [misc]\ntests\\test_json_contracts.py:27: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:27: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:33: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:33: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:39: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:39: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:65: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:66: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:73: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:109: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:118: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:119: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:120: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:121: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:148: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:149: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:207: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:208: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:209: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_json_contracts.py:210: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 34 errors in 3 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:36:59.491232+00:00\nduration: 1.255s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_persistent_env_var_x.py:266: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_persistent_env_var_x.py:532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:533: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression type contains \"Any\" (has type \"Callable[[], Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_persistent_env_var_x.py:266: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_persistent_env_var_x.py:532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:533: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression type contains \"Any\" (has type \"Callable[[], Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:534: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unr\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:36:59.480503+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 0.13400940000428818,
                "ended_at": "2025-10-21T15:36:59.480503+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "47cb3ef8d1fd7b3ba8acd1510b8ca1a5e174794daa4b085fdf3c8437a8f6e637",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-21T15:36:59.352069+00:00",
                "stderr": "",
                "stdout": "PLR0915 Too many statements (51 > 50)\n  --> tests\\test_json_contracts.py:69:5\n   |\n69 | def test_main_json_persist_values_success(\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n70 |     sample_input: dict[str, object],\n71 |     monkeypatch: pytest.MonkeyPatch,\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:113:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     status_value = result.get(\"status\")\n113 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n114 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n112 |     status_value = result.get(\"status\")\n113 |     assert isinstance(status_value, str)\n114 |     assert status_value == \"success\"\n    |     ^^^^^^\n115 |\n116 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:117:5\n    |\n116 |     summary_obj = result.get(\"summary\")\n117 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:118:5\n    |\n116 |     summary_obj = result.get(\"summary\")\n117 |     assert isinstance(summary_obj, dict)\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n    |     ^^^^^^\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:119:5\n    |\n117 |     assert isinstance(summary_obj, dict)\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n    |     ^^^^^^\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:119:50\n    |\n117 |     assert isinstance(summary_obj, dict)\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n    |                                                  ^\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:120:5\n    |\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |     ^^^^^^\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:121:5\n    |\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |     ^^^^^^\n122 |\n123 |     results_obj = result.get(\"results\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n123 |     results_obj = result.get(\"results\")\n124 |     assert isinstance(results_obj, list)\n    |     ^^^^^^\n125 |     entries: dict[str, dict[str, object]] = {}\n126 |     for entry_obj in results_obj:\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n131 |             entries[name_value] = entry_obj\n132 |     api_result = entries[\"API_TOKEN\"]\n133 |     assert api_result.get(\"status\") == \"persisted\"\n    |     ^^^^^^\n134 |     assert api_result.get(\"changed\") is True\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     api_result = entries[\"API_TOKEN\"]\n133 |     assert api_result.get(\"status\") == \"persisted\"\n134 |     assert api_result.get(\"changed\") is True\n    |     ^^^^^^\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n136 |     assert isinstance(api_result.get(\"stored_hash\"), str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:135:5\n    |\n133 |     assert api_result.get(\"status\") == \"persisted\"\n134 |     assert api_result.get(\"changed\") is True\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n    |     ^^^^^^\n136 |     assert isinstance(api_result.get(\"stored_hash\"), str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     assert api_result.get(\"changed\") is True\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n136 |     assert isinstance(api_result.get(\"stored_hash\"), str)\n    |     ^^^^^^\n137 |\n138 |     debug_result = entries[\"DEBUG\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:139:5\n    |\n138 |     debug_result = entries[\"DEBUG\"]\n139 |     assert debug_result.get(\"status\") == \"persisted\"\n    |     ^^^^^^\n140 |     assert debug_result.get(\"stored\") == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:140:5\n    |\n138 |     debug_result = entries[\"DEBUG\"]\n139 |     assert debug_result.get(\"status\") == \"persisted\"\n140 |     assert debug_result.get(\"stored\") == \"1\"\n    |     ^^^^^^\n141 |\n142 |     snapshot_obj = result.get(\"environment_snapshot\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n142 |     snapshot_obj = result.get(\"environment_snapshot\")\n143 |     assert isinstance(snapshot_obj, dict)\n    |     ^^^^^^\n144 |     provided_obj = snapshot_obj.get(\"provided\")\n145 |     user_obj = snapshot_obj.get(\"user\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:146:5\n    |\n144 |     provided_obj = snapshot_obj.get(\"provided\")\n145 |     user_obj = snapshot_obj.get(\"user\")\n146 |     assert isinstance(provided_obj, dict)\n    |     ^^^^^^\n147 |     assert isinstance(user_obj, dict)\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:147:5\n    |\n145 |     user_obj = snapshot_obj.get(\"user\")\n146 |     assert isinstance(provided_obj, dict)\n147 |     assert isinstance(user_obj, dict)\n    |     ^^^^^^\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n149 |     assert user_obj.get(\"DEBUG\") == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:148:5\n    |\n146 |     assert isinstance(provided_obj, dict)\n147 |     assert isinstance(user_obj, dict)\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n    |     ^^^^^^\n149 |     assert user_obj.get(\"DEBUG\") == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:149:5\n    |\n147 |     assert isinstance(user_obj, dict)\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n149 |     assert user_obj.get(\"DEBUG\") == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:206:5\n    |\n204 |     validate_payload(result, OUTPUT_SCHEMA)\n205 |     summary_obj = result.get(\"summary\")\n206 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:207:5\n    |\n205 |     summary_obj = result.get(\"summary\")\n206 |     assert isinstance(summary_obj, dict)\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n    |     ^^^^^^\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:208:5\n    |\n206 |     assert isinstance(summary_obj, dict)\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n    |     ^^^^^^\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n210 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:209:5\n    |\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |     ^^^^^^\n210 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:210:5\n    |\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n210 |     assert summary_obj.get(\"exit_code\") == 0\n    |     ^^^^^^\n211 |\n212 |     results_obj = result.get(\"results\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:213:5\n    |\n212 |     results_obj = result.get(\"results\")\n213 |     assert isinstance(results_obj, list)\n    |     ^^^^^^\n214 |     entries: dict[str, dict[str, object]] = {}\n215 |     for entry_obj in results_obj:\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:222:5\n    |\n220 |             entries[name_value] = entry_obj\n221 |     alpha_entry = entries.get(\"ALPHA\")\n222 |     assert isinstance(alpha_entry, dict)\n    |     ^^^^^^\n223 |     assert alpha_entry.get(\"status\") in {\"persisted\", \"unchanged\"}\n224 |     beta_entry = entries.get(\"BETA\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:223:5\n    |\n221 |     alpha_entry = entries.get(\"ALPHA\")\n222 |     assert isinstance(alpha_entry, dict)\n223 |     assert alpha_entry.get(\"status\") in {\"persisted\", \"unchanged\"}\n    |     ^^^^^^\n224 |     beta_entry = entries.get(\"BETA\")\n225 |     assert isinstance(beta_entry, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:225:5\n    |\n223 |     assert alpha_entry.get(\"status\") in {\"persisted\", \"unchanged\"}\n224 |     beta_entry = entries.get(\"BETA\")\n225 |     assert isinstance(beta_entry, dict)\n    |     ^^^^^^\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n227 |     assert beta_entry.get(\"attempted\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:226:5\n    |\n224 |     beta_entry = entries.get(\"BETA\")\n225 |     assert isinstance(beta_entry, dict)\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n    |     ^^^^^^\n227 |     assert beta_entry.get(\"attempted\") is False\n228 |     assert beta_entry.get(\"changed\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:227:5\n    |\n225 |     assert isinstance(beta_entry, dict)\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n227 |     assert beta_entry.get(\"attempted\") is False\n    |     ^^^^^^\n228 |     assert beta_entry.get(\"changed\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:228:5\n    |\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n227 |     assert beta_entry.get(\"attempted\") is False\n228 |     assert beta_entry.get(\"changed\") is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:242:5\n    |\n240 |     status_value = result.get(\"status\")\n241 |     message_value = result.get(\"message\")\n242 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n243 |     assert isinstance(message_value, str)\n244 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:243:5\n    |\n241 |     message_value = result.get(\"message\")\n242 |     assert isinstance(status_value, str)\n243 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n244 |     assert status_value == \"failure\"\n245 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:244:5\n    |\n242 |     assert isinstance(status_value, str)\n243 |     assert isinstance(message_value, str)\n244 |     assert status_value == \"failure\"\n    |     ^^^^^^\n245 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:245:5\n    |\n243 |     assert isinstance(message_value, str)\n244 |     assert status_value == \"failure\"\n245 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> tests\\test_persistent_env.py:182:44\n    |\n181 |     def fake_prompt(\n182 |         tokens: Sequence[tuple[str, str]], quiet: bool\n    |                                            ^^^^^\n183 |     ) -> dict[str, str] | None:\n184 |         prompt_calls.append((tuple(tokens), quiet))\n    |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:43\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                           ^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:52\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_persistent_env_var_x.py:249:13\n    |\n247 |     for key, value in raw.items():\n248 |         if isinstance(key, str) and isinstance(value, str) and value:\n249 |             result[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^\n250 |     return result\n    |\nhelp: Replace for loop with dict comprehension\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_persistent_env_var_x.py:264:5\n    |\n262 |       if details:\n263 |           payload[\"details\"] = dict(details)\n264 | /     try:\n265 | |         validate_payload(payload, ERROR_SCHEMA)\n266 | |     except ValidationError:\n267 | |         pass\n    | |____________^\n268 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> x_cls_make_persistent_env_var_x.py:274:9\n    |\n272 |     \"\"\"Persistent environment variable setter (Windows user scope).\"\"\"\n273 |\n274 |     def __init__(\n    |         ^^^^^^^^\n275 |         self,\n276 |         var: str = \"\",\n    |\n\nC901 `run_gui` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:395:9\n    |\n393 |         return summaries, ok_all\n394 |\n395 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n396 |         values = _open_gui_and_collect(self.tokens, ctx=self._ctx, quiet=self.quiet)\n397 |         if values is None or all(not val for val in values.values()):\n    |\n\nARG001 Unused function argument: `quiet`\n   --> x_cls_make_persistent_env_var_x.py:440:33\n    |\n439 | def _prompt_for_values(\n440 |     tokens: Sequence[Token], *, quiet: bool\n    |                                 ^^^^^\n441 | ) -> dict[str, str] | None:\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_persistent_env_var_x.py:444:89\n    |\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n443 |     print(\n444 |         \"Provide secrets for each token. Leave blank to skip and keep existing user-scoped values.\"\n    |                                                                                         ^^^^^^^^^^^\n445 |     )\n446 |     collected: dict[str, str] = {}\n    |\n\nC901 `_build_gui_parts` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:476:5\n    |\n476 | def _build_gui_parts(\n    |     ^^^^^^^^^^^^^^^^\n477 |     tk_mod: ModuleType,\n478 |     tokens: Sequence[Token],\n    |\n\nC901 `_perform_persist_current` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:593:5\n    |\n593 | def _perform_persist_current(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n594 |     token_specs: Sequence[TokenSpec],\n595 |     *,\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_persistent_env_var_x.py:676:89\n    |\n674 |     if tokens_modified:\n675 |         messages.append(\n676 |             f\"Persisted {tokens_modified} token{'s' if tokens_modified != 1 else ''} from session\"\n    |                                                                                         ^^^^^^^^^^\n677 |         )\n678 |     if tokens_skipped:\n    |\n\nE501 Line too long (105 > 88)\n   --> x_cls_make_persistent_env_var_x.py:680:89\n    |\n678 |     if tokens_skipped:\n679 |         messages.append(\n680 |             f\"Skipped {tokens_skipped} token{'s' if tokens_skipped != 1 else ''} (missing session value)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n681 |         )\n682 |     if tokens_failed:\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:684:89\n    |\n682 |     if tokens_failed:\n683 |         messages.append(\n684 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n685 |         )\n    |\n\nC901 `_perform_persist_values` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nSIM108 Use ternary operator `exit_code = 1 if tokens_failed else 0` instead of `if`-`else`-block\n   --> x_cls_make_persistent_env_var_x.py:821:5\n    |\n819 |           }\n820 |\n821 | /     if tokens_failed:\n822 | |         exit_code = 1\n823 | |     else:\n824 | |         exit_code = 0\n    | |_____________________^\n825 |\n826 |       messages: list[str] = []\n    |\nhelp: Replace `if`-`else`-block with `exit_code = 1 if tokens_failed else 0`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:837:89\n    |\n835 |     if tokens_failed:\n836 |         messages.append(\n837 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n838 |         )\n    |\n\nFound 55 errors.\nNo fixes available (4 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:36:59.352069+00:00\nduration: 0.134s\ntool_version: ruff 0.14.1\nstdout:\nPLR0915 Too many statements (51 > 50)\n  --> tests\\test_json_contracts.py:69:5\n   |\n69 | def test_main_json_persist_values_success(\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0915 Too many statements (51 > 50)\n  --> tests\\test_json_contracts.py:69:5\n   |\n69 | def test_main_json_persist_values_success(\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-v\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:36:57.887384+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "duration_seconds": 0.14599750001798384,
                "ended_at": "2025-10-21T15:36:57.887384+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_persistent_env.py",
                    "x_cls_make_persistent_env_var_x.py"
                ],
                "repo": "x_make_persistent_env_var_x",
                "repo_hash": "47cb3ef8d1fd7b3ba8acd1510b8ca1a5e174794daa4b085fdf3c8437a8f6e637",
                "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
                "started_at": "2025-10-21T15:36:57.741744+00:00",
                "stderr": "",
                "stdout": "PLR0915 Too many statements (51 > 50)\n  --> tests\\test_json_contracts.py:69:5\n   |\n69 | def test_main_json_persist_values_success(\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n70 |     sample_input: dict[str, object],\n71 |     monkeypatch: pytest.MonkeyPatch,\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:113:5\n    |\n111 |     validate_payload(result, OUTPUT_SCHEMA)\n112 |     status_value = result.get(\"status\")\n113 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n114 |     assert status_value == \"success\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:114:5\n    |\n112 |     status_value = result.get(\"status\")\n113 |     assert isinstance(status_value, str)\n114 |     assert status_value == \"success\"\n    |     ^^^^^^\n115 |\n116 |     summary_obj = result.get(\"summary\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:117:5\n    |\n116 |     summary_obj = result.get(\"summary\")\n117 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:118:5\n    |\n116 |     summary_obj = result.get(\"summary\")\n117 |     assert isinstance(summary_obj, dict)\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n    |     ^^^^^^\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:119:5\n    |\n117 |     assert isinstance(summary_obj, dict)\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n    |     ^^^^^^\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_json_contracts.py:119:50\n    |\n117 |     assert isinstance(summary_obj, dict)\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n    |                                                  ^\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:120:5\n    |\n118 |     assert summary_obj.get(\"action\") == \"persist-values\"\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |     ^^^^^^\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:121:5\n    |\n119 |     assert summary_obj.get(\"tokens_modified\") == 2\n120 |     assert summary_obj.get(\"tokens_failed\") == 0\n121 |     assert summary_obj.get(\"exit_code\") == 0\n    |     ^^^^^^\n122 |\n123 |     results_obj = result.get(\"results\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:124:5\n    |\n123 |     results_obj = result.get(\"results\")\n124 |     assert isinstance(results_obj, list)\n    |     ^^^^^^\n125 |     entries: dict[str, dict[str, object]] = {}\n126 |     for entry_obj in results_obj:\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:133:5\n    |\n131 |             entries[name_value] = entry_obj\n132 |     api_result = entries[\"API_TOKEN\"]\n133 |     assert api_result.get(\"status\") == \"persisted\"\n    |     ^^^^^^\n134 |     assert api_result.get(\"changed\") is True\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:134:5\n    |\n132 |     api_result = entries[\"API_TOKEN\"]\n133 |     assert api_result.get(\"status\") == \"persisted\"\n134 |     assert api_result.get(\"changed\") is True\n    |     ^^^^^^\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n136 |     assert isinstance(api_result.get(\"stored_hash\"), str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:135:5\n    |\n133 |     assert api_result.get(\"status\") == \"persisted\"\n134 |     assert api_result.get(\"changed\") is True\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n    |     ^^^^^^\n136 |     assert isinstance(api_result.get(\"stored_hash\"), str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:136:5\n    |\n134 |     assert api_result.get(\"changed\") is True\n135 |     assert api_result.get(\"stored\") == \"<hidden>\"\n136 |     assert isinstance(api_result.get(\"stored_hash\"), str)\n    |     ^^^^^^\n137 |\n138 |     debug_result = entries[\"DEBUG\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:139:5\n    |\n138 |     debug_result = entries[\"DEBUG\"]\n139 |     assert debug_result.get(\"status\") == \"persisted\"\n    |     ^^^^^^\n140 |     assert debug_result.get(\"stored\") == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:140:5\n    |\n138 |     debug_result = entries[\"DEBUG\"]\n139 |     assert debug_result.get(\"status\") == \"persisted\"\n140 |     assert debug_result.get(\"stored\") == \"1\"\n    |     ^^^^^^\n141 |\n142 |     snapshot_obj = result.get(\"environment_snapshot\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n142 |     snapshot_obj = result.get(\"environment_snapshot\")\n143 |     assert isinstance(snapshot_obj, dict)\n    |     ^^^^^^\n144 |     provided_obj = snapshot_obj.get(\"provided\")\n145 |     user_obj = snapshot_obj.get(\"user\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:146:5\n    |\n144 |     provided_obj = snapshot_obj.get(\"provided\")\n145 |     user_obj = snapshot_obj.get(\"user\")\n146 |     assert isinstance(provided_obj, dict)\n    |     ^^^^^^\n147 |     assert isinstance(user_obj, dict)\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:147:5\n    |\n145 |     user_obj = snapshot_obj.get(\"user\")\n146 |     assert isinstance(provided_obj, dict)\n147 |     assert isinstance(user_obj, dict)\n    |     ^^^^^^\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n149 |     assert user_obj.get(\"DEBUG\") == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:148:5\n    |\n146 |     assert isinstance(provided_obj, dict)\n147 |     assert isinstance(user_obj, dict)\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n    |     ^^^^^^\n149 |     assert user_obj.get(\"DEBUG\") == \"1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:149:5\n    |\n147 |     assert isinstance(user_obj, dict)\n148 |     assert provided_obj.get(\"API_TOKEN\") == \"<hidden>\"\n149 |     assert user_obj.get(\"DEBUG\") == \"1\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:206:5\n    |\n204 |     validate_payload(result, OUTPUT_SCHEMA)\n205 |     summary_obj = result.get(\"summary\")\n206 |     assert isinstance(summary_obj, dict)\n    |     ^^^^^^\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:207:5\n    |\n205 |     summary_obj = result.get(\"summary\")\n206 |     assert isinstance(summary_obj, dict)\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n    |     ^^^^^^\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:208:5\n    |\n206 |     assert isinstance(summary_obj, dict)\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n    |     ^^^^^^\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n210 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:209:5\n    |\n207 |     assert summary_obj.get(\"tokens_modified\") == 1\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n    |     ^^^^^^\n210 |     assert summary_obj.get(\"exit_code\") == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:210:5\n    |\n208 |     assert summary_obj.get(\"tokens_skipped\") == 1\n209 |     assert summary_obj.get(\"tokens_failed\") == 0\n210 |     assert summary_obj.get(\"exit_code\") == 0\n    |     ^^^^^^\n211 |\n212 |     results_obj = result.get(\"results\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:213:5\n    |\n212 |     results_obj = result.get(\"results\")\n213 |     assert isinstance(results_obj, list)\n    |     ^^^^^^\n214 |     entries: dict[str, dict[str, object]] = {}\n215 |     for entry_obj in results_obj:\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:222:5\n    |\n220 |             entries[name_value] = entry_obj\n221 |     alpha_entry = entries.get(\"ALPHA\")\n222 |     assert isinstance(alpha_entry, dict)\n    |     ^^^^^^\n223 |     assert alpha_entry.get(\"status\") in {\"persisted\", \"unchanged\"}\n224 |     beta_entry = entries.get(\"BETA\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:223:5\n    |\n221 |     alpha_entry = entries.get(\"ALPHA\")\n222 |     assert isinstance(alpha_entry, dict)\n223 |     assert alpha_entry.get(\"status\") in {\"persisted\", \"unchanged\"}\n    |     ^^^^^^\n224 |     beta_entry = entries.get(\"BETA\")\n225 |     assert isinstance(beta_entry, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:225:5\n    |\n223 |     assert alpha_entry.get(\"status\") in {\"persisted\", \"unchanged\"}\n224 |     beta_entry = entries.get(\"BETA\")\n225 |     assert isinstance(beta_entry, dict)\n    |     ^^^^^^\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n227 |     assert beta_entry.get(\"attempted\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:226:5\n    |\n224 |     beta_entry = entries.get(\"BETA\")\n225 |     assert isinstance(beta_entry, dict)\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n    |     ^^^^^^\n227 |     assert beta_entry.get(\"attempted\") is False\n228 |     assert beta_entry.get(\"changed\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:227:5\n    |\n225 |     assert isinstance(beta_entry, dict)\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n227 |     assert beta_entry.get(\"attempted\") is False\n    |     ^^^^^^\n228 |     assert beta_entry.get(\"changed\") is False\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:228:5\n    |\n226 |     assert beta_entry.get(\"status\") == \"skipped\"\n227 |     assert beta_entry.get(\"attempted\") is False\n228 |     assert beta_entry.get(\"changed\") is False\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:242:5\n    |\n240 |     status_value = result.get(\"status\")\n241 |     message_value = result.get(\"message\")\n242 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n243 |     assert isinstance(message_value, str)\n244 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:243:5\n    |\n241 |     message_value = result.get(\"message\")\n242 |     assert isinstance(status_value, str)\n243 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n244 |     assert status_value == \"failure\"\n245 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:244:5\n    |\n242 |     assert isinstance(status_value, str)\n243 |     assert isinstance(message_value, str)\n244 |     assert status_value == \"failure\"\n    |     ^^^^^^\n245 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:245:5\n    |\n243 |     assert isinstance(message_value, str)\n244 |     assert status_value == \"failure\"\n245 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> tests\\test_persistent_env.py:182:44\n    |\n181 |     def fake_prompt(\n182 |         tokens: Sequence[tuple[str, str]], quiet: bool\n    |                                            ^^^^^\n183 |     ) -> dict[str, str] | None:\n184 |         prompt_calls.append((tuple(tokens), quiet))\n    |\n\nTC004 Move import `collections.abc.Mapping` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:43\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                           ^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nTC004 Move import `collections.abc.Sequence` out of type-checking block. Import is used for more than type hinting.\n  --> x_cls_make_persistent_env_var_x.py:32:52\n   |\n31 | if TYPE_CHECKING:\n32 |     from collections.abc import Callable, Mapping, Sequence\n   |                                                    ^^^^^^^^\n33 |     from typing import Protocol\n   |\nhelp: Move out of type-checking block\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_persistent_env_var_x.py:249:13\n    |\n247 |     for key, value in raw.items():\n248 |         if isinstance(key, str) and isinstance(value, str) and value:\n249 |             result[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^\n250 |     return result\n    |\nhelp: Replace for loop with dict comprehension\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_persistent_env_var_x.py:264:5\n    |\n262 |       if details:\n263 |           payload[\"details\"] = dict(details)\n264 | /     try:\n265 | |         validate_payload(payload, ERROR_SCHEMA)\n266 | |     except ValidationError:\n267 | |         pass\n    | |____________^\n268 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> x_cls_make_persistent_env_var_x.py:274:9\n    |\n272 |     \"\"\"Persistent environment variable setter (Windows user scope).\"\"\"\n273 |\n274 |     def __init__(\n    |         ^^^^^^^^\n275 |         self,\n276 |         var: str = \"\",\n    |\n\nC901 `run_gui` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:395:9\n    |\n393 |         return summaries, ok_all\n394 |\n395 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n396 |         values = _open_gui_and_collect(self.tokens, ctx=self._ctx, quiet=self.quiet)\n397 |         if values is None or all(not val for val in values.values()):\n    |\n\nARG001 Unused function argument: `quiet`\n   --> x_cls_make_persistent_env_var_x.py:440:33\n    |\n439 | def _prompt_for_values(\n440 |     tokens: Sequence[Token], *, quiet: bool\n    |                                 ^^^^^\n441 | ) -> dict[str, str] | None:\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_persistent_env_var_x.py:444:89\n    |\n442 |     print(\"GUI unavailable. Falling back to console prompts.\")\n443 |     print(\n444 |         \"Provide secrets for each token. Leave blank to skip and keep existing user-scoped values.\"\n    |                                                                                         ^^^^^^^^^^^\n445 |     )\n446 |     collected: dict[str, str] = {}\n    |\n\nC901 `_build_gui_parts` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:476:5\n    |\n476 | def _build_gui_parts(\n    |     ^^^^^^^^^^^^^^^^\n477 |     tk_mod: ModuleType,\n478 |     tokens: Sequence[Token],\n    |\n\nC901 `_perform_persist_current` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:593:5\n    |\n593 | def _perform_persist_current(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n594 |     token_specs: Sequence[TokenSpec],\n595 |     *,\n    |\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_persistent_env_var_x.py:676:89\n    |\n674 |     if tokens_modified:\n675 |         messages.append(\n676 |             f\"Persisted {tokens_modified} token{'s' if tokens_modified != 1 else ''} from session\"\n    |                                                                                         ^^^^^^^^^^\n677 |         )\n678 |     if tokens_skipped:\n    |\n\nE501 Line too long (105 > 88)\n   --> x_cls_make_persistent_env_var_x.py:680:89\n    |\n678 |     if tokens_skipped:\n679 |         messages.append(\n680 |             f\"Skipped {tokens_skipped} token{'s' if tokens_skipped != 1 else ''} (missing session value)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^\n681 |         )\n682 |     if tokens_failed:\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:684:89\n    |\n682 |     if tokens_failed:\n683 |         messages.append(\n684 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n685 |         )\n    |\n\nC901 `_perform_persist_values` is too complex (11 > 10)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_persistent_env_var_x.py:712:5\n    |\n712 | def _perform_persist_values(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n713 |     token_specs: Sequence[TokenSpec],\n714 |     values: Mapping[str, str],\n    |\n\nSIM108 Use ternary operator `exit_code = 1 if tokens_failed else 0` instead of `if`-`else`-block\n   --> x_cls_make_persistent_env_var_x.py:821:5\n    |\n819 |           }\n820 |\n821 | /     if tokens_failed:\n822 | |         exit_code = 1\n823 | |     else:\n824 | |         exit_code = 0\n    | |_____________________^\n825 |\n826 |       messages: list[str] = []\n    |\nhelp: Replace `if`-`else`-block with `exit_code = 1 if tokens_failed else 0`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_persistent_env_var_x.py:837:89\n    |\n835 |     if tokens_failed:\n836 |         messages.append(\n837 |             f\"Failed to persist {tokens_failed} token{'s' if tokens_failed != 1 else ''}\"\n    |                                                                                         ^\n838 |         )\n    |\n\nFound 55 errors.\nNo fixes available (4 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_persistent_env_var_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_persistent_env_var_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:36:57.741744+00:00\nduration: 0.146s\ntool_version: ruff 0.14.1\nstdout:\nPLR0915 Too many statements (51 > 50)\n  --> tests\\test_json_contracts.py:69:5\n   |\n69 | def test_main_json_persist_values_success(\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_persistent_env_var_x",
            "repo_path": "C:\\x_runner_x\\x_make_persistent_env_var_x",
            "stderr_preview": null,
            "stdout_preview": "PLR0915 Too many statements (51 > 50)\n  --> tests\\test_json_contracts.py:69:5\n   |\n69 | def test_main_json_persist_values_success(\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_persistent_env_var_x (exit 1) cwd: C:\\x_runner_x\\x_make_persistent_env_var_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --targ\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:37:17.029028+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 1.952347299986286,
                "ended_at": "2025-10-21T15:37:17.029028+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "a49dbe0c3999ce0662c8ae40f65cc60cb00cec91af305d6b64f6b4d9ff1f274f",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T15:37:15.076488+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 15:37:15.051388+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 15:37:16.779376+00:00\n@@ -654,13 +654,11 @@\n         cloner_obj = SimpleNamespace(**dict(cloner_obj_raw))\n     else:\n         cloner_obj = SimpleNamespace()\n \n     class _NoopRunner(PipUpdatesRunnerProtocol):\n-        def batch_install(\n-            self, packages: Sequence[str], *, use_user: bool\n-        ) -> int:\n+        def batch_install(self, packages: Sequence[str], *, use_user: bool) -> int:\n             return 0\n \n     def _default_factory(*_args: object, **_kwargs: object) -> PipUpdatesRunnerProtocol:\n         return _NoopRunner()\n \n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-21T15:37:15.076488+00:00\nduration: 1.952s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6\nstdout:\n--- C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 15:37:15.051388+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 15:37:16.779376+00:00\n@@ -654,13 +654,11 @@\n         cloner_obj = SimpleNamespace(**dict(cloner_obj_raw))\n     else:\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 6 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 15:37:15.051388+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\update_flow.py\t2025-10-21 15:37:16.779376+00:00\n@@ -654,13 +654,11 @@\n         cloner_obj = SimpleNamespace(**dict(cloner_obj_raw))\n     else:\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-21T15:37:15.076488\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6"
        },
        {
            "captured_at": "2025-10-21T15:37:17.967648+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.7951562999805901,
                "ended_at": "2025-10-21T15:37:17.967648+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "a49dbe0c3999ce0662c8ae40f65cc60cb00cec91af305d6b64f6b4d9ff1f274f",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T15:37:17.173423+00:00",
                "stderr": "",
                "stdout": "update_flow.py:16: error: Unused \"type: ignore\" comment  [unused-ignore]\nupdate_flow.py:654: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:21: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:24: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:27: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:30: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:33: error: Argument 1 has incompatible type \"Callable[[], dict[str, object]]\"; expected \"Callable[[VarArg(Never), KwArg(Never)], Never]\"  [arg-type]\ntests\\test_json_contracts.py:36: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:36: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:59: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:60: error: Expression has type \"Any\"  [misc]\nFound 16 errors in 3 files (checked 7 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:37:17.173423+00:00\nduration: 0.795s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nupdate_flow.py:16: error: Unused \"type: ignore\" comment  [unused-ignore]\nupdate_flow.py:654: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "update_flow.py:16: error: Unused \"type: ignore\" comment  [unused-ignore]\nupdate_flow.py:654: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_pip_updates_x.py:308: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:311: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --dis\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:37:17.169928+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.13825180000276305,
                "ended_at": "2025-10-21T15:37:17.169928+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "a49dbe0c3999ce0662c8ae40f65cc60cb00cec91af305d6b64f6b4d9ff1f274f",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T15:37:17.032034+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n56 |     assert report_files, \"expected at least one pip-updates run report to validate\"\n   |     ^^^^^^\n57 |     for report_file in report_files:\n58 |         with report_file.open(\"r\", encoding=\"utf-8\") as handle:\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:66:5\n   |\n64 |     result = main_json(sample_input)\n65 |     validate_payload(result, OUTPUT_SCHEMA)\n66 |     assert result[\"status\"] in {\"success\", \"error\"}\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:78:5\n   |\n76 |     result = main_json(invalid)\n77 |     validate_payload(result, ERROR_SCHEMA)\n78 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> update_flow.py:598:5\n    |\n596 |       if details:\n597 |           payload[\"details\"] = dict(details)\n598 | /     try:\n599 | |         validate_payload(payload, ERROR_SCHEMA)\n600 | |     except ValidationError:\n601 | |         pass\n    | |____________^\n602 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n606 |     payload: Mapping[str, object],\n607 |     *,\n    |\n\nARG002 Unused method argument: `packages`\n   --> update_flow.py:660:19\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                   ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nARG002 Unused method argument: `use_user`\n   --> update_flow.py:660:47\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                                               ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nFound 7 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:37:17.032034+00:00\nduration: 0.138s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 s\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:37:15.072211+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pip_updates_x",
                "duration_seconds": 0.1874633000115864,
                "ended_at": "2025-10-21T15:37:15.072211+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/test_json_contracts.py",
                    "tests/test_pip_updates.py",
                    "update_flow.py",
                    "x_cls_make_pip_updates_x.py"
                ],
                "repo": "x_make_pip_updates_x",
                "repo_hash": "a49dbe0c3999ce0662c8ae40f65cc60cb00cec91af305d6b64f6b4d9ff1f274f",
                "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
                "started_at": "2025-10-21T15:37:14.883525+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n56 |     assert report_files, \"expected at least one pip-updates run report to validate\"\n   |     ^^^^^^\n57 |     for report_file in report_files:\n58 |         with report_file.open(\"r\", encoding=\"utf-8\") as handle:\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:66:5\n   |\n64 |     result = main_json(sample_input)\n65 |     validate_payload(result, OUTPUT_SCHEMA)\n66 |     assert result[\"status\"] in {\"success\", \"error\"}\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:78:5\n   |\n76 |     result = main_json(invalid)\n77 |     validate_payload(result, ERROR_SCHEMA)\n78 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> update_flow.py:598:5\n    |\n596 |       if details:\n597 |           payload[\"details\"] = dict(details)\n598 | /     try:\n599 | |         validate_payload(payload, ERROR_SCHEMA)\n600 | |     except ValidationError:\n601 | |         pass\n    | |____________^\n602 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (11 > 10)\n   --> update_flow.py:605:5\n    |\n605 | def main_json(\n    |     ^^^^^^^^^\n606 |     payload: Mapping[str, object],\n607 |     *,\n    |\n\nARG002 Unused method argument: `packages`\n   --> update_flow.py:660:19\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                   ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nARG002 Unused method argument: `use_user`\n   --> update_flow.py:660:47\n    |\n658 |     class _NoopRunner(PipUpdatesRunnerProtocol):\n659 |         def batch_install(\n660 |             self, packages: Sequence[str], *, use_user: bool\n    |                                               ^^^^^^^^\n661 |         ) -> int:\n662 |             return 0\n    |\n\nFound 8 errors (1 fixed, 7 remaining).\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_pip_updates_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pip_updates_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:37:14.883525+00:00\nduration: 0.187s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pip_updates_x",
            "repo_path": "C:\\x_runner_x\\x_make_pip_updates_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:56:5\n   |\n54 | def test_existing_reports_align_with_schema() -> None:\n55 |     report_files = sorted(REPORTS_DIR.glob(\"x_make_pip_updates_x_run_*.json\"))\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_pip_updates_x (exit 1) cwd: C:\\x_runner_x\\x_make_pip_updates_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py3\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:37:39.194459+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 1.2385478999931365,
                "ended_at": "2025-10-21T15:37:39.194459+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "0b363279882c4df750efc9483a853cb2f503c8adc12e62bad88edc449da82e7e",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-21T15:37:37.955791+00:00",
                "stderr": "",
                "stdout": "x_cls_make_py_mod_sideload_x.py:167: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:190: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:231: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:255: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:283: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:311: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:314: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:314: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:22: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:22: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:45: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:45: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:51: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:51: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:57: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:57: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:112: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 17 errors in 2 files (checked 7 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:37:37.955791+00:00\nduration: 1.239s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_py_mod_sideload_x.py:167: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:190: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:231: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:255: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:283: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_py_mod_sideload_x.py:167: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:190: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_py_mod_sideload_x.py:231: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:255: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_py_mod_sideload_x.py:283: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachab\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:37:37.950921+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 0.14008650000323541,
                "ended_at": "2025-10-21T15:37:37.950921+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "0b363279882c4df750efc9483a853cb2f503c8adc12e62bad88edc449da82e7e",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-21T15:37:37.811954+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:95:5\n   |\n94 |     parameters_obj = payload.get(\"parameters\")\n95 |     assert isinstance(parameters_obj, dict)\n   |     ^^^^^^\n96 |     parameters = cast(\"dict[str, object]\", parameters_obj)\n97 |     parameters[\"base_path\"] = str(workspace)\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:103:5\n    |\n101 |     validate_payload(result, OUTPUT_SCHEMA)\n102 |     status_value = result.get(\"status\")\n103 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n104 |     assert status_value == \"success\"\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:104:5\n    |\n102 |     status_value = result.get(\"status\")\n103 |     assert isinstance(status_value, str)\n104 |     assert status_value == \"success\"\n    |     ^^^^^^\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n106 |     assert result.get(\"attribute\") == \"run\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:105:5\n    |\n103 |     assert isinstance(status_value, str)\n104 |     assert status_value == \"success\"\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n    |     ^^^^^^\n106 |     assert result.get(\"attribute\") == \"run\"\n107 |     module_file_value = result.get(\"module_file\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:106:5\n    |\n104 |     assert status_value == \"success\"\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n106 |     assert result.get(\"attribute\") == \"run\"\n    |     ^^^^^^\n107 |     module_file_value = result.get(\"module_file\")\n108 |     assert isinstance(module_file_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:108:5\n    |\n106 |     assert result.get(\"attribute\") == \"run\"\n107 |     module_file_value = result.get(\"module_file\")\n108 |     assert isinstance(module_file_value, str)\n    |     ^^^^^^\n109 |     assert Path(module_file_value).resolve() == module_path.resolve()\n110 |     metadata = result.get(\"metadata\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:109:5\n    |\n107 |     module_file_value = result.get(\"module_file\")\n108 |     assert isinstance(module_file_value, str)\n109 |     assert Path(module_file_value).resolve() == module_path.resolve()\n    |     ^^^^^^\n110 |     metadata = result.get(\"metadata\")\n111 |     assert isinstance(metadata, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:111:5\n    |\n109 |     assert Path(module_file_value).resolve() == module_path.resolve()\n110 |     metadata = result.get(\"metadata\")\n111 |     assert isinstance(metadata, dict)\n    |     ^^^^^^\n112 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n110 |     metadata = result.get(\"metadata\")\n111 |     assert isinstance(metadata, dict)\n112 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:121:5\n    |\n119 |     payload = _round_trip(sample_input)\n120 |     parameters_obj = payload.get(\"parameters\")\n121 |     assert isinstance(parameters_obj, dict)\n    |     ^^^^^^\n122 |     parameters = cast(\"dict[str, object]\", parameters_obj)\n123 |     parameters[\"attribute\"] = \"missing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n140 |     status_value = result.get(\"status\")\n141 |     message_value = result.get(\"message\")\n142 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n143 |     assert isinstance(message_value, str)\n144 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     message_value = result.get(\"message\")\n142 |     assert isinstance(status_value, str)\n143 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n144 |     assert status_value == \"failure\"\n145 |     assert message_value == \"attribute resolution failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     assert isinstance(status_value, str)\n143 |     assert isinstance(message_value, str)\n144 |     assert status_value == \"failure\"\n    |     ^^^^^^\n145 |     assert message_value == \"attribute resolution failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:145:5\n    |\n143 |     assert isinstance(message_value, str)\n144 |     assert status_value == \"failure\"\n145 |     assert message_value == \"attribute resolution failed\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:154:5\n    |\n152 |     status_value = result.get(\"status\")\n153 |     message_value = result.get(\"message\")\n154 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n155 |     assert isinstance(message_value, str)\n156 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:155:5\n    |\n153 |     message_value = result.get(\"message\")\n154 |     assert isinstance(status_value, str)\n155 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n156 |     assert status_value == \"failure\"\n157 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:156:5\n    |\n154 |     assert isinstance(status_value, str)\n155 |     assert isinstance(message_value, str)\n156 |     assert status_value == \"failure\"\n    |     ^^^^^^\n157 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:157:5\n    |\n155 |     assert isinstance(message_value, str)\n156 |     assert status_value == \"failure\"\n157 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_py_mod_sideload_x.py:165:5\n    |\n163 |       if details:\n164 |           payload[\"details\"] = dict(details)\n165 | /     try:\n166 | |         validate_payload(payload, ERROR_SCHEMA)\n167 | |     except ValidationError:\n168 | |         pass\n    | |____________^\n169 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:184:5\n    |\n184 | def main_json(\n    |     ^^^^^^^^^\n185 |     payload: Mapping[str, object], *, ctx: object | None = None\n186 | ) -> dict[str, object]:\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_py_mod_sideload_x.py:184:5\n    |\n184 | def main_json(\n    |     ^^^^^^^^^\n185 |     payload: Mapping[str, object], *, ctx: object | None = None\n186 | ) -> dict[str, object]:\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:231:29\n    |\n230 |     try:\n231 |         module_obj_loaded = runner._module_loader.load_module(base_path, module_name)  # type: ignore[attr-defined]\n    |                             ^^^^^^^^^^^^^^^^^^^^^\n232 |     except (FileNotFoundError, ImportError, ValueError, OSError) as exc:\n233 |         return _failure_payload(\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:255:32\n    |\n253 |     if attribute_name:\n254 |         try:\n255 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n256 |         except AttributeError as exc:\n257 |             return _failure_payload(\n    |\n\nE501 Line too long (101 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:255:89\n    |\n253 |     if attribute_name:\n254 |         try:\n255 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                                                                         ^^^^^^^^^^^^^\n256 |         except AttributeError as exc:\n257 |             return _failure_payload(\n    |\n\nFound 24 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:37:37.811954+00:00\nduration: 0.140s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:95:5\n   |\n94 |     parameters_obj = payload.get(\"parameters\")\n95 |     assert isinstance(parameters_obj, dict)\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:95:5\n   |\n94 |     parameters_obj = payload.get(\"parameters\")\n95 |     assert isinstance(parameters_obj, dict)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:37:36.448449+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "duration_seconds": 0.28026820000377484,
                "ended_at": "2025-10-21T15:37:36.448449+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_py_module_sideload.py",
                    "x_cls_make_py_mod_sideload_x.py"
                ],
                "repo": "x_make_py_mod_sideload_x",
                "repo_hash": "0b363279882c4df750efc9483a853cb2f503c8adc12e62bad88edc449da82e7e",
                "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
                "started_at": "2025-10-21T15:37:36.169182+00:00",
                "stderr": "",
                "stdout": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:95:5\n   |\n94 |     parameters_obj = payload.get(\"parameters\")\n95 |     assert isinstance(parameters_obj, dict)\n   |     ^^^^^^\n96 |     parameters = cast(\"dict[str, object]\", parameters_obj)\n97 |     parameters[\"base_path\"] = str(workspace)\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:103:5\n    |\n101 |     validate_payload(result, OUTPUT_SCHEMA)\n102 |     status_value = result.get(\"status\")\n103 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n104 |     assert status_value == \"success\"\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:104:5\n    |\n102 |     status_value = result.get(\"status\")\n103 |     assert isinstance(status_value, str)\n104 |     assert status_value == \"success\"\n    |     ^^^^^^\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n106 |     assert result.get(\"attribute\") == \"run\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:105:5\n    |\n103 |     assert isinstance(status_value, str)\n104 |     assert status_value == \"success\"\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n    |     ^^^^^^\n106 |     assert result.get(\"attribute\") == \"run\"\n107 |     module_file_value = result.get(\"module_file\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:106:5\n    |\n104 |     assert status_value == \"success\"\n105 |     assert result.get(\"object_kind\") == \"attribute\"\n106 |     assert result.get(\"attribute\") == \"run\"\n    |     ^^^^^^\n107 |     module_file_value = result.get(\"module_file\")\n108 |     assert isinstance(module_file_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:108:5\n    |\n106 |     assert result.get(\"attribute\") == \"run\"\n107 |     module_file_value = result.get(\"module_file\")\n108 |     assert isinstance(module_file_value, str)\n    |     ^^^^^^\n109 |     assert Path(module_file_value).resolve() == module_path.resolve()\n110 |     metadata = result.get(\"metadata\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:109:5\n    |\n107 |     module_file_value = result.get(\"module_file\")\n108 |     assert isinstance(module_file_value, str)\n109 |     assert Path(module_file_value).resolve() == module_path.resolve()\n    |     ^^^^^^\n110 |     metadata = result.get(\"metadata\")\n111 |     assert isinstance(metadata, dict)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:111:5\n    |\n109 |     assert Path(module_file_value).resolve() == module_path.resolve()\n110 |     metadata = result.get(\"metadata\")\n111 |     assert isinstance(metadata, dict)\n    |     ^^^^^^\n112 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:112:5\n    |\n110 |     metadata = result.get(\"metadata\")\n111 |     assert isinstance(metadata, dict)\n112 |     assert metadata.get(\"attribute_type\") == \"function\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:121:5\n    |\n119 |     payload = _round_trip(sample_input)\n120 |     parameters_obj = payload.get(\"parameters\")\n121 |     assert isinstance(parameters_obj, dict)\n    |     ^^^^^^\n122 |     parameters = cast(\"dict[str, object]\", parameters_obj)\n123 |     parameters[\"attribute\"] = \"missing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:142:5\n    |\n140 |     status_value = result.get(\"status\")\n141 |     message_value = result.get(\"message\")\n142 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n143 |     assert isinstance(message_value, str)\n144 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:143:5\n    |\n141 |     message_value = result.get(\"message\")\n142 |     assert isinstance(status_value, str)\n143 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n144 |     assert status_value == \"failure\"\n145 |     assert message_value == \"attribute resolution failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:144:5\n    |\n142 |     assert isinstance(status_value, str)\n143 |     assert isinstance(message_value, str)\n144 |     assert status_value == \"failure\"\n    |     ^^^^^^\n145 |     assert message_value == \"attribute resolution failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:145:5\n    |\n143 |     assert isinstance(message_value, str)\n144 |     assert status_value == \"failure\"\n145 |     assert message_value == \"attribute resolution failed\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:154:5\n    |\n152 |     status_value = result.get(\"status\")\n153 |     message_value = result.get(\"message\")\n154 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n155 |     assert isinstance(message_value, str)\n156 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:155:5\n    |\n153 |     message_value = result.get(\"message\")\n154 |     assert isinstance(status_value, str)\n155 |     assert isinstance(message_value, str)\n    |     ^^^^^^\n156 |     assert status_value == \"failure\"\n157 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:156:5\n    |\n154 |     assert isinstance(status_value, str)\n155 |     assert isinstance(message_value, str)\n156 |     assert status_value == \"failure\"\n    |     ^^^^^^\n157 |     assert message_value == \"input payload failed validation\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_json_contracts.py:157:5\n    |\n155 |     assert isinstance(message_value, str)\n156 |     assert status_value == \"failure\"\n157 |     assert message_value == \"input payload failed validation\"\n    |     ^^^^^^\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_py_mod_sideload_x.py:165:5\n    |\n163 |       if details:\n164 |           payload[\"details\"] = dict(details)\n165 | /     try:\n166 | |         validate_payload(payload, ERROR_SCHEMA)\n167 | |     except ValidationError:\n168 | |         pass\n    | |____________^\n169 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nC901 `main_json` is too complex (12 > 10)\n   --> x_cls_make_py_mod_sideload_x.py:184:5\n    |\n184 | def main_json(\n    |     ^^^^^^^^^\n185 |     payload: Mapping[str, object], *, ctx: object | None = None\n186 | ) -> dict[str, object]:\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_py_mod_sideload_x.py:184:5\n    |\n184 | def main_json(\n    |     ^^^^^^^^^\n185 |     payload: Mapping[str, object], *, ctx: object | None = None\n186 | ) -> dict[str, object]:\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:231:29\n    |\n230 |     try:\n231 |         module_obj_loaded = runner._module_loader.load_module(base_path, module_name)  # type: ignore[attr-defined]\n    |                             ^^^^^^^^^^^^^^^^^^^^^\n232 |     except (FileNotFoundError, ImportError, ValueError, OSError) as exc:\n233 |         return _failure_payload(\n    |\n\nSLF001 Private member accessed: `_module_loader`\n   --> x_cls_make_py_mod_sideload_x.py:255:32\n    |\n253 |     if attribute_name:\n254 |         try:\n255 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n256 |         except AttributeError as exc:\n257 |             return _failure_payload(\n    |\n\nE501 Line too long (101 > 88)\n   --> x_cls_make_py_mod_sideload_x.py:255:89\n    |\n253 |     if attribute_name:\n254 |         try:\n255 |             attribute_result = runner._module_loader.get_attribute(module_obj_loaded, attribute_name)  # type: ignore[attr-defined]\n    |                                                                                         ^^^^^^^^^^^^^\n256 |         except AttributeError as exc:\n257 |             return _failure_payload(\n    |\n\nFound 24 errors.\nNo fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_py_mod_sideload_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_mod_sideload_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:37:36.169182+00:00\nduration: 0.280s\ntool_version: ruff 0.14.1\nstdout:\nS101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:95:5\n   |\n94 |     parameters_obj = payload.get(\"parameters\")\n95 |     assert isinstance(parameters_obj, dict)\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_mod_sideload_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_mod_sideload_x",
            "stderr_preview": null,
            "stdout_preview": "S101 Use of `assert` detected\n  --> tests\\test_json_contracts.py:95:5\n   |\n94 |     parameters_obj = payload.get(\"parameters\")\n95 |     assert isinstance(parameters_obj, dict)\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_py_mod_sideload_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_mod_sideload_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-ver\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:37:47.334351+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_py_venv_x",
                "duration_seconds": 0.6352078000199981,
                "ended_at": "2025-10-21T15:37:47.334351+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "x_cls_make_py_venv_x.py"
                ],
                "repo": "x_make_py_venv_x",
                "repo_hash": "51b0ea7b10be7d12f9c9ac026199cc4f2908d90093bf273d1e86ebac84dfe282",
                "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
                "started_at": "2025-10-21T15:37:46.699728+00:00",
                "stderr": "",
                "stdout": "x_cls_make_py_venv_x.py:267: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:396: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:402: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:409: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:460: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:464: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:466: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:467: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:468: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:470: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:471: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:475: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:475: error: Expression type contains \"Any\" (has type \"list[Path | Any]\")  [misc]\nx_cls_make_py_venv_x.py:476: error: Expression type contains \"Any\" (has type \"Path | Any\")  [misc]\nx_cls_make_py_venv_x.py:476: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:477: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:479: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:479: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:479: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:480: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:480: error: Expression type contains \"Any\" (has type \"list[Path | Any]\")  [misc]\nx_cls_make_py_venv_x.py:481: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:481: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:482: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:484: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:490: error: Expression type contains \"Any\" (has type \"list[Path | Any]\")  [misc]\nx_cls_make_py_venv_x.py:491: error: Expression type contains \"Any\" (has type \"dict[Path | Any, Any | None]\")  [misc]\nx_cls_make_py_venv_x.py:491: error: Expression type contains \"Any\" (has type \"list[Path | Any]\")  [misc]\nx_cls_make_py_venv_x.py:492: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:492: error: Expression type contains \"Any\" (has type \"dict[Any, Any | None]\")  [misc]\nx_cls_make_py_venv_x.py:492: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:492: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:498: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:502: error: Expression type contains \"Any\" (has type \"list[Path | Any]\")  [misc]\nx_cls_make_py_venv_x.py:503: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:504: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:507: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:509: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:510: error: Expression has type \"Any\"  [misc]\nFound 39 errors in 1 file (checked 1 source file)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_py_venv_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_venv_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:37:46.699728+00:00\nduration: 0.635s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_py_venv_x.py:267: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:396: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:402: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:409: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:460: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_venv_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_py_venv_x.py:267: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_venv_x.py:396: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:402: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:409: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_py_venv_x.py:460: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_py_venv_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_venv_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-an\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:37:46.696705+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_venv_x",
                "duration_seconds": 0.12684789998456836,
                "ended_at": "2025-10-21T15:37:46.696705+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "x_cls_make_py_venv_x.py"
                ],
                "repo": "x_make_py_venv_x",
                "repo_hash": "51b0ea7b10be7d12f9c9ac026199cc4f2908d90093bf273d1e86ebac84dfe282",
                "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
                "started_at": "2025-10-21T15:37:46.569716+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                             ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:39\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                                       ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> x_cls_make_py_venv_x.py:49:47\n   |\n47 |         major = int(parts[0])\n48 |         minor = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0\n49 |         patch = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None\n   |                                               ^\n50 |         return cls(raw=text, major=major, minor=minor, patch=patch)\n   |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:133:13\n    |\n131 |               )\n132 |           elif self.tool is Tool.CURRENT:\n133 | /             logging.info(\n134 | |                 \"Using current interpreter at %s for Python %s\",\n135 | |                 sys.executable,\n136 | |                 version.raw,\n137 | |             )\n    | |_____________^\n138 |           else:  # Tool.AUTO should never reach here\n139 |               msg = f\"Unhandled tool: {self.tool}\"\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:144:13\n    |\n142 |     def _ensure_environment(self, version: VersionRequest, env_path: Path) -> bool:\n143 |         if env_path.exists():\n144 |             logging.info(\"Environment already exists at %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n145 |             return False\n146 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:147:13\n    |\n145 |             return False\n146 |         if self.dry_run:\n147 |             logging.info(\"[dry-run] Would create %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n148 |             return False\n149 |         env_path.parent.mkdir(parents=True, exist_ok=True)\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:184:9\n    |\n182 |             msg = f\"Unhandled tool: {self.tool}\"\n183 |             raise RuntimeError(msg)\n184 |         logging.info(\"Created environment at %s\", env_path)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n185 |         return True\n    |\nhelp: Use own logger instead\n\nLOG015 `warning()` call on root logger\n   --> x_cls_make_py_venv_x.py:218:17\n    |\n216 |         for requirement in requirement_files:\n217 |             if not requirement.exists():\n218 |                 logging.warning(\"Requirement file %s missing; skipping\", requirement)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n219 |                 continue\n220 |             self._run_command(\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:244:9\n    |\n242 |         env: dict[str, str] | None = None,\n243 |     ) -> None:\n244 |         logging.info(reason)\n    |         ^^^^^^^^^^^^^^^^^^^^\n245 |         logging.debug(\"Command: %s\", \" \".join(command))\n246 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `debug()` call on root logger\n   --> x_cls_make_py_venv_x.py:245:9\n    |\n243 |     ) -> None:\n244 |         logging.info(reason)\n245 |         logging.debug(\"Command: %s\", \" \".join(command))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n246 |         if self.dry_run:\n247 |             logging.info(\"[dry-run] Skipped execution\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:247:13\n    |\n245 |         logging.debug(\"Command: %s\", \" \".join(command))\n246 |         if self.dry_run:\n247 |             logging.info(\"[dry-run] Skipped execution\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n248 |             return\n249 |         try:\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:250:13\n    |\n248 |             return\n249 |         try:\n250 |             subprocess.run(command, check=True, env=env)\n    |             ^^^^^^^^^^^^^^\n251 |         except subprocess.CalledProcessError as exc:\n252 |             msg = f\"Command failed ({reason}): {exc}\"\n    |\n\nSIM103 Return the condition `tool is Tool.CURRENT` directly\n   --> x_cls_make_py_venv_x.py:284:5\n    |\n282 |       if tool is Tool.PYLAUNCHER:\n283 |           return shutil.which(\"py\") is not None\n284 | /     if tool is Tool.CURRENT:\n285 | |         return True\n286 | |     return False\n    | |________________^\n    |\nhelp: Replace with `return tool is Tool.CURRENT`\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:297:13\n    |\n295 |     if tool is Tool.UV and _resolve_uv_executable() is None and bootstrap_uv:\n296 |         if dry_run:\n297 |             logging.info(\"[dry-run] Would install uv via pip\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n298 |             return\n299 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:299:9\n    |\n297 |             logging.info(\"[dry-run] Would install uv via pip\")\n298 |             return\n299 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n300 |         try:\n301 |             subprocess.run(\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:301:13\n    |\n299 |         logging.info(\"Installing uv via pip to provision interpreters\")\n300 |         try:\n301 |             subprocess.run(\n    |             ^^^^^^^^^^^^^^\n302 |                 [sys.executable, \"-m\", \"pip\", \"install\", \"--upgrade\", \"uv\"],\n303 |                 check=True,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:323:5\n    |\n321 |     target = project_root / \".python-version\"\n322 |     target.write_text(f\"{version.raw}\\n\", encoding=\"utf-8\")\n323 |     logging.info(\"Pinned .python-version to %s\", version.raw)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nARG001 Unused function argument: `project_root`\n   --> x_cls_make_py_venv_x.py:327:5\n    |\n326 | def update_tox_ini(\n327 |     project_root: Path,\n    |     ^^^^^^^^^^^^\n328 |     versions: Sequence[VersionRequest],\n329 |     *,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:349:5\n    |\n347 |     with tox_path.open(\"w\", encoding=\"utf-8\") as handle:\n348 |         config.write(handle)\n349 |     logging.info(\"Updated %s with envlist=%s\", tox_path, env_names)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:486:17\n    |\n484 |                   candidate_path = project_root / candidate\n485 |               if candidate_path.exists():\n486 | /                 logging.info(\n487 | |                     \"Auto-including requirements file at %s\",\n488 | |                     candidate_path,\n489 | |                 )\n    | |_________________^\n490 |                   requirements.append(candidate_path)\n491 |       requirements = list(dict.fromkeys(requirements))\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:515:5\n    |\n513 |         update_tox_ini(project_root, versions, tox_path=tox_path)\n514 |\n515 |     logging.info(\"Provisioned %d environment(s)\", len(created))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n516 |     return 0\n    |\nhelp: Use own logger instead\n\nFound 21 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_py_venv_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_venv_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:37:46.569716+00:00\nduration: 0.127s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_venv_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_py_venv_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_venv_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_a\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:37:45.959545+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_py_venv_x",
                "duration_seconds": 0.135658399987733,
                "ended_at": "2025-10-21T15:37:45.959545+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "x_cls_make_py_venv_x.py"
                ],
                "repo": "x_make_py_venv_x",
                "repo_hash": "51b0ea7b10be7d12f9c9ac026199cc4f2908d90093bf273d1e86ebac84dfe282",
                "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
                "started_at": "2025-10-21T15:37:45.823542+00:00",
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                             ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:39\n   |\n10 | import subprocess\n11 | import sys\n12 | from collections.abc import Iterable, Sequence\n   |                                       ^^^^^^^^\n13 | from dataclasses import dataclass\n14 | from enum import Enum\n   |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> x_cls_make_py_venv_x.py:49:47\n   |\n47 |         major = int(parts[0])\n48 |         minor = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0\n49 |         patch = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None\n   |                                               ^\n50 |         return cls(raw=text, major=major, minor=minor, patch=patch)\n   |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:133:13\n    |\n131 |               )\n132 |           elif self.tool is Tool.CURRENT:\n133 | /             logging.info(\n134 | |                 \"Using current interpreter at %s for Python %s\",\n135 | |                 sys.executable,\n136 | |                 version.raw,\n137 | |             )\n    | |_____________^\n138 |           else:  # Tool.AUTO should never reach here\n139 |               msg = f\"Unhandled tool: {self.tool}\"\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:144:13\n    |\n142 |     def _ensure_environment(self, version: VersionRequest, env_path: Path) -> bool:\n143 |         if env_path.exists():\n144 |             logging.info(\"Environment already exists at %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n145 |             return False\n146 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:147:13\n    |\n145 |             return False\n146 |         if self.dry_run:\n147 |             logging.info(\"[dry-run] Would create %s\", env_path)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n148 |             return False\n149 |         env_path.parent.mkdir(parents=True, exist_ok=True)\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:184:9\n    |\n182 |             msg = f\"Unhandled tool: {self.tool}\"\n183 |             raise RuntimeError(msg)\n184 |         logging.info(\"Created environment at %s\", env_path)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n185 |         return True\n    |\nhelp: Use own logger instead\n\nLOG015 `warning()` call on root logger\n   --> x_cls_make_py_venv_x.py:218:17\n    |\n216 |         for requirement in requirement_files:\n217 |             if not requirement.exists():\n218 |                 logging.warning(\"Requirement file %s missing; skipping\", requirement)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n219 |                 continue\n220 |             self._run_command(\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:244:9\n    |\n242 |         env: dict[str, str] | None = None,\n243 |     ) -> None:\n244 |         logging.info(reason)\n    |         ^^^^^^^^^^^^^^^^^^^^\n245 |         logging.debug(\"Command: %s\", \" \".join(command))\n246 |         if self.dry_run:\n    |\nhelp: Use own logger instead\n\nLOG015 `debug()` call on root logger\n   --> x_cls_make_py_venv_x.py:245:9\n    |\n243 |     ) -> None:\n244 |         logging.info(reason)\n245 |         logging.debug(\"Command: %s\", \" \".join(command))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n246 |         if self.dry_run:\n247 |             logging.info(\"[dry-run] Skipped execution\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:247:13\n    |\n245 |         logging.debug(\"Command: %s\", \" \".join(command))\n246 |         if self.dry_run:\n247 |             logging.info(\"[dry-run] Skipped execution\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n248 |             return\n249 |         try:\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:250:13\n    |\n248 |             return\n249 |         try:\n250 |             subprocess.run(command, check=True, env=env)\n    |             ^^^^^^^^^^^^^^\n251 |         except subprocess.CalledProcessError as exc:\n252 |             msg = f\"Command failed ({reason}): {exc}\"\n    |\n\nSIM103 Return the condition `tool is Tool.CURRENT` directly\n   --> x_cls_make_py_venv_x.py:284:5\n    |\n282 |       if tool is Tool.PYLAUNCHER:\n283 |           return shutil.which(\"py\") is not None\n284 | /     if tool is Tool.CURRENT:\n285 | |         return True\n286 | |     return False\n    | |________________^\n    |\nhelp: Replace with `return tool is Tool.CURRENT`\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:297:13\n    |\n295 |     if tool is Tool.UV and _resolve_uv_executable() is None and bootstrap_uv:\n296 |         if dry_run:\n297 |             logging.info(\"[dry-run] Would install uv via pip\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n298 |             return\n299 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:299:9\n    |\n297 |             logging.info(\"[dry-run] Would install uv via pip\")\n298 |             return\n299 |         logging.info(\"Installing uv via pip to provision interpreters\")\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n300 |         try:\n301 |             subprocess.run(\n    |\nhelp: Use own logger instead\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_py_venv_x.py:301:13\n    |\n299 |         logging.info(\"Installing uv via pip to provision interpreters\")\n300 |         try:\n301 |             subprocess.run(\n    |             ^^^^^^^^^^^^^^\n302 |                 [sys.executable, \"-m\", \"pip\", \"install\", \"--upgrade\", \"uv\"],\n303 |                 check=True,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:323:5\n    |\n321 |     target = project_root / \".python-version\"\n322 |     target.write_text(f\"{version.raw}\\n\", encoding=\"utf-8\")\n323 |     logging.info(\"Pinned .python-version to %s\", version.raw)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nARG001 Unused function argument: `project_root`\n   --> x_cls_make_py_venv_x.py:327:5\n    |\n326 | def update_tox_ini(\n327 |     project_root: Path,\n    |     ^^^^^^^^^^^^\n328 |     versions: Sequence[VersionRequest],\n329 |     *,\n    |\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:349:5\n    |\n347 |     with tox_path.open(\"w\", encoding=\"utf-8\") as handle:\n348 |         config.write(handle)\n349 |     logging.info(\"Updated %s with envlist=%s\", tox_path, env_names)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:486:17\n    |\n484 |                   candidate_path = project_root / candidate\n485 |               if candidate_path.exists():\n486 | /                 logging.info(\n487 | |                     \"Auto-including requirements file at %s\",\n488 | |                     candidate_path,\n489 | |                 )\n    | |_________________^\n490 |                   requirements.append(candidate_path)\n491 |       requirements = list(dict.fromkeys(requirements))\n    |\nhelp: Use own logger instead\n\nLOG015 `info()` call on root logger\n   --> x_cls_make_py_venv_x.py:515:5\n    |\n513 |         update_tox_ini(project_root, versions, tox_path=tox_path)\n514 |\n515 |     logging.info(\"Provisioned %d environment(s)\", len(created))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n516 |     return 0\n    |\nhelp: Use own logger instead\n\nFound 21 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_py_venv_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_py_venv_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:37:45.823542+00:00\nduration: 0.136s\ntool_version: ruff 0.14.1\nstdout:\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_py_venv_x",
            "repo_path": "C:\\x_runner_x\\x_make_py_venv_x",
            "stderr_preview": null,
            "stdout_preview": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_py_venv_x.py:12:29\n   |\n10 | import subprocess\n11 | import sys\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_py_venv_x (exit 1) cwd: C:\\x_runner_x\\x_make_py_venv_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 start\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:38:08.704540+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 1.3196253000060096,
                "ended_at": "2025-10-21T15:38:08.704540+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "95cce2ea3f6fcb344903565503116973fab31d79adbf1b54e7841e68733b3218",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-21T15:38:07.394235+00:00",
                "stderr": "",
                "stdout": "publish_flow.py:54: error: Unused \"type: ignore\" comment  [unused-ignore]\npublish_flow.py:59: error: Expression type contains \"Any\" (has type \"tuple[Any, int]\")  [misc]\npublish_flow.py:59: error: Expression has type \"Any\"  [misc]\npublish_flow.py:66: error: Expression has type \"Any\"  [misc]\npublish_flow.py:72: error: Expression has type \"Any\"  [misc]\npublish_flow.py:75: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:27: error: Unused \"type: ignore\" comment  [unused-ignore]\nx_cls_make_pypi_x.py:546: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_pypi_x.py:637: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:638: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:660: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_pypi_x.py:722: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_pypi_x.py:723: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_pypi_x.py:729: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:739: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:745: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:746: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:746: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_pypi_x.py:751: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_pypi_x.py:778: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:781: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:781: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:22: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:22: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:28: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:28: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:34: error: Returning Any from function declared to return \"dict[str, object]\"  [no-any-return]\ntests\\test_json_contracts.py:34: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:60: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:61: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:27: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:121: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:123: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:132: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:132: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:133: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:134: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:135: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:136: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:138: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:141: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:148: error: Expression type contains \"Any\" (has type \"Callable[[Sequence[Any], NamedArg(object, 'cloner'), NamedArg(object | None, 'ctx'), NamedArg(str, 'repo_parent_root'), NamedArg(object, 'publisher_factory'), NamedArg(str, 'token_env')], tuple[dict[str, str | None], dict[str, dict[str, object]], Path]]\")  [misc]\ntests\\test_main_json.py:155: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:155: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:155: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:156: error: Expression type contains \"Any\" (has type \"Sequence[Any]\")  [misc]\ntests\\test_main_json.py:156: error: Expression type contains \"Any\" (has type \"Sequence[Any] | Any\")  [misc]\ntests\\test_main_json.py:156: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:157: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:157: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:158: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:158: error: Expression type contains \"Any\" (has type \"type[SimpleNamespace]\")  [misc]\ntests\\test_main_json.py:159: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_main_json.py:160: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:160: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:161: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:161: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:162: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ntests\\test_main_json.py:162: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_main_json.py:163: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_main_json.py:164: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\ntests\\test_main_json.py:164: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\ntests\\test_main_json.py:164: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:173: error: Explicit \"Any\" is not allowed  [explicit-any]\ntests\\test_main_json.py:181: error: Expression type contains \"Any\" (has type \"Callable[[VarArg(Any), KwArg(Any)], tuple[dict[str, str | None], dict[str, dict[str, object]], Path]]\")  [misc]\nFound 65 errors in 4 files (checked 8 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:38:07.394235+00:00\nduration: 1.320s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\npublish_flow.py:54: error: Unused \"type: ignore\" comment  [unused-ignore]\npublish_flow.py:59: error: Expression type contains \"Any\" (has type \"tuple[Any, int]\")  [misc]\npublish_flow.py:59: error: Expression has type \"Any\"  [misc]\npublish_flow.py:66: error: Expression has type \"Any\"  [misc]\npublish_flow.py:72: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "publish_flow.py:54: error: Unused \"type: ignore\" comment  [unused-ignore]\npublish_flow.py:59: error: Expression type contains \"Any\" (has type \"tuple[Any, int]\")  [misc]\npublish_flow.py:59: error: Expression has type \"Any\"  [misc]\npublish_flow.py:66: error: Expression has type \"Any\"  [misc]\npublish_flow.py:72: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unim\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:38:07.380717+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 0.14667270000791177,
                "ended_at": "2025-10-21T15:38:07.380717+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "95cce2ea3f6fcb344903565503116973fab31d79adbf1b54e7841e68733b3218",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-21T15:38:07.243343+00:00",
                "stderr": "",
                "stdout": "C901 `_read_user_env_var` is too complex (11 > 10)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n46 |     if not name:\n47 |         return None\n   |\n\nPLR0911 Too many return statements (7 > 6)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n46 |     if not name:\n47 |         return None\n   |\n\nPLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:54:9\n   |\n52 |         return None\n53 |     try:\n54 |         import winreg  # type: ignore[import-not-found]\n   |         ^^^^^^^^^^^^^\n55 |     except ModuleNotFoundError:\n56 |         return None\n   |\n\nC901 `_prime_twine_credentials` is too complex (12 > 10)\n  --> publish_flow.py:83:5\n   |\n83 | def _prime_twine_credentials(token_env: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n84 |     token_sources: list[str] = []\n85 |     if token_env:\n   |\n\nS105 Possible hardcoded password assigned to: \"password_env\"\n   --> publish_flow.py:128:24\n    |\n126 |     if token_value:\n127 |         username_env = \"TWINE_USERNAME\"\n128 |         password_env = \"TWINE_PASSWORD\"\n    |                        ^^^^^^^^^^^^^^^^\n129 |         os.environ[username_env] = \"__token__\"\n130 |         os.environ[password_env] = token_value\n    |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> publish_flow.py:135:5\n    |\n133 |       repository_env = \"TWINE_REPOSITORY_URL\"\n134 |       repo_present = bool(os.environ.get(repository_env, \"\").strip())\n135 | /     if not repo_present and selected_source:\n136 | |         if \"test\" in selected_source.lower():\n    | |_____________________________________________^\n137 |               os.environ[repository_env] = \"https://test.pypi.org/legacy/\"\n138 |               _info(\"Configured Twine repository for TestPyPI uploads.\")\n    |\nhelp: Combine `if` statements using `and`\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:7:29\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_main_json.py:7:38\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> tests\\test_main_json.py:9:21\n   |\n 7 | from collections.abc import Mapping, Sequence\n 8 | from datetime import datetime\n 9 | from pathlib import Path\n   |                     ^^^^\n10 | from types import ModuleType, SimpleNamespace\n11 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:13:8\n   |\n11 | from typing import Any, cast\n12 |\n13 | import pytest\n   |        ^^^^^^\n14 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:30:28\n   |\n28 |     return {\n29 |         \"run_id\": \"0123456789abcdef0123456789abcdef\",\n30 |         \"started_at\": _iso(datetime(2025, 1, 1, 12, 0, 0)),\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |         \"inputs\": {\n32 |             \"entry_count\": 1,\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:67:30\n   |\n65 |         },\n66 |         \"status\": \"completed\",\n67 |         \"completed_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:70:30\n   |\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n70 |         \"generated_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n71 |         \"errors\": [],\n72 |     }\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> tests\\test_main_json.py:123:9\n    |\n121 |     calls: dict[str, Any] = {}\n122 |\n123 |     def fake_publish(\n    |         ^^^^^^^^^^^^\n124 |         entries: Sequence[Any],\n125 |         *,\n    |\n\nARG001 Unused function argument: `cloner`\n   --> tests\\test_main_json.py:126:9\n    |\n124 |         entries: Sequence[Any],\n125 |         *,\n126 |         cloner: object,\n    |         ^^^^^^\n127 |         ctx: object | None,\n128 |         repo_parent_root: str,\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:158:5\n    |\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |     ^^^^^^\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:159:5\n    |\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n    |     ^^^^^^\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:160:5\n    |\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |     ^^^^^^\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:161:5\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |     ^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS105 Possible hardcoded password assigned to: \"token_env\"\n   --> tests\\test_main_json.py:161:34\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |                                  ^^^^^^^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:163:5\n    |\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |     ^^^^^^\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:164:5\n    |\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n    |     ^^^^^^\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:166:5\n    |\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n167 |     assert status_value == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:167:5\n    |\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n167 |     assert status_value == \"completed\"\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*_`\n   --> tests\\test_main_json.py:174:13\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |             ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**__`\n   --> tests\\test_main_json.py:174:24\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |                        ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:189:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n    |     ^^^^^^\n190 |     assert \"run_report_path\" in details_obj\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:190:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n190 |     assert \"run_report_path\" in details_obj\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:197:5\n    |\n195 |     validate_payload(result, ERROR_SCHEMA)\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n198 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:198:5\n    |\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n198 |     assert status_value == \"failure\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"token_value\"\n   --> tests\\test_main_json.py:204:19\n    |\n202 |     monkeypatch: pytest.MonkeyPatch,\n203 | ) -> None:\n204 |     token_value = \"pypi-AgENdGVzdC10b2tlbg\"\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n205 |     monkeypatch.delenv(\"TWINE_API_TOKEN\", raising=False)\n206 |     monkeypatch.delenv(\"TWINE_USERNAME\", raising=False)\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:211:16\n    |\n209 |     monkeypatch.setenv(custom_env, token_value)\n210 |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n212 |\n213 |     assert selected == custom_env\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:213:5\n    |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n212 |\n213 |     assert selected == custom_env\n    |     ^^^^^^\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:214:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n    |     ^^^^^^\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:215:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:216:5\n    |\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |     ^^^^^^\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:226:16\n    |\n224 |     monkeypatch.setenv(\"TWINE_PASSWORD\", \"custom-pass\")\n225 |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:228:5\n    |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |     ^^^^^^\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:229:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |     ^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_API_TOKEN\"\n   --> tests\\test_main_json.py:229:45\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |                                             ^^^^^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:230:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:231:5\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_PASSWORD\"\n   --> tests\\test_main_json.py:231:44\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |                                            ^^^^^^^^^^\n    |\n\nPLR0915 Too many statements (53 > 50)\n   --> x_cls_make_pypi_x.py:434:9\n    |\n432 |                 raise FileNotFoundError(message)\n433 |\n434 |     def publish(  # noqa: C901, PLR0912\n    |         ^^^^^^^\n435 |         self,\n436 |         main_file: str,\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:544:5\n    |\n542 |       if details:\n543 |           payload[\"details\"] = {str(key): value for key, value in details.items()}\n544 | /     try:\n545 | |         validate_payload(payload, ERROR_SCHEMA)\n546 | |     except ValidationError:\n547 | |         pass\n    | |____________^\n548 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nS101 Use of `assert` detected\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\nhelp: Break down assertion into multiple parts\n\nSLF001 Private member accessed: `_parent_ctx`\n   --> x_cls_make_pypi_x.py:651:9\n    |\n649 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n650 |     if ctx is not None:\n651 |         namespace._parent_ctx = ctx\n    |         ^^^^^^^^^^^^^^^^^^^^^\n652 |     return namespace\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_pypi_x.py:655:5\n    |\n655 | def main_json(\n    |     ^^^^^^^^^\n656 |     payload: Mapping[str, object], *, ctx: object | None = None\n657 | ) -> dict[str, object]:\n    |\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_pypi_x.py:677:13\n    |\n675 |     for entry_obj in entries_raw:\n676 |         if isinstance(entry_obj, Mapping):\n677 |             manifest_entries.append(_entry_from_json(entry_obj))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n678 |\n679 |     repo_root_obj = parameters.get(\"repo_parent_root\")\n    |\nhelp: Replace for loop with list comprehension\n\nFound 52 errors.\nNo fixes available (8 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:38:07.243343+00:00\nduration: 0.147s\ntool_version: ruff 0.14.1\nstdout:\nC901 `_read_user_env_var` is too complex (11 > 10)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `_read_user_env_var` is too complex (11 > 10)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 202\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:38:05.846707+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_pypi_x",
                "duration_seconds": 0.14328530000057071,
                "ended_at": "2025-10-21T15:38:05.846707+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "publish_flow.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "x_cls_make_pypi_x.py"
                ],
                "repo": "x_make_pypi_x",
                "repo_hash": "95cce2ea3f6fcb344903565503116973fab31d79adbf1b54e7841e68733b3218",
                "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
                "started_at": "2025-10-21T15:38:05.703177+00:00",
                "stderr": "",
                "stdout": "C901 `_read_user_env_var` is too complex (11 > 10)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n46 |     if not name:\n47 |         return None\n   |\n\nPLR0911 Too many return statements (7 > 6)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n46 |     if not name:\n47 |         return None\n   |\n\nPLC0415 `import` should be at the top-level of a file\n  --> publish_flow.py:54:9\n   |\n52 |         return None\n53 |     try:\n54 |         import winreg  # type: ignore[import-not-found]\n   |         ^^^^^^^^^^^^^\n55 |     except ModuleNotFoundError:\n56 |         return None\n   |\n\nC901 `_prime_twine_credentials` is too complex (12 > 10)\n  --> publish_flow.py:83:5\n   |\n83 | def _prime_twine_credentials(token_env: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n84 |     token_sources: list[str] = []\n85 |     if token_env:\n   |\n\nS105 Possible hardcoded password assigned to: \"password_env\"\n   --> publish_flow.py:128:24\n    |\n126 |     if token_value:\n127 |         username_env = \"TWINE_USERNAME\"\n128 |         password_env = \"TWINE_PASSWORD\"\n    |                        ^^^^^^^^^^^^^^^^\n129 |         os.environ[username_env] = \"__token__\"\n130 |         os.environ[password_env] = token_value\n    |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> publish_flow.py:135:5\n    |\n133 |       repository_env = \"TWINE_REPOSITORY_URL\"\n134 |       repo_present = bool(os.environ.get(repository_env, \"\").strip())\n135 | /     if not repo_present and selected_source:\n136 | |         if \"test\" in selected_source.lower():\n    | |_____________________________________________^\n137 |               os.environ[repository_env] = \"https://test.pypi.org/legacy/\"\n138 |               _info(\"Configured Twine repository for TestPyPI uploads.\")\n    |\nhelp: Combine `if` statements using `and`\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_main_json.py:7:29\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_main_json.py:7:38\n  |\n5 | import os\n6 | import sys\n7 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n8 | from datetime import datetime\n9 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> tests\\test_main_json.py:9:21\n   |\n 7 | from collections.abc import Mapping, Sequence\n 8 | from datetime import datetime\n 9 | from pathlib import Path\n   |                     ^^^^\n10 | from types import ModuleType, SimpleNamespace\n11 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:13:8\n   |\n11 | from typing import Any, cast\n12 |\n13 | import pytest\n   |        ^^^^^^\n14 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:30:28\n   |\n28 |     return {\n29 |         \"run_id\": \"0123456789abcdef0123456789abcdef\",\n30 |         \"started_at\": _iso(datetime(2025, 1, 1, 12, 0, 0)),\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |         \"inputs\": {\n32 |             \"entry_count\": 1,\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:67:30\n   |\n65 |         },\n66 |         \"status\": \"completed\",\n67 |         \"completed_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nDTZ001 `datetime.datetime()` called without a `tzinfo` argument\n  --> tests\\test_main_json.py:70:30\n   |\n68 |         \"duration_seconds\": 300.0,\n69 |         \"tool\": \"x_make_pypi_x\",\n70 |         \"generated_at\": _iso(datetime(2025, 1, 1, 12, 5, 0)),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n71 |         \"errors\": [],\n72 |     }\n   |\nhelp: Pass a `datetime.timezone` object to the `tzinfo` parameter\n\nPLR0913 Too many arguments in function definition (6 > 5)\n   --> tests\\test_main_json.py:123:9\n    |\n121 |     calls: dict[str, Any] = {}\n122 |\n123 |     def fake_publish(\n    |         ^^^^^^^^^^^^\n124 |         entries: Sequence[Any],\n125 |         *,\n    |\n\nARG001 Unused function argument: `cloner`\n   --> tests\\test_main_json.py:126:9\n    |\n124 |         entries: Sequence[Any],\n125 |         *,\n126 |         cloner: object,\n    |         ^^^^^^\n127 |         ctx: object | None,\n128 |         repo_parent_root: str,\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_main_json.py:156:5\n    |\n155 |     entries = cast(\"Sequence[Any]\", calls[\"entries\"])\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:158:5\n    |\n156 |     assert entries and entries[0].package == \"demo_pkg\"\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n    |     ^^^^^^\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:159:5\n    |\n157 |     ctx = calls[\"ctx\"]\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n    |     ^^^^^^\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:160:5\n    |\n158 |     assert isinstance(ctx, SimpleNamespace)\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n    |     ^^^^^^\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:161:5\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |     ^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS105 Possible hardcoded password assigned to: \"token_env\"\n   --> tests\\test_main_json.py:161:34\n    |\n159 |     assert getattr(ctx, \"dry_run\", False) is True\n160 |     assert calls[\"repo_parent_root\"] == str(tmp_path)\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n    |                                  ^^^^^^^^^^^^\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:163:5\n    |\n161 |     assert calls[\"token_env\"] == \"CUSTOM_ENV\"\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n    |     ^^^^^^\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:164:5\n    |\n162 |     publisher_factory_obj = calls.get(\"publisher_factory\")\n163 |     assert callable(publisher_factory_obj)\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n    |     ^^^^^^\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:166:5\n    |\n164 |     assert getattr(publisher_factory_obj, \"__name__\", \"\") == \"FakePublisher\"\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n167 |     assert status_value == \"completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:167:5\n    |\n165 |     status_value = result.get(\"status\")\n166 |     assert isinstance(status_value, str)\n167 |     assert status_value == \"completed\"\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*_`\n   --> tests\\test_main_json.py:174:13\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |             ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**__`\n   --> tests\\test_main_json.py:174:24\n    |\n172 | ) -> None:\n173 |     def failing_publish(\n174 |         *_: Any, **__: Any\n    |                        ^^^\n175 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, object]], Path]:\n176 |         report_path = tmp_path / \"reports\" / \"failed.json\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:189:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n    |     ^^^^^^\n190 |     assert \"run_report_path\" in details_obj\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:190:5\n    |\n188 |     details_obj = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n189 |     assert details_obj is not None\n190 |     assert \"run_report_path\" in details_obj\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:197:5\n    |\n195 |     validate_payload(result, ERROR_SCHEMA)\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n    |     ^^^^^^\n198 |     assert status_value == \"failure\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:198:5\n    |\n196 |     status_value = result.get(\"status\")\n197 |     assert isinstance(status_value, str)\n198 |     assert status_value == \"failure\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"token_value\"\n   --> tests\\test_main_json.py:204:19\n    |\n202 |     monkeypatch: pytest.MonkeyPatch,\n203 | ) -> None:\n204 |     token_value = \"pypi-AgENdGVzdC10b2tlbg\"\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n205 |     monkeypatch.delenv(\"TWINE_API_TOKEN\", raising=False)\n206 |     monkeypatch.delenv(\"TWINE_USERNAME\", raising=False)\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:211:16\n    |\n209 |     monkeypatch.setenv(custom_env, token_value)\n210 |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n212 |\n213 |     assert selected == custom_env\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:213:5\n    |\n211 |     selected = publish_flow._prime_twine_credentials(custom_env)\n212 |\n213 |     assert selected == custom_env\n    |     ^^^^^^\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:214:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n    |     ^^^^^^\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:215:5\n    |\n213 |     assert selected == custom_env\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:216:5\n    |\n214 |     assert os.environ[\"TWINE_API_TOKEN\"] == token_value\n215 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n216 |     assert os.environ[\"TWINE_PASSWORD\"] == token_value\n    |     ^^^^^^\n    |\n\nSLF001 Private member accessed: `_prime_twine_credentials`\n   --> tests\\test_main_json.py:226:16\n    |\n224 |     monkeypatch.setenv(\"TWINE_PASSWORD\", \"custom-pass\")\n225 |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:228:5\n    |\n226 |     selected = publish_flow._prime_twine_credentials(\"\")\n227 |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n    |     ^^^^^^\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:229:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |     ^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_API_TOKEN\"\n   --> tests\\test_main_json.py:229:45\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n    |                                             ^^^^^^^^^^\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:230:5\n    |\n228 |     assert selected == \"TWINE_API_TOKEN\"\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n    |     ^^^^^^\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_main_json.py:231:5\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |     ^^^^^^\n    |\n\nS105 Possible hardcoded password assigned to: \"TWINE_PASSWORD\"\n   --> tests\\test_main_json.py:231:44\n    |\n229 |     assert os.environ[\"TWINE_API_TOKEN\"] == \"existing\"\n230 |     assert os.environ[\"TWINE_USERNAME\"] == \"__token__\"\n231 |     assert os.environ[\"TWINE_PASSWORD\"] == \"existing\"\n    |                                            ^^^^^^^^^^\n    |\n\nPLR0915 Too many statements (53 > 50)\n   --> x_cls_make_pypi_x.py:434:9\n    |\n432 |                 raise FileNotFoundError(message)\n433 |\n434 |     def publish(  # noqa: C901, PLR0912\n    |         ^^^^^^^\n435 |         self,\n436 |         main_file: str,\n    |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:544:5\n    |\n542 |       if details:\n543 |           payload[\"details\"] = {str(key): value for key, value in details.items()}\n544 | /     try:\n545 | |         validate_payload(payload, ERROR_SCHEMA)\n546 | |     except ValidationError:\n547 | |         pass\n    | |____________^\n548 |       return payload\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nS101 Use of `assert` detected\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_pypi_x.py:610:5\n    |\n608 |     package = _normalize_string(entry.get(\"package\"))\n609 |     version = _normalize_string(entry.get(\"version\"))\n610 |     assert package and version  # schema validation guarantees presence\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n611 |     return ManifestEntry(\n612 |         package=package,\n    |\nhelp: Break down assertion into multiple parts\n\nSLF001 Private member accessed: `_parent_ctx`\n   --> x_cls_make_pypi_x.py:651:9\n    |\n649 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n650 |     if ctx is not None:\n651 |         namespace._parent_ctx = ctx\n    |         ^^^^^^^^^^^^^^^^^^^^^\n652 |     return namespace\n    |\n\nPLR0911 Too many return statements (7 > 6)\n   --> x_cls_make_pypi_x.py:655:5\n    |\n655 | def main_json(\n    |     ^^^^^^^^^\n656 |     payload: Mapping[str, object], *, ctx: object | None = None\n657 | ) -> dict[str, object]:\n    |\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_pypi_x.py:677:13\n    |\n675 |     for entry_obj in entries_raw:\n676 |         if isinstance(entry_obj, Mapping):\n677 |             manifest_entries.append(_entry_from_json(entry_obj))\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n678 |\n679 |     repo_root_obj = parameters.get(\"repo_parent_root\")\n    |\nhelp: Replace for loop with list comprehension\n\nFound 52 errors.\nNo fixes available (8 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_pypi_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_pypi_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:38:05.703177+00:00\nduration: 0.143s\ntool_version: ruff 0.14.1\nstdout:\nC901 `_read_user_env_var` is too complex (11 > 10)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_pypi_x",
            "repo_path": "C:\\x_runner_x\\x_make_pypi_x",
            "stderr_preview": null,
            "stdout_preview": "C901 `_read_user_env_var` is too complex (11 > 10)\n  --> publish_flow.py:45:5\n   |\n45 | def _read_user_env_var(name: str) -> str | None:\n   |     ^^^^^^^^^^^^^^^^^^\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_pypi_x (exit 1) cwd: C:\\x_runner_x\\x_make_pypi_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:38:30.150604+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 1.2103368999960367,
                "ended_at": "2025-10-21T15:38:30.150604+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "2561750a2dc4a673a3927889f9b1da03f4556f9ae5ff64eb659d2ea3bfc77d8e",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-21T15:38:28.940667+00:00",
                "stderr": "",
                "stdout": "__init__.py:7: error: Expression has type \"Any\"  [misc]\n__init__.py:8: error: Expression has type \"Any\"  [misc]\n__init__.py:9: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:41: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:62: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:100: error: Argument 1 to \"len\" has incompatible type \"object\"; expected \"Sized\"  [arg-type]\nx_cls_make_yahw_x.py:114: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:142: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:145: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:145: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_json_contracts.py:24: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:26: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:28: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:30: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:31: error: Expression has type \"Any\"  [misc]\ntests\\test_json_contracts.py:32: error: Expression has type \"Any\"  [misc]\ntests\\test_yahw.py:50: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_yahw.py:51: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ntests\\test_main_json.py:51: error: Expression type contains \"Any\" (has type \"type[SimpleNamespace]\")  [misc]\ntests\\test_main_json.py:52: error: Expression has type \"Any\"  [misc]\ntests\\test_main_json.py:53: error: Expression has type \"Any\"  [misc]\nFound 21 errors in 5 files (checked 8 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-21T15:38:28.940667+00:00\nduration: 1.210s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\n__init__.py:7: error: Expression has type \"Any\"  [misc]\n__init__.py:8: error: Expression has type \"Any\"  [misc]\n__init__.py:9: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:41: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:62: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "__init__.py:7: error: Expression has type \"Any\"  [misc]\n__init__.py:8: error: Expression has type \"Any\"  [misc]\n__init__.py:9: error: Expression has type \"Any\"  [misc]\nx_cls_make_yahw_x.py:41: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\nx_cls_make_yahw_x.py:62: error: Expression type contains \"Any\" (has type \"type[ValidationError]\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unim\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-21T15:38:28.925339+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 0.13220570000703447,
                "ended_at": "2025-10-21T15:38:28.925339+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "2561750a2dc4a673a3927889f9b1da03f4556f9ae5ff64eb659d2ea3bfc77d8e",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-21T15:38:28.804493+00:00",
                "stderr": "",
                "stdout": "TC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:10:8\n   |\n 8 |     from collections.abc import Mapping\n 9 |\n10 | import pytest\n   |        ^^^^^^\n11 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:45:5\n   |\n43 |     validate_payload(result, OUTPUT_SCHEMA)\n44 |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n   |     ^^^^^^\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:47:5\n   |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |     ^^^^^^\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:48:5\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |     ^^^^^^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_main_json.py:48:47\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |                                               ^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:49:5\n   |\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |     ^^^^^^\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:51:5\n   |\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |     ^^^^^^\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:52:5\n   |\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n   |     ^^^^^^\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:53:5\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> tests\\test_main_json.py:53:31\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |                               ^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_main_json.py:59:32\n   |\n57 |     class FailingRunner(XClsMakeYahwX):\n58 |         def run(self) -> str:\n59 |             raise RuntimeError(\"boom\")\n   |                                ^^^^^^\n60 |\n61 |     monkeypatch.setattr(yahw_module, \"XClsMakeYahwX\", FailingRunner)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:67:5\n   |\n66 |     validate_payload(result, ERROR_SCHEMA)\n67 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:75:5\n   |\n73 |     result = main_json({})\n74 |     validate_payload(result, ERROR_SCHEMA)\n75 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_yahw.py:65:34\n   |\n63 |         spec.loader.exec_module(module)\n64 |\n65 |     assert excinfo.value.code == 2\n   |                                  ^\n66 |     output = capsys.readouterr()\n67 |     assert \"JSON input required\" in output.err\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:39:5\n   |\n37 |       if details:\n38 |           payload[\"details\"] = dict(details)\n39 | /     try:\n40 | |         validate_payload(payload, ERROR_SCHEMA)\n41 | |     except ValidationError:\n42 | |         pass\n   | |____________^\n43 |       return payload\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nSLF001 Private member accessed: `_parent_ctx`\n  --> x_cls_make_yahw_x.py:53:9\n   |\n51 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n52 |     if ctx is not None:\n53 |         namespace._parent_ctx = ctx\n   |         ^^^^^^^^^^^^^^^^^^^^^\n54 |     return namespace\n   |\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n   --> x_cls_make_yahw_x.py:99:56\n    |\n 97 |     metadata: dict[str, object] = {}\n 98 |     if context_mapping:\n 99 |         metadata[\"context_keys\"] = sorted(str(key) for key in context_mapping.keys())\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n100 |         metadata[\"context_entries\"] = len(metadata[\"context_keys\"])\n101 |     if runtime_ctx is not ctx and runtime_ctx is not None and ctx is not None:\n    |\nhelp: Remove `.keys()`\n\nFound 19 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:38:28.804493+00:00\nduration: 0.132s\ntool_version: ruff 0.14.1\nstdout:\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:10:8\n   |\n 8 |     from collections.abc import Mapping\n 9 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "TC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:10:8\n   |\n 8 |     from collections.abc import Mapping\n 9 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at: 202\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.1"
        },
        {
            "captured_at": "2025-10-21T15:38:27.298607+00:00",
            "command": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_yahw_x",
                "duration_seconds": 0.2718514000007417,
                "ended_at": "2025-10-21T15:38:27.298607+00:00",
                "exit": 1,
                "failed_files": [],
                "files_checked": [
                    "__init__.py",
                    "json_contracts.py",
                    "tests/__init__.py",
                    "tests/conftest.py",
                    "tests/test_json_contracts.py",
                    "tests/test_main_json.py",
                    "tests/test_yahw.py",
                    "x_cls_make_yahw_x.py"
                ],
                "repo": "x_make_yahw_x",
                "repo_hash": "2561750a2dc4a673a3927889f9b1da03f4556f9ae5ff64eb659d2ea3bfc77d8e",
                "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
                "started_at": "2025-10-21T15:38:27.030084+00:00",
                "stderr": "",
                "stdout": "TC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:10:8\n   |\n 8 |     from collections.abc import Mapping\n 9 |\n10 | import pytest\n   |        ^^^^^^\n11 | from x_make_common_x.json_contracts import validate_payload\n   |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:45:5\n   |\n43 |     validate_payload(result, OUTPUT_SCHEMA)\n44 |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n   |     ^^^^^^\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:47:5\n   |\n45 |     assert result[\"message\"] == \"Hello integration!\"\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n   |     ^^^^^^\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:48:5\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |     ^^^^^^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_main_json.py:48:47\n   |\n46 |     metadata = cast(\"Mapping[str, object]\", result.get(\"metadata\", {}))\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n   |                                               ^\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:49:5\n   |\n47 |     assert metadata\n48 |     assert metadata.get(\"context_entries\") == 2\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n   |     ^^^^^^\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:51:5\n   |\n49 |     assert metadata.get(\"context_keys\") == [\"attempt\", \"invoked_by\"]\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n   |     ^^^^^^\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:52:5\n   |\n50 |     ctx_obj = captured_context[\"ctx\"]\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n   |     ^^^^^^\n53 |     assert ctx_obj.attempt == 3\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:53:5\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> tests\\test_main_json.py:53:31\n   |\n51 |     assert isinstance(ctx_obj, SimpleNamespace)\n52 |     assert ctx_obj.invoked_by == \"json-test\"\n53 |     assert ctx_obj.attempt == 3\n   |                               ^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_main_json.py:59:32\n   |\n57 |     class FailingRunner(XClsMakeYahwX):\n58 |         def run(self) -> str:\n59 |             raise RuntimeError(\"boom\")\n   |                                ^^^^^^\n60 |\n61 |     monkeypatch.setattr(yahw_module, \"XClsMakeYahwX\", FailingRunner)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:67:5\n   |\n66 |     validate_payload(result, ERROR_SCHEMA)\n67 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_main_json.py:69:5\n   |\n67 |     assert result[\"status\"] == \"failure\"\n68 |     details = cast(\"Mapping[str, object] | None\", result.get(\"details\"))\n69 |     assert details is not None and \"boom\" in str(details.get(\"error\"))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_main_json.py:75:5\n   |\n73 |     result = main_json({})\n74 |     validate_payload(result, ERROR_SCHEMA)\n75 |     assert result[\"status\"] == \"failure\"\n   |     ^^^^^^\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_yahw.py:65:34\n   |\n63 |         spec.loader.exec_module(module)\n64 |\n65 |     assert excinfo.value.code == 2\n   |                                  ^\n66 |     output = capsys.readouterr()\n67 |     assert \"JSON input required\" in output.err\n   |\n\nSIM105 Use `contextlib.suppress(ValidationError)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:39:5\n   |\n37 |       if details:\n38 |           payload[\"details\"] = dict(details)\n39 | /     try:\n40 | |         validate_payload(payload, ERROR_SCHEMA)\n41 | |     except ValidationError:\n42 | |         pass\n   | |____________^\n43 |       return payload\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(ValidationError): ...`\n\nSLF001 Private member accessed: `_parent_ctx`\n  --> x_cls_make_yahw_x.py:53:9\n   |\n51 |     namespace = SimpleNamespace(**{str(key): value for key, value in overrides.items()})\n52 |     if ctx is not None:\n53 |         namespace._parent_ctx = ctx\n   |         ^^^^^^^^^^^^^^^^^^^^^\n54 |     return namespace\n   |\n\nSIM118 Use `key in dict` instead of `key in dict.keys()`\n   --> x_cls_make_yahw_x.py:99:56\n    |\n 97 |     metadata: dict[str, object] = {}\n 98 |     if context_mapping:\n 99 |         metadata[\"context_keys\"] = sorted(str(key) for key in context_mapping.keys())\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n100 |         metadata[\"context_entries\"] = len(metadata[\"context_keys\"])\n101 |     if runtime_ctx is not ctx and runtime_ctx is not None and ctx is not None:\n    |\nhelp: Remove `.keys()`\n\nFound 19 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.1"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_yahw_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_yahw_x\ncommand: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-21T15:38:27.030084+00:00\nduration: 0.272s\ntool_version: ruff 0.14.1\nstdout:\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:10:8\n   |\n 8 |     from collections.abc import Mapping\n 9 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_yahw_x",
            "repo_path": "C:\\x_runner_x\\x_make_yahw_x",
            "stderr_preview": null,
            "stdout_preview": "TC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_main_json.py:10:8\n   |\n 8 |     from collections.abc import Mapping\n 9 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_yahw_x (exit 1) cwd: C:\\x_runner_x\\x_make_yahw_x command: C:\\x_runner_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311 started_at:\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.1"
        }
    ],
    "generated_at": "2025-10-21T15:38:32.622459+00:00",
    "runtime": {
        "environment": {
            "PATH": "C:\\x_runner_x\\.venv\\Lib\\site-packages\\PySide6;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\HP\\HP One Agent;C:\\Users\\eye43\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\eye43\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\eye43\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;c:\\Users\\eye43\\.vscode\\extensions\\ms-python.debugpy-2025.14.1-win32-x64\\bundled\\scripts\\noConfigScripts;c:\\Users\\eye43\\AppData\\Roaming\\Code\\User\\globalStorage\\github.copilot-chat\\debugCommand"
        },
        "platform": "Windows-11-10.0.26100-SP0",
        "python_executable": "C:\\x_runner_x\\.venv\\Scripts\\python.exe",
        "python_version": "3.12.6 (main, Sep  9 2024, 20:50:27) [MSC v.1929 64 bit (AMD64)]",
        "run_completed_at": "2025-10-21T15:38:32.622459+00:00",
        "run_started_at": "2025-10-21T15:33:05.854413+00:00",
        "workspace_root": "C:\\x_runner_x"
    },
    "schema_version": "1.0",
    "summary": {
        "overall_stats": {
            "cache_hits": 2,
            "cache_misses": 73,
            "failed_tools": 37,
            "had_failures": true,
            "total_tools_run": 75
        },
        "repos": {
            "x_0_make_all_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "f584a6469fe06969a6e4186a8ae3cbfc6aedd94b138cd9dfab129cc88aa5c5d4",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_legatus_acta_schedae_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "c0585a05f9de3167af3da6070b2d4504307cde4f31dd2017ab6161f493283a8d",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_legatus_tactica_impetus_x": {
                "cached": 2,
                "failed": 0,
                "repo_hash": "9fe8fa5da6bb7971aae3acb28f1cc21b176c9c0916997a30407b350986bb270b",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_common_x": {
                "cached": 0,
                "failed": 2,
                "repo_hash": "1f2a561bd591309d0ab7b5045d2787658929c2f4282273605b301da9e588de5e",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_clones_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "9a15238add17d0508429feb188a0e1427461f954b2405a3aade34397137b7a0f",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_visitor_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "e31794fc8550fff3e6455be289ca83021722261fd9501da6a560e57283d449bf",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_graphviz_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "d338951a2fc99596445c3093ec1445c58876febdd34ffdebb4648769abc06d19",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_markdown_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "d7a25cbef6413a6601e1d48058d945862e8930bc4b265cce2b3557c683388873",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_mermaid_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "97886c963424a76748a262725ed86aed46ea691de8f593f72faeb63118bb1b35",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_persistent_env_var_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "47cb3ef8d1fd7b3ba8acd1510b8ca1a5e174794daa4b085fdf3c8437a8f6e637",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_pip_updates_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "a49dbe0c3999ce0662c8ae40f65cc60cb00cec91af305d6b64f6b4d9ff1f274f",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_py_mod_sideload_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "0b363279882c4df750efc9483a853cb2f503c8adc12e62bad88edc449da82e7e",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_py_venv_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "51b0ea7b10be7d12f9c9ac026199cc4f2908d90093bf273d1e86ebac84dfe282",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_pypi_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "95cce2ea3f6fcb344903565503116973fab31d79adbf1b54e7841e68733b3218",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_yahw_x": {
                "cached": 0,
                "failed": 3,
                "repo_hash": "2561750a2dc4a673a3927889f9b1da03f4556f9ae5ff64eb659d2ea3bfc77d8e",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            }
        },
        "timestamp": "2025-10-21T15:38:32.622459+00:00",
        "total_repos": 15
    },
    "tool_versions": {
        "black": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.12.6",
        "mypy": "mypy 1.18.2 (compiled: yes)",
        "pyright": "pyright 1.1.406",
        "ruff": "ruff 0.14.1"
    },
    "workspace_root": "C:\\x_runner_x"
}