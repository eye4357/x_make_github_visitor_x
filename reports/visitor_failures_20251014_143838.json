{
    "failures": [
        {
            "captured_at": "2025-10-14T14:36:09.183056+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 3.422685500001535,
                "ended_at": "2025-10-14T14:36:09.183056+00:00",
                "exit": 1,
                "repo": "x_0_make_all_x",
                "repo_hash": "61f8170143d57c28e73d2bc1923a8d7fa01f21f27e67416e92a20db1709279cd",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-14T14:36:05.760366+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_visitor_runtime.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\runtime_benchmark.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\app.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n5 files would be reformatted, 16 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\t2025-10-14 14:35:58.409123+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\t2025-10-14 14:36:07.400792+00:00\n@@ -21,15 +21,19 @@\n \n def _noop_mypy(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n     return None\n \n \n-def _noop_build_context(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n+def _noop_build_context(\n+    self: MakeAllOrchestrator,\n+) -> None:  # pragma: no cover - test helper\n     return None\n \n \n-def _noop_orchestrator_run(self: MakeAllOrchestrator, _ctx: object) -> None:  # pragma: no cover - test helper\n+def _noop_orchestrator_run(\n+    self: MakeAllOrchestrator, _ctx: object\n+) -> None:  # pragma: no cover - test helper\n     return None\n \n \n def _patch_noop_run(monkeypatch: pytest.MonkeyPatch) -> None:\n     monkeypatch.setattr(MakeAllOrchestrator, \"_ensure_mypy_entrypoint\", _noop_mypy)\n@@ -44,11 +48,13 @@\n             if typed_payload.get(\"source\") == \"legatus\":\n                 return typed_payload\n     raise AssertionError(\"Legatus telemetry event not found\")\n \n \n-def test_legatus_config_env_overrides(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n+def test_legatus_config_env_overrides(\n+    monkeypatch: pytest.MonkeyPatch, tmp_path: Path\n+) -> None:\n     monkeypatch.setenv(\"MAKE_WITH_LEGATUS\", \"1\")\n     monkeypatch.setenv(\"MAKE_LEGATUS_PROFILE\", \"prod\")\n     monkeypatch.setenv(\"MAKE_LEGATUS_ROOT\", str(tmp_path))\n     args = _namespace(with_legatus=None, legatus_profile=None)\n \n@@ -57,11 +63,13 @@\n     assert config.enabled is True\n     assert config.profile == \"prod\"\n     assert config.root == tmp_path.resolve()\n \n \n-def test_legatus_config_cli_disables_env(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n+def test_legatus_config_cli_disables_env(\n+    monkeypatch: pytest.MonkeyPatch, tmp_path: Path\n+) -> None:\n     monkeypatch.setenv(\"MAKE_WITH_LEGATUS\", \"1\")\n     monkeypatch.setenv(\"MAKE_LEGATUS_ROOT\", str(tmp_path))\n     args = _namespace(with_legatus=False, legatus_profile=\"qa\")\n \n     config = legatus_config_from_args(args)\n@@ -69,11 +77,13 @@\n     assert config.enabled is False\n     assert config.profile == \"qa\"\n     assert config.root == tmp_path.resolve()\n \n \n-def test_bootstrap_legatus_ready(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n+def test_bootstrap_legatus_ready(\n+    monkeypatch: pytest.MonkeyPatch, tmp_path: Path\n+) -> None:\n     events: list[object] = []\n     monkeypatch.setattr(orchestrator_module, \"emit_event\", events.append)\n \n     _patch_noop_run(monkeypatch)\n \n@@ -92,11 +102,13 @@\n     assert events, \"expected telemetry event for legatus bootstrap\"\n     payload_map = _latest_legatus_event(events)\n     assert payload_map[\"status\"] == \"succeeded\"\n \n \n-def test_bootstrap_legatus_missing_reports_error(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n+def test_bootstrap_legatus_missing_reports_error(\n+    monkeypatch: pytest.MonkeyPatch, tmp_path: Path\n+) -> None:\n     events: list[object] = []\n     monkeypatch.setattr(orchestrator_module, \"emit_event\", events.append)\n \n     _patch_noop_run(monkeypatch)\n \n--- C:\\x_runner_x\\x_0_make_all_x\\tests\\test_visitor_runtime.py\t2025-10-14 14:35:54.108037+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\tests\\test_visitor_runtime.py\t2025-10-14 14:36:07.416571+00:00\n@@ -13,23 +13,36 @@\n @pytest.fixture(autouse=True)\n def _silence_events(monkeypatch: pytest.MonkeyPatch) -> None:\n     monkeypatch.setattr(orchestrator_module, \"emit_event\", lambda _event: None)\n \n \n-def test_run_visitor_uses_subprocess_runtime(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n+def test_run_visitor_uses_subprocess_runtime(\n+    monkeypatch: pytest.MonkeyPatch, tmp_path: Path\n+) -> None:\n     command_invocations: list[list[str]] = []\n     env_snapshots: list[dict[str, str]] = []\n     report_path = tmp_path / \"reports\" / \"visitor.json\"\n     report_path.parent.mkdir(parents=True, exist_ok=True)\n     report_path.write_text(\"{}\", encoding=\"utf-8\")\n \n-    def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n+    def _fake_detect_clones_root(\n+        self: MakeAllOrchestrator, fallback: str | None = None\n+    ) -> str:\n         return str(tmp_path)\n \n-    monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n+    monkeypatch.setattr(\n+        MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root\n+    )\n \n-    def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n+    def _fake_run(\n+        command: list[str],\n+        *,\n+        capture_output: bool,\n+        text: bool,\n+        env: dict[str, str],\n+        check: bool,\n+    ):\n         command_invocations.append(command)\n         env_snapshots.append(env)\n         payload = {\"status\": \"ok\", \"report_path\": str(report_path)}\n \n         class _Result:\n@@ -61,15 +74,21 @@\n     pythonpath = env_snapshot.get(\"PYTHONPATH\", \"\")\n     expected_workspace_root = Path(orchestrator_module.__file__).resolve().parent.parent\n     assert pythonpath.split(os.pathsep)[0] == str(expected_workspace_root)\n \n \n-def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n-    def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n+def test_run_visitor_runtime_failure_sets_status(\n+    monkeypatch: pytest.MonkeyPatch, tmp_path: Path\n+) -> None:\n+    def _fake_detect_clones_root(\n+        self: MakeAllOrchestrator, fallback: str | None = None\n+    ) -> str:\n         return str(tmp_path)\n \n-    monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n+    monkeypatch.setattr(\n+        MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root\n+    )\n \n     payload: dict[str, object] = {\n         \"status\": \"error\",\n         \"message\": \"runtime boom\",\n         \"report_path\": None,\n--- C:\\x_runner_x\\x_0_make_all_x\\runtime_benchmark.py\t2025-10-14 14:35:58.414101+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\runtime_benchmark.py\t2025-10-14 14:36:07.444309+00:00\n@@ -97,14 +97,15 @@\n \n     results: list[BenchmarkResult] = []\n     for label, command in commands:\n         for round_index in range(rounds):\n             orchestrator = MakeAllOrchestrator(\n-                runtime_config=\n-                VisitorRuntimeConfig(command=command, disable_cache=disable_cache)\n-                if command\n-                else None\n+                runtime_config=(\n+                    VisitorRuntimeConfig(command=command, disable_cache=disable_cache)\n+                    if command\n+                    else None\n+                )\n             )\n             start = perf_counter()\n             failure: str | None = None\n             status: str\n             artifact: str | None\n--- C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\app.py\t2025-10-14 14:35:58.420528+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\app.py\t2025-10-14 14:36:08.311201+00:00\n@@ -351,13 +351,11 @@\n         if at_top:\n             self._status_table.insertRow(0)\n             self._row_lookup = {\n                 key: index + 1 for key, index in self._row_lookup.items()\n             }\n-            self._row_keys = {\n-                index + 1: key for index, key in self._row_keys.items()\n-            }\n+            self._row_keys = {index + 1: key for index, key in self._row_keys.items()}\n             row = 0\n         else:\n             row = self._status_table.rowCount()\n             self._status_table.insertRow(row)\n         repo_item = QtWidgets.QTableWidgetItem(repo)\n@@ -646,22 +644,30 @@\n         if disable_cache:\n             history_bits.append(\"cache off\")\n         history_entry = f\"{timestamp} \u00e2\u20ac\u201d {' | '.join(history_bits)}\"\n         self._runtime_history.append(history_entry)\n         if len(self._runtime_history) > self._runtime_history_limit:\n-            self._runtime_history = self._runtime_history[-self._runtime_history_limit :]\n+            self._runtime_history = self._runtime_history[\n+                -self._runtime_history_limit :\n+            ]\n         self._update_summary_label()\n \n     def _maybe_update_legatus_context(self, event: Mapping[str, object]) -> None:\n         if event.get(\"source\") != \"legatus\" or event.get(\"phase\") != \"bootstrap\":\n             return\n         details_obj = event.get(\"details\")\n-        details = cast(\"Mapping[str, object]\", details_obj) if isinstance(details_obj, Mapping) else {}\n+        details = (\n+            cast(\"Mapping[str, object]\", details_obj)\n+            if isinstance(details_obj, Mapping)\n+            else {}\n+        )\n         status_val = event.get(\"status\")\n         status = status_val if isinstance(status_val, str) else \"unknown\"\n         profile_val = details.get(\"profile\")\n-        profile = profile_val if isinstance(profile_val, str) and profile_val else \"default\"\n+        profile = (\n+            profile_val if isinstance(profile_val, str) and profile_val else \"default\"\n+        )\n         enabled_val = details.get(\"enabled\")\n         enabled = bool(enabled_val) if isinstance(enabled_val, bool) else False\n         root_val = details.get(\"project_root\")\n         root = root_val if isinstance(root_val, str) else \"\"\n         message_val = event.get(\"message\")\n@@ -786,11 +792,11 @@\n                 f\"Tracking {repo_count} repositories / {file_count} Python files \"\n                 f\"rooted at {self._workspace_root}\"\n             )\n         lines = [label, self._runtime_status_line, self._legatus_status_line]\n         if self._runtime_history:\n-            recent = \" \\u00B7 \".join(self._runtime_history[-3:])\n+            recent = \" \\u00b7 \".join(self._runtime_history[-3:])\n             lines.append(f\"Recent runtimes: {recent}\")\n         self._summary_label.setText(\"\\n\".join(lines))\n         self._commit_button.setEnabled(repo_count > 0)\n \n     # --- Commit workflow -----------------------------------------------\n--- C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-14 14:35:58.420528+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-14 14:36:08.558441+00:00\n@@ -916,11 +916,12 @@\n                 candidate = json.loads(line)\n             except json.JSONDecodeError:\n                 continue\n             if isinstance(candidate, Mapping) and \"status\" in candidate:\n                 payload = {\n-                    str(key): value for key, value in cast(\"Mapping[object, object]\", candidate).items()\n+                    str(key): value\n+                    for key, value in cast(\"Mapping[object, object]\", candidate).items()\n                 }\n                 break\n \n         if result.returncode != 0:\n             message = None\n@@ -1041,11 +1042,13 @@\n                 ctx=ctx,\n                 repo_parent_root=repo_root,\n                 publisher_factory=x_cls_make_pypi_x,\n             )\n             published_versions_result = result[0]\n-            published_count = sum(1 for version in published_versions_result.values() if version)\n+            published_count = sum(\n+                1 for version in published_versions_result.values() if version\n+            )\n             if published_count:\n                 message = f\"Published {published_count} package(s)\"\n             elif entry_count:\n                 message = \"Publish stage completed without uploads\"\n         except Exception as exc:\n@@ -1056,11 +1059,15 @@\n         finally:\n             duration_ms = int((perf_counter() - start) * 1000)\n             detail_payload: dict[str, JSONValue] = {\n                 \"entry_count\": entry_count,\n                 \"published_packages\": len(\n-                    [version for version in published_versions_result.values() if version]\n+                    [\n+                        version\n+                        for version in published_versions_result.values()\n+                        if version\n+                    ]\n                 ),\n             }\n             if error_kind:\n                 detail_payload[\"error_kind\"] = error_kind\n             self._emit_stage_event(\n@@ -1177,29 +1184,23 @@\n     )\n     parser.add_argument(\n         \"--visitor-runtime-disable-cache\",\n         dest=\"visitor_runtime_disable_cache\",\n         action=\"store_true\",\n-        help=(\n-            \"Disable the visitor cache when running via the subprocess runtime.\"\n-        ),\n+        help=(\"Disable the visitor cache when running via the subprocess runtime.\"),\n     )\n     parser.add_argument(\n         \"--with-legatus\",\n         dest=\"with_legatus\",\n         action=\"store_true\",\n-        help=(\n-            f\"Enable {LEGATUS_DISPLAY_NAME} bootstrap before the run.\"\n-        ),\n+        help=(f\"Enable {LEGATUS_DISPLAY_NAME} bootstrap before the run.\"),\n     )\n     parser.add_argument(\n         \"--no-legatus\",\n         dest=\"with_legatus\",\n         action=\"store_false\",\n-        help=(\n-            f\"Disable {LEGATUS_DISPLAY_NAME} even if MAKE_WITH_LEGATUS is set.\"\n-        ),\n+        help=(f\"Disable {LEGATUS_DISPLAY_NAME} even if MAKE_WITH_LEGATUS is set.\"),\n     )\n     parser.add_argument(\n         \"--legatus-profile\",\n         dest=\"legatus_profile\",\n         help=(f\"Select {LEGATUS_DISPLAY_NAME} profile (e.g., dev, prod).\"),\n@@ -1207,11 +1208,15 @@\n     return parser.parse_args(list(argv))\n \n \n def _runtime_config_from_args(args: argparse.Namespace) -> _VisitorRuntimeConfig | None:\n     cli_command = getattr(args, \"visitor_runtime\", None)\n-    command_source = cli_command if cli_command is not None else os.environ.get(\"MAKE_VISITOR_RUNTIME\")\n+    command_source = (\n+        cli_command\n+        if cli_command is not None\n+        else os.environ.get(\"MAKE_VISITOR_RUNTIME\")\n+    )\n     command = _split_command(command_source)\n     if not command:\n         return None\n \n     disable_cache = bool(getattr(args, \"visitor_runtime_disable_cache\", False))\n@@ -1231,15 +1236,11 @@\n         enabled = _env_truthy(\"MAKE_WITH_LEGATUS\")\n     else:\n         enabled = bool(cli_flag)\n \n     cli_profile = getattr(args, \"legatus_profile\", None)\n-    profile = (\n-        cli_profile\n-        or os.environ.get(\"MAKE_LEGATUS_PROFILE\")\n-        or base.profile\n-    )\n+    profile = cli_profile or os.environ.get(\"MAKE_LEGATUS_PROFILE\") or base.profile\n     return LegatusConfig(root=root_path, enabled=enabled, profile=profile)\n \n \n def _env_flag(name: str) -> bool:\n     raw = os.environ.get(name)\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7"
            },
            "exit": "exit 1",
            "message": "black failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-14T14:36:05.760366+00:00\nduration: 3.423s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7\nstdout:\n--- C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\t2025-10-14 14:35:58.409123+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\t2025-10-14 14:36:07.400792+00:00\n@@ -21,15 +21,19 @@\n \n def _noop_mypy(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_visitor_runtime.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\runtime_benchmark.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\app.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\u2026",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\tests\\test_visitor_runtime.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\runtime_benchmark.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\interface\\gui\\app.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\u2026",
            "stdout_preview": "--- C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\t2025-10-14 14:35:58.409123+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\tests\\test_legatus_integration.py\t2025-10-14 14:36:07.400792+00:00\n@@ -21,15 +21,19 @@\n \n def _noop_mypy(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-14T14:36:05.7603\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7"
        },
        {
            "captured_at": "2025-10-14T14:36:24.034960+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 2.675031599937938,
                "ended_at": "2025-10-14T14:36:24.034960+00:00",
                "exit": 1,
                "repo": "x_0_make_all_x",
                "repo_hash": "61f8170143d57c28e73d2bc1923a8d7fa01f21f27e67416e92a20db1709279cd",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-14T14:36:21.359930+00:00",
                "stderr": "",
                "stdout": "x_cls_make_all_x.py:632: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:635: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:636: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:636: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:645: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:916: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:919: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1211: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1212: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1212: error: Expression type contains \"Any\" (has type \"Any | str | None\")  [misc]\nx_cls_make_all_x.py:1212: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1213: error: Expression type contains \"Any\" (has type \"Any | str | None\")  [misc]\nx_cls_make_all_x.py:1217: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:1229: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1230: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1233: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1235: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1237: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1237: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:1241: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nruntime_benchmark.py:154: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nruntime_benchmark.py:185: error: Expression has type \"Any\"  [misc]\nruntime_benchmark.py:186: error: Expression has type \"Any\"  [misc]\nruntime_benchmark.py:187: error: Expression has type \"Any\"  [misc]\nruntime_benchmark.py:188: error: Expression has type \"Any\"  [misc]\nruntime_benchmark.py:190: error: Expression has type \"Any\"  [misc]\nruntime_benchmark.py:191: error: Expression has type \"Any\"  [misc]\ntests\\test_visitor_runtime.py:15: error: Expression type contains \"Any\" (has type \"Callable[[Any], None]\")  [misc]\ntests\\test_visitor_runtime.py:30: error: Function is missing a return type annotation  [no-untyped-def]\ntests\\test_visitor_runtime.py:42: error: Module \"x_0_make_all_x.x_cls_make_all_x\" does not explicitly export attribute \"subprocess\"  [attr-defined]\ntests\\test_visitor_runtime.py:42: error: Expression type contains \"Any\" (has type \"Callable[[list[str], NamedArg(bool, 'capture_output'), NamedArg(bool, 'text'), NamedArg(dict[str, str], 'env'), NamedArg(bool, 'check')], Any]\")  [misc]\ntests\\test_visitor_runtime.py:86: error: Module \"x_0_make_all_x.x_cls_make_all_x\" does not explicitly export attribute \"subprocess\"  [attr-defined]\nFound 32 errors in 3 files (checked 21 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-14T14:36:21.359930+00:00\nduration: 2.675s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nx_cls_make_all_x.py:632: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:635: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:636: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:636: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:645: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "x_cls_make_all_x.py:632: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:635: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:636: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:636: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:645: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --d\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-14T14:36:12.749809+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 0.33574529993347824,
                "ended_at": "2025-10-14T14:36:12.749809+00:00",
                "exit": 1,
                "repo": "x_0_make_all_x",
                "repo_hash": "61f8170143d57c28e73d2bc1923a8d7fa01f21f27e67416e92a20db1709279cd",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-14T14:36:12.414065+00:00",
                "stderr": "",
                "stdout": "F404 `from __future__` imports must occur at the beginning of the file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n 8 | from __future__ import annotations\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 |\n10 | from x_0_make_all_x.legatus_bridge import (\n   |\n\nE402 Module level import not at top of file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n 8 | from __future__ import annotations\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 |\n10 | from x_0_make_all_x.legatus_bridge import (\n   |\n\nE402 Module level import not at top of file\n  --> dynamo_bridge.py:10:1\n   |\n 8 |   from __future__ import annotations\n 9 |\n10 | / from x_0_make_all_x.legatus_bridge import (\n11 | |     LegatusBootstrapResult,\n12 | |     LegatusConfig,\n13 | |     bootstrap,\n14 | | )\n   | |_^\n15 |\n16 |   __all__ = [\n   |\n\nPLR0915 Too many statements (75 > 50)\n   --> interface\\gui\\app.py:122:9\n    |\n120 |     telemetry_event = QtCore.Signal(object)\n121 |\n122 |     def __init__(\n    |         ^^^^^^^^\n123 |         self,\n124 |         workspace_root: Path | str,\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\gui\\app.py:248:37\n    |\n246 |         self._update_summary_label()\n247 |\n248 |     def _handle_order_toggled(self, checked: bool) -> None:\n    |                                     ^^^^^^^\n249 |         self._newest_first = not checked\n250 |         if self._newest_first:\n    |\n\nC901 `_log_activity_from_event` is too complex (22 > 10)\n   --> interface\\gui\\app.py:511:9\n    |\n509 |         return tuple(failures)\n510 |\n511 |     def _log_activity_from_event(self, event: Mapping[str, object]) -> None:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n512 |         source_value = event.get(\"source\")\n513 |         if not isinstance(source_value, str):\n    |\n\nPLR0912 Too many branches (23 > 12)\n   --> interface\\gui\\app.py:511:9\n    |\n509 |         return tuple(failures)\n510 |\n511 |     def _log_activity_from_event(self, event: Mapping[str, object]) -> None:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n512 |         source_value = event.get(\"source\")\n513 |         if not isinstance(source_value, str):\n    |\n\nPLR0915 Too many statements (69 > 50)\n   --> interface\\gui\\app.py:511:9\n    |\n509 |         return tuple(failures)\n510 |\n511 |     def _log_activity_from_event(self, event: Mapping[str, object]) -> None:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n512 |         source_value = event.get(\"source\")\n513 |         if not isinstance(source_value, str):\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\app.py:651:89\n    |\n649 |         self._runtime_history.append(history_entry)\n650 |         if len(self._runtime_history) > self._runtime_history_limit:\n651 |             self._runtime_history = self._runtime_history[-self._runtime_history_limit :]\n    |                                                                                         ^\n652 |         self._update_summary_label()\n    |\n\nE501 Line too long (103 > 88)\n   --> interface\\gui\\app.py:658:89\n    |\n656 |             return\n657 |         details_obj = event.get(\"details\")\n658 |         details = cast(\"Mapping[str, object]\", details_obj) if isinstance(details_obj, Mapping) else {}\n    |                                                                                         ^^^^^^^^^^^^^^^\n659 |         status_val = event.get(\"status\")\n660 |         status = status_val if isinstance(status_val, str) else \"unknown\"\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\gui\\app.py:662:89\n    |\n660 |         status = status_val if isinstance(status_val, str) else \"unknown\"\n661 |         profile_val = details.get(\"profile\")\n662 |         profile = profile_val if isinstance(profile_val, str) and profile_val else \"default\"\n    |                                                                                         ^^^^\n663 |         enabled_val = details.get(\"enabled\")\n664 |         enabled = bool(enabled_val) if isinstance(enabled_val, bool) else False\n    |\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> legatus_bridge.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Mapping\n  |                             ^^^^^^^\n4 | from dataclasses import dataclass\n5 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> runtime_benchmark.py:6:29\n  |\n4 | import json\n5 | import statistics\n6 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n7 | from dataclasses import dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> runtime_benchmark.py:6:39\n  |\n4 | import json\n5 | import statistics\n6 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n7 | from dataclasses import dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nRET504 Unnecessary assignment to `summary` before `return` statement\n   --> runtime_benchmark.py:142:12\n    |\n140 |         results=results,\n141 |     )\n142 |     return summary\n    |            ^^^^^^^\n    |\nhelp: Remove unnecessary assignment\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_legatus_integration.py:5:21\n  |\n3 | import argparse\n4 | from collections.abc import Mapping, Sequence\n5 | from pathlib import Path\n  |                     ^^^^\n6 | from typing import cast\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_legatus_integration.py:8:8\n   |\n 6 | from typing import cast\n 7 |\n 8 | import pytest\n   |        ^^^^^^\n 9 |\n10 | import x_0_make_all_x.x_cls_make_all_x as orchestrator_module\n   |\nhelp: Move into type-checking block\n\nARG001 Unused function argument: `self`\n  --> tests\\test_legatus_integration.py:22:16\n   |\n22 | def _noop_mypy(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n   |                ^^^^\n23 |     return None\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_legatus_integration.py:26:25\n   |\n26 | def _noop_build_context(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n   |                         ^^^^\n27 |     return None\n   |\n\nE501 Line too long (93 > 88)\n  --> tests\\test_legatus_integration.py:26:89\n   |\n26 | def _noop_build_context(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n   |                                                                                         ^^^^^\n27 |     return None\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_legatus_integration.py:30:28\n   |\n30 | def _noop_orchestrator_run(self: MakeAllOrchestrator, _ctx: object) -> None:  # pragma: no cover - test helper\n   |                            ^^^^\n31 |     return None\n   |\n\nE501 Line too long (110 > 88)\n  --> tests\\test_legatus_integration.py:30:89\n   |\n30 | def _noop_orchestrator_run(self: MakeAllOrchestrator, _ctx: object) -> None:  # pragma: no cover - test helper\n   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^\n31 |     return None\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_legatus_integration.py:46:11\n   |\n44 |             if typed_payload.get(\"source\") == \"legatus\":\n45 |                 return typed_payload\n46 |     raise AssertionError(\"Legatus telemetry event not found\")\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_legatus_integration.py:46:26\n   |\n44 |             if typed_payload.get(\"source\") == \"legatus\":\n45 |                 return typed_payload\n46 |     raise AssertionError(\"Legatus telemetry event not found\")\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (95 > 88)\n  --> tests\\test_legatus_integration.py:49:89\n   |\n49 | def test_legatus_config_env_overrides(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^\n50 |     monkeypatch.setenv(\"MAKE_WITH_LEGATUS\", \"1\")\n51 |     monkeypatch.setenv(\"MAKE_LEGATUS_PROFILE\", \"prod\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:57:5\n   |\n55 |     config = legatus_config_from_args(args)\n56 |\n57 |     assert config.enabled is True\n   |     ^^^^^^\n58 |     assert config.profile == \"prod\"\n59 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:58:5\n   |\n57 |     assert config.enabled is True\n58 |     assert config.profile == \"prod\"\n   |     ^^^^^^\n59 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:59:5\n   |\n57 |     assert config.enabled is True\n58 |     assert config.profile == \"prod\"\n59 |     assert config.root == tmp_path.resolve()\n   |     ^^^^^^\n   |\n\nE501 Line too long (98 > 88)\n  --> tests\\test_legatus_integration.py:62:89\n   |\n62 | def test_legatus_config_cli_disables_env(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^\n63 |     monkeypatch.setenv(\"MAKE_WITH_LEGATUS\", \"1\")\n64 |     monkeypatch.setenv(\"MAKE_LEGATUS_ROOT\", str(tmp_path))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:69:5\n   |\n67 |     config = legatus_config_from_args(args)\n68 |\n69 |     assert config.enabled is False\n   |     ^^^^^^\n70 |     assert config.profile == \"qa\"\n71 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:70:5\n   |\n69 |     assert config.enabled is False\n70 |     assert config.profile == \"qa\"\n   |     ^^^^^^\n71 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:71:5\n   |\n69 |     assert config.enabled is False\n70 |     assert config.profile == \"qa\"\n71 |     assert config.root == tmp_path.resolve()\n   |     ^^^^^^\n   |\n\nE501 Line too long (90 > 88)\n  --> tests\\test_legatus_integration.py:74:89\n   |\n74 | def test_bootstrap_legatus_ready(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^\n75 |     events: list[object] = []\n76 |     monkeypatch.setattr(orchestrator_module, \"emit_event\", events.append)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:90:5\n   |\n89 |     result = orchestrator.legatus_bootstrap\n90 |     assert result is not None\n   |     ^^^^^^\n91 |     assert result.status == \"ready\"\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:91:5\n   |\n89 |     result = orchestrator.legatus_bootstrap\n90 |     assert result is not None\n91 |     assert result.status == \"ready\"\n   |     ^^^^^^\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n93 |     payload_map = _latest_legatus_event(events)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:92:5\n   |\n90 |     assert result is not None\n91 |     assert result.status == \"ready\"\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n   |     ^^^^^^\n93 |     payload_map = _latest_legatus_event(events)\n94 |     assert payload_map[\"status\"] == \"succeeded\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:94:5\n   |\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n93 |     payload_map = _latest_legatus_event(events)\n94 |     assert payload_map[\"status\"] == \"succeeded\"\n   |     ^^^^^^\n   |\n\nE501 Line too long (106 > 88)\n  --> tests\\test_legatus_integration.py:97:89\n   |\n97 | def test_bootstrap_legatus_missing_reports_error(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^^^^^^^^^\n98 |     events: list[object] = []\n99 |     monkeypatch.setattr(orchestrator_module, \"emit_event\", events.append)\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:110:5\n    |\n109 |     result = orchestrator.legatus_bootstrap\n110 |     assert result is not None\n    |     ^^^^^^\n111 |     assert result.status in {\"error\", \"failed\"}\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:111:5\n    |\n109 |     result = orchestrator.legatus_bootstrap\n110 |     assert result is not None\n111 |     assert result.status in {\"error\", \"failed\"}\n    |     ^^^^^^\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n113 |     payload_map = _latest_legatus_event(events)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:112:5\n    |\n110 |     assert result is not None\n111 |     assert result.status in {\"error\", \"failed\"}\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n    |     ^^^^^^\n113 |     payload_map = _latest_legatus_event(events)\n114 |     assert payload_map[\"status\"] == \"failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:114:5\n    |\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n113 |     payload_map = _latest_legatus_event(events)\n114 |     assert payload_map[\"status\"] == \"failed\"\n    |     ^^^^^^\n115 |     details_obj = payload_map.get(\"details\")\n116 |     assert isinstance(details_obj, Mapping)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:116:5\n    |\n114 |     assert payload_map[\"status\"] == \"failed\"\n115 |     details_obj = payload_map.get(\"details\")\n116 |     assert isinstance(details_obj, Mapping)\n    |     ^^^^^^\n117 |     details_map = cast(\"Mapping[str, object]\", details_obj)\n118 |     project_root_value = details_map.get(\"project_root\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:119:5\n    |\n117 |     details_map = cast(\"Mapping[str, object]\", details_obj)\n118 |     project_root_value = details_map.get(\"project_root\")\n119 |     assert isinstance(project_root_value, str)\n    |     ^^^^^^\n120 |     assert project_root_value.endswith(\"nope\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:120:5\n    |\n118 |     project_root_value = details_map.get(\"project_root\")\n119 |     assert isinstance(project_root_value, str)\n120 |     assert project_root_value.endswith(\"nope\")\n    |     ^^^^^^\n    |\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_orchestrator_visitor.py:3:21\n  |\n1 | from __future__ import annotations\n2 |\n3 | from pathlib import Path\n  |                     ^^^^\n4 |\n5 | import pytest\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n --> tests\\test_orchestrator_visitor.py:5:8\n  |\n3 | from pathlib import Path\n4 |\n5 | import pytest\n  |        ^^^^^^\n6 | from x_make_common_x.telemetry import TelemetryEvent\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_make_common_x.telemetry.TelemetryEvent` into a type-checking block\n --> tests\\test_orchestrator_visitor.py:6:39\n  |\n5 | import pytest\n6 | from x_make_common_x.telemetry import TelemetryEvent\n  |                                       ^^^^^^^^^^^^^^\n7 |\n8 | import x_0_make_all_x.x_cls_make_all_x as orchestrator_module\n  |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_orchestrator_visitor.py:20:15\n   |\n19 |     def _raise_assertion(**_kwargs: object) -> None:\n20 |         raise AssertionError(\"toolchain failures detected\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n21 |\n22 |     monkeypatch.setattr(orchestrator_module, \"run_inspection\", _raise_assertion)\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_orchestrator_visitor.py:20:30\n   |\n19 |     def _raise_assertion(**_kwargs: object) -> None:\n20 |         raise AssertionError(\"toolchain failures detected\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n21 |\n22 |     monkeypatch.setattr(orchestrator_module, \"run_inspection\", _raise_assertion)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:26:5\n   |\n24 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n25 |\n26 |     assert orchestrator.visitor_status == \"failed\"\n   |     ^^^^^^\n27 |     assert orchestrator.visitor_report_path is None\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:27:5\n   |\n26 |     assert orchestrator.visitor_status == \"failed\"\n27 |     assert orchestrator.visitor_report_path is None\n   |     ^^^^^^\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:28:5\n   |\n26 |     assert orchestrator.visitor_status == \"failed\"\n27 |     assert orchestrator.visitor_report_path is None\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n   |     ^^^^^^\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n30 |     assert snapshot.mode == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:30:5\n   |\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n30 |     assert snapshot.mode == \"in-process\"\n   |     ^^^^^^\n31 |     assert snapshot.command == ()\n32 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:31:5\n   |\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n30 |     assert snapshot.mode == \"in-process\"\n31 |     assert snapshot.command == ()\n   |     ^^^^^^\n32 |     assert snapshot.disable_cache is False\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:32:5\n   |\n30 |     assert snapshot.mode == \"in-process\"\n31 |     assert snapshot.command == ()\n32 |     assert snapshot.disable_cache is False\n   |     ^^^^^^\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:33:5\n   |\n31 |     assert snapshot.command == ()\n32 |     assert snapshot.disable_cache is False\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |     ^^^^^^\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n35 |     details = captured_events[-1][\"details\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:34:5\n   |\n32 |     assert snapshot.disable_cache is False\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n   |     ^^^^^^\n35 |     details = captured_events[-1][\"details\"]\n36 |     assert isinstance(details, dict)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:36:5\n   |\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n35 |     details = captured_events[-1][\"details\"]\n36 |     assert isinstance(details, dict)\n   |     ^^^^^^\n37 |     assert details.get(\"continued\") is True\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:37:5\n   |\n35 |     details = captured_events[-1][\"details\"]\n36 |     assert isinstance(details, dict)\n37 |     assert details.get(\"continued\") is True\n   |     ^^^^^^\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n39 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:38:5\n   |\n36 |     assert isinstance(details, dict)\n37 |     assert details.get(\"continued\") is True\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |     ^^^^^^\n39 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:39:5\n   |\n37 |     assert details.get(\"continued\") is True\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n39 |     assert details.get(\"runtime_disable_cache\") is False\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:58:5\n   |\n56 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n57 |\n58 |     assert orchestrator.visitor_status == \"succeeded\"\n   |     ^^^^^^\n59 |     assert orchestrator.visitor_report_path == report_path\n60 |     assert orchestrator.visitor_failure_message is None\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:59:5\n   |\n58 |     assert orchestrator.visitor_status == \"succeeded\"\n59 |     assert orchestrator.visitor_report_path == report_path\n   |     ^^^^^^\n60 |     assert orchestrator.visitor_failure_message is None\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:60:5\n   |\n58 |     assert orchestrator.visitor_status == \"succeeded\"\n59 |     assert orchestrator.visitor_report_path == report_path\n60 |     assert orchestrator.visitor_failure_message is None\n   |     ^^^^^^\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n62 |     assert snapshot.mode == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:62:5\n   |\n60 |     assert orchestrator.visitor_failure_message is None\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n62 |     assert snapshot.mode == \"in-process\"\n   |     ^^^^^^\n63 |     assert snapshot.command == ()\n64 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:63:5\n   |\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n62 |     assert snapshot.mode == \"in-process\"\n63 |     assert snapshot.command == ()\n   |     ^^^^^^\n64 |     assert snapshot.disable_cache is False\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:64:5\n   |\n62 |     assert snapshot.mode == \"in-process\"\n63 |     assert snapshot.command == ()\n64 |     assert snapshot.disable_cache is False\n   |     ^^^^^^\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:65:5\n   |\n63 |     assert snapshot.command == ()\n64 |     assert snapshot.disable_cache is False\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |     ^^^^^^\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n67 |     details = captured_events[-1][\"details\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:66:5\n   |\n64 |     assert snapshot.disable_cache is False\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n   |     ^^^^^^\n67 |     details = captured_events[-1][\"details\"]\n68 |     assert isinstance(details, dict)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:68:5\n   |\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n67 |     details = captured_events[-1][\"details\"]\n68 |     assert isinstance(details, dict)\n   |     ^^^^^^\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:69:5\n   |\n67 |     details = captured_events[-1][\"details\"]\n68 |     assert isinstance(details, dict)\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n   |     ^^^^^^\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n71 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:70:5\n   |\n68 |     assert isinstance(details, dict)\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |     ^^^^^^\n71 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:71:5\n   |\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n71 |     assert details.get(\"runtime_disable_cache\") is False\n   |     ^^^^^^\n   |\n\nE501 Line too long (102 > 88)\n  --> tests\\test_visitor_runtime.py:18:89\n   |\n18 | def test_run_visitor_uses_subprocess_runtime(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^^^^^\n19 |     command_invocations: list[list[str]] = []\n20 |     env_snapshots: list[dict[str, str]] = []\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_visitor_runtime.py:25:34\n   |\n23 |     report_path.write_text(\"{}\", encoding=\"utf-8\")\n24 |\n25 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                  ^^^^\n26 |         return str(tmp_path)\n   |\n\nARG001 Unused function argument: `fallback`\n  --> tests\\test_visitor_runtime.py:25:61\n   |\n23 |     report_path.write_text(\"{}\", encoding=\"utf-8\")\n24 |\n25 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                             ^^^^^^^^\n26 |         return str(tmp_path)\n   |\n\nE501 Line too long (96 > 88)\n  --> tests\\test_visitor_runtime.py:25:89\n   |\n23 |     report_path.write_text(\"{}\", encoding=\"utf-8\")\n24 |\n25 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                                                         ^^^^^^^^\n26 |         return str(tmp_path)\n   |\n\nE501 Line too long (92 > 88)\n  --> tests\\test_visitor_runtime.py:28:89\n   |\n26 |         return str(tmp_path)\n27 |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n   |                                                                                         ^^^^\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |\n\nANN202 Missing return type annotation for private function `_fake_run`\n  --> tests\\test_visitor_runtime.py:30:9\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |         ^^^^^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\nhelp: Add return type annotation\n\nARG001 Unused function argument: `capture_output`\n  --> tests\\test_visitor_runtime.py:30:42\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                          ^^^^^^^^^^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nARG001 Unused function argument: `text`\n  --> tests\\test_visitor_runtime.py:30:64\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                                                ^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nE501 Line too long (109 > 88)\n  --> tests\\test_visitor_runtime.py:30:89\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nARG001 Unused function argument: `check`\n  --> tests\\test_visitor_runtime.py:30:97\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                                                                                 ^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:49:5\n   |\n47 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n48 |\n49 |     assert orchestrator.visitor_status == \"succeeded\"\n   |     ^^^^^^\n50 |     assert orchestrator.visitor_report_path == report_path\n51 |     assert orchestrator.visitor_failure_message is None\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:50:5\n   |\n49 |     assert orchestrator.visitor_status == \"succeeded\"\n50 |     assert orchestrator.visitor_report_path == report_path\n   |     ^^^^^^\n51 |     assert orchestrator.visitor_failure_message is None\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:51:5\n   |\n49 |     assert orchestrator.visitor_status == \"succeeded\"\n50 |     assert orchestrator.visitor_report_path == report_path\n51 |     assert orchestrator.visitor_failure_message is None\n   |     ^^^^^^\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n53 |     assert snapshot.mode == \"subprocess\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:53:5\n   |\n51 |     assert orchestrator.visitor_failure_message is None\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n53 |     assert snapshot.mode == \"subprocess\"\n   |     ^^^^^^\n54 |     assert snapshot.command == (\"pypy3\",)\n55 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:54:5\n   |\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n53 |     assert snapshot.mode == \"subprocess\"\n54 |     assert snapshot.command == (\"pypy3\",)\n   |     ^^^^^^\n55 |     assert snapshot.disable_cache is False\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:55:5\n   |\n53 |     assert snapshot.mode == \"subprocess\"\n54 |     assert snapshot.command == (\"pypy3\",)\n55 |     assert snapshot.disable_cache is False\n   |     ^^^^^^\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:56:5\n   |\n54 |     assert snapshot.command == (\"pypy3\",)\n55 |     assert snapshot.disable_cache is False\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n   |     ^^^^^^\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n58 |     first_command = command_invocations[0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:57:5\n   |\n55 |     assert snapshot.disable_cache is False\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n   |     ^^^^^^\n58 |     first_command = command_invocations[0]\n59 |     assert \"x_make_github_visitor_x.run_external\" in first_command\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:59:5\n   |\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n58 |     first_command = command_invocations[0]\n59 |     assert \"x_make_github_visitor_x.run_external\" in first_command\n   |     ^^^^^^\n60 |     env_snapshot = env_snapshots[0]\n61 |     pythonpath = env_snapshot.get(\"PYTHONPATH\", \"\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:63:5\n   |\n61 |     pythonpath = env_snapshot.get(\"PYTHONPATH\", \"\")\n62 |     expected_workspace_root = Path(orchestrator_module.__file__).resolve().parent.parent\n63 |     assert pythonpath.split(os.pathsep)[0] == str(expected_workspace_root)\n   |     ^^^^^^\n   |\n\nE501 Line too long (106 > 88)\n  --> tests\\test_visitor_runtime.py:66:89\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^^^^^^^^^\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n68 |         return str(tmp_path)\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_visitor_runtime.py:67:34\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                  ^^^^\n68 |         return str(tmp_path)\n   |\n\nARG001 Unused function argument: `fallback`\n  --> tests\\test_visitor_runtime.py:67:61\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                             ^^^^^^^^\n68 |         return str(tmp_path)\n   |\n\nE501 Line too long (96 > 88)\n  --> tests\\test_visitor_runtime.py:67:89\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                                                         ^^^^^^^^\n68 |         return str(tmp_path)\n   |\n\nE501 Line too long (92 > 88)\n  --> tests\\test_visitor_runtime.py:70:89\n   |\n68 |         return str(tmp_path)\n69 |\n70 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n   |                                                                                         ^^^^\n71 |\n72 |     payload: dict[str, object] = {\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:93:5\n   |\n91 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n92 |\n93 |     assert orchestrator.visitor_status == \"failed\"\n   |     ^^^^^^\n94 |     assert orchestrator.visitor_report_path is None\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:94:5\n   |\n93 |     assert orchestrator.visitor_status == \"failed\"\n94 |     assert orchestrator.visitor_report_path is None\n   |     ^^^^^^\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n96 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:95:5\n   |\n93 |     assert orchestrator.visitor_status == \"failed\"\n94 |     assert orchestrator.visitor_report_path is None\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n   |     ^^^^^^\n96 |     snapshot = orchestrator.visitor_runtime_snapshot\n97 |     assert snapshot.mode == \"subprocess\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:97:5\n   |\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n96 |     snapshot = orchestrator.visitor_runtime_snapshot\n97 |     assert snapshot.mode == \"subprocess\"\n   |     ^^^^^^\n98 |     assert snapshot.command == (\"pypy3\",)\n99 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_visitor_runtime.py:98:5\n    |\n 96 |     snapshot = orchestrator.visitor_runtime_snapshot\n 97 |     assert snapshot.mode == \"subprocess\"\n 98 |     assert snapshot.command == (\"pypy3\",)\n    |     ^^^^^^\n 99 |     assert snapshot.disable_cache is False\n100 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_visitor_runtime.py:99:5\n    |\n 97 |     assert snapshot.mode == \"subprocess\"\n 98 |     assert snapshot.command == (\"pypy3\",)\n 99 |     assert snapshot.disable_cache is False\n    |     ^^^^^^\n100 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_visitor_runtime.py:100:5\n    |\n 98 |     assert snapshot.command == (\"pypy3\",)\n 99 |     assert snapshot.disable_cache is False\n100 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:61:1\n   |\n59 |       LegatusConfig,\n60 |   )\n61 | / from x_0_make_all_x.legatus_bridge import (\n62 | |     bootstrap as bootstrap_legatus,\n63 | | )\n   | |_^\n64 |   from x_0_make_all_x.manifest import (  # noqa: E402\n65 |       ManifestEntry,\n   |\n\nPLR0913 Too many arguments in function definition (7 > 5)\n   --> x_cls_make_all_x.py:495:9\n    |\n493 |         )\n494 |\n495 |     def _emit_stage_event(\n    |         ^^^^^^^^^^^^^^^^^\n496 |         self,\n497 |         *,\n    |\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_all_x.py:547:13\n    |\n545 |         }\n546 |         for key, value in result.details.items():\n547 |             detail_payload[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n548 |\n549 |         status_map = {\n    |\nhelp: Replace for loop with dict comprehension\n\nC901 `clone_repos` is too complex (16 > 10)\n   --> x_cls_make_all_x.py:606:9\n    |\n605 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n606 |     def clone_repos(self, ctx: OrchestratorContext | None) -> object:\n    |         ^^^^^^^^^^^\n607 |         options = self._cloner_options(ctx)\n608 |         common_details: dict[str, JSONValue] = {\n    |\n\nPLR0912 Too many branches (19 > 12)\n   --> x_cls_make_all_x.py:606:9\n    |\n605 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n606 |     def clone_repos(self, ctx: OrchestratorContext | None) -> object:\n    |         ^^^^^^^^^^^\n607 |         options = self._cloner_options(ctx)\n608 |         common_details: dict[str, JSONValue] = {\n    |\n\nPLR0915 Too many statements (76 > 50)\n   --> x_cls_make_all_x.py:606:9\n    |\n605 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n606 |     def clone_repos(self, ctx: OrchestratorContext | None) -> object:\n    |         ^^^^^^^^^^^\n607 |         options = self._cloner_options(ctx)\n608 |         common_details: dict[str, JSONValue] = {\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:742:19\n    |\n741 |         if cloner is None:\n742 |             raise RuntimeError(\"Cloner could not be instantiated\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n743 |         return cloner\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:742:32\n    |\n741 |         if cloner is None:\n742 |             raise RuntimeError(\"Cloner could not be instantiated\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n743 |         return cloner\n    |\nhelp: Assign to variable; remove string literal\n\nC901 `run_visitor` is too complex (11 > 10)\n   --> x_cls_make_all_x.py:746:9\n    |\n745 |     # Step 4: run visitor (delegated to x_make_github_visitor_x)\n746 |     def run_visitor(self, cloner: object, ctx: OrchestratorContext | None) -> None:\n    |         ^^^^^^^^^^^\n747 |         start = perf_counter()\n748 |         self._visitor_status = \"running\"\n    |\n\nPLR0915 Too many statements (61 > 50)\n   --> x_cls_make_all_x.py:746:9\n    |\n745 |     # Step 4: run visitor (delegated to x_make_github_visitor_x)\n746 |     def run_visitor(self, cloner: object, ctx: OrchestratorContext | None) -> None:\n    |         ^^^^^^^^^^^\n747 |         start = perf_counter()\n748 |         self._visitor_status = \"running\"\n    |\n\nC901 `_run_visitor_subprocess` is too complex (17 > 10)\n   --> x_cls_make_all_x.py:872:9\n    |\n870 |         return self._legatus_bootstrap\n871 |\n872 |     def _run_visitor_subprocess(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n873 |         self,\n874 |         *,\n    |\n\nPLR0912 Too many branches (17 > 12)\n   --> x_cls_make_all_x.py:872:9\n    |\n870 |         return self._legatus_bootstrap\n871 |\n872 |     def _run_visitor_subprocess(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n873 |         self,\n874 |         *,\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:879:19\n    |\n877 |     ) -> Path | None:\n878 |         if not runtime_command:\n879 |             raise AssertionError(\"Visitor runtime command is empty\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n880 |\n881 |         root_str = self.detect_clones_root()\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:879:34\n    |\n877 |     ) -> Path | None:\n878 |         if not runtime_command:\n879 |             raise AssertionError(\"Visitor runtime command is empty\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n880 |\n881 |         root_str = self.detect_clones_root()\n    |\nhelp: Assign to variable; remove string literal\n\nRUF005 Consider iterable unpacking instead of concatenation\n   --> x_cls_make_all_x.py:883:30\n    |\n881 |           root_str = self.detect_clones_root()\n882 |           root_path = Path(root_str).resolve()\n883 |           command: list[str] = list(runtime_command) + [\n    |  ______________________________^\n884 | |             \"-m\",\n885 | |             \"x_make_github_visitor_x.run_external\",\n886 | |             \"--root\",\n887 | |             str(root_path),\n888 | |         ]\n    | |_________^\n889 |           if disable_cache:\n890 |               command.append(\"--disable-cache\")\n    |\nhelp: Replace with iterable unpacking\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_all_x.py:904:18\n    |\n902 |             env[\"PYTHONPATH\"] = workspace_root\n903 |\n904 |         result = subprocess.run(\n    |                  ^^^^^^^^^^^^^^\n905 |             command,\n906 |             capture_output=True,\n    |\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_all_x.py:921:89\n    |\n919 |             if isinstance(candidate, Mapping) and \"status\" in candidate:\n920 |                 payload = {\n921 |                     str(key): value for key, value in cast(\"Mapping[object, object]\", candidate).items()\n    |                                                                                         ^^^^^^^^^^^^^^^^\n922 |                 }\n923 |                 break\n    |\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:1046:89\n     |\n1044 |             )\n1045 |             published_versions_result = result[0]\n1046 |             published_count = sum(1 for version in published_versions_result.values() if version)\n     |                                                                                         ^^^^^^^^^\n1047 |             if published_count:\n1048 |                 message = f\"Published {published_count} package(s)\"\n     |\n\nE501 Line too long (90 > 88)\n    --> x_cls_make_all_x.py:1061:89\n     |\n1059 |                 \"entry_count\": entry_count,\n1060 |                 \"published_packages\": len(\n1061 |                     [version for version in published_versions_result.values() if version]\n     |                                                                                         ^^\n1062 |                 ),\n1063 |             }\n     |\n\nS101 Use of `assert` detected\n    --> x_cls_make_all_x.py:1075:9\n     |\n1073 |                 details=detail_payload,\n1074 |             )\n1075 |         assert result is not None\n     |         ^^^^^^\n1076 |         return result\n     |\n\nE501 Line too long (103 > 88)\n    --> x_cls_make_all_x.py:1212:89\n     |\n1210 | def _runtime_config_from_args(args: argparse.Namespace) -> _VisitorRuntimeConfig | None:\n1211 |     cli_command = getattr(args, \"visitor_runtime\", None)\n1212 |     command_source = cli_command if cli_command is not None else os.environ.get(\"MAKE_VISITOR_RUNTIME\")\n     |                                                                                         ^^^^^^^^^^^^^^^\n1213 |     command = _split_command(command_source)\n1214 |     if not command:\n     |\n\nSIM108 Use ternary operator `enabled = _env_truthy(\"MAKE_WITH_LEGATUS\") if cli_flag is None else bool(cli_flag)` instead of `if`-`else`-block\n    --> x_cls_make_all_x.py:1230:5\n     |\n1229 |       cli_flag = getattr(args, \"with_legatus\", None)\n1230 | /     if cli_flag is None:\n1231 | |         enabled = _env_truthy(\"MAKE_WITH_LEGATUS\")\n1232 | |     else:\n1233 | |         enabled = bool(cli_flag)\n     | |________________________________^\n1234 |\n1235 |       cli_profile = getattr(args, \"legatus_profile\", None)\n     |\nhelp: Replace `if`-`else`-block with `enabled = _env_truthy(\"MAKE_WITH_LEGATUS\") if cli_flag is None else bool(cli_flag)`\n\nFound 128 errors.\nNo fixes available (15 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.0"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-14T14:36:12.414065+00:00\nduration: 0.336s\ntool_version: ruff 0.14.0\nstdout:\nF404 `from __future__` imports must occur at the beginning of the file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "F404 `from __future__` imports must occur at the beginning of the file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.0"
        },
        {
            "captured_at": "2025-10-14T14:35:58.492921+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_0_make_all_x",
                "duration_seconds": 0.6673963000066578,
                "ended_at": "2025-10-14T14:35:58.492921+00:00",
                "exit": 1,
                "repo": "x_0_make_all_x",
                "repo_hash": "61f8170143d57c28e73d2bc1923a8d7fa01f21f27e67416e92a20db1709279cd",
                "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
                "started_at": "2025-10-14T14:35:57.825522+00:00",
                "stderr": "",
                "stdout": "F404 `from __future__` imports must occur at the beginning of the file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n 8 | from __future__ import annotations\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 |\n10 | from x_0_make_all_x.legatus_bridge import (\n   |\n\nE402 Module level import not at top of file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n 8 | from __future__ import annotations\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 |\n10 | from x_0_make_all_x.legatus_bridge import (\n   |\n\nE402 Module level import not at top of file\n  --> dynamo_bridge.py:10:1\n   |\n 8 |   from __future__ import annotations\n 9 |\n10 | / from x_0_make_all_x.legatus_bridge import (\n11 | |     LegatusBootstrapResult,\n12 | |     LegatusConfig,\n13 | |     bootstrap,\n14 | | )\n   | |_^\n15 |\n16 |   __all__ = [\n   |\n\nPLR0915 Too many statements (75 > 50)\n   --> interface\\gui\\app.py:122:9\n    |\n120 |     telemetry_event = QtCore.Signal(object)\n121 |\n122 |     def __init__(\n    |         ^^^^^^^^\n123 |         self,\n124 |         workspace_root: Path | str,\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\gui\\app.py:248:37\n    |\n246 |         self._update_summary_label()\n247 |\n248 |     def _handle_order_toggled(self, checked: bool) -> None:\n    |                                     ^^^^^^^\n249 |         self._newest_first = not checked\n250 |         if self._newest_first:\n    |\n\nC901 `_log_activity_from_event` is too complex (22 > 10)\n   --> interface\\gui\\app.py:511:9\n    |\n509 |         return tuple(failures)\n510 |\n511 |     def _log_activity_from_event(self, event: Mapping[str, object]) -> None:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n512 |         source_value = event.get(\"source\")\n513 |         if not isinstance(source_value, str):\n    |\n\nPLR0912 Too many branches (23 > 12)\n   --> interface\\gui\\app.py:511:9\n    |\n509 |         return tuple(failures)\n510 |\n511 |     def _log_activity_from_event(self, event: Mapping[str, object]) -> None:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n512 |         source_value = event.get(\"source\")\n513 |         if not isinstance(source_value, str):\n    |\n\nPLR0915 Too many statements (69 > 50)\n   --> interface\\gui\\app.py:511:9\n    |\n509 |         return tuple(failures)\n510 |\n511 |     def _log_activity_from_event(self, event: Mapping[str, object]) -> None:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n512 |         source_value = event.get(\"source\")\n513 |         if not isinstance(source_value, str):\n    |\n\nE501 Line too long (89 > 88)\n   --> interface\\gui\\app.py:651:89\n    |\n649 |         self._runtime_history.append(history_entry)\n650 |         if len(self._runtime_history) > self._runtime_history_limit:\n651 |             self._runtime_history = self._runtime_history[-self._runtime_history_limit :]\n    |                                                                                         ^\n652 |         self._update_summary_label()\n    |\n\nE501 Line too long (103 > 88)\n   --> interface\\gui\\app.py:658:89\n    |\n656 |             return\n657 |         details_obj = event.get(\"details\")\n658 |         details = cast(\"Mapping[str, object]\", details_obj) if isinstance(details_obj, Mapping) else {}\n    |                                                                                         ^^^^^^^^^^^^^^^\n659 |         status_val = event.get(\"status\")\n660 |         status = status_val if isinstance(status_val, str) else \"unknown\"\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\gui\\app.py:662:89\n    |\n660 |         status = status_val if isinstance(status_val, str) else \"unknown\"\n661 |         profile_val = details.get(\"profile\")\n662 |         profile = profile_val if isinstance(profile_val, str) and profile_val else \"default\"\n    |                                                                                         ^^^^\n663 |         enabled_val = details.get(\"enabled\")\n664 |         enabled = bool(enabled_val) if isinstance(enabled_val, bool) else False\n    |\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> legatus_bridge.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Mapping\n  |                             ^^^^^^^\n4 | from dataclasses import dataclass\n5 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> runtime_benchmark.py:6:29\n  |\n4 | import json\n5 | import statistics\n6 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n7 | from dataclasses import dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> runtime_benchmark.py:6:39\n  |\n4 | import json\n5 | import statistics\n6 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n7 | from dataclasses import dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nRET504 Unnecessary assignment to `summary` before `return` statement\n   --> runtime_benchmark.py:142:12\n    |\n140 |         results=results,\n141 |     )\n142 |     return summary\n    |            ^^^^^^^\n    |\nhelp: Remove unnecessary assignment\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_legatus_integration.py:5:21\n  |\n3 | import argparse\n4 | from collections.abc import Mapping, Sequence\n5 | from pathlib import Path\n  |                     ^^^^\n6 | from typing import cast\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n  --> tests\\test_legatus_integration.py:8:8\n   |\n 6 | from typing import cast\n 7 |\n 8 | import pytest\n   |        ^^^^^^\n 9 |\n10 | import x_0_make_all_x.x_cls_make_all_x as orchestrator_module\n   |\nhelp: Move into type-checking block\n\nARG001 Unused function argument: `self`\n  --> tests\\test_legatus_integration.py:22:16\n   |\n22 | def _noop_mypy(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n   |                ^^^^\n23 |     return None\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_legatus_integration.py:26:25\n   |\n26 | def _noop_build_context(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n   |                         ^^^^\n27 |     return None\n   |\n\nE501 Line too long (93 > 88)\n  --> tests\\test_legatus_integration.py:26:89\n   |\n26 | def _noop_build_context(self: MakeAllOrchestrator) -> None:  # pragma: no cover - test helper\n   |                                                                                         ^^^^^\n27 |     return None\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_legatus_integration.py:30:28\n   |\n30 | def _noop_orchestrator_run(self: MakeAllOrchestrator, _ctx: object) -> None:  # pragma: no cover - test helper\n   |                            ^^^^\n31 |     return None\n   |\n\nE501 Line too long (110 > 88)\n  --> tests\\test_legatus_integration.py:30:89\n   |\n30 | def _noop_orchestrator_run(self: MakeAllOrchestrator, _ctx: object) -> None:  # pragma: no cover - test helper\n   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^\n31 |     return None\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_legatus_integration.py:46:11\n   |\n44 |             if typed_payload.get(\"source\") == \"legatus\":\n45 |                 return typed_payload\n46 |     raise AssertionError(\"Legatus telemetry event not found\")\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_legatus_integration.py:46:26\n   |\n44 |             if typed_payload.get(\"source\") == \"legatus\":\n45 |                 return typed_payload\n46 |     raise AssertionError(\"Legatus telemetry event not found\")\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (95 > 88)\n  --> tests\\test_legatus_integration.py:49:89\n   |\n49 | def test_legatus_config_env_overrides(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^\n50 |     monkeypatch.setenv(\"MAKE_WITH_LEGATUS\", \"1\")\n51 |     monkeypatch.setenv(\"MAKE_LEGATUS_PROFILE\", \"prod\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:57:5\n   |\n55 |     config = legatus_config_from_args(args)\n56 |\n57 |     assert config.enabled is True\n   |     ^^^^^^\n58 |     assert config.profile == \"prod\"\n59 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:58:5\n   |\n57 |     assert config.enabled is True\n58 |     assert config.profile == \"prod\"\n   |     ^^^^^^\n59 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:59:5\n   |\n57 |     assert config.enabled is True\n58 |     assert config.profile == \"prod\"\n59 |     assert config.root == tmp_path.resolve()\n   |     ^^^^^^\n   |\n\nE501 Line too long (98 > 88)\n  --> tests\\test_legatus_integration.py:62:89\n   |\n62 | def test_legatus_config_cli_disables_env(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^\n63 |     monkeypatch.setenv(\"MAKE_WITH_LEGATUS\", \"1\")\n64 |     monkeypatch.setenv(\"MAKE_LEGATUS_ROOT\", str(tmp_path))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:69:5\n   |\n67 |     config = legatus_config_from_args(args)\n68 |\n69 |     assert config.enabled is False\n   |     ^^^^^^\n70 |     assert config.profile == \"qa\"\n71 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:70:5\n   |\n69 |     assert config.enabled is False\n70 |     assert config.profile == \"qa\"\n   |     ^^^^^^\n71 |     assert config.root == tmp_path.resolve()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:71:5\n   |\n69 |     assert config.enabled is False\n70 |     assert config.profile == \"qa\"\n71 |     assert config.root == tmp_path.resolve()\n   |     ^^^^^^\n   |\n\nE501 Line too long (90 > 88)\n  --> tests\\test_legatus_integration.py:74:89\n   |\n74 | def test_bootstrap_legatus_ready(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^\n75 |     events: list[object] = []\n76 |     monkeypatch.setattr(orchestrator_module, \"emit_event\", events.append)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:90:5\n   |\n89 |     result = orchestrator.legatus_bootstrap\n90 |     assert result is not None\n   |     ^^^^^^\n91 |     assert result.status == \"ready\"\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:91:5\n   |\n89 |     result = orchestrator.legatus_bootstrap\n90 |     assert result is not None\n91 |     assert result.status == \"ready\"\n   |     ^^^^^^\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n93 |     payload_map = _latest_legatus_event(events)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:92:5\n   |\n90 |     assert result is not None\n91 |     assert result.status == \"ready\"\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n   |     ^^^^^^\n93 |     payload_map = _latest_legatus_event(events)\n94 |     assert payload_map[\"status\"] == \"succeeded\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_legatus_integration.py:94:5\n   |\n92 |     assert events, \"expected telemetry event for legatus bootstrap\"\n93 |     payload_map = _latest_legatus_event(events)\n94 |     assert payload_map[\"status\"] == \"succeeded\"\n   |     ^^^^^^\n   |\n\nE501 Line too long (106 > 88)\n  --> tests\\test_legatus_integration.py:97:89\n   |\n97 | def test_bootstrap_legatus_missing_reports_error(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^^^^^^^^^\n98 |     events: list[object] = []\n99 |     monkeypatch.setattr(orchestrator_module, \"emit_event\", events.append)\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:110:5\n    |\n109 |     result = orchestrator.legatus_bootstrap\n110 |     assert result is not None\n    |     ^^^^^^\n111 |     assert result.status in {\"error\", \"failed\"}\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:111:5\n    |\n109 |     result = orchestrator.legatus_bootstrap\n110 |     assert result is not None\n111 |     assert result.status in {\"error\", \"failed\"}\n    |     ^^^^^^\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n113 |     payload_map = _latest_legatus_event(events)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:112:5\n    |\n110 |     assert result is not None\n111 |     assert result.status in {\"error\", \"failed\"}\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n    |     ^^^^^^\n113 |     payload_map = _latest_legatus_event(events)\n114 |     assert payload_map[\"status\"] == \"failed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:114:5\n    |\n112 |     assert events, \"expected telemetry event for missing legatus bootstrap\"\n113 |     payload_map = _latest_legatus_event(events)\n114 |     assert payload_map[\"status\"] == \"failed\"\n    |     ^^^^^^\n115 |     details_obj = payload_map.get(\"details\")\n116 |     assert isinstance(details_obj, Mapping)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:116:5\n    |\n114 |     assert payload_map[\"status\"] == \"failed\"\n115 |     details_obj = payload_map.get(\"details\")\n116 |     assert isinstance(details_obj, Mapping)\n    |     ^^^^^^\n117 |     details_map = cast(\"Mapping[str, object]\", details_obj)\n118 |     project_root_value = details_map.get(\"project_root\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:119:5\n    |\n117 |     details_map = cast(\"Mapping[str, object]\", details_obj)\n118 |     project_root_value = details_map.get(\"project_root\")\n119 |     assert isinstance(project_root_value, str)\n    |     ^^^^^^\n120 |     assert project_root_value.endswith(\"nope\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_legatus_integration.py:120:5\n    |\n118 |     project_root_value = details_map.get(\"project_root\")\n119 |     assert isinstance(project_root_value, str)\n120 |     assert project_root_value.endswith(\"nope\")\n    |     ^^^^^^\n    |\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_orchestrator_visitor.py:3:21\n  |\n1 | from __future__ import annotations\n2 |\n3 | from pathlib import Path\n  |                     ^^^^\n4 |\n5 | import pytest\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n --> tests\\test_orchestrator_visitor.py:5:8\n  |\n3 | from pathlib import Path\n4 |\n5 | import pytest\n  |        ^^^^^^\n6 | from x_make_common_x.telemetry import TelemetryEvent\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_make_common_x.telemetry.TelemetryEvent` into a type-checking block\n --> tests\\test_orchestrator_visitor.py:6:39\n  |\n5 | import pytest\n6 | from x_make_common_x.telemetry import TelemetryEvent\n  |                                       ^^^^^^^^^^^^^^\n7 |\n8 | import x_0_make_all_x.x_cls_make_all_x as orchestrator_module\n  |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> tests\\test_orchestrator_visitor.py:20:15\n   |\n19 |     def _raise_assertion(**_kwargs: object) -> None:\n20 |         raise AssertionError(\"toolchain failures detected\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n21 |\n22 |     monkeypatch.setattr(orchestrator_module, \"run_inspection\", _raise_assertion)\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> tests\\test_orchestrator_visitor.py:20:30\n   |\n19 |     def _raise_assertion(**_kwargs: object) -> None:\n20 |         raise AssertionError(\"toolchain failures detected\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n21 |\n22 |     monkeypatch.setattr(orchestrator_module, \"run_inspection\", _raise_assertion)\n   |\nhelp: Assign to variable; remove string literal\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:26:5\n   |\n24 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n25 |\n26 |     assert orchestrator.visitor_status == \"failed\"\n   |     ^^^^^^\n27 |     assert orchestrator.visitor_report_path is None\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:27:5\n   |\n26 |     assert orchestrator.visitor_status == \"failed\"\n27 |     assert orchestrator.visitor_report_path is None\n   |     ^^^^^^\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:28:5\n   |\n26 |     assert orchestrator.visitor_status == \"failed\"\n27 |     assert orchestrator.visitor_report_path is None\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n   |     ^^^^^^\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n30 |     assert snapshot.mode == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:30:5\n   |\n28 |     assert orchestrator.visitor_failure_message == \"toolchain failures detected\"\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n30 |     assert snapshot.mode == \"in-process\"\n   |     ^^^^^^\n31 |     assert snapshot.command == ()\n32 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:31:5\n   |\n29 |     snapshot = orchestrator.visitor_runtime_snapshot\n30 |     assert snapshot.mode == \"in-process\"\n31 |     assert snapshot.command == ()\n   |     ^^^^^^\n32 |     assert snapshot.disable_cache is False\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:32:5\n   |\n30 |     assert snapshot.mode == \"in-process\"\n31 |     assert snapshot.command == ()\n32 |     assert snapshot.disable_cache is False\n   |     ^^^^^^\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:33:5\n   |\n31 |     assert snapshot.command == ()\n32 |     assert snapshot.disable_cache is False\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |     ^^^^^^\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n35 |     details = captured_events[-1][\"details\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:34:5\n   |\n32 |     assert snapshot.disable_cache is False\n33 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n   |     ^^^^^^\n35 |     details = captured_events[-1][\"details\"]\n36 |     assert isinstance(details, dict)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:36:5\n   |\n34 |     assert captured_events[-1][\"status\"] == \"failed\"\n35 |     details = captured_events[-1][\"details\"]\n36 |     assert isinstance(details, dict)\n   |     ^^^^^^\n37 |     assert details.get(\"continued\") is True\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:37:5\n   |\n35 |     details = captured_events[-1][\"details\"]\n36 |     assert isinstance(details, dict)\n37 |     assert details.get(\"continued\") is True\n   |     ^^^^^^\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n39 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:38:5\n   |\n36 |     assert isinstance(details, dict)\n37 |     assert details.get(\"continued\") is True\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |     ^^^^^^\n39 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:39:5\n   |\n37 |     assert details.get(\"continued\") is True\n38 |     assert details.get(\"runtime_mode\") == \"in-process\"\n39 |     assert details.get(\"runtime_disable_cache\") is False\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:58:5\n   |\n56 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n57 |\n58 |     assert orchestrator.visitor_status == \"succeeded\"\n   |     ^^^^^^\n59 |     assert orchestrator.visitor_report_path == report_path\n60 |     assert orchestrator.visitor_failure_message is None\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:59:5\n   |\n58 |     assert orchestrator.visitor_status == \"succeeded\"\n59 |     assert orchestrator.visitor_report_path == report_path\n   |     ^^^^^^\n60 |     assert orchestrator.visitor_failure_message is None\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:60:5\n   |\n58 |     assert orchestrator.visitor_status == \"succeeded\"\n59 |     assert orchestrator.visitor_report_path == report_path\n60 |     assert orchestrator.visitor_failure_message is None\n   |     ^^^^^^\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n62 |     assert snapshot.mode == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:62:5\n   |\n60 |     assert orchestrator.visitor_failure_message is None\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n62 |     assert snapshot.mode == \"in-process\"\n   |     ^^^^^^\n63 |     assert snapshot.command == ()\n64 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:63:5\n   |\n61 |     snapshot = orchestrator.visitor_runtime_snapshot\n62 |     assert snapshot.mode == \"in-process\"\n63 |     assert snapshot.command == ()\n   |     ^^^^^^\n64 |     assert snapshot.disable_cache is False\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:64:5\n   |\n62 |     assert snapshot.mode == \"in-process\"\n63 |     assert snapshot.command == ()\n64 |     assert snapshot.disable_cache is False\n   |     ^^^^^^\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:65:5\n   |\n63 |     assert snapshot.command == ()\n64 |     assert snapshot.disable_cache is False\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n   |     ^^^^^^\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n67 |     details = captured_events[-1][\"details\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:66:5\n   |\n64 |     assert snapshot.disable_cache is False\n65 |     assert orchestrator.visitor_runtime_summary == \"in-process (default interpreter)\"\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n   |     ^^^^^^\n67 |     details = captured_events[-1][\"details\"]\n68 |     assert isinstance(details, dict)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:68:5\n   |\n66 |     assert captured_events[-1][\"status\"] == \"succeeded\"\n67 |     details = captured_events[-1][\"details\"]\n68 |     assert isinstance(details, dict)\n   |     ^^^^^^\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:69:5\n   |\n67 |     details = captured_events[-1][\"details\"]\n68 |     assert isinstance(details, dict)\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n   |     ^^^^^^\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n71 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:70:5\n   |\n68 |     assert isinstance(details, dict)\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n   |     ^^^^^^\n71 |     assert details.get(\"runtime_disable_cache\") is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_orchestrator_visitor.py:71:5\n   |\n69 |     assert details.get(\"artifact_path\") == str(report_path)\n70 |     assert details.get(\"runtime_mode\") == \"in-process\"\n71 |     assert details.get(\"runtime_disable_cache\") is False\n   |     ^^^^^^\n   |\n\nE501 Line too long (102 > 88)\n  --> tests\\test_visitor_runtime.py:18:89\n   |\n18 | def test_run_visitor_uses_subprocess_runtime(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^^^^^\n19 |     command_invocations: list[list[str]] = []\n20 |     env_snapshots: list[dict[str, str]] = []\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_visitor_runtime.py:25:34\n   |\n23 |     report_path.write_text(\"{}\", encoding=\"utf-8\")\n24 |\n25 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                  ^^^^\n26 |         return str(tmp_path)\n   |\n\nARG001 Unused function argument: `fallback`\n  --> tests\\test_visitor_runtime.py:25:61\n   |\n23 |     report_path.write_text(\"{}\", encoding=\"utf-8\")\n24 |\n25 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                             ^^^^^^^^\n26 |         return str(tmp_path)\n   |\n\nE501 Line too long (96 > 88)\n  --> tests\\test_visitor_runtime.py:25:89\n   |\n23 |     report_path.write_text(\"{}\", encoding=\"utf-8\")\n24 |\n25 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                                                         ^^^^^^^^\n26 |         return str(tmp_path)\n   |\n\nE501 Line too long (92 > 88)\n  --> tests\\test_visitor_runtime.py:28:89\n   |\n26 |         return str(tmp_path)\n27 |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n   |                                                                                         ^^^^\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |\n\nANN202 Missing return type annotation for private function `_fake_run`\n  --> tests\\test_visitor_runtime.py:30:9\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |         ^^^^^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\nhelp: Add return type annotation\n\nARG001 Unused function argument: `capture_output`\n  --> tests\\test_visitor_runtime.py:30:42\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                          ^^^^^^^^^^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nARG001 Unused function argument: `text`\n  --> tests\\test_visitor_runtime.py:30:64\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                                                ^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nE501 Line too long (109 > 88)\n  --> tests\\test_visitor_runtime.py:30:89\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nARG001 Unused function argument: `check`\n  --> tests\\test_visitor_runtime.py:30:97\n   |\n28 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n29 |\n30 |     def _fake_run(command: list[str], *, capture_output: bool, text: bool, env: dict[str, str], check: bool):\n   |                                                                                                 ^^^^^\n31 |         command_invocations.append(command)\n32 |         env_snapshots.append(env)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:49:5\n   |\n47 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n48 |\n49 |     assert orchestrator.visitor_status == \"succeeded\"\n   |     ^^^^^^\n50 |     assert orchestrator.visitor_report_path == report_path\n51 |     assert orchestrator.visitor_failure_message is None\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:50:5\n   |\n49 |     assert orchestrator.visitor_status == \"succeeded\"\n50 |     assert orchestrator.visitor_report_path == report_path\n   |     ^^^^^^\n51 |     assert orchestrator.visitor_failure_message is None\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:51:5\n   |\n49 |     assert orchestrator.visitor_status == \"succeeded\"\n50 |     assert orchestrator.visitor_report_path == report_path\n51 |     assert orchestrator.visitor_failure_message is None\n   |     ^^^^^^\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n53 |     assert snapshot.mode == \"subprocess\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:53:5\n   |\n51 |     assert orchestrator.visitor_failure_message is None\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n53 |     assert snapshot.mode == \"subprocess\"\n   |     ^^^^^^\n54 |     assert snapshot.command == (\"pypy3\",)\n55 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:54:5\n   |\n52 |     snapshot = orchestrator.visitor_runtime_snapshot\n53 |     assert snapshot.mode == \"subprocess\"\n54 |     assert snapshot.command == (\"pypy3\",)\n   |     ^^^^^^\n55 |     assert snapshot.disable_cache is False\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:55:5\n   |\n53 |     assert snapshot.mode == \"subprocess\"\n54 |     assert snapshot.command == (\"pypy3\",)\n55 |     assert snapshot.disable_cache is False\n   |     ^^^^^^\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:56:5\n   |\n54 |     assert snapshot.command == (\"pypy3\",)\n55 |     assert snapshot.disable_cache is False\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n   |     ^^^^^^\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n58 |     first_command = command_invocations[0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:57:5\n   |\n55 |     assert snapshot.disable_cache is False\n56 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n   |     ^^^^^^\n58 |     first_command = command_invocations[0]\n59 |     assert \"x_make_github_visitor_x.run_external\" in first_command\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:59:5\n   |\n57 |     assert command_invocations, \"subprocess runtime command not invoked\"\n58 |     first_command = command_invocations[0]\n59 |     assert \"x_make_github_visitor_x.run_external\" in first_command\n   |     ^^^^^^\n60 |     env_snapshot = env_snapshots[0]\n61 |     pythonpath = env_snapshot.get(\"PYTHONPATH\", \"\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:63:5\n   |\n61 |     pythonpath = env_snapshot.get(\"PYTHONPATH\", \"\")\n62 |     expected_workspace_root = Path(orchestrator_module.__file__).resolve().parent.parent\n63 |     assert pythonpath.split(os.pathsep)[0] == str(expected_workspace_root)\n   |     ^^^^^^\n   |\n\nE501 Line too long (106 > 88)\n  --> tests\\test_visitor_runtime.py:66:89\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n   |                                                                                         ^^^^^^^^^^^^^^^^^^\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n68 |         return str(tmp_path)\n   |\n\nARG001 Unused function argument: `self`\n  --> tests\\test_visitor_runtime.py:67:34\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                  ^^^^\n68 |         return str(tmp_path)\n   |\n\nARG001 Unused function argument: `fallback`\n  --> tests\\test_visitor_runtime.py:67:61\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                             ^^^^^^^^\n68 |         return str(tmp_path)\n   |\n\nE501 Line too long (96 > 88)\n  --> tests\\test_visitor_runtime.py:67:89\n   |\n66 | def test_run_visitor_runtime_failure_sets_status(monkeypatch: pytest.MonkeyPatch, tmp_path: Path) -> None:\n67 |     def _fake_detect_clones_root(self: MakeAllOrchestrator, fallback: str | None = None) -> str:\n   |                                                                                         ^^^^^^^^\n68 |         return str(tmp_path)\n   |\n\nE501 Line too long (92 > 88)\n  --> tests\\test_visitor_runtime.py:70:89\n   |\n68 |         return str(tmp_path)\n69 |\n70 |     monkeypatch.setattr(MakeAllOrchestrator, \"detect_clones_root\", _fake_detect_clones_root)\n   |                                                                                         ^^^^\n71 |\n72 |     payload: dict[str, object] = {\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:93:5\n   |\n91 |     orchestrator.run_visitor(cloner=object(), ctx=None)\n92 |\n93 |     assert orchestrator.visitor_status == \"failed\"\n   |     ^^^^^^\n94 |     assert orchestrator.visitor_report_path is None\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:94:5\n   |\n93 |     assert orchestrator.visitor_status == \"failed\"\n94 |     assert orchestrator.visitor_report_path is None\n   |     ^^^^^^\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n96 |     snapshot = orchestrator.visitor_runtime_snapshot\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:95:5\n   |\n93 |     assert orchestrator.visitor_status == \"failed\"\n94 |     assert orchestrator.visitor_report_path is None\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n   |     ^^^^^^\n96 |     snapshot = orchestrator.visitor_runtime_snapshot\n97 |     assert snapshot.mode == \"subprocess\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_visitor_runtime.py:97:5\n   |\n95 |     assert orchestrator.visitor_failure_message == \"runtime boom\"\n96 |     snapshot = orchestrator.visitor_runtime_snapshot\n97 |     assert snapshot.mode == \"subprocess\"\n   |     ^^^^^^\n98 |     assert snapshot.command == (\"pypy3\",)\n99 |     assert snapshot.disable_cache is False\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_visitor_runtime.py:98:5\n    |\n 96 |     snapshot = orchestrator.visitor_runtime_snapshot\n 97 |     assert snapshot.mode == \"subprocess\"\n 98 |     assert snapshot.command == (\"pypy3\",)\n    |     ^^^^^^\n 99 |     assert snapshot.disable_cache is False\n100 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_visitor_runtime.py:99:5\n    |\n 97 |     assert snapshot.mode == \"subprocess\"\n 98 |     assert snapshot.command == (\"pypy3\",)\n 99 |     assert snapshot.disable_cache is False\n    |     ^^^^^^\n100 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_visitor_runtime.py:100:5\n    |\n 98 |     assert snapshot.command == (\"pypy3\",)\n 99 |     assert snapshot.disable_cache is False\n100 |     assert orchestrator.visitor_runtime_summary == \"subprocess [pypy3]\"\n    |     ^^^^^^\n    |\n\nE402 Module level import not at top of file\n  --> x_cls_make_all_x.py:61:1\n   |\n59 |       LegatusConfig,\n60 |   )\n61 | / from x_0_make_all_x.legatus_bridge import (\n62 | |     bootstrap as bootstrap_legatus,\n63 | | )\n   | |_^\n64 |   from x_0_make_all_x.manifest import (  # noqa: E402\n65 |       ManifestEntry,\n   |\n\nPLR0913 Too many arguments in function definition (7 > 5)\n   --> x_cls_make_all_x.py:495:9\n    |\n493 |         )\n494 |\n495 |     def _emit_stage_event(\n    |         ^^^^^^^^^^^^^^^^^\n496 |         self,\n497 |         *,\n    |\n\nPERF403 Use a dictionary comprehension instead of a for-loop\n   --> x_cls_make_all_x.py:547:13\n    |\n545 |         }\n546 |         for key, value in result.details.items():\n547 |             detail_payload[key] = value\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n548 |\n549 |         status_map = {\n    |\nhelp: Replace for loop with dict comprehension\n\nC901 `clone_repos` is too complex (16 > 10)\n   --> x_cls_make_all_x.py:606:9\n    |\n605 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n606 |     def clone_repos(self, ctx: OrchestratorContext | None) -> object:\n    |         ^^^^^^^^^^^\n607 |         options = self._cloner_options(ctx)\n608 |         common_details: dict[str, JSONValue] = {\n    |\n\nPLR0912 Too many branches (19 > 12)\n   --> x_cls_make_all_x.py:606:9\n    |\n605 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n606 |     def clone_repos(self, ctx: OrchestratorContext | None) -> object:\n    |         ^^^^^^^^^^^\n607 |         options = self._cloner_options(ctx)\n608 |         common_details: dict[str, JSONValue] = {\n    |\n\nPLR0915 Too many statements (76 > 50)\n   --> x_cls_make_all_x.py:606:9\n    |\n605 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n606 |     def clone_repos(self, ctx: OrchestratorContext | None) -> object:\n    |         ^^^^^^^^^^^\n607 |         options = self._cloner_options(ctx)\n608 |         common_details: dict[str, JSONValue] = {\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:742:19\n    |\n741 |         if cloner is None:\n742 |             raise RuntimeError(\"Cloner could not be instantiated\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n743 |         return cloner\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:742:32\n    |\n741 |         if cloner is None:\n742 |             raise RuntimeError(\"Cloner could not be instantiated\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n743 |         return cloner\n    |\nhelp: Assign to variable; remove string literal\n\nC901 `run_visitor` is too complex (11 > 10)\n   --> x_cls_make_all_x.py:746:9\n    |\n745 |     # Step 4: run visitor (delegated to x_make_github_visitor_x)\n746 |     def run_visitor(self, cloner: object, ctx: OrchestratorContext | None) -> None:\n    |         ^^^^^^^^^^^\n747 |         start = perf_counter()\n748 |         self._visitor_status = \"running\"\n    |\n\nPLR0915 Too many statements (61 > 50)\n   --> x_cls_make_all_x.py:746:9\n    |\n745 |     # Step 4: run visitor (delegated to x_make_github_visitor_x)\n746 |     def run_visitor(self, cloner: object, ctx: OrchestratorContext | None) -> None:\n    |         ^^^^^^^^^^^\n747 |         start = perf_counter()\n748 |         self._visitor_status = \"running\"\n    |\n\nC901 `_run_visitor_subprocess` is too complex (17 > 10)\n   --> x_cls_make_all_x.py:872:9\n    |\n870 |         return self._legatus_bootstrap\n871 |\n872 |     def _run_visitor_subprocess(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n873 |         self,\n874 |         *,\n    |\n\nPLR0912 Too many branches (17 > 12)\n   --> x_cls_make_all_x.py:872:9\n    |\n870 |         return self._legatus_bootstrap\n871 |\n872 |     def _run_visitor_subprocess(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n873 |         self,\n874 |         *,\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:879:19\n    |\n877 |     ) -> Path | None:\n878 |         if not runtime_command:\n879 |             raise AssertionError(\"Visitor runtime command is empty\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n880 |\n881 |         root_str = self.detect_clones_root()\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:879:34\n    |\n877 |     ) -> Path | None:\n878 |         if not runtime_command:\n879 |             raise AssertionError(\"Visitor runtime command is empty\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n880 |\n881 |         root_str = self.detect_clones_root()\n    |\nhelp: Assign to variable; remove string literal\n\nRUF005 Consider iterable unpacking instead of concatenation\n   --> x_cls_make_all_x.py:883:30\n    |\n881 |           root_str = self.detect_clones_root()\n882 |           root_path = Path(root_str).resolve()\n883 |           command: list[str] = list(runtime_command) + [\n    |  ______________________________^\n884 | |             \"-m\",\n885 | |             \"x_make_github_visitor_x.run_external\",\n886 | |             \"--root\",\n887 | |             str(root_path),\n888 | |         ]\n    | |_________^\n889 |           if disable_cache:\n890 |               command.append(\"--disable-cache\")\n    |\nhelp: Replace with iterable unpacking\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_all_x.py:904:18\n    |\n902 |             env[\"PYTHONPATH\"] = workspace_root\n903 |\n904 |         result = subprocess.run(\n    |                  ^^^^^^^^^^^^^^\n905 |             command,\n906 |             capture_output=True,\n    |\n\nE501 Line too long (104 > 88)\n   --> x_cls_make_all_x.py:921:89\n    |\n919 |             if isinstance(candidate, Mapping) and \"status\" in candidate:\n920 |                 payload = {\n921 |                     str(key): value for key, value in cast(\"Mapping[object, object]\", candidate).items()\n    |                                                                                         ^^^^^^^^^^^^^^^^\n922 |                 }\n923 |                 break\n    |\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:1046:89\n     |\n1044 |             )\n1045 |             published_versions_result = result[0]\n1046 |             published_count = sum(1 for version in published_versions_result.values() if version)\n     |                                                                                         ^^^^^^^^^\n1047 |             if published_count:\n1048 |                 message = f\"Published {published_count} package(s)\"\n     |\n\nE501 Line too long (90 > 88)\n    --> x_cls_make_all_x.py:1061:89\n     |\n1059 |                 \"entry_count\": entry_count,\n1060 |                 \"published_packages\": len(\n1061 |                     [version for version in published_versions_result.values() if version]\n     |                                                                                         ^^\n1062 |                 ),\n1063 |             }\n     |\n\nS101 Use of `assert` detected\n    --> x_cls_make_all_x.py:1075:9\n     |\n1073 |                 details=detail_payload,\n1074 |             )\n1075 |         assert result is not None\n     |         ^^^^^^\n1076 |         return result\n     |\n\nE501 Line too long (103 > 88)\n    --> x_cls_make_all_x.py:1212:89\n     |\n1210 | def _runtime_config_from_args(args: argparse.Namespace) -> _VisitorRuntimeConfig | None:\n1211 |     cli_command = getattr(args, \"visitor_runtime\", None)\n1212 |     command_source = cli_command if cli_command is not None else os.environ.get(\"MAKE_VISITOR_RUNTIME\")\n     |                                                                                         ^^^^^^^^^^^^^^^\n1213 |     command = _split_command(command_source)\n1214 |     if not command:\n     |\n\nSIM108 Use ternary operator `enabled = _env_truthy(\"MAKE_WITH_LEGATUS\") if cli_flag is None else bool(cli_flag)` instead of `if`-`else`-block\n    --> x_cls_make_all_x.py:1230:5\n     |\n1229 |       cli_flag = getattr(args, \"with_legatus\", None)\n1230 | /     if cli_flag is None:\n1231 | |         enabled = _env_truthy(\"MAKE_WITH_LEGATUS\")\n1232 | |     else:\n1233 | |         enabled = bool(cli_flag)\n     | |________________________________^\n1234 |\n1235 |       cli_profile = getattr(args, \"legatus_profile\", None)\n     |\nhelp: Replace `if`-`else`-block with `enabled = _env_truthy(\"MAKE_WITH_LEGATUS\") if cli_flag is None else bool(cli_flag)`\n\nFound 145 errors (17 fixed, 128 remaining).\nNo fixes available (15 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.0"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_0_make_all_x (exit 1)\ncwd: C:\\x_runner_x\\x_0_make_all_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-14T14:35:57.825522+00:00\nduration: 0.667s\ntool_version: ruff 0.14.0\nstdout:\nF404 `from __future__` imports must occur at the beginning of the file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n\u2026\nstderr:\n<empty>",
            "repo": "x_0_make_all_x",
            "repo_path": "C:\\x_runner_x\\x_0_make_all_x",
            "stderr_preview": null,
            "stdout_preview": "F404 `from __future__` imports must occur at the beginning of the file\n  --> dynamo_bridge.py:8:1\n   |\n 6 | \"\"\"\n 7 |\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_0_make_all_x (exit 1) cwd: C:\\x_runner_x\\x_0_make_all_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version p\u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.0"
        },
        {
            "captured_at": "2025-10-14T14:36:54.941035+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_common_x",
                "duration_seconds": 2.0562603999860585,
                "ended_at": "2025-10-14T14:36:54.941035+00:00",
                "exit": 1,
                "repo": "x_make_common_x",
                "repo_hash": "910cfa876857db792b567598a329e08dfc57f2ae33484109c17d0d55451c085e",
                "repo_path": "C:\\x_runner_x\\x_make_common_x",
                "started_at": "2025-10-14T14:36:52.884776+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_common_x\\telemetry.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 8 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_common_x\\telemetry.py\t2025-10-14 14:35:37.570955+00:00\n+++ C:\\x_runner_x\\x_make_common_x\\telemetry.py\t2025-10-14 14:36:54.620240+00:00\n@@ -11,13 +11,15 @@\n from typing import TYPE_CHECKING, Final, Protocol, TextIO, TypedDict, cast\n \n from jsonschema import Draft202012Validator  # type: ignore[import-untyped]\n \n if TYPE_CHECKING:\n+\n     class ValidationError(Exception):\n         path: Sequence[object]\n         message: str\n+\n else:\n     from jsonschema import ValidationError  # type: ignore[import-untyped]\n \n if TYPE_CHECKING:\n     from collections.abc import Callable, Mapping, Sequence\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_common_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_common_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-14T14:36:52.884776+00:00\nduration: 2.056s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7\nstdout:\n--- C:\\x_runner_x\\x_make_common_x\\telemetry.py\t2025-10-14 14:35:37.570955+00:00\n+++ C:\\x_runner_x\\x_make_common_x\\telemetry.py\t2025-10-14 14:36:54.620240+00:00\n@@ -11,13 +11,15 @@\n from typing import TYPE_CHECKING, Final, Protocol, TextIO, TypedDict, cast\n \n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_common_x\\telemetry.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 8 files would be left unchanged.",
            "repo": "x_make_common_x",
            "repo_path": "C:\\x_runner_x\\x_make_common_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_common_x\\telemetry.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 8 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_common_x\\telemetry.py\t2025-10-14 14:35:37.570955+00:00\n+++ C:\\x_runner_x\\x_make_common_x\\telemetry.py\t2025-10-14 14:36:54.620240+00:00\n@@ -11,13 +11,15 @@\n from typing import TYPE_CHECKING, Final, Protocol, TextIO, TypedDict, cast\n \n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_common_x (exit 1) cwd: C:\\x_runner_x\\x_make_common_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-10-14T14:36:52.88\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7"
        },
        {
            "captured_at": "2025-10-14T14:37:05.516236+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "black",
                    ".",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311",
                    "--check",
                    "--diff"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 2.267430800013244,
                "ended_at": "2025-10-14T14:37:05.516236+00:00",
                "exit": 1,
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2c821ed6f783215d335964b230cbfc1947d2ac5ceacdd290d37503aebe516332",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-14T14:37:03.248807+00:00",
                "stderr": "would reformat C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-14 14:35:41.224775+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-14 14:37:05.094017+00:00\n@@ -169,14 +169,11 @@\n def _json_ready(value: object) -> JSONValue:\n     if value is None or isinstance(value, (str, int, float, bool)):\n         return value\n     if isinstance(value, Mapping):\n         typed_mapping = cast(\"Mapping[object, object]\", value)\n-        return {\n-            str(key): _json_ready(val)\n-            for key, val in typed_mapping.items()\n-        }\n+        return {str(key): _json_ready(val) for key, val in typed_mapping.items()}\n     if isinstance(value, Sequence) and not isinstance(value, (str, bytes, bytearray)):\n         typed_sequence = cast(\"Sequence[object]\", value)\n         return [_json_ready(entry) for entry in typed_sequence]\n     return str(value)\n \n@@ -933,10 +930,11 @@\n         return f\"exit {exit_code}\"\n \n     def _preview_output(self, detail: Mapping[str, object], key: str) -> str:\n         text = self._ensure_text(detail.get(key, \"\"))\n         return _preview_lines(text.splitlines(), OUTPUT_PREVIEW_LIMIT)\n+\n     def _serialize_failures(\n         self,\n         detail_pairs: Sequence[tuple[Mapping[str, object], str]],\n     ) -> list[dict[str, JSONValue]]:\n         entries: list[dict[str, JSONValue]] = []\n@@ -945,18 +943,19 @@\n             tool = self._detail_value(detail, \"tool\", \"tool_module\", default=\"\")\n             preview = self._summarize_failure_message(message)\n             command_display = self._command_display(detail)\n             exit_display = self._exit_display(detail)\n             repo_path = self._detail_value(detail, \"repo_path\", \"cwd\") or None\n-            suggestion = self._detail_value(\n-                detail,\n-                \"next_action\",\n-                default=\"Investigate\",\n-            ) or None\n-            captured_at = (\n-                self._detail_value(detail, \"ended_at\", \"started_at\") or None\n-            )\n+            suggestion = (\n+                self._detail_value(\n+                    detail,\n+                    \"next_action\",\n+                    default=\"Investigate\",\n+                )\n+                or None\n+            )\n+            captured_at = self._detail_value(detail, \"ended_at\", \"started_at\") or None\n             tool_version = self._detail_value(detail, \"tool_version\") or None\n             stdout_preview = self._preview_output(detail, \"stdout\") or None\n             stderr_preview = self._preview_output(detail, \"stderr\") or None\n             entries.append(\n                 {\n",
                "tool": "black",
                "tool_module": "black",
                "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7"
            },
            "exit": "exit 1",
            "message": "black failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff\nstarted_at: 2025-10-14T14:37:03.248807+00:00\nduration: 2.267s\ntool_version: python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7\nstdout:\n--- C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-14 14:35:41.224775+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-14 14:37:05.094017+00:00\n@@ -169,14 +169,11 @@\n def _json_ready(value: object) -> JSONValue:\n     if value is None or isinstance(value, (str, int, float, bool)):\n\u2026\nstderr:\nwould reformat C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": "would reformat C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 5 files would be left unchanged.",
            "stdout_preview": "--- C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-14 14:35:41.224775+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-14 14:37:05.094017+00:00\n@@ -169,14 +169,11 @@\n def _json_ready(value: object) -> JSONValue:\n     if value is None or isinstance(value, (str, int, float, bool)):\n\u2026",
            "suggested_action": "Investigate",
            "summary": "black failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m black . --line-length 88 --target-version py311 --check --diff started_at: 2025-1\u2026",
            "tool": "black",
            "tool_version": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7"
        },
        {
            "captured_at": "2025-10-14T14:37:06.839319+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "mypy",
                    ".",
                    "--strict",
                    "--no-warn-unused-configs",
                    "--show-error-codes",
                    "--warn-return-any",
                    "--warn-unreachable",
                    "--disallow-any-unimported",
                    "--disallow-any-expr",
                    "--disallow-any-decorated",
                    "--disallow-any-explicit"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 1.0205295000923797,
                "ended_at": "2025-10-14T14:37:06.839319+00:00",
                "exit": 1,
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2c821ed6f783215d335964b230cbfc1947d2ac5ceacdd290d37503aebe516332",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-14T14:37:05.818794+00:00",
                "stderr": "",
                "stdout": "run_external.py:9: error: Skipping analyzing \"x_make_github_visitor_x.x_cls_make_github_visitor_x\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nrun_external.py:9: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nrun_external.py:35: error: Explicit \"Any\" is not allowed  [explicit-any]\nrun_external.py:36: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nrun_external.py:45: error: Expression has type \"Any\"  [misc]\nrun_external.py:46: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nrun_external.py:49: error: Expression has type \"Any\"  [misc]\nrun_external.py:52: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nrun_external.py:61: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nrun_external.py:70: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nrun_external.py:72: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:139: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:141: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:142: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:142: error: Expression type contains \"Any\" (has type \"list[tuple[Any, Any]]\")  [misc]\ntests\\test_github_visitor.py:142: error: Expression type contains \"Any\" (has type \"tuple[Any, Any]\")  [misc]\ntests\\test_github_visitor.py:146: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:147: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:148: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:149: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:150: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:193: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:194: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:195: error: Expression has type \"Any\"  [misc]\ntests\\test_github_visitor.py:196: error: Expression has type \"Any\"  [misc]\nFound 24 errors in 2 files (checked 6 source files)\n",
                "tool": "mypy",
                "tool_module": "mypy",
                "tool_version": "mypy 1.18.2 (compiled: yes)"
            },
            "exit": "exit 1",
            "message": "mypy failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --warn-unreachable --disallow-any-unimported --disallow-any-expr --disallow-any-decorated --disallow-any-explicit\nstarted_at: 2025-10-14T14:37:05.818794+00:00\nduration: 1.021s\ntool_version: mypy 1.18.2 (compiled: yes)\nstdout:\nrun_external.py:9: error: Skipping analyzing \"x_make_github_visitor_x.x_cls_make_github_visitor_x\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nrun_external.py:9: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nrun_external.py:35: error: Explicit \"Any\" is not allowed  [explicit-any]\nrun_external.py:36: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nrun_external.py:45: error: Expression has type \"Any\"  [misc]\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": null,
            "stdout_preview": "run_external.py:9: error: Skipping analyzing \"x_make_github_visitor_x.x_cls_make_github_visitor_x\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nrun_external.py:9: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nrun_external.py:35: error: Explicit \"Any\" is not allowed  [explicit-any]\nrun_external.py:36: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nrun_external.py:45: error: Expression has type \"Any\"  [misc]\n\u2026",
            "suggested_action": "Investigate",
            "summary": "mypy failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m mypy . --strict --no-warn-unused-configs --show-error-codes --warn-return-any --wa\u2026",
            "tool": "mypy",
            "tool_version": "mypy 1.18.2 (compiled: yes)"
        },
        {
            "captured_at": "2025-10-14T14:37:05.813269+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 0.29110999999102205,
                "ended_at": "2025-10-14T14:37:05.813269+00:00",
                "exit": 1,
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2c821ed6f783215d335964b230cbfc1947d2ac5ceacdd290d37503aebe516332",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-14T14:37:05.522159+00:00",
                "stderr": "",
                "stdout": "BLE001 Do not catch blind exception: `Exception`\n  --> run_external.py:59:12\n   |\n57 |         )\n58 |         return 1\n59 |     except Exception as err:  # pragma: no cover - defensive\n   |            ^^^^^^^^^\n60 |         _emit_payload(\n61 |             {\n   |\n\nSLF001 Private member accessed: `_root_is_git_repo`\n   --> tests\\test_github_visitor.py:208:12\n    |\n206 |     visitor = x_cls_make_github_visitor_x(workspace)\n207 |\n208 |     assert visitor._root_is_git_repo is True\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nFound 2 errors.\n",
                "tool": "ruff_check",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.0"
            },
            "exit": "exit 1",
            "message": "ruff_check failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-14T14:37:05.522159+00:00\nduration: 0.291s\ntool_version: ruff 0.14.0\nstdout:\nBLE001 Do not catch blind exception: `Exception`\n  --> run_external.py:59:12\n   |\n57 |         )\n58 |         return 1\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": null,
            "stdout_preview": "BLE001 Do not catch blind exception: `Exception`\n  --> run_external.py:59:12\n   |\n57 |         )\n58 |         return 1\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_check failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --ta\u2026",
            "tool": "ruff_check",
            "tool_version": "ruff 0.14.0"
        },
        {
            "captured_at": "2025-10-14T14:37:03.243323+00:00",
            "command": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
            "detail": {
                "cached": false,
                "cmd": [
                    "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
                    "-m",
                    "ruff",
                    "check",
                    ".",
                    "--fix",
                    "--select",
                    "ALL",
                    "--ignore",
                    "D,COM812,ISC001,T20",
                    "--line-length",
                    "88",
                    "--target-version",
                    "py311"
                ],
                "cmd_display": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311",
                "cwd": "C:\\x_runner_x\\x_make_github_visitor_x",
                "duration_seconds": 0.41079009999521077,
                "ended_at": "2025-10-14T14:37:03.243323+00:00",
                "exit": 1,
                "repo": "x_make_github_visitor_x",
                "repo_hash": "2c821ed6f783215d335964b230cbfc1947d2ac5ceacdd290d37503aebe516332",
                "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
                "started_at": "2025-10-14T14:37:02.832537+00:00",
                "stderr": "",
                "stdout": "BLE001 Do not catch blind exception: `Exception`\n  --> run_external.py:59:12\n   |\n57 |         )\n58 |         return 1\n59 |     except Exception as err:  # pragma: no cover - defensive\n   |            ^^^^^^^^^\n60 |         _emit_payload(\n61 |             {\n   |\n\nSLF001 Private member accessed: `_root_is_git_repo`\n   --> tests\\test_github_visitor.py:208:12\n    |\n206 |     visitor = x_cls_make_github_visitor_x(workspace)\n207 |\n208 |     assert visitor._root_is_git_repo is True\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nFound 2 errors.\n",
                "tool": "ruff_fix",
                "tool_module": "ruff",
                "tool_version": "ruff 0.14.0"
            },
            "exit": "exit 1",
            "message": "ruff_fix failed for x_make_github_visitor_x (exit 1)\ncwd: C:\\x_runner_x\\x_make_github_visitor_x\ncommand: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 --target-version py311\nstarted_at: 2025-10-14T14:37:02.832537+00:00\nduration: 0.411s\ntool_version: ruff 0.14.0\nstdout:\nBLE001 Do not catch blind exception: `Exception`\n  --> run_external.py:59:12\n   |\n57 |         )\n58 |         return 1\n\u2026\nstderr:\n<empty>",
            "repo": "x_make_github_visitor_x",
            "repo_path": "C:\\x_runner_x\\x_make_github_visitor_x",
            "stderr_preview": null,
            "stdout_preview": "BLE001 Do not catch blind exception: `Exception`\n  --> run_external.py:59:12\n   |\n57 |         )\n58 |         return 1\n\u2026",
            "suggested_action": "Investigate",
            "summary": "ruff_fix failed for x_make_github_visitor_x (exit 1) cwd: C:\\x_runner_x\\x_make_github_visitor_x command: C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe -m ruff check . --fix --select ALL --ignore D,COM812,ISC001,T20 --line-length 88 \u2026",
            "tool": "ruff_fix",
            "tool_version": "ruff 0.14.0"
        }
    ],
    "generated_at": "2025-10-14T14:38:38.741169+00:00",
    "runtime": {
        "environment": {
            "PATH": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Lib\\site-packages\\PySide6;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Users\\eye43\\AppData\\Local\\Programs\\Python\\Python313\\Scripts\\;C:\\Users\\eye43\\AppData\\Local\\Programs\\Python\\Python313\\;C:\\Users\\eye43\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\eye43\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;c:\\Users\\eye43\\.vscode\\extensions\\ms-python.debugpy-2025.14.0-win32-x64\\bundled\\scripts\\noConfigScripts;c:\\Users\\eye43\\AppData\\Roaming\\Code\\User\\globalStorage\\github.copilot-chat\\debugCommand"
        },
        "platform": "Windows-11-10.0.22631-SP0",
        "python_executable": "C:\\x_runner_x\\x_make_yahw_x\\.venv\\Scripts\\python.exe",
        "python_version": "3.13.7 (tags/v3.13.7:bcee1c3, Aug 14 2025, 14:15:11) [MSC v.1944 64 bit (AMD64)]",
        "run_completed_at": "2025-10-14T14:38:38.740766+00:00",
        "run_started_at": "2025-10-14T14:35:40.835897+00:00",
        "workspace_root": "C:\\x_runner_x"
    },
    "schema_version": "1.0",
    "summary": {
        "overall_stats": {
            "cache_hits": 32,
            "cache_misses": 43,
            "failed_tools": 9,
            "had_failures": true,
            "total_tools_run": 75
        },
        "repos": {
            "x_0_make_all_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "61f8170143d57c28e73d2bc1923a8d7fa01f21f27e67416e92a20db1709279cd",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_legatus_acta_schedae_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "1bb1cf153a9f56feefdccea766ff147f3b7898217476594794c909271d996827",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_legatus_tabula_opus_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "4c68673816c92fb45eaa304acd3aafe13e84c67a3bfb6bcde3f8e34b5d8cd8c7",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_legatus_tactica_impetus_x": {
                "cached": 2,
                "failed": 0,
                "repo_hash": "cc97fafbcc480da07f5da6f3bf95b20b6477a3877b19257bb492c37a976161aa",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_common_x": {
                "cached": 0,
                "failed": 1,
                "repo_hash": "910cfa876857db792b567598a329e08dfc57f2ae33484109c17d0d55451c085e",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_clones_x": {
                "cached": 5,
                "failed": 0,
                "repo_hash": "5f1c4037b899542ba442042ba042e48556fc019d2fa2a2c66020898d692abdfb",
                "tools": {
                    "black": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_github_visitor_x": {
                "cached": 0,
                "failed": 4,
                "repo_hash": "2c821ed6f783215d335964b230cbfc1947d2ac5ceacdd290d37503aebe516332",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 1,
                        "timed_out": false
                    }
                }
            },
            "x_make_graphviz_x": {
                "cached": 5,
                "failed": 0,
                "repo_hash": "4e98d42bf69c1c0e7077c37dbab3351afe73144e36e35eea6d92844887f7e9e9",
                "tools": {
                    "black": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_markdown_x": {
                "cached": 5,
                "failed": 0,
                "repo_hash": "0634e764feda18bf1202aac62871c55dbc57522733d4b6e5e48d35229324e5fa",
                "tools": {
                    "black": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_mermaid_x": {
                "cached": 5,
                "failed": 0,
                "repo_hash": "896b5881250edb42972d6cfe02d83b40eaefa8cefa5571a520921409c1542001",
                "tools": {
                    "black": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_persistent_env_var_x": {
                "cached": 5,
                "failed": 0,
                "repo_hash": "60badf502308026fe99ba7de71422f01bd84643e336742ec554b7e8e567bf894",
                "tools": {
                    "black": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_pip_updates_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "4c039ae3f0159edbf2f8849a2e3b642f0ff7463f5fa718f984096d90092310ad",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_py_mod_sideload_x": {
                "cached": 5,
                "failed": 0,
                "repo_hash": "0f81979e95fbdb9acbd9d15265f7c26703c4514e9b86168904127040d09166d8",
                "tools": {
                    "black": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": true,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_pypi_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "97ef18ce067106d0c02fe86c4e88a7b1d6e7d26643ebcc3f2952e9df8deb2406",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            },
            "x_make_yahw_x": {
                "cached": 0,
                "failed": 0,
                "repo_hash": "cd2509f7013d4ca29bb0c6a8c6257f709ea3c68f36af47019160cf3895c88fa8",
                "tools": {
                    "black": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "mypy": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "pyright": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_check": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    },
                    "ruff_fix": {
                        "cached": false,
                        "exit": 0,
                        "timed_out": false
                    }
                }
            }
        },
        "timestamp": "2025-10-14T14:38:38.741284+00:00",
        "total_repos": 15
    },
    "tool_versions": {
        "black": "python -m black, 25.9.0 (compiled: yes)\nPython (CPython) 3.13.7",
        "mypy": "mypy 1.18.2 (compiled: yes)",
        "pyright": "pyright 1.1.406",
        "ruff": "ruff 0.14.0"
    },
    "workspace_root": "C:\\x_runner_x"
}