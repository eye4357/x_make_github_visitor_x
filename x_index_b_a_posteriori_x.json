{
    "x_0_make_all_x": {
        "files": [
            "forceit.py",
            "x_cls_make_all_x.py"
        ],
        "files_index": [
            "forceit.py",
            "x_cls_make_all_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_0_make_all_x\\forceit.py\nwould reformat C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n2 files would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_0_make_all_x\\forceit.py\t2025-10-07 07:11:45.063885+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\forceit.py\t2025-10-07 17:45:37.213185+00:00\n@@ -99,13 +99,11 @@\n             except Exception as e:\n                 print(f\"ERROR copying {s} -> {d}: {e}\", file=sys.stderr)\n \n     print(\"\\nSummary:\")\n     print(f\"  Source files scanned: {total}\")\n-    print(\n-        f\"  Source files with at least one match in site-packages: {matched}\"\n-    )\n+    print(f\"  Source files with at least one match in site-packages: {matched}\")\n     print(f\"  Identical matches (no copy): {identical}\")\n     print(f\"  Files copied: {copied}\")\n \n     # Long summary details\n     if copied_pairs:\n@@ -125,16 +123,12 @@\n         print(\"\\nPer destination package copy counts (top 20):\")\n         for pkg, cnt in pkg_counter.most_common(20):\n             print(f\"  {pkg}: {cnt}\")\n \n     if multi_sources:\n-        print(\n-            f\"\\nSources with multiple matches in site-packages: {len(multi_sources)}\"\n-        )\n-        for s, n in sorted(multi_sources, key=lambda t: (-t[1], str(t[0])))[\n-            :20\n-        ]:\n+        print(f\"\\nSources with multiple matches in site-packages: {len(multi_sources)}\")\n+        for s, n in sorted(multi_sources, key=lambda t: (-t[1], str(t[0])))[:20]:\n             ex = \", \".join(_rel(p, DEST) for p in multi_examples.get(s, []))\n             print(f\"  {_rel(s, src_root)} -> {n} matches (e.g., {ex})\")\n \n     return 0\n \n--- C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-07 07:11:45.063885+00:00\n+++ C:\\x_runner_x\\x_0_make_all_x\\x_cls_make_all_x.py\t2025-10-07 17:45:38.002292+00:00\n@@ -11,13 +11,11 @@\n import sys\n import time\n import urllib.request\n from typing import TYPE_CHECKING, Any, ClassVar, TypeAlias, cast\n \n-_WORKSPACE_ROOT = os.path.abspath(\n-    os.path.join(os.path.dirname(__file__), \"..\")\n-)\n+_WORKSPACE_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n \n \n def _ensure_workspace_on_syspath() -> None:\n     if _WORKSPACE_ROOT not in sys.path:\n         sys.path.insert(0, _WORKSPACE_ROOT)\n@@ -187,13 +185,11 @@\n \n     Invalid entries are ignored and an error is logged.\n     \"\"\"\n     valid: list[ManifestEntry] = []\n     if not isinstance(data, list):\n-        _error(\n-            f\"publish_manifest.json: expected top-level list, got {type(data)!r}\"\n-        )\n+        _error(f\"publish_manifest.json: expected top-level list, got {type(data)!r}\")\n         return valid\n     seq = cast(\"list[object]\", data)\n     for i, raw in enumerate(seq):\n         try:\n             # Normalize raw entry into its 4 components\n@@ -210,25 +206,21 @@\n                     raise TypeError(\n                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n                     )\n                 name, version, anc, opts = tpl\n             else:\n-                raise TypeError(\n-                    f\"entry must be a 4-tuple/list, got {type(raw)!r}\"\n-                )\n+                raise TypeError(f\"entry must be a 4-tuple/list, got {type(raw)!r}\")\n \n             if not isinstance(name, str) or not name:\n                 raise TypeError(\"name must be non-empty string\")\n             if not isinstance(version, str) or not version:\n                 raise TypeError(\"version must be non-empty string\")\n \n             anc_list: list[str] | None\n             if anc is not None:\n                 if not isinstance(anc, list):\n-                    raise TypeError(\n-                        \"ancillaries must be null or list of strings\"\n-                    )\n+                    raise TypeError(\"ancillaries must be null or list of strings\")\n                 anc_seq = cast(\"list[object]\", anc)\n                 if not all(isinstance(x, str) for x in anc_seq):\n                     raise TypeError(\"ancillaries must be list[str]\")\n                 anc_list = [cast(\"str\", x) for x in anc_seq]\n             else:\n@@ -247,13 +239,11 @@\n             continue\n     return valid\n \n \n try:\n-    _manifest_path = os.path.join(\n-        os.path.dirname(__file__), \"publish_manifest.json\"\n-    )\n+    _manifest_path = os.path.join(os.path.dirname(__file__), \"publish_manifest.json\")\n     if os.path.exists(_manifest_path):\n         with open(_manifest_path, encoding=\"utf-8\") as _mf:\n             _loaded = json.load(_mf)\n             if isinstance(_loaded, list):\n                 _publish_manifest = validate_publish_manifest(_loaded)\n@@ -351,14 +341,11 @@\n                 include_forks=include_forks,\n                 force_reclone=False,\n             )\n         except TypeError as e:\n             msg = str(e)\n-            if (\n-                \"unexpected keyword\" in msg\n-                or \"got an unexpected keyword\" in msg\n-            ):\n+            if \"unexpected keyword\" in msg or \"got an unexpected keyword\" in msg:\n                 cloner = Cls(\n                     username=username,\n                     target_dir=target_dir,\n                     shallow=shallow,\n                     include_forks=include_forks,\n@@ -400,13 +387,11 @@\n         except Exception as e:\n             _error(\"Cloner run failed:\", e)\n         return cloner\n \n     # Step 4: run visitor (moved logic from _run_visitor)\n-    def run_visitor(\n-        self, cloner: Any, ctx: OrchestratorContext | None\n-    ) -> None:\n+    def run_visitor(self, cloner: Any, ctx: OrchestratorContext | None) -> None:\n         root = None\n         try:\n             root = getattr(cloner, \"target_dir\", None)\n         except Exception:\n             root = None\n@@ -415,13 +400,11 @@\n             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n             for entry in os.listdir(parent):\n                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n                     root = parent\n                     break\n-        _info(\n-            f\"Running x_make_github_visitor against cloned repos root={root} ...\"\n-        )\n+        _info(f\"Running x_make_github_visitor against cloned repos root={root} ...\")\n         try:\n             vis = self._instantiate_visitor(ctx, root_dir=root)\n         except Exception as e:\n             raise AssertionError(\n                 f\"x_make_github_visitor instantiate failed: {e}\"\n@@ -433,31 +416,25 @@\n             if \"no child git repositories found\" in msg:\n                 _info(\n                     \"Visitor skipped: no child git repositories present at root; continuing orchestrator flow\"\n                 )\n                 return\n-            raise AssertionError(\n-                f\"x_make_github_visitor run failed: {e}\"\n-            ) from e\n+            raise AssertionError(f\"x_make_github_visitor run failed: {e}\") from e\n \n     # Step 5: publish and update installations (moved logic from _process_publishes_and_updates)\n     def process_publishes_and_updates(\n         self, cloner: Any, ctx: OrchestratorContext | None\n     ) -> None:\n         published_versions, published_artifacts = self.publish_all(cloner, ctx)\n         for pkg_name, pkg_ver in published_versions.items():\n             if not (pkg_name and pkg_ver):\n                 continue\n             self.wait_for_pypi(pkg_name, pkg_ver, timeout=120)\n-        self.run_pip_updates(\n-            cloner, published_versions, published_artifacts, ctx\n-        )\n+        self.run_pip_updates(cloner, published_versions, published_artifacts, ctx)\n \n     # Utility: wait for PyPI availability (moved into class)\n-    def wait_for_pypi(\n-        self, name: str, version: str, timeout: int = 120\n-    ) -> bool:\n+    def wait_for_pypi(self, name: str, version: str, timeout: int = 120) -> bool:\n         deadline = time.time() + timeout\n         candidates = [name, name.replace(\"_\", \"-\")]\n         try:\n             time.sleep(5)\n         except Exception:\n@@ -511,24 +488,20 @@\n             if token:\n                 req.add_header(\"Authorization\", f\"token {token}\")\n             with urllib.request.urlopen(req, timeout=10) as resp:\n                 status = getattr(resp, \"status\", None)\n                 if status is not None and status >= 400:\n-                    raise AssertionError(\n-                        f\"test.pypi.org returned status {status}\"\n-                    )\n+                    raise AssertionError(f\"test.pypi.org returned status {status}\")\n         except AssertionError:\n             raise\n         except Exception as exc:\n             raise AssertionError(f\"test.pypi.org check failed: {exc}\") from exc\n \n     def _to_posix_rel(self, rel: str) -> str:\n         \"\"\"Return a normalized, POSIX-style relative path (no leading ../).\"\"\"\n         try:\n-            rel = rel.strip().lstrip(\n-                \"\\\\/\"\n-            )  # avoid accidental leading separators\n+            rel = rel.strip().lstrip(\"\\\\/\")  # avoid accidental leading separators\n             rel = rel.replace(\"\\\\\", \"/\")\n         except Exception:\n             pass\n         return rel\n \n@@ -547,13 +520,11 @@\n                 return None\n             return self._to_posix_rel(rel_native)\n         except Exception:\n             return None\n \n-    def _load_ancillary_allowlist(\n-        self, list_file: str, pkg_dir: str\n-    ) -> list[str]:\n+    def _load_ancillary_allowlist(self, list_file: str, pkg_dir: str) -> list[str]:\n         \"\"\"Load an allowlist of ancillary files; return clean relative paths under pkg_dir.\"\"\"\n         out: list[str] = []\n         try:\n             if not os.path.isfile(list_file):\n                 _info(f\"Ancillary allowlist not found: {list_file}\")\n@@ -573,13 +544,11 @@\n                 try:\n                     common = os.path.commonpath(\n                         [os.path.abspath(abs_path), os.path.abspath(pkg_dir)]\n                     )\n                     if common != os.path.abspath(pkg_dir):\n-                        _info(\n-                            f\"Skipping ancillary outside package dir: {line}\"\n-                        )\n+                        _info(f\"Skipping ancillary outside package dir: {line}\")\n                         continue\n                 except Exception:\n                     continue\n                 if not os.path.isfile(abs_path):\n                     _info(f\"Skipping non-file ancillary entry: {line}\")\n@@ -647,13 +616,11 @@\n                     continue\n                 # Normalize any leading separators from manifest entries\n                 safe_name = name.lstrip(\"/\\\\\")\n                 candidate = os.path.join(pkg_dir, safe_name)\n                 if os.path.isfile(candidate):\n-                    rel_path: str | None = self._safe_rel_from_abs(\n-                        candidate, pkg_dir\n-                    )\n+                    rel_path: str | None = self._safe_rel_from_abs(candidate, pkg_dir)\n                     if rel_path and rel_path not in seen:\n                         seen.add(rel_path)\n                         anc_rel.append(rel_path)\n                 elif os.path.isdir(candidate):\n                     # No auto-expansion (security). Require allowlist.\n@@ -671,13 +638,11 @@\n         version: str,\n         ctx: OrchestratorContext | None,\n         safe_kwargs: dict[str, Any],\n     ) -> Any:\n         try:\n-            return PublisherCls(\n-                name=name, version=version, ctx=ctx, **safe_kwargs\n-            )\n+            return PublisherCls(name=name, version=version, ctx=ctx, **safe_kwargs)\n         except TypeError:\n             pass\n         try:\n             return PublisherCls(\n                 name=name, version=version, **dict(safe_kwargs, ctx=ctx)\n@@ -747,13 +712,13 @@\n             if a.startswith(\"@\"):\n                 continue\n             _add_file_rel(a)\n \n         # 2) Files coming from opts-based allowlists (string or list[str])\n-        allow_spec = local_kwargs.get(\n-            \"ancillary_allowlist\"\n-        ) or local_kwargs.get(\"ancillary_list\")\n+        allow_spec = local_kwargs.get(\"ancillary_allowlist\") or local_kwargs.get(\n+            \"ancillary_list\"\n+        )\n         allow_files: list[str] = []\n         if isinstance(allow_spec, str):\n             allow_files = [allow_spec]\n         elif isinstance(allow_spec, list):\n             allow_files = [str(x) for x in allow_spec]\n@@ -790,14 +755,11 @@\n             msg = \" \".join(\n                 str(x)\n                 for x in (\n                     [str(exc)]\n                     + [str(a) for a in getattr(exc, \"args\", ())]\n-                    + [\n-                        str(getattr(exc, a, \"\"))\n-                        for a in (\"stdout\", \"stderr\", \"output\")\n-                    ]\n+                    + [str(getattr(exc, a, \"\")) for a in (\"stdout\", \"stderr\", \"output\")]\n                 )\n                 if x\n             )\n             low = msg.lower()\n             if (\n@@ -1009,13 +971,11 @@\n                 ]\n                 if r.startswith(\"x_\")\n             ]\n         return packages, pip_updates_script, use_user_flag\n \n-    def _get_installed_versions(\n-        self, packages: list[str]\n-    ) -> dict[str, str | None]:\n+    def _get_installed_versions(self, packages: list[str]) -> dict[str, str | None]:\n         import importlib.metadata\n \n         initial_installed: dict[str, str | None] = {}\n         _info(\"\\nInstalled package versions after first update attempt:\")\n         for pkg in packages:\n@@ -1082,13 +1042,11 @@\n             if not batch:\n                 continue\n             cmd = base_cmd + batch\n             _info(\"Fallback pip install:\", \" \".join(cmd))\n             try:\n-                proc = subprocess.run(\n-                    cmd, capture_output=True, text=True, check=False\n-                )\n+                proc = subprocess.run(cmd, capture_output=True, text=True, check=False)\n                 if proc.stdout:\n                     _info(proc.stdout.strip())\n                 if proc.stderr:\n                     _error(proc.stderr.strip())\n             except Exception as e:\n@@ -1099,26 +1057,22 @@\n         cloner: Any,\n         published_versions: dict[str, str | None],\n         published_artifacts: dict[str, dict[str, Any]],\n         ctx: Any | None = None,\n     ) -> None:\n-        packages, pip_updates_script, use_user_flag = (\n-            self._locate_and_choose_packages(cloner, published_versions)\n+        packages, pip_updates_script, use_user_flag = self._locate_and_choose_packages(\n+            cloner, published_versions\n         )\n         try:\n             if ctx and getattr(ctx, \"publish_opts\", None):\n-                use_user_flag = bool(\n-                    ctx.publish_opts.get(\"use_user\", use_user_flag)\n-                )\n+                use_user_flag = bool(ctx.publish_opts.get(\"use_user\", use_user_flag))\n         except Exception:\n             pass\n         if not packages:\n             _info(\"No published packages to update; skipping pip-updates step\")\n             return\n-        script_exists = bool(\n-            pip_updates_script and os.path.exists(pip_updates_script)\n-        )\n+        script_exists = bool(pip_updates_script and os.path.exists(pip_updates_script))\n         used_fallback = False\n         if script_exists:\n             try:\n                 inst = self._instantiate_pipupdates(\n                     x_cls_make_pip_updates_x, ctx, use_user_flag\n@@ -1138,13 +1092,11 @@\n             _info(\n                 \"pip-updates script not found; using direct pip fallback installation\"\n             )\n             used_fallback = True\n         if used_fallback:\n-            self._fallback_pip_install(\n-                packages, published_versions, use_user_flag\n-            )\n+            self._fallback_pip_install(packages, published_versions, use_user_flag)\n         initial_installed = self._get_installed_versions(packages)\n         initial_mismatches: list[tuple[str, str, str | None]] = []\n         for pkg, expected in published_versions.items():\n             if not expected:\n                 continue\n@@ -1193,13 +1145,11 @@\n         repo_main: str | None = None,\n     ) -> int:\n         \"\"\"Compare installed main file with repo copy.\"\"\"\n         try:\n             if not os.path.isfile(installed_main):\n-                _error(\n-                    f\"Installed main file not found for {pkg}: {installed_main}\"\n-                )\n+                _error(f\"Installed main file not found for {pkg}: {installed_main}\")\n                 return 1\n             # Prefer explicit repo_main (from manifest), else fall back to basename match\n             if repo_main is None:\n                 main_name = os.path.basename(installed_main)\n                 repo_main_candidate = os.path.join(repo_pkg_dir, main_name)\n@@ -1208,21 +1158,20 @@\n             if not os.path.isfile(repo_main_candidate):\n                 _error(\n                     f\"Repo main file not found for {pkg}: {repo_main_candidate} (dir={repo_pkg_dir})\"\n                 )\n                 return 1\n-            with open(installed_main, \"rb\") as f1, open(\n-                repo_main_candidate, \"rb\"\n-            ) as f2:\n+            with (\n+                open(installed_main, \"rb\") as f1,\n+                open(repo_main_candidate, \"rb\") as f2,\n+            ):\n                 if f1.read() != f2.read():\n                     _error(\n                         f\"Main file content mismatch for {pkg}: installed={installed_main} repo={repo_main_candidate}\"\n                     )\n                     return 1\n-            _info(\n-                f\"Main file OK for {pkg}: {os.path.basename(installed_main)}\"\n-            )\n+            _info(f\"Main file OK for {pkg}: {os.path.basename(installed_main)}\")\n             return 0\n         except Exception as e:\n             _error(f\"Error comparing main file for {pkg}: {e}\")\n             return 1\n \n@@ -1239,24 +1188,18 @@\n                 _error(f\"Installed ancillary file not found: {installed_path}\")\n                 return 1\n             if not os.path.isfile(repo_path):\n                 _error(f\"Repo ancillary file not found: {repo_path}\")\n                 return 1\n-            with open(installed_path, \"rb\") as f_inst, open(\n-                repo_path, \"rb\"\n-            ) as f_repo:\n+            with open(installed_path, \"rb\") as f_inst, open(repo_path, \"rb\") as f_repo:\n                 if f_inst.read() != f_repo.read():\n-                    _error(\n-                        f\"Ancillary file content mismatch for {pkg}: {anc_name}\"\n-                    )\n+                    _error(f\"Ancillary file content mismatch for {pkg}: {anc_name}\")\n                     return 1\n             _info(f\"Ancillary file OK for {pkg}: {anc_name}\")\n             return 0\n         except Exception as e:\n-            _error(\n-                f\"Error comparing ancillary file for {pkg}: {anc_name}: {e}\"\n-            )\n+            _error(f\"Error comparing ancillary file for {pkg}: {anc_name}: {e}\")\n             return 1\n \n     def _compare_ancillary_dir(\n         self,\n         installed_dir: str,\n@@ -1266,13 +1209,11 @@\n     ) -> int:\n         # Non-recursive: compare only top-level files\n         mismatches = 0\n         try:\n             if not os.path.isdir(installed_dir):\n-                _error(\n-                    f\"Installed ancillary directory not found: {installed_dir}\"\n-                )\n+                _error(f\"Installed ancillary directory not found: {installed_dir}\")\n                 return 1\n             if not os.path.isdir(repo_dir):\n                 _error(f\"Repo ancillary directory not found: {repo_dir}\")\n                 return 1\n \n@@ -1302,13 +1243,11 @@\n                 repo_path = os.path.join(repo_dir, rel)\n                 mismatches += self._compare_ancillary_file(\n                     inst_path, repo_path, pkg, f\"{anc_name}/{rel}\"\n                 )\n         except Exception as e:\n-            _error(\n-                f\"Error comparing ancillary directory for {pkg}: {anc_name}: {e}\"\n-            )\n+            _error(f\"Error comparing ancillary directory for {pkg}: {anc_name}: {e}\")\n             mismatches += 1\n         return mismatches\n \n     def _compare_ancillaries(\n         self,\n@@ -1349,13 +1288,11 @@\n                 mismatches += self._compare_ancillary_file(\n                     installed_path, repo_path, pkg, anc_name\n                 )\n         return mismatches\n \n-    def _find_installed_path(\n-        self, rel_path: str, target_is_dir: bool\n-    ) -> str | None:\n+    def _find_installed_path(self, rel_path: str, target_is_dir: bool) -> str | None:\n         import site\n \n         for base in site.getsitepackages():\n             candidate = os.path.join(base, rel_path)\n             if target_is_dir and os.path.isdir(candidate):\n@@ -1395,18 +1332,14 @@\n                 return locs[0]\n             if spec.origin:\n                 return os.path.dirname(spec.origin)\n         path = self._find_installed_path(pkg_name, True)\n         if not path:\n-            raise FileNotFoundError(\n-                f\"Package directory not found for {pkg_name}\"\n-            )\n+            raise FileNotFoundError(f\"Package directory not found for {pkg_name}\")\n         return path\n \n-    def _find_main_and_ancillaries_in_dir(\n-        self, pkg_dir: str\n-    ) -> tuple[str, list[str]]:\n+    def _find_main_and_ancillaries_in_dir(self, pkg_dir: str) -> tuple[str, list[str]]:\n         main_path = \"\"\n         try:\n             for fn in os.listdir(pkg_dir):\n                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n                     main_path = os.path.join(pkg_dir, fn)\n@@ -1476,13 +1409,11 @@\n                 if art and isinstance(art.get(\"main\"), str):\n                     main_rel = cast(\"str\", art[\"main\"])\n                     installed_main = os.path.join(pkg_dir, main_rel)\n                     repo_main_path = os.path.join(repo_pkg_dir, main_rel)\n                 else:\n-                    installed_main, _ = self._find_main_and_ancillaries_in_dir(\n-                        pkg_dir\n-                    )\n+                    installed_main, _ = self._find_main_and_ancillaries_in_dir(pkg_dir)\n             except Exception as e:\n                 _error(f\"Skipping {pkg}: error determining main file: {e}\")\n                 continue\n \n             if not os.path.isdir(repo_pkg_dir):\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_all_x.py:29: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:36: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:47: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:48: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:49: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:50: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:93: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:139: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:139: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:150: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:177: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:191: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:193: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\nx_cls_make_all_x.py:193: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:239: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:239: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:240: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:240: error: Expression type contains \"Any\" (has type \"Any | list[Never]\")  [misc]\nx_cls_make_all_x.py:240: error: Need type annotation for \"deps\"  [var-annotated]\nx_cls_make_all_x.py:241: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_all_x.py:244: error: Expression type contains \"Any\" (has type \"tuple[str, str, list[str] | None, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:244: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:257: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:258: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:281: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:289: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:291: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:312: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:317: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:319: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:333: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:334: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:335: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:338: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:339: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\nx_cls_make_all_x.py:340: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:343: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:344: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:345: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:347: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:348: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:349: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:350: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:351: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:360: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:361: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:362: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:363: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:364: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:367: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:373: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:374: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:379: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:379: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:380: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:382: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:382: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:384: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:384: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:387: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:389: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:389: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:391: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:394: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:402: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:405: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:410: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:410: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:413: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:414: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:415: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:421: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:424: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:424: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:430: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:443: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:446: error: Expression type contains \"Any\" (has type \"tuple[dict[str, str | None], dict[str, dict[str, Any]]]\")  [misc]\nx_cls_make_all_x.py:446: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:446: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:452: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:452: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:473: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:474: error: Expression type contains \"Any\" (has type \"Any | int\")  [misc]\nx_cls_make_all_x.py:474: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_all_x.py:474: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:483: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:484: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:485: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:513: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:514: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:514: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:515: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:515: error: Expression type contains \"Any\" (has type \"Literal[False] | Any\")  [misc]\nx_cls_make_all_x.py:515: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:517: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:602: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:611: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:611: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:612: error: Expression type contains \"Any\" (has type \"Literal[False] | Any\")  [misc]\nx_cls_make_all_x.py:612: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:617: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:667: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:676: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:677: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:682: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:683: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:688: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:691: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:691: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:693: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:707: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\nx_cls_make_all_x.py:708: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_all_x.py:708: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:708: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:709: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:710: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:710: error: Expression type contains \"Any\" (has type \"dict_items[str, Any]\")  [misc]\nx_cls_make_all_x.py:752: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:752: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:754: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:754: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:756: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:758: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:774: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:775: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\nx_cls_make_all_x.py:775: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:782: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:794: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:794: error: Expression type contains \"Any\" (has type \"Any | tuple[()]\")  [misc]\nx_cls_make_all_x.py:796: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:815: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:820: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:820: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:821: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:826: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:840: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:841: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:845: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:845: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:846: error: Expression type contains \"Any\" (has type \"Literal[False] | Any\")  [misc]\nx_cls_make_all_x.py:846: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:856: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:857: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:859: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:861: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:868: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:872: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:880: error: Expression type contains \"Any\" (has type \"Any | list[Never]\")  [misc]\nx_cls_make_all_x.py:880: error: Need type annotation for \"to_publish\"  [var-annotated]\nx_cls_make_all_x.py:881: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:881: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_all_x.py:882: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:883: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:883: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:884: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:887: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:888: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:890: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:893: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:894: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:897: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:900: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:901: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:901: error: Expression type contains \"Any\" (has type \"Any | dict[Any, Any]\")  [misc]\nx_cls_make_all_x.py:901: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_all_x.py:903: error: Expression type contains \"Any\" (has type \"tuple[dict[str, str | None], dict[str, dict[str, Any]]]\")  [misc]\nx_cls_make_all_x.py:903: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:906: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:910: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:910: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:913: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:914: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:914: error: Expression type contains \"Any\" (has type \"tuple[str, Any | None]\")  [misc]\nx_cls_make_all_x.py:914: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:915: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:915: error: Expression type contains \"Any\" (has type \"tuple[str, Any | None]\")  [misc]\nx_cls_make_all_x.py:915: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:916: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:917: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:919: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:919: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:921: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:921: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:924: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:953: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:958: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:958: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:959: error: Expression type contains \"Any\" (has type \"Literal[False] | Any\")  [misc]\nx_cls_make_all_x.py:959: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:965: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:970: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:991: error: Expression type contains \"Any\" (has type \"Any | list[Never]\")  [misc]\nx_cls_make_all_x.py:991: error: Need type annotation for \"manifest\"  [var-annotated]\nx_cls_make_all_x.py:993: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_all_x.py:994: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:994: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_all_x.py:995: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:996: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:996: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:997: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:999: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1097: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:1105: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1108: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1108: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1110: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1123: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1124: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\nx_cls_make_all_x.py:1124: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1126: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1127: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1129: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1177: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1177: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:1324: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\nx_cls_make_all_x.py:1392: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1393: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1393: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1431: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:1439: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1439: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:1440: error: Expression type contains \"Any\" (has type \"Literal[False] | Any\")  [misc]\nx_cls_make_all_x.py:1440: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1451: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:1456: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_all_x.py:1468: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:1468: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_all_x.py:1469: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_all_x.py:1470: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:1471: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_all_x.py:1476: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_all_x.py:1476: error: Expression type contains \"Any\" (has type \"dict[str, Any] | bool | None\")  [misc]\nx_cls_make_all_x.py:1476: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:1476: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1477: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:1503: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_all_x.py:1504: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:1504: error: Expression type contains \"Any\" (has type \"Any | list[Never]\")  [misc]\nx_cls_make_all_x.py:1504: error: Need type annotation for \"anc_val\"  [var-annotated]\nx_cls_make_all_x.py:1505: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nx_cls_make_all_x.py:1531: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:1531: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1532: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1534: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_all_x.py:1538: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:1539: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1542: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:1545: error: Expression type contains \"Any\" (has type \"tuple[dict[str, str | None], dict[str, dict[str, Any]]]\")  [misc]\nx_cls_make_all_x.py:1545: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1548: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:1555: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1555: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_all_x.py:1555: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_all_x.py:1563: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:1564: error: Expression has type \"Any\"  [misc]\nx_cls_make_all_x.py:1567: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_all_x.py:1570: error: Expression has type \"Any\"  [misc]\nforceit.py:133: error: Expression type contains \"Any\" (has type \"Callable[[Any], tuple[Any, str]]\")  [misc]\nforceit.py:133: error: Expression type contains \"Any\" (has type \"tuple[Any, str]\")  [misc]\nforceit.py:133: error: Expression has type \"Any\"  [misc]\nFound 260 errors in 2 files (checked 2 source files)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "BLE001 Do not catch blind exception: `Exception`\n  --> forceit.py:53:12\n   |\n51 |     try:\n52 |         return str(p.relative_to(root))\n53 |     except Exception:\n   |            ^^^^^^^^^\n54 |         return str(p)\n   |\n\nC901 `main` is too complex (17 > 10)\n  --> forceit.py:57:5\n   |\n57 | def main() -> int:\n   |     ^^^^\n58 |     src_root = _repo_parent_root()\n59 |     if not src_root.is_dir():\n   |\n\nPLR0912 Too many branches (16 > 12)\n  --> forceit.py:57:5\n   |\n57 | def main() -> int:\n   |     ^^^^\n58 |     src_root = _repo_parent_root()\n59 |     if not src_root.is_dir():\n   |\n\nPLR0915 Too many statements (56 > 50)\n  --> forceit.py:57:5\n   |\n57 | def main() -> int:\n   |     ^^^^\n58 |     src_root = _repo_parent_root()\n59 |     if not src_root.is_dir():\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> forceit.py:89:20\n   |\n87 |             try:\n88 |                 same = filecmp.cmp(s, d, shallow=False)\n89 |             except Exception:\n   |                    ^^^^^^^^^\n90 |                 same = False\n91 |             if same:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> forceit.py:99:20\n    |\n 97 |                 copied += 1\n 98 |                 copied_pairs.append((s, d))\n 99 |             except Exception as e:\n    |                    ^^^^^^^^^\n100 |                 print(f\"ERROR copying {s} -> {d}: {e}\", file=sys.stderr)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> forceit.py:122:20\n    |\n120 |                 rel = d.relative_to(DEST)\n121 |                 pkg = rel.parts[0] if rel.parts else d.name\n122 |             except Exception:\n    |                    ^^^^^^^^^\n123 |                 pkg = d.name\n124 |             pkg_counter[pkg] += 1\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n  --> x_cls_make_all_x.py:16:19\n   |\n14 | from typing import TYPE_CHECKING, Any, ClassVar, TypeAlias, cast\n15 |\n16 | _WORKSPACE_ROOT = os.path.abspath(\n   |                   ^^^^^^^^^^^^^^^\n17 |     os.path.join(os.path.dirname(__file__), \"..\")\n18 | )\n   |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_all_x.py:17:5\n   |\n16 | _WORKSPACE_ROOT = os.path.abspath(\n17 |     os.path.join(os.path.dirname(__file__), \"..\")\n   |     ^^^^^^^^^^^^\n18 | )\n   |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n  --> x_cls_make_all_x.py:17:18\n   |\n16 | _WORKSPACE_ROOT = os.path.abspath(\n17 |     os.path.join(os.path.dirname(__file__), \"..\")\n   |                  ^^^^^^^^^^^^^^^\n18 | )\n   |\nhelp: Replace with `Path(...).parent`\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_import_class_from_candidates`\n  --> x_cls_make_all_x.py:29:75\n   |\n29 | def _import_class_from_candidates(attr: str, modules: tuple[str, ...]) -> Any:\n   |                                                                           ^^^\n30 |     for module_name in modules:\n31 |         try:\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_all_x.py:39:11\n   |\n37 |           except AttributeError:\n38 |               continue\n39 |       raise ModuleNotFoundError(\n   |  ___________^\n40 | |         f\"Unable to import {attr} from any candidate module: {modules}\"\n41 | |     )\n   | |_____^\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_all_x.py:40:9\n   |\n38 |             continue\n39 |     raise ModuleNotFoundError(\n40 |         f\"Unable to import {attr} from any candidate module: {modules}\"\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n41 |     )\n   |\nhelp: Assign to variable; remove f-string literal\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:100:5\n    |\n 98 |   def _info(*args: object) -> None:\n 99 |       msg = \" \".join(str(a) for a in args)\n100 | /     try:\n101 | |         _LOGGER.info(\"%s\", msg)\n102 | |     except Exception:\n103 | |         pass\n    | |____________^\n104 |       try:\n105 |           print(msg)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:102:5\n    |\n100 |       try:\n101 |           _LOGGER.info(\"%s\", msg)\n102 | /     except Exception:\n103 | |         pass\n    | |____________^\n104 |       try:\n105 |           print(msg)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:102:12\n    |\n100 |     try:\n101 |         _LOGGER.info(\"%s\", msg)\n102 |     except Exception:\n    |            ^^^^^^^^^\n103 |         pass\n104 |     try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:106:12\n    |\n104 |     try:\n105 |         print(msg)\n106 |     except Exception:\n    |            ^^^^^^^^^\n107 |         try:\n108 |             sys.stdout.write(msg + \"\\n\")\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:107:9\n    |\n105 |           print(msg)\n106 |       except Exception:\n107 | /         try:\n108 | |             sys.stdout.write(msg + \"\\n\")\n109 | |         except Exception:\n110 | |             pass\n    | |________________^\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:109:9\n    |\n107 |           try:\n108 |               sys.stdout.write(msg + \"\\n\")\n109 | /         except Exception:\n110 | |             pass\n    | |________________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:109:16\n    |\n107 |         try:\n108 |             sys.stdout.write(msg + \"\\n\")\n109 |         except Exception:\n    |                ^^^^^^^^^\n110 |             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:115:5\n    |\n113 |   def _error(*args: object) -> None:\n114 |       msg = \" \".join(str(a) for a in args)\n115 | /     try:\n116 | |         _LOGGER.error(\"%s\", msg)\n117 | |     except Exception:\n118 | |         pass\n    | |____________^\n119 |       try:\n120 |           print(msg, file=sys.stderr)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:117:5\n    |\n115 |       try:\n116 |           _LOGGER.error(\"%s\", msg)\n117 | /     except Exception:\n118 | |         pass\n    | |____________^\n119 |       try:\n120 |           print(msg, file=sys.stderr)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:117:12\n    |\n115 |     try:\n116 |         _LOGGER.error(\"%s\", msg)\n117 |     except Exception:\n    |            ^^^^^^^^^\n118 |         pass\n119 |     try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:121:12\n    |\n119 |     try:\n120 |         print(msg, file=sys.stderr)\n121 |     except Exception:\n    |            ^^^^^^^^^\n122 |         try:\n123 |             sys.stderr.write(msg + \"\\n\")\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:122:9\n    |\n120 |           print(msg, file=sys.stderr)\n121 |       except Exception:\n122 | /         try:\n123 | |             sys.stderr.write(msg + \"\\n\")\n124 | |         except Exception:\n125 | |             pass\n    | |________________^\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:124:9\n    |\n122 |           try:\n123 |               sys.stderr.write(msg + \"\\n\")\n124 | /         except Exception:\n125 | |             pass\n    | |________________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:124:16\n    |\n122 |         try:\n123 |             sys.stderr.write(msg + \"\\n\")\n124 |         except Exception:\n    |                ^^^^^^^^^\n125 |             pass\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_all_x.py:128:29\n    |\n128 | def get_env_bool(name: str, default: bool = False) -> bool:\n    |                             ^^^^^^^\n129 |     v = os.environ.get(name)\n130 |     if v is None:\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_all_x.py:128:29\n    |\n128 | def get_env_bool(name: str, default: bool = False) -> bool:\n    |                             ^^^^^^^\n129 |     v = os.environ.get(name)\n130 |     if v is None:\n    |\n\nE501 Line too long (97 > 88)\n   --> x_cls_make_all_x.py:152:89\n    |\n150 |     OrchestratorContext = _Any\n151 | else:\n152 |     # At runtime prefer the orchestrator_core helper if available; otherwise fall back to globals\n    |                                                                                         ^^^^^^^^^\n153 |     try:\n154 |         # Dynamically import the optional runtime helper to avoid static\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:162:5\n    |\n160 |           if _bcf is not None:\n161 |               _build_context_from_config = _bcf\n162 | /     except Exception:\n163 | |         # leave _build_context_from_config as the previously-set value\n164 | |         pass\n    | |____________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:162:12\n    |\n160 |         if _bcf is not None:\n161 |             _build_context_from_config = _bcf\n162 |     except Exception:\n    |            ^^^^^^^^^\n163 |         # leave _build_context_from_config as the previously-set value\n164 |         pass\n    |\n\nC901 `validate_publish_manifest` is too complex (15 > 10)\n   --> x_cls_make_all_x.py:177:5\n    |\n177 | def validate_publish_manifest(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n178 |     data: Any,\n179 | ) -> list[ManifestEntry]:\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_all_x.py:177:5\n    |\n177 | def validate_publish_manifest(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n178 |     data: Any,\n179 | ) -> list[ManifestEntry]:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `data`\n   --> x_cls_make_all_x.py:178:11\n    |\n177 | def validate_publish_manifest(\n178 |     data: Any,\n    |           ^^^\n179 | ) -> list[ManifestEntry]:\n180 |     \"\"\"Validate the loaded manifest JSON and return a typed list of valid entries.\n    |\n\nE501 Line too long (102 > 88)\n   --> x_cls_make_all_x.py:186:89\n    |\n184 |       - version (str)\n185 |       - ancillary names (list[str] or null)\n186 |       - opts (object/dict) with optional keys (author, email, description, license_text, dependencies)\n    |                                                                                         ^^^^^^^^^^^^^^\n187 |\n188 |     Invalid entries are ignored and an error is logged.\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> x_cls_make_all_x.py:202:32\n    |\n200 |             if isinstance(raw, list):\n201 |                 lst = cast(\"list[object]\", raw)\n202 |                 if len(lst) != 4:\n    |                                ^\n203 |                     raise TypeError(\n204 |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n    |\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:203:21\n    |\n201 |                   lst = cast(\"list[object]\", raw)\n202 |                   if len(lst) != 4:\n203 | /                     raise TypeError(\n204 | |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n205 | |                     )\n    | |_____________________^\n206 |                   name, version, anc, opts = lst[0], lst[1], lst[2], lst[3]\n207 |               elif isinstance(raw, tuple):\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:203:27\n    |\n201 |                   lst = cast(\"list[object]\", raw)\n202 |                   if len(lst) != 4:\n203 |                       raise TypeError(\n    |  ___________________________^\n204 | |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n205 | |                     )\n    | |_____________________^\n206 |                   name, version, anc, opts = lst[0], lst[1], lst[2], lst[3]\n207 |               elif isinstance(raw, tuple):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:204:25\n    |\n202 |                 if len(lst) != 4:\n203 |                     raise TypeError(\n204 |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n205 |                     )\n206 |                 name, version, anc, opts = lst[0], lst[1], lst[2], lst[3]\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> x_cls_make_all_x.py:209:32\n    |\n207 |             elif isinstance(raw, tuple):\n208 |                 tpl = cast(\"tuple[object, ...]\", raw)\n209 |                 if len(tpl) != 4:\n    |                                ^\n210 |                     raise TypeError(\n211 |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n    |\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:210:21\n    |\n208 |                   tpl = cast(\"tuple[object, ...]\", raw)\n209 |                   if len(tpl) != 4:\n210 | /                     raise TypeError(\n211 | |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n212 | |                     )\n    | |_____________________^\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:210:27\n    |\n208 |                   tpl = cast(\"tuple[object, ...]\", raw)\n209 |                   if len(tpl) != 4:\n210 |                       raise TypeError(\n    |  ___________________________^\n211 | |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n212 | |                     )\n    | |_____________________^\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:211:25\n    |\n209 |                 if len(tpl) != 4:\n210 |                     raise TypeError(\n211 |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n212 |                     )\n213 |                 name, version, anc, opts = tpl\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:215:17\n    |\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n215 | /                 raise TypeError(\n216 | |                     f\"entry must be a 4-tuple/list, got {type(raw)!r}\"\n217 | |                 )\n    | |_________________^\n218 |\n219 |               if not isinstance(name, str) or not name:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:215:23\n    |\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n215 |                   raise TypeError(\n    |  _______________________^\n216 | |                     f\"entry must be a 4-tuple/list, got {type(raw)!r}\"\n217 | |                 )\n    | |_________________^\n218 |\n219 |               if not isinstance(name, str) or not name:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:216:21\n    |\n214 |             else:\n215 |                 raise TypeError(\n216 |                     f\"entry must be a 4-tuple/list, got {type(raw)!r}\"\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n217 |                 )\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:220:17\n    |\n219 |             if not isinstance(name, str) or not name:\n220 |                 raise TypeError(\"name must be non-empty string\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:220:23\n    |\n219 |             if not isinstance(name, str) or not name:\n220 |                 raise TypeError(\"name must be non-empty string\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:220:33\n    |\n219 |             if not isinstance(name, str) or not name:\n220 |                 raise TypeError(\"name must be non-empty string\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:222:17\n    |\n220 |                 raise TypeError(\"name must be non-empty string\")\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n223 |\n224 |             anc_list: list[str] | None\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:222:23\n    |\n220 |                 raise TypeError(\"name must be non-empty string\")\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n223 |\n224 |             anc_list: list[str] | None\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:222:33\n    |\n220 |                 raise TypeError(\"name must be non-empty string\")\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n223 |\n224 |             anc_list: list[str] | None\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:227:21\n    |\n225 |               if anc is not None:\n226 |                   if not isinstance(anc, list):\n227 | /                     raise TypeError(\n228 | |                         \"ancillaries must be null or list of strings\"\n229 | |                     )\n    | |_____________________^\n230 |                   anc_seq = cast(\"list[object]\", anc)\n231 |                   if not all(isinstance(x, str) for x in anc_seq):\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:227:27\n    |\n225 |               if anc is not None:\n226 |                   if not isinstance(anc, list):\n227 |                       raise TypeError(\n    |  ___________________________^\n228 | |                         \"ancillaries must be null or list of strings\"\n229 | |                     )\n    | |_____________________^\n230 |                   anc_seq = cast(\"list[object]\", anc)\n231 |                   if not all(isinstance(x, str) for x in anc_seq):\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:228:25\n    |\n226 |                 if not isinstance(anc, list):\n227 |                     raise TypeError(\n228 |                         \"ancillaries must be null or list of strings\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n229 |                     )\n230 |                 anc_seq = cast(\"list[object]\", anc)\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:232:21\n    |\n230 |                 anc_seq = cast(\"list[object]\", anc)\n231 |                 if not all(isinstance(x, str) for x in anc_seq):\n232 |                     raise TypeError(\"ancillaries must be list[str]\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n233 |                 anc_list = [cast(\"str\", x) for x in anc_seq]\n234 |             else:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:232:27\n    |\n230 |                 anc_seq = cast(\"list[object]\", anc)\n231 |                 if not all(isinstance(x, str) for x in anc_seq):\n232 |                     raise TypeError(\"ancillaries must be list[str]\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n233 |                 anc_list = [cast(\"str\", x) for x in anc_seq]\n234 |             else:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:232:37\n    |\n230 |                 anc_seq = cast(\"list[object]\", anc)\n231 |                 if not all(isinstance(x, str) for x in anc_seq):\n232 |                     raise TypeError(\"ancillaries must be list[str]\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n233 |                 anc_list = [cast(\"str\", x) for x in anc_seq]\n234 |             else:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:238:17\n    |\n237 |             if not isinstance(opts, dict):\n238 |                 raise TypeError(\"opts must be an object/dict\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n239 |             opts_d = cast(\"dict[str, Any]\", opts)\n240 |             deps = opts_d.get(\"dependencies\", [])\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:238:23\n    |\n237 |             if not isinstance(opts, dict):\n238 |                 raise TypeError(\"opts must be an object/dict\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n239 |             opts_d = cast(\"dict[str, Any]\", opts)\n240 |             deps = opts_d.get(\"dependencies\", [])\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:238:33\n    |\n237 |             if not isinstance(opts, dict):\n238 |                 raise TypeError(\"opts must be an object/dict\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n239 |             opts_d = cast(\"dict[str, Any]\", opts)\n240 |             deps = opts_d.get(\"dependencies\", [])\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:242:17\n    |\n240 |             deps = opts_d.get(\"dependencies\", [])\n241 |             if deps is not None and not isinstance(deps, list):\n242 |                 raise TypeError(\"opts.dependencies must be a list if present\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n243 |\n244 |             valid.append((name, version, anc_list, opts_d))\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:242:23\n    |\n240 |             deps = opts_d.get(\"dependencies\", [])\n241 |             if deps is not None and not isinstance(deps, list):\n242 |                 raise TypeError(\"opts.dependencies must be a list if present\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n243 |\n244 |             valid.append((name, version, anc_list, opts_d))\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:242:33\n    |\n240 |             deps = opts_d.get(\"dependencies\", [])\n241 |             if deps is not None and not isinstance(deps, list):\n242 |                 raise TypeError(\"opts.dependencies must be a list if present\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n243 |\n244 |             valid.append((name, version, anc_list, opts_d))\n    |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:245:16\n    |\n244 |             valid.append((name, version, anc_list, opts_d))\n245 |         except Exception as exc:\n    |                ^^^^^^^^^\n246 |             _error(f\"publish_manifest.json: invalid entry at index {i}: {exc}\")\n247 |             continue\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:252:22\n    |\n251 | try:\n252 |     _manifest_path = os.path.join(\n    |                      ^^^^^^^^^^^^\n253 |         os.path.dirname(__file__), \"publish_manifest.json\"\n254 |     )\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:253:9\n    |\n251 | try:\n252 |     _manifest_path = os.path.join(\n253 |         os.path.dirname(__file__), \"publish_manifest.json\"\n    |         ^^^^^^^^^^^^^^^\n254 |     )\n255 |     if os.path.exists(_manifest_path):\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:255:8\n    |\n253 |         os.path.dirname(__file__), \"publish_manifest.json\"\n254 |     )\n255 |     if os.path.exists(_manifest_path):\n    |        ^^^^^^^^^^^^^^\n256 |         with open(_manifest_path, encoding=\"utf-8\") as _mf:\n257 |             _loaded = json.load(_mf)\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_all_x.py:256:14\n    |\n254 |     )\n255 |     if os.path.exists(_manifest_path):\n256 |         with open(_manifest_path, encoding=\"utf-8\") as _mf:\n    |              ^^^^\n257 |             _loaded = json.load(_mf)\n258 |             if isinstance(_loaded, list):\n    |\nhelp: Replace with `Path.open()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:260:8\n    |\n258 |             if isinstance(_loaded, list):\n259 |                 _publish_manifest = validate_publish_manifest(_loaded)\n260 | except Exception:\n    |        ^^^^^^^^^\n261 |     _publish_manifest = []\n    |\n\nN801 Class name `x_cls_make_all_x` should use CapWords convention\n   --> x_cls_make_all_x.py:272:7\n    |\n270 | # Lightweight adapter class so the module exposes a ctx-aware constructor\n271 | # and can be instantiated by orchestrator flows that prefer objects.\n272 | class x_cls_make_all_x:\n    |       ^^^^^^^^^^^^^^^^\n273 |     def __init__(self, ctx: object | None = None) -> None:\n274 |         \"\"\"Context-aware orchestrator with stepwise methods.\"\"\"\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:280:9\n    |\n278 |       def run(self) -> None:\n279 |           ctx = self.build_context()\n280 | /         try:\n281 | |             globals()[\"_ORCHESTRATOR_CTX\"] = ctx\n282 | |         except Exception:\n283 | |             pass\n    | |________________^\n284 |           self.orchestrator_run(ctx)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:282:9\n    |\n280 |           try:\n281 |               globals()[\"_ORCHESTRATOR_CTX\"] = ctx\n282 | /         except Exception:\n283 | |             pass\n    | |________________^\n284 |           self.orchestrator_run(ctx)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:282:16\n    |\n280 |         try:\n281 |             globals()[\"_ORCHESTRATOR_CTX\"] = ctx\n282 |         except Exception:\n    |                ^^^^^^^^^\n283 |             pass\n284 |         self.orchestrator_run(ctx)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:293:20\n    |\n291 |                 res = _build_context_from_config()\n292 |                 return cast(\"OrchestratorContext\", res)\n293 |             except Exception:\n    |                    ^^^^^^^^^\n294 |                 return None\n295 |         return None\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:299:16\n    |\n297 |     # Utilities moved into class\n298 |     def repo_parent_root(self) -> str:\n299 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n    |                ^^^^^^^^^^^^^^^\n300 |\n301 |     def detect_clones_root(self, fallback: str | None = None) -> str:\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:299:32\n    |\n297 |     # Utilities moved into class\n298 |     def repo_parent_root(self) -> str:\n299 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n    |                                ^^^^^^^^^^^^\n300 |\n301 |     def detect_clones_root(self, fallback: str | None = None) -> str:\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:299:45\n    |\n297 |     # Utilities moved into class\n298 |     def repo_parent_root(self) -> str:\n299 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n    |                                             ^^^^^^^^^^^^^^^\n300 |\n301 |     def detect_clones_root(self, fallback: str | None = None) -> str:\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_all_x.py:304:26\n    |\n302 |         cand = fallback or self.repo_parent_root()\n303 |         try:\n304 |             for entry in os.listdir(cand):\n    |                          ^^^^^^^^^^\n305 |                 git_dir = os.path.join(cand, entry, \".git\")\n306 |                 if os.path.isdir(git_dir):\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:305:27\n    |\n303 |         try:\n304 |             for entry in os.listdir(cand):\n305 |                 git_dir = os.path.join(cand, entry, \".git\")\n    |                           ^^^^^^^^^^^^\n306 |                 if os.path.isdir(git_dir):\n307 |                     return cand\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:306:20\n    |\n304 |             for entry in os.listdir(cand):\n305 |                 git_dir = os.path.join(cand, entry, \".git\")\n306 |                 if os.path.isdir(git_dir):\n    |                    ^^^^^^^^^^^^^\n307 |                     return cand\n308 |         except Exception:\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:308:9\n    |\n306 |                   if os.path.isdir(git_dir):\n307 |                       return cand\n308 | /         except Exception:\n309 | |             pass\n    | |________________^\n310 |           return cand\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:308:16\n    |\n306 |                 if os.path.isdir(git_dir):\n307 |                     return cand\n308 |         except Exception:\n    |                ^^^^^^^^^\n309 |             pass\n310 |         return cand\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_instantiate_visitor`\n   --> x_cls_make_all_x.py:314:10\n    |\n312 |     def _instantiate_visitor(\n313 |         self, ctx: OrchestratorContext | None, root_dir: str | None = None\n314 |     ) -> Any:\n    |          ^^^\n315 |         root = root_dir or self.detect_clones_root()\n316 |         try:\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:326:22\n    |\n324 |                 os.path.relpath(path, pkg_dir)\n325 |                 if os.path.commonpath([path, pkg_dir]) == pkg_dir\n326 |                 else os.path.basename(path)\n    |                      ^^^^^^^^^^^^^^^^\n327 |             )\n328 |         except Exception:\n    |\nhelp: Replace with `Path(...).name`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:328:16\n    |\n326 |                 else os.path.basename(path)\n327 |             )\n328 |         except Exception:\n    |                ^^^^^^^^^\n329 |             return os.path.basename(path)\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:329:20\n    |\n327 |             )\n328 |         except Exception:\n329 |             return os.path.basename(path)\n    |                    ^^^^^^^^^^^^^^^^\n330 |\n331 |     # Step 2: top-level flow\n    |\nhelp: Replace with `Path(...).name`\n\nC901 `clone_repos` is too complex (14 > 10)\n   --> x_cls_make_all_x.py:338:9\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |         ^^^^^^^^^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nPLR0912 Too many branches (14 > 12)\n   --> x_cls_make_all_x.py:338:9\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |         ^^^^^^^^^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nARG002 Unused method argument: `ctx`\n   --> x_cls_make_all_x.py:338:27\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |                           ^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `clone_repos`\n   --> x_cls_make_all_x.py:338:63\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |                                                               ^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nN806 Variable `Cls` in function should be lowercase\n   --> x_cls_make_all_x.py:339:9\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n339 |         Cls = x_cls_make_github_clones_x\n    |         ^^^\n340 |         target_dir = getattr(\n341 |             MakeAllConfig, \"CLONER_TARGET_DIR\", self.repo_parent_root()\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:366:17\n    |\n364 |                       include_forks=include_forks,\n365 |                   )\n366 | /                 try:\n367 | |                     cloner.force_reclone = False\n368 | |                 except Exception:\n369 | |                     pass\n    | |________________________^\n370 |               else:\n371 |                   raise\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:368:17\n    |\n366 |                   try:\n367 |                       cloner.force_reclone = False\n368 | /                 except Exception:\n369 | |                     pass\n    | |________________________^\n370 |               else:\n371 |                   raise\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:368:24\n    |\n366 |                 try:\n367 |                     cloner.force_reclone = False\n368 |                 except Exception:\n    |                        ^^^^^^^^^\n369 |                     pass\n370 |             else:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:375:9\n    |\n373 |               if hasattr(cloner, \"force_reclone\"):\n374 |                   cloner.force_reclone = False\n375 | /         except Exception:\n376 | |             pass\n    | |________________^\n377 |           try:\n378 |               invoked = False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:375:16\n    |\n373 |             if hasattr(cloner, \"force_reclone\"):\n374 |                 cloner.force_reclone = False\n375 |         except Exception:\n    |                ^^^^^^^^^\n376 |             pass\n377 |         try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:393:21\n    |\n391 |                       cloner.main()\n392 |                   except TypeError:\n393 | /                     try:\n394 | |                         cloner.main()\n395 | |                     except Exception:\n396 | |                         pass\n    | |____________________________^\n397 |                   invoked = True\n398 |               if not invoked:\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:395:21\n    |\n393 |                       try:\n394 |                           cloner.main()\n395 | /                     except Exception:\n396 | |                         pass\n    | |____________________________^\n397 |                   invoked = True\n398 |               if not invoked:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:395:28\n    |\n393 |                     try:\n394 |                         cloner.main()\n395 |                     except Exception:\n    |                            ^^^^^^^^^\n396 |                         pass\n397 |                 invoked = True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:400:16\n    |\n398 |             if not invoked:\n399 |                 _info(\"No recognized cloner entrypoint found; skipping run\")\n400 |         except Exception as e:\n    |                ^^^^^^^^^\n401 |             _error(\"Cloner run failed:\", e)\n402 |         return cloner\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:406:23\n    |\n404 |     # Step 4: run visitor (moved logic from _run_visitor)\n405 |     def run_visitor(\n406 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |                       ^^^\n407 |     ) -> None:\n408 |         root = None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:411:16\n    |\n409 |         try:\n410 |             root = getattr(cloner, \"target_dir\", None)\n411 |         except Exception:\n    |                ^^^^^^^^^\n412 |             root = None\n413 |         root = root or self.detect_clones_root()\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:414:12\n    |\n412 |             root = None\n413 |         root = root or self.detect_clones_root()\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n    |            ^^^^^^^^^^^^^\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:414:26\n    |\n412 |             root = None\n413 |         root = root or self.detect_clones_root()\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n    |                          ^^^^^^^^^^^^\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:415:22\n    |\n413 |         root = root or self.detect_clones_root()\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n    |                      ^^^^^^^^^^^^^^^\n416 |             for entry in os.listdir(parent):\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_all_x.py:416:26\n    |\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n    |                          ^^^^^^^^^^\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n418 |                     root = parent\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:417:20\n    |\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n    |                    ^^^^^^^^^^^^^\n418 |                     root = parent\n419 |                     break\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:417:34\n    |\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n    |                                  ^^^^^^^^^^^^\n418 |                     root = parent\n419 |                     break\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:426:19\n    |\n424 |               vis = self._instantiate_visitor(ctx, root_dir=root)\n425 |           except Exception as e:\n426 |               raise AssertionError(\n    |  ___________________^\n427 | |                 f\"x_make_github_visitor instantiate failed: {e}\"\n428 | |             ) from e\n    | |_____________^\n429 |           try:\n430 |               vis.run_inspect_flow()\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:427:17\n    |\n425 |         except Exception as e:\n426 |             raise AssertionError(\n427 |                 f\"x_make_github_visitor instantiate failed: {e}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n428 |             ) from e\n429 |         try:\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (110 > 88)\n   --> x_cls_make_all_x.py:435:89\n    |\n433 |             if \"no child git repositories found\" in msg:\n434 |                 _info(\n435 |                     \"Visitor skipped: no child git repositories present at root; continuing orchestrator flow\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^\n436 |                 )\n437 |                 return\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:438:19\n    |\n436 |                   )\n437 |                   return\n438 |               raise AssertionError(\n    |  ___________________^\n439 | |                 f\"x_make_github_visitor run failed: {e}\"\n440 | |             ) from e\n    | |_____________^\n441 |\n442 |       # Step 5: publish and update installations (moved logic from _process_publishes_and_updates)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:439:17\n    |\n437 |                 return\n438 |             raise AssertionError(\n439 |                 f\"x_make_github_visitor run failed: {e}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n440 |             ) from e\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_all_x.py:442:89\n    |\n440 |             ) from e\n441 |\n442 |     # Step 5: publish and update installations (moved logic from _process_publishes_and_updates)\n    |                                                                                         ^^^^^^^^\n443 |     def process_publishes_and_updates(\n444 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:444:23\n    |\n442 |     # Step 5: publish and update installations (moved logic from _process_publishes_and_updates)\n443 |     def process_publishes_and_updates(\n444 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |                       ^^^\n445 |     ) -> None:\n446 |         published_versions, published_artifacts = self.publish_all(cloner, ctx)\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:461:9\n    |\n459 |           deadline = time.time() + timeout\n460 |           candidates = [name, name.replace(\"_\", \"-\")]\n461 | /         try:\n462 | |             time.sleep(5)\n463 | |         except Exception:\n464 | |             pass\n    | |________________^\n465 |           attempt = 0\n466 |           backoff = 1\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:463:9\n    |\n461 |           try:\n462 |               time.sleep(5)\n463 | /         except Exception:\n464 | |             pass\n    | |________________^\n465 |           attempt = 0\n466 |           backoff = 1\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:463:16\n    |\n461 |         try:\n462 |             time.sleep(5)\n463 |         except Exception:\n    |                ^^^^^^^^^\n464 |             pass\n465 |         attempt = 0\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:472:27\n    |\n470 |                 pj_url = f\"https://pypi.org/project/{candidate}/{version}/\"\n471 |                 try:\n472 |                     req = urllib.request.Request(pj_url, method=\"HEAD\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n473 |                     with urllib.request.urlopen(req, timeout=10) as resp:\n474 |                         if getattr(resp, \"status\", 200) == 200:\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:473:26\n    |\n471 |                 try:\n472 |                     req = urllib.request.Request(pj_url, method=\"HEAD\")\n473 |                     with urllib.request.urlopen(req, timeout=10) as resp:\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n474 |                         if getattr(resp, \"status\", 200) == 200:\n475 |                             _info(\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> x_cls_make_all_x.py:474:60\n    |\n472 |                     req = urllib.request.Request(pj_url, method=\"HEAD\")\n473 |                     with urllib.request.urlopen(req, timeout=10) as resp:\n474 |                         if getattr(resp, \"status\", 200) == 200:\n    |                                                            ^^^\n475 |                             _info(\n476 |                                 f\"PyPI: {name}=={version} is now available (queried {candidate} via project page)\"\n    |\n\nE501 Line too long (114 > 88)\n   --> x_cls_make_all_x.py:476:89\n    |\n474 |                         if getattr(resp, \"status\", 200) == 200:\n475 |                             _info(\n476 |                                 f\"PyPI: {name}=={version} is now available (queried {candidate} via project page)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n477 |                             )\n478 |                             return True\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:479:17\n    |\n477 |                               )\n478 |                               return True\n479 | /                 except Exception:\n480 | |                     pass\n    | |________________________^\n481 |                   json_url = f\"https://pypi.org/pypi/{candidate}/json\"\n482 |                   try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:479:24\n    |\n477 |                             )\n478 |                             return True\n479 |                 except Exception:\n    |                        ^^^^^^^^^\n480 |                     pass\n481 |                 json_url = f\"https://pypi.org/pypi/{candidate}/json\"\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:483:26\n    |\n481 |                 json_url = f\"https://pypi.org/pypi/{candidate}/json\"\n482 |                 try:\n483 |                     with urllib.request.urlopen(json_url, timeout=10) as resp:\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n484 |                         data = json.load(resp)\n485 |                     if version in data.get(\"releases\", {}):\n    |\n\nE501 Line too long (102 > 88)\n   --> x_cls_make_all_x.py:487:89\n    |\n485 |                     if version in data.get(\"releases\", {}):\n486 |                         _info(\n487 |                             f\"PyPI: {name}=={version} is now available (queried {candidate} via JSON)\"\n    |                                                                                         ^^^^^^^^^^^^^^\n488 |                         )\n489 |                         return True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:490:24\n    |\n488 |                         )\n489 |                         return True\n490 |                 except Exception as exc:\n    |                        ^^^^^^^^^\n491 |                     _info(\n492 |                         f\"PyPI check attempt {attempt} for {name} (using {candidate}) failed: {exc}\"\n    |\n\nE501 Line too long (100 > 88)\n   --> x_cls_make_all_x.py:492:89\n    |\n490 |                 except Exception as exc:\n491 |                     _info(\n492 |                         f\"PyPI check attempt {attempt} for {name} (using {candidate}) failed: {exc}\"\n    |                                                                                         ^^^^^^^^^^^^\n493 |                     )\n494 |                     continue\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:495:13\n    |\n493 |                       )\n494 |                       continue\n495 | /             try:\n496 | |                 time.sleep(backoff)\n497 | |             except Exception:\n498 | |                 pass\n    | |____________________^\n499 |               backoff = min(backoff * 2, 10)\n500 |           _info(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:497:13\n    |\n495 |               try:\n496 |                   time.sleep(backoff)\n497 | /             except Exception:\n498 | |                 pass\n    | |____________________^\n499 |               backoff = min(backoff * 2, 10)\n500 |           _info(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:497:20\n    |\n495 |             try:\n496 |                 time.sleep(backoff)\n497 |             except Exception:\n    |                    ^^^^^^^^^\n498 |                 pass\n499 |             backoff = min(backoff * 2, 10)\n    |\n\nS107 Possible hardcoded password assigned to function default: \"token_env\"\n   --> x_cls_make_all_x.py:506:49\n    |\n505 |     # Publishing helpers kept as freestanding where small; core flow moved here\n506 |     def _check_test_pypi(self, token_env: str = \"TEST_PYPI_TOKEN\") -> None:\n    |                                                 ^^^^^^^^^^^^^^^^^\n507 |         try:\n508 |             token = os.environ.get(token_env)\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:510:19\n    |\n508 |             token = os.environ.get(token_env)\n509 |             url = \"https://test.pypi.org/\"\n510 |             req = urllib.request.Request(url, method=\"HEAD\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n511 |             if token:\n512 |                 req.add_header(\"Authorization\", f\"token {token}\")\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:513:18\n    |\n511 |             if token:\n512 |                 req.add_header(\"Authorization\", f\"token {token}\")\n513 |             with urllib.request.urlopen(req, timeout=10) as resp:\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n514 |                 status = getattr(resp, \"status\", None)\n515 |                 if status is not None and status >= 400:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `400` with a constant variable\n   --> x_cls_make_all_x.py:515:53\n    |\n513 |             with urllib.request.urlopen(req, timeout=10) as resp:\n514 |                 status = getattr(resp, \"status\", None)\n515 |                 if status is not None and status >= 400:\n    |                                                     ^^^\n516 |                     raise AssertionError(\n517 |                         f\"test.pypi.org returned status {status}\"\n    |\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:516:21\n    |\n514 |                   status = getattr(resp, \"status\", None)\n515 |                   if status is not None and status >= 400:\n516 | /                     raise AssertionError(\n517 | |                         f\"test.pypi.org returned status {status}\"\n518 | |                     )\n    | |_____________________^\n519 |           except AssertionError:\n520 |               raise\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:516:27\n    |\n514 |                   status = getattr(resp, \"status\", None)\n515 |                   if status is not None and status >= 400:\n516 |                       raise AssertionError(\n    |  ___________________________^\n517 | |                         f\"test.pypi.org returned status {status}\"\n518 | |                     )\n    | |_____________________^\n519 |           except AssertionError:\n520 |               raise\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:517:25\n    |\n515 |                 if status is not None and status >= 400:\n516 |                     raise AssertionError(\n517 |                         f\"test.pypi.org returned status {status}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n518 |                     )\n519 |         except AssertionError:\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:522:19\n    |\n520 |             raise\n521 |         except Exception as exc:\n522 |             raise AssertionError(f\"test.pypi.org check failed: {exc}\") from exc\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n523 |\n524 |     def _to_posix_rel(self, rel: str) -> str:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:522:34\n    |\n520 |             raise\n521 |         except Exception as exc:\n522 |             raise AssertionError(f\"test.pypi.org check failed: {exc}\") from exc\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n523 |\n524 |     def _to_posix_rel(self, rel: str) -> str:\n    |\nhelp: Assign to variable; remove f-string literal\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:531:9\n    |\n529 |               )  # avoid accidental leading separators\n530 |               rel = rel.replace(\"\\\\\", \"/\")\n531 | /         except Exception:\n532 | |             pass\n    | |________________^\n533 |           return rel\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:531:16\n    |\n529 |             )  # avoid accidental leading separators\n530 |             rel = rel.replace(\"\\\\\", \"/\")\n531 |         except Exception:\n    |                ^^^^^^^^^\n532 |             pass\n533 |         return rel\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_all_x.py:536:89\n    |\n535 |     def _safe_rel_from_abs(self, abs_path: str, base_dir: str) -> str | None:\n536 |         \"\"\"Return posix relative path if abs_path is a file under base_dir; else None.\"\"\"\n    |                                                                                         ^\n537 |         try:\n538 |             ap = os.path.abspath(abs_path)\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:538:18\n    |\n536 |         \"\"\"Return posix relative path if abs_path is a file under base_dir; else None.\"\"\"\n537 |         try:\n538 |             ap = os.path.abspath(abs_path)\n    |                  ^^^^^^^^^^^^^^^\n539 |             bd = os.path.abspath(base_dir)\n540 |             common = os.path.commonpath([ap, bd])\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:539:18\n    |\n537 |         try:\n538 |             ap = os.path.abspath(abs_path)\n539 |             bd = os.path.abspath(base_dir)\n    |                  ^^^^^^^^^^^^^^^\n540 |             common = os.path.commonpath([ap, bd])\n541 |             if common != bd:\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:543:20\n    |\n541 |             if common != bd:\n542 |                 return None\n543 |             if not os.path.isfile(ap):\n    |                    ^^^^^^^^^^^^^^\n544 |                 return None\n545 |             rel_native = os.path.relpath(ap, bd)\n    |\nhelp: Replace with `Path(...).is_file()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:549:16\n    |\n547 |                 return None\n548 |             return self._to_posix_rel(rel_native)\n549 |         except Exception:\n    |                ^^^^^^^^^\n550 |             return None\n    |\n\nC901 `_load_ancillary_allowlist` is too complex (12 > 10)\n   --> x_cls_make_all_x.py:552:9\n    |\n550 |             return None\n551 |\n552 |     def _load_ancillary_allowlist(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n553 |         self, list_file: str, pkg_dir: str\n554 |     ) -> list[str]:\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_all_x.py:555:89\n    |\n553 |         self, list_file: str, pkg_dir: str\n554 |     ) -> list[str]:\n555 |         \"\"\"Load an allowlist of ancillary files; return clean relative paths under pkg_dir.\"\"\"\n    |                                                                                         ^^^^^^\n556 |         out: list[str] = []\n557 |         try:\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:558:20\n    |\n556 |         out: list[str] = []\n557 |         try:\n558 |             if not os.path.isfile(list_file):\n    |                    ^^^^^^^^^^^^^^\n559 |                 _info(f\"Ancillary allowlist not found: {list_file}\")\n560 |                 return out\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_all_x.py:561:18\n    |\n559 |                 _info(f\"Ancillary allowlist not found: {list_file}\")\n560 |                 return out\n561 |             with open(list_file, encoding=\"utf-8\") as f:\n    |                  ^^^^\n562 |                 lines = f.readlines()\n563 |             seen: set[str] = set()\n    |\nhelp: Replace with `Path.open()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:571:45\n    |\n569 |                 if line.startswith(\"@\"):\n570 |                     line = line[1:].strip()\n571 |                 abs_path = os.path.normpath(os.path.join(pkg_dir, line))\n    |                                             ^^^^^^^^^^^^\n572 |                 # Ensure file is within package dir and is a file\n573 |                 try:\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:575:26\n    |\n573 |                 try:\n574 |                     common = os.path.commonpath(\n575 |                         [os.path.abspath(abs_path), os.path.abspath(pkg_dir)]\n    |                          ^^^^^^^^^^^^^^^\n576 |                     )\n577 |                     if common != os.path.abspath(pkg_dir):\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:575:53\n    |\n573 |                 try:\n574 |                     common = os.path.commonpath(\n575 |                         [os.path.abspath(abs_path), os.path.abspath(pkg_dir)]\n    |                                                     ^^^^^^^^^^^^^^^\n576 |                     )\n577 |                     if common != os.path.abspath(pkg_dir):\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:577:34\n    |\n575 |                         [os.path.abspath(abs_path), os.path.abspath(pkg_dir)]\n576 |                     )\n577 |                     if common != os.path.abspath(pkg_dir):\n    |                                  ^^^^^^^^^^^^^^^\n578 |                         _info(\n579 |                             f\"Skipping ancillary outside package dir: {line}\"\n    |\nhelp: Replace with `Path(...).resolve()`\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_all_x.py:582:17\n    |\n580 |                           )\n581 |                           continue\n582 | /                 except Exception:\n583 | |                     continue\n    | |____________________________^\n584 |                   if not os.path.isfile(abs_path):\n585 |                       _info(f\"Skipping non-file ancillary entry: {line}\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:582:24\n    |\n580 |                         )\n581 |                         continue\n582 |                 except Exception:\n    |                        ^^^^^^^^^\n583 |                     continue\n584 |                 if not os.path.isfile(abs_path):\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:584:24\n    |\n582 |                 except Exception:\n583 |                     continue\n584 |                 if not os.path.isfile(abs_path):\n    |                        ^^^^^^^^^^^^^^\n585 |                     _info(f\"Skipping non-file ancillary entry: {line}\")\n586 |                     continue\n    |\nhelp: Replace with `Path(...).is_file()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:589:24\n    |\n587 |                 try:\n588 |                     rel = os.path.relpath(abs_path, pkg_dir)\n589 |                 except Exception:\n    |                        ^^^^^^^^^\n590 |                     rel = os.path.basename(abs_path)\n591 |                 if rel.startswith(\"..\"):\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:590:27\n    |\n588 |                     rel = os.path.relpath(abs_path, pkg_dir)\n589 |                 except Exception:\n590 |                     rel = os.path.basename(abs_path)\n    |                           ^^^^^^^^^^^^^^^^\n591 |                 if rel.startswith(\"..\"):\n592 |                     continue\n    |\nhelp: Replace with `Path(...).name`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:598:16\n    |\n596 |                     seen.add(rel)\n597 |                     out.append(rel)\n598 |         except Exception as e:\n    |                ^^^^^^^^^\n599 |             _error(f\"Failed to load ancillary allowlist {list_file}: {e}\")\n600 |         return out\n    |\n\nC901 `_locate_repo_main_and_ancillaries` is too complex (16 > 10)\n   --> x_cls_make_all_x.py:602:9\n    |\n600 |         return out\n601 |\n602 |     def _locate_repo_main_and_ancillaries(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n603 |         self,\n604 |         cloner: Any,\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_all_x.py:602:9\n    |\n600 |         return out\n601 |\n602 |     def _locate_repo_main_and_ancillaries(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n603 |         self,\n604 |         cloner: Any,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:604:17\n    |\n602 |     def _locate_repo_main_and_ancillaries(\n603 |         self,\n604 |         cloner: Any,\n    |                 ^^^\n605 |         pkg: str,\n606 |         main_basename: str | None,\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:615:16\n    |\n613 |                 else self.repo_parent_root()\n614 |             )\n615 |         except Exception:\n    |                ^^^^^^^^^\n616 |             base = self.repo_parent_root()\n617 |         pkg_dir = os.path.join(base, pkg)\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:617:19\n    |\n615 |         except Exception:\n616 |             base = self.repo_parent_root()\n617 |         pkg_dir = os.path.join(base, pkg)\n    |                   ^^^^^^^^^^^^\n618 |         if not os.path.isdir(pkg_dir):\n619 |             raise FileNotFoundError(\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:618:16\n    |\n616 |             base = self.repo_parent_root()\n617 |         pkg_dir = os.path.join(base, pkg)\n618 |         if not os.path.isdir(pkg_dir):\n    |                ^^^^^^^^^^^^^\n619 |             raise FileNotFoundError(\n620 |                 f\"Repo package directory not found for {pkg!r} at {pkg_dir}\"\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:619:19\n    |\n617 |           pkg_dir = os.path.join(base, pkg)\n618 |           if not os.path.isdir(pkg_dir):\n619 |               raise FileNotFoundError(\n    |  ___________________^\n620 | |                 f\"Repo package directory not found for {pkg!r} at {pkg_dir}\"\n621 | |             )\n    | |_____________^\n622 |           if main_basename is None:\n623 |               main_basename = pkg.replace(\"x_make_\", \"x_cls_make_\") + \".py\"\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:620:17\n    |\n618 |         if not os.path.isdir(pkg_dir):\n619 |             raise FileNotFoundError(\n620 |                 f\"Repo package directory not found for {pkg!r} at {pkg_dir}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n621 |             )\n622 |         if main_basename is None:\n    |\nhelp: Assign to variable; remove f-string literal\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:624:21\n    |\n622 |         if main_basename is None:\n623 |             main_basename = pkg.replace(\"x_make_\", \"x_cls_make_\") + \".py\"\n624 |         main_path = os.path.join(pkg_dir, main_basename)\n    |                     ^^^^^^^^^^^^\n625 |         if not os.path.exists(main_path):\n626 |             for fn in os.listdir(pkg_dir):\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:625:16\n    |\n623 |             main_basename = pkg.replace(\"x_make_\", \"x_cls_make_\") + \".py\"\n624 |         main_path = os.path.join(pkg_dir, main_basename)\n625 |         if not os.path.exists(main_path):\n    |                ^^^^^^^^^^^^^^\n626 |             for fn in os.listdir(pkg_dir):\n627 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_all_x.py:626:23\n    |\n624 |         main_path = os.path.join(pkg_dir, main_basename)\n625 |         if not os.path.exists(main_path):\n626 |             for fn in os.listdir(pkg_dir):\n    |                       ^^^^^^^^^^\n627 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n628 |                     main_path = os.path.join(pkg_dir, fn)\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:628:33\n    |\n626 |             for fn in os.listdir(pkg_dir):\n627 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n628 |                     main_path = os.path.join(pkg_dir, fn)\n    |                                 ^^^^^^^^^^^^\n629 |                     break\n630 |         if not os.path.exists(main_path):\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:630:16\n    |\n628 |                     main_path = os.path.join(pkg_dir, fn)\n629 |                     break\n630 |         if not os.path.exists(main_path):\n    |                ^^^^^^^^^^^^^^\n631 |             raise FileNotFoundError(\n632 |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:631:19\n    |\n629 |                       break\n630 |           if not os.path.exists(main_path):\n631 |               raise FileNotFoundError(\n    |  ___________________^\n632 | |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n633 | |             )\n    | |_____________^\n634 |           anc_rel: list[str] = []\n635 |           if ancillary_names:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:632:17\n    |\n630 |         if not os.path.exists(main_path):\n631 |             raise FileNotFoundError(\n632 |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n633 |             )\n634 |         anc_rel: list[str] = []\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (100 > 88)\n   --> x_cls_make_all_x.py:632:89\n    |\n630 |         if not os.path.exists(main_path):\n631 |             raise FileNotFoundError(\n632 |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n    |                                                                                         ^^^^^^^^^^^^\n633 |             )\n634 |         anc_rel: list[str] = []\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:640:33\n    |\n638 |                 if name.startswith(\"@\"):\n639 |                     # Allowlist file relative to the repo package directory\n640 |                     list_file = os.path.join(pkg_dir, name[1:].strip())\n    |                                 ^^^^^^^^^^^^\n641 |                     for allowed_rel in self._load_ancillary_allowlist(\n642 |                         list_file, pkg_dir\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:650:29\n    |\n648 |                 # Normalize any leading separators from manifest entries\n649 |                 safe_name = name.lstrip(\"/\\\\\")\n650 |                 candidate = os.path.join(pkg_dir, safe_name)\n    |                             ^^^^^^^^^^^^\n651 |                 if os.path.isfile(candidate):\n652 |                     rel_path: str | None = self._safe_rel_from_abs(\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:651:20\n    |\n649 |                 safe_name = name.lstrip(\"/\\\\\")\n650 |                 candidate = os.path.join(pkg_dir, safe_name)\n651 |                 if os.path.isfile(candidate):\n    |                    ^^^^^^^^^^^^^^\n652 |                     rel_path: str | None = self._safe_rel_from_abs(\n653 |                         candidate, pkg_dir\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:658:22\n    |\n656 |                         seen.add(rel_path)\n657 |                         anc_rel.append(rel_path)\n658 |                 elif os.path.isdir(candidate):\n    |                      ^^^^^^^^^^^^^\n659 |                     # No auto-expansion (security). Require allowlist.\n660 |                     _info(\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nE501 Line too long (137 > 88)\n   --> x_cls_make_all_x.py:661:89\n    |\n659 | \u00e2\u20ac\u00a6         # No auto-expansion (security). Require allowlist.\n660 | \u00e2\u20ac\u00a6         _info(\n661 | \u00e2\u20ac\u00a6             f\"Ancillary directory provided but not auto-included (use '@<allowlist>' or opts['ancillary_allowlist']): {name}\"\n    |                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n662 | \u00e2\u20ac\u00a6         )\n663 | \u00e2\u20ac\u00a6     else:\n    |\n\nN803 Argument name `PublisherCls` should be lowercase\n   --> x_cls_make_all_x.py:669:9\n    |\n667 |     def _instantiate_publisher(\n668 |         self,\n669 |         PublisherCls: Any,\n    |         ^^^^^^^^^^^^^^^^^\n670 |         name: str,\n671 |         version: str,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `PublisherCls`\n   --> x_cls_make_all_x.py:669:23\n    |\n667 |     def _instantiate_publisher(\n668 |         self,\n669 |         PublisherCls: Any,\n    |                       ^^^\n670 |         name: str,\n671 |         version: str,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_instantiate_publisher`\n   --> x_cls_make_all_x.py:674:10\n    |\n672 |         ctx: OrchestratorContext | None,\n673 |         safe_kwargs: dict[str, Any],\n674 |     ) -> Any:\n    |          ^^^\n675 |         try:\n676 |             return PublisherCls(\n    |\n\nC901 `_publish_do_publish` is too complex (17 > 10)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nPLR0913 Too many arguments in function definition (10 > 5)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nPLR0912 Too many branches (14 > 12)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nPLR0915 Too many statements (59 > 50)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nARG002 Unused method argument: `base`\n   --> x_cls_make_all_x.py:700:9\n    |\n698 |         ancillary_files: list[str],\n699 |         *,\n700 |         base: str,\n    |         ^^^^\n701 |         cloner: Any,\n702 |         ctx: OrchestratorContext | None,\n    |\n\nARG002 Unused method argument: `cloner`\n   --> x_cls_make_all_x.py:701:9\n    |\n699 |         *,\n700 |         base: str,\n701 |         cloner: Any,\n    |         ^^^^^^\n702 |         ctx: OrchestratorContext | None,\n703 |         local_kwargs: dict[str, Any],\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:701:17\n    |\n699 |         *,\n700 |         base: str,\n701 |         cloner: Any,\n    |                 ^^^\n702 |         ctx: OrchestratorContext | None,\n703 |         local_kwargs: dict[str, Any],\n    |\n\nN806 Variable `PublisherCls` in function should be lowercase\n   --> x_cls_make_all_x.py:707:9\n    |\n705 |         published_artifacts: dict[str, dict[str, Any]],\n706 |     ) -> None:\n707 |         PublisherCls = x_cls_make_pypi_x\n    |         ^^^^^^^^^^^^\n708 |         safe_kwargs = {\n709 |             k: v\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_all_x.py:714:89\n    |\n712 |         }\n713 |\n714 |         # Normalize ancillaries: include only explicitly listed files and files from allowlists.\n    |                                                                                         ^^^^^^^^\n715 |         pkg_dir = os.path.dirname(main_file)\n716 |         seen_rel: set[str] = set()\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:715:19\n    |\n714 |         # Normalize ancillaries: include only explicitly listed files and files from allowlists.\n715 |         pkg_dir = os.path.dirname(main_file)\n    |                   ^^^^^^^^^^^^^^^\n716 |         seen_rel: set[str] = set()\n717 |         norm_anc_rel: list[str] = []\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`\n   --> x_cls_make_all_x.py:723:24\n    |\n721 |                 ap = (\n722 |                     rel_or_abs\n723 |                     if os.path.isabs(rel_or_abs)\n    |                        ^^^^^^^^^^^^^\n724 |                     else os.path.join(pkg_dir, rel_or_abs)\n725 |                 )\n    |\nhelp: Replace with `Path(...).is_absolute()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:724:26\n    |\n722 |                     rel_or_abs\n723 |                     if os.path.isabs(rel_or_abs)\n724 |                     else os.path.join(pkg_dir, rel_or_abs)\n    |                          ^^^^^^^^^^^^\n725 |                 )\n726 |                 if os.path.isdir(ap):\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:726:20\n    |\n724 |                     else os.path.join(pkg_dir, rel_or_abs)\n725 |                 )\n726 |                 if os.path.isdir(ap):\n    |                    ^^^^^^^^^^^^^\n727 |                     # Directories are ignored unless files are enumerated via allowlists\n728 |                     _info(\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nE501 Line too long (148 > 88)\n   --> x_cls_make_all_x.py:729:89\n    |\n727 | \u00e2\u20ac\u00a6 files are enumerated via allowlists\n728 | \u00e2\u20ac\u00a6\n729 | \u00e2\u20ac\u00a6ry (no auto-expansion): {os.path.relpath(ap, pkg_dir) if not os.path.isabs(rel_or_abs) else ap}\"\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n730 | \u00e2\u20ac\u00a6\n731 | \u00e2\u20ac\u00a6\n    |\n\nPTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`\n   --> x_cls_make_all_x.py:729:114\n    |\n727 | \u00e2\u20ac\u00a6     # Directories are ignored unless files are enumerated via allowlists\n728 | \u00e2\u20ac\u00a6     _info(\n729 | \u00e2\u20ac\u00a6         f\"Ignoring ancillary directory (no auto-expansion): {os.path.relpath(ap, pkg_dir) if not os.path.isabs(rel_or_abs) else ap}\"\n    |                                                                                                    ^^^^^^^^^^^^^\n730 | \u00e2\u20ac\u00a6     )\n731 | \u00e2\u20ac\u00a6     return\n    |\nhelp: Replace with `Path(...).is_absolute()`\n\nERA001 Found commented-out code\n   --> x_cls_make_all_x.py:733:17\n    |\n731 |                     return\n732 |                 rel = self._safe_rel_from_abs(ap, pkg_dir)\n733 |                 ##rel = self._safe_rel_from_abs(ap, pkg_dir)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n734 |                 if not rel:\n735 |                     return\n    |\nhelp: Remove commented-out code\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:741:20\n    |\n739 |                     seen_rel.add(rel)\n740 |                     norm_anc_rel.append(rel)\n741 |             except Exception:\n    |                    ^^^^^^^^^\n742 |                 return\n    |\n\nE501 Line too long (107 > 88)\n   --> x_cls_make_all_x.py:746:89\n    |\n744 |         # 1) Files explicitly provided by manifest (already relative to pkg_dir)\n745 |         for a in ancillary_files or []:\n746 |             # Entries like '@list.txt' could have been passed through; ignore here (handled below via opts)\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^\n747 |             if a.startswith(\"@\"):\n748 |                 continue\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:762:17\n    |\n760 |         for spec in allow_files:\n761 |             list_path = (\n762 |                 os.path.join(pkg_dir, spec[1:].strip())\n    |                 ^^^^^^^^^^^^\n763 |                 if spec.startswith(\"@\")\n764 |                 else os.path.join(pkg_dir, spec)\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:764:22\n    |\n762 |                 os.path.join(pkg_dir, spec[1:].strip())\n763 |                 if spec.startswith(\"@\")\n764 |                 else os.path.join(pkg_dir, spec)\n    |                      ^^^^^^^^^^^^\n765 |             )\n766 |             for rel in self._load_ancillary_allowlist(list_path, pkg_dir):\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_all_x.py:778:19\n    |\n776 |             )\n777 |             # Run with cwd=pkg_dir and pass POSIX relative paths\n778 |             cwd = os.getcwd()\n    |                   ^^^^^^^^^\n779 |             main_rel = os.path.basename(main_file)\n780 |             try:\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:779:24\n    |\n777 |             # Run with cwd=pkg_dir and pass POSIX relative paths\n778 |             cwd = os.getcwd()\n779 |             main_rel = os.path.basename(main_file)\n    |                        ^^^^^^^^^^^^^^^^\n780 |             try:\n781 |                 os.chdir(pkg_dir)\n    |\nhelp: Replace with `Path(...).name`\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:784:17\n    |\n782 |                   published = publisher.publish(main_rel, norm_anc_rel)\n783 |               finally:\n784 | /                 try:\n785 | |                     os.chdir(cwd)\n786 | |                 except Exception:\n787 | |                     pass\n    | |________________________^\n788 |           except Exception as exc:\n789 |               # ...existing error handling...\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:786:17\n    |\n784 |                   try:\n785 |                       os.chdir(cwd)\n786 | /                 except Exception:\n787 | |                     pass\n    | |________________________^\n788 |           except Exception as exc:\n789 |               # ...existing error handling...\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:786:24\n    |\n784 |                 try:\n785 |                     os.chdir(cwd)\n786 |                 except Exception:\n    |                        ^^^^^^^^^\n787 |                     pass\n788 |         except Exception as exc:\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_all_x.py:810:89\n    |\n808 |             ):\n809 |                 _info(\n810 |                     f\"SKIP: {name} version {version} already exists on PyPI. Skipping publish.\"\n    |                                                                                         ^^^^^^^\n811 |                 )\n812 |                 published = True\n    |\n\nPLR0913 Too many arguments in function definition (8 > 5)\n   --> x_cls_make_all_x.py:826:9\n    |\n824 |             _info(f\"publish skipped for {name} {version} (minimal stub)\")\n825 |\n826 |     def _publish_one(\n    |         ^^^^^^^^^^^^\n827 |         self,\n828 |         name: str,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:833:17\n    |\n831 |         ancillary_files: list[str],\n832 |         *,\n833 |         cloner: Any,\n    |                 ^^^\n834 |         ctx: OrchestratorContext | None,\n835 |         published_versions: dict[str, str | None],\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> x_cls_make_all_x.py:837:19\n    |\n835 |         published_versions: dict[str, str | None],\n836 |         published_artifacts: dict[str, dict[str, Any]],\n837 |         **kwargs: Any,\n    |                   ^^^\n838 |     ) -> None:\n839 |         _info(f\"Publishing {name} version {version}\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:849:20\n    |\n847 |                     else self.repo_parent_root()\n848 |                 )\n849 |             except Exception:\n    |                    ^^^^^^^^^\n850 |                 base = self.repo_parent_root()\n851 |             self._publish_do_publish(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:869:23\n    |\n867 |     # Step 5a: publish all packages (moved logic from freestanding publish_all)\n868 |     def publish_all(\n869 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |                       ^^^\n870 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, Any]]]:\n871 |         published_versions: dict[str, str | None] = {}\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:877:19\n    |\n875 |               self._check_test_pypi()\n876 |           except Exception as exc:\n877 |               raise AssertionError(\n    |  ___________________^\n878 | |                 f\"test.pypi.org connectivity/token check failed: {exc}\"\n879 | |             ) from exc\n    | |_____________^\n880 |           to_publish = getattr(MakeAllConfig, \"PUBLISH_MANIFEST\", [])\n881 |           for repo_name, version, anc_names, opts in to_publish:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:878:17\n    |\n876 |         except Exception as exc:\n877 |             raise AssertionError(\n878 |                 f\"test.pypi.org connectivity/token check failed: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n879 |             ) from exc\n880 |         to_publish = getattr(MakeAllConfig, \"PUBLISH_MANIFEST\", [])\n    |\nhelp: Assign to variable; remove f-string literal\n\nN803 Argument name `PipUpdatesCls` should be lowercase\n   --> x_cls_make_all_x.py:907:15\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |               ^^^^^^^^^^^^^^^^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `PipUpdatesCls`\n   --> x_cls_make_all_x.py:907:30\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |                              ^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `ctx`\n   --> x_cls_make_all_x.py:907:40\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |                                        ^^^^^^^^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_all_x.py:907:52\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |                                                    ^^^^^^^^^^^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_instantiate_pipupdates`\n   --> x_cls_make_all_x.py:908:10\n    |\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n908 |     ) -> Any:\n    |          ^^^\n909 |         try:\n910 |             return PipUpdatesCls(ctx)\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:911:9\n    |\n909 |           try:\n910 |               return PipUpdatesCls(ctx)\n911 | /         except Exception:\n912 | |             pass\n    | |________________^\n913 |           attempt_kwargs: list[dict[str, Any]] = [\n914 |               {\"ctx\": ctx},\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:911:16\n    |\n909 |         try:\n910 |             return PipUpdatesCls(ctx)\n911 |         except Exception:\n    |                ^^^^^^^^^\n912 |             pass\n913 |         attempt_kwargs: list[dict[str, Any]] = [\n    |\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_all_x.py:922:13\n    |\n920 |               try:\n921 |                   return PipUpdatesCls(**kwargs)\n922 | /             except Exception:\n923 | |                 continue\n    | |________________________^\n924 |           return PipUpdatesCls()\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:922:20\n    |\n920 |             try:\n921 |                 return PipUpdatesCls(**kwargs)\n922 |             except Exception:\n    |                    ^^^^^^^^^\n923 |                 continue\n924 |         return PipUpdatesCls()\n    |\n\nC901 `_locate_and_choose_packages` is too complex (12 > 10)\n   --> x_cls_make_all_x.py:953:9\n    |\n951 |         return any_failures_local\n952 |\n953 |     def _locate_and_choose_packages(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n954 |         self, cloner: Any, published_versions: dict[str, str | None]\n955 |     ) -> tuple[list[str], str, bool]:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:954:23\n    |\n953 |     def _locate_and_choose_packages(\n954 |         self, cloner: Any, published_versions: dict[str, str | None]\n    |                       ^^^\n955 |     ) -> tuple[list[str], str, bool]:\n956 |         try:\n    |\n\nARG002 Unused method argument: `published_versions`\n   --> x_cls_make_all_x.py:954:28\n    |\n953 |     def _locate_and_choose_packages(\n954 |         self, cloner: Any, published_versions: dict[str, str | None]\n    |                            ^^^^^^^^^^^^^^^^^^\n955 |     ) -> tuple[list[str], str, bool]:\n956 |         try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:962:16\n    |\n960 |                 else self.repo_parent_root()\n961 |             )\n962 |         except Exception:\n    |                ^^^^^^^^^\n963 |             base = self.repo_parent_root()\n964 |         pip_updates_script = os.path.join(\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:964:30\n    |\n962 |         except Exception:\n963 |             base = self.repo_parent_root()\n964 |         pip_updates_script = os.path.join(\n    |                              ^^^^^^^^^^^^\n965 |             base, \"x_4357_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n966 |         )\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:967:16\n    |\n965 |             base, \"x_4357_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n966 |         )\n967 |         if not os.path.exists(pip_updates_script):\n    |                ^^^^^^^^^^^^^^\n968 |             # Try alternative workspace naming without 4357 prefix\n969 |             alt_pkg = os.path.join(\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:969:23\n    |\n967 |         if not os.path.exists(pip_updates_script):\n968 |             # Try alternative workspace naming without 4357 prefix\n969 |             alt_pkg = os.path.join(\n    |                       ^^^^^^^^^^^^\n970 |                 base, \"x_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n971 |             )\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:972:16\n    |\n970 |                 base, \"x_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n971 |             )\n972 |             if os.path.exists(alt_pkg):\n    |                ^^^^^^^^^^^^^^\n973 |                 pip_updates_script = alt_pkg\n974 |         if not os.path.exists(pip_updates_script):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:974:16\n    |\n972 |             if os.path.exists(alt_pkg):\n973 |                 pip_updates_script = alt_pkg\n974 |         if not os.path.exists(pip_updates_script):\n    |                ^^^^^^^^^^^^^^\n975 |             alt = os.path.join(\n976 |                 os.getcwd(),\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:975:19\n    |\n973 |                 pip_updates_script = alt_pkg\n974 |         if not os.path.exists(pip_updates_script):\n975 |             alt = os.path.join(\n    |                   ^^^^^^^^^^^^\n976 |                 os.getcwd(),\n977 |                 \"x_4357_make_pip_updates_x\",\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_all_x.py:976:17\n    |\n974 |         if not os.path.exists(pip_updates_script):\n975 |             alt = os.path.join(\n976 |                 os.getcwd(),\n    |                 ^^^^^^^^^\n977 |                 \"x_4357_make_pip_updates_x\",\n978 |                 \"x_cls_make_pip_updates_x.py\",\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:980:16\n    |\n978 |                 \"x_cls_make_pip_updates_x.py\",\n979 |             )\n980 |             if os.path.exists(alt):\n    |                ^^^^^^^^^^^^^^\n981 |                 pip_updates_script = alt\n982 |         if not os.path.exists(pip_updates_script):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:982:16\n    |\n980 |             if os.path.exists(alt):\n981 |                 pip_updates_script = alt\n982 |         if not os.path.exists(pip_updates_script):\n    |                ^^^^^^^^^^^^^^\n983 |             alt2 = os.path.join(\n984 |                 os.getcwd(),\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:983:20\n    |\n981 |                 pip_updates_script = alt\n982 |         if not os.path.exists(pip_updates_script):\n983 |             alt2 = os.path.join(\n    |                    ^^^^^^^^^^^^\n984 |                 os.getcwd(),\n985 |                 \"x_make_pip_updates_x\",\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_all_x.py:984:17\n    |\n982 |         if not os.path.exists(pip_updates_script):\n983 |             alt2 = os.path.join(\n984 |                 os.getcwd(),\n    |                 ^^^^^^^^^\n985 |                 \"x_make_pip_updates_x\",\n986 |                 \"x_cls_make_pip_updates_x.py\",\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:988:16\n    |\n986 |                 \"x_cls_make_pip_updates_x.py\",\n987 |             )\n988 |             if os.path.exists(alt2):\n    |                ^^^^^^^^^^^^^^\n989 |                 pip_updates_script = alt2\n990 |         use_user_flag = False\n    |\nhelp: Replace with `Path(...).exists()`\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1017:9\n     |\n1015 |         self, packages: list[str]\n1016 |     ) -> dict[str, str | None]:\n1017 |         import importlib.metadata\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n1018 |\n1019 |         initial_installed: dict[str, str | None] = {}\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1026:20\n     |\n1024 |                 initial_installed[pkg] = v\n1025 |                 _info(f\"{pkg}: {v}\")\n1026 |             except Exception as e:\n     |                    ^^^^^^^^^\n1027 |                 initial_installed[pkg] = None\n1028 |                 _info(f\"{pkg}: not installed ({e})\")\n     |\n\nFBT001 Boolean-typed positional argument in function definition\n    --> x_cls_make_all_x.py:1035:9\n     |\n1033 |         mismatches: list[tuple[str, str, str | None]],\n1034 |         pip_updates_script: str,\n1035 |         use_user_flag: bool,\n     |         ^^^^^^^^^^^^^\n1036 |         final_installed: dict[str, str | None],\n1037 |     ) -> int:\n     |\n\nS603 `subprocess` call: check for execution of untrusted input\n    --> x_cls_make_all_x.py:1045:22\n     |\n1043 |         )\n1044 |         _info(f\"Retrying install for pinned versions: {' '.join(retry_cmd)}\")\n1045 |         retry_proc = subprocess.run(\n     |                      ^^^^^^^^^^^^^^\n1046 |             retry_cmd, capture_output=True, text=True, check=False\n1047 |         )\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1055:17\n     |\n1053 |             try:\n1054 |                 # import locally to avoid relying on a top-level import\n1055 |                 import importlib.metadata as _importlib_metadata\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1056 |\n1057 |                 final_installed[p] = _importlib_metadata.version(p)\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1058:20\n     |\n1057 |                 final_installed[p] = _importlib_metadata.version(p)\n1058 |             except Exception:\n     |                    ^^^^^^^^^\n1059 |                 final_installed[p] = None\n1060 |         return retry_proc.returncode\n     |\n\nFBT001 Boolean-typed positional argument in function definition\n    --> x_cls_make_all_x.py:1067:9\n     |\n1065 |         packages: list[str],\n1066 |         published_versions: dict[str, str | None],\n1067 |         use_user_flag: bool,\n     |         ^^^^^^^^^^^^^\n1068 |     ) -> None:\n1069 |         python = sys.executable\n     |\n\nS603 `subprocess` call: check for execution of untrusted input\n    --> x_cls_make_all_x.py:1087:24\n     |\n1085 |             _info(\"Fallback pip install:\", \" \".join(cmd))\n1086 |             try:\n1087 |                 proc = subprocess.run(\n     |                        ^^^^^^^^^^^^^^\n1088 |                     cmd, capture_output=True, text=True, check=False\n1089 |                 )\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1094:20\n     |\n1092 |                 if proc.stderr:\n1093 |                     _error(proc.stderr.strip())\n1094 |             except Exception as e:\n     |                    ^^^^^^^^^\n1095 |                 _error(f\"Fallback pip install failed: {e}\")\n     |\n\nC901 `run_pip_updates` is too complex (15 > 10)\n    --> x_cls_make_all_x.py:1097:9\n     |\n1095 |                 _error(f\"Fallback pip install failed: {e}\")\n1096 |\n1097 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1098 |         self,\n1099 |         cloner: Any,\n     |\n\nPLR0912 Too many branches (15 > 12)\n    --> x_cls_make_all_x.py:1097:9\n     |\n1095 |                 _error(f\"Fallback pip install failed: {e}\")\n1096 |\n1097 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1098 |         self,\n1099 |         cloner: Any,\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1099:17\n     |\n1097 |     def run_pip_updates(\n1098 |         self,\n1099 |         cloner: Any,\n     |                 ^^^\n1100 |         published_versions: dict[str, str | None],\n1101 |         published_artifacts: dict[str, dict[str, Any]],\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `ctx`\n    --> x_cls_make_all_x.py:1102:14\n     |\n1100 |         published_versions: dict[str, str | None],\n1101 |         published_artifacts: dict[str, dict[str, Any]],\n1102 |         ctx: Any | None = None,\n     |              ^^^^^^^^^^\n1103 |     ) -> None:\n1104 |         packages, pip_updates_script, use_user_flag = (\n     |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n    --> x_cls_make_all_x.py:1112:9\n     |\n1110 |                       ctx.publish_opts.get(\"use_user\", use_user_flag)\n1111 |                   )\n1112 | /         except Exception:\n1113 | |             pass\n     | |________________^\n1114 |           if not packages:\n1115 |               _info(\"No published packages to update; skipping pip-updates step\")\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1112:16\n     |\n1110 |                     ctx.publish_opts.get(\"use_user\", use_user_flag)\n1111 |                 )\n1112 |         except Exception:\n     |                ^^^^^^^^^\n1113 |             pass\n1114 |         if not packages:\n     |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n    --> x_cls_make_all_x.py:1118:36\n     |\n1116 |             return\n1117 |         script_exists = bool(\n1118 |             pip_updates_script and os.path.exists(pip_updates_script)\n     |                                    ^^^^^^^^^^^^^^\n1119 |         )\n1120 |         used_fallback = False\n     |\nhelp: Replace with `Path(...).exists()`\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:1129:89\n     |\n1127 |                 if rc != 0:\n1128 |                     _error(\n1129 |                         f\"pip-updates reported exit code {rc}; switching to fallback pip install\"\n     |                                                                                         ^^^^^^^^^\n1130 |                     )\n1131 |                     used_fallback = True\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1132:20\n     |\n1130 |                     )\n1131 |                     used_fallback = True\n1132 |             except Exception as e:\n     |                    ^^^^^^^^^\n1133 |                 _error(\n1134 |                     f\"pip-updates invocation failed: {e}; switching to fallback pip install\"\n     |\n\nE501 Line too long (92 > 88)\n    --> x_cls_make_all_x.py:1134:89\n     |\n1132 |             except Exception as e:\n1133 |                 _error(\n1134 |                     f\"pip-updates invocation failed: {e}; switching to fallback pip install\"\n     |                                                                                         ^^^^\n1135 |                 )\n1136 |                 used_fallback = True\n     |\n\nE501 Line too long (102 > 88)\n    --> x_cls_make_all_x.py:1181:89\n     |\n1179 |             if mismatches:\n1180 |                 _error(\n1181 |                     f\"Post-install verification detected {mismatches} mismatches, exiting with code 2\"\n     |                                                                                         ^^^^^^^^^^^^^^\n1182 |                 )\n1183 |                 sys.exit(2)\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1184:16\n     |\n1182 |                 )\n1183 |                 sys.exit(2)\n1184 |         except Exception as e:\n     |                ^^^^^^^^^\n1185 |             _error(f\"Post-install verification failed: {e}\")\n     |\n\nARG002 Unused method argument: `pkg_dir`\n    --> x_cls_make_all_x.py:1190:9\n     |\n1188 |         self,\n1189 |         pkg: str,\n1190 |         pkg_dir: str,\n     |         ^^^^^^^\n1191 |         repo_pkg_dir: str,\n1192 |         installed_main: str,\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1197:20\n     |\n1195 |         \"\"\"Compare installed main file with repo copy.\"\"\"\n1196 |         try:\n1197 |             if not os.path.isfile(installed_main):\n     |                    ^^^^^^^^^^^^^^\n1198 |                 _error(\n1199 |                     f\"Installed main file not found for {pkg}: {installed_main}\"\n     |\nhelp: Replace with `Path(...).is_file()`\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_all_x.py:1202:89\n     |\n1200 |                 )\n1201 |                 return 1\n1202 |             # Prefer explicit repo_main (from manifest), else fall back to basename match\n     |                                                                                         ^\n1203 |             if repo_main is None:\n1204 |                 main_name = os.path.basename(installed_main)\n     |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n    --> x_cls_make_all_x.py:1204:29\n     |\n1202 |             # Prefer explicit repo_main (from manifest), else fall back to basename match\n1203 |             if repo_main is None:\n1204 |                 main_name = os.path.basename(installed_main)\n     |                             ^^^^^^^^^^^^^^^^\n1205 |                 repo_main_candidate = os.path.join(repo_pkg_dir, main_name)\n1206 |             else:\n     |\nhelp: Replace with `Path(...).name`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1205:39\n     |\n1203 |             if repo_main is None:\n1204 |                 main_name = os.path.basename(installed_main)\n1205 |                 repo_main_candidate = os.path.join(repo_pkg_dir, main_name)\n     |                                       ^^^^^^^^^^^^\n1206 |             else:\n1207 |                 repo_main_candidate = repo_main\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1208:20\n     |\n1206 |             else:\n1207 |                 repo_main_candidate = repo_main\n1208 |             if not os.path.isfile(repo_main_candidate):\n     |                    ^^^^^^^^^^^^^^\n1209 |                 _error(\n1210 |                     f\"Repo main file not found for {pkg}: {repo_main_candidate} (dir={repo_pkg_dir})\"\n     |\nhelp: Replace with `Path(...).is_file()`\n\nE501 Line too long (101 > 88)\n    --> x_cls_make_all_x.py:1210:89\n     |\n1208 |             if not os.path.isfile(repo_main_candidate):\n1209 |                 _error(\n1210 |                     f\"Repo main file not found for {pkg}: {repo_main_candidate} (dir={repo_pkg_dir})\"\n     |                                                                                         ^^^^^^^^^^^^^\n1211 |                 )\n1212 |                 return 1\n     |\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1213:18\n     |\n1211 |                 )\n1212 |                 return 1\n1213 |             with open(installed_main, \"rb\") as f1, open(\n     |                  ^^^^\n1214 |                 repo_main_candidate, \"rb\"\n1215 |             ) as f2:\n     |\nhelp: Replace with `Path.open()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1213:52\n     |\n1211 |                 )\n1212 |                 return 1\n1213 |             with open(installed_main, \"rb\") as f1, open(\n     |                                                    ^^^^\n1214 |                 repo_main_candidate, \"rb\"\n1215 |             ) as f2:\n     |\nhelp: Replace with `Path.open()`\n\nE501 Line too long (118 > 88)\n    --> x_cls_make_all_x.py:1218:89\n     |\n1216 |                 if f1.read() != f2.read():\n1217 |                     _error(\n1218 |                         f\"Main file content mismatch for {pkg}: installed={installed_main} repo={repo_main_candidate}\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1219 |                     )\n1220 |                     return 1\n     |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n    --> x_cls_make_all_x.py:1222:44\n     |\n1220 |                     return 1\n1221 |             _info(\n1222 |                 f\"Main file OK for {pkg}: {os.path.basename(installed_main)}\"\n     |                                            ^^^^^^^^^^^^^^^^\n1223 |             )\n1224 |             return 0\n     |\nhelp: Replace with `Path(...).name`\n\nTRY300 Consider moving this statement to an `else` block\n    --> x_cls_make_all_x.py:1224:13\n     |\n1222 |                 f\"Main file OK for {pkg}: {os.path.basename(installed_main)}\"\n1223 |             )\n1224 |             return 0\n     |             ^^^^^^^^\n1225 |         except Exception as e:\n1226 |             _error(f\"Error comparing main file for {pkg}: {e}\")\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1225:16\n     |\n1223 |             )\n1224 |             return 0\n1225 |         except Exception as e:\n     |                ^^^^^^^^^\n1226 |             _error(f\"Error comparing main file for {pkg}: {e}\")\n1227 |             return 1\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1238:20\n     |\n1236 |     ) -> int:\n1237 |         try:\n1238 |             if not os.path.isfile(installed_path):\n     |                    ^^^^^^^^^^^^^^\n1239 |                 _error(f\"Installed ancillary file not found: {installed_path}\")\n1240 |                 return 1\n     |\nhelp: Replace with `Path(...).is_file()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1241:20\n     |\n1239 |                 _error(f\"Installed ancillary file not found: {installed_path}\")\n1240 |                 return 1\n1241 |             if not os.path.isfile(repo_path):\n     |                    ^^^^^^^^^^^^^^\n1242 |                 _error(f\"Repo ancillary file not found: {repo_path}\")\n1243 |                 return 1\n     |\nhelp: Replace with `Path(...).is_file()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1244:18\n     |\n1242 |                 _error(f\"Repo ancillary file not found: {repo_path}\")\n1243 |                 return 1\n1244 |             with open(installed_path, \"rb\") as f_inst, open(\n     |                  ^^^^\n1245 |                 repo_path, \"rb\"\n1246 |             ) as f_repo:\n     |\nhelp: Replace with `Path.open()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1244:56\n     |\n1242 |                 _error(f\"Repo ancillary file not found: {repo_path}\")\n1243 |                 return 1\n1244 |             with open(installed_path, \"rb\") as f_inst, open(\n     |                                                        ^^^^\n1245 |                 repo_path, \"rb\"\n1246 |             ) as f_repo:\n     |\nhelp: Replace with `Path.open()`\n\nTRY300 Consider moving this statement to an `else` block\n    --> x_cls_make_all_x.py:1253:13\n     |\n1251 |                     return 1\n1252 |             _info(f\"Ancillary file OK for {pkg}: {anc_name}\")\n1253 |             return 0\n     |             ^^^^^^^^\n1254 |         except Exception as e:\n1255 |             _error(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1254:16\n     |\n1252 |             _info(f\"Ancillary file OK for {pkg}: {anc_name}\")\n1253 |             return 0\n1254 |         except Exception as e:\n     |                ^^^^^^^^^\n1255 |             _error(\n1256 |                 f\"Error comparing ancillary file for {pkg}: {anc_name}: {e}\"\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1270:20\n     |\n1268 |         mismatches = 0\n1269 |         try:\n1270 |             if not os.path.isdir(installed_dir):\n     |                    ^^^^^^^^^^^^^\n1271 |                 _error(\n1272 |                     f\"Installed ancillary directory not found: {installed_dir}\"\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1275:20\n     |\n1273 |                 )\n1274 |                 return 1\n1275 |             if not os.path.isdir(repo_dir):\n     |                    ^^^^^^^^^^^^^\n1276 |                 _error(f\"Repo ancillary directory not found: {repo_dir}\")\n1277 |                 return 1\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n    --> x_cls_make_all_x.py:1281:27\n     |\n1279 |             def _top_files(d: str) -> set[str]:\n1280 |                 out: set[str] = set()\n1281 |                 for fn in os.listdir(d):\n     |                           ^^^^^^^^^^\n1282 |                     fp = os.path.join(d, fn)\n1283 |                     if os.path.isfile(fp):\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1282:26\n     |\n1280 |                 out: set[str] = set()\n1281 |                 for fn in os.listdir(d):\n1282 |                     fp = os.path.join(d, fn)\n     |                          ^^^^^^^^^^^^\n1283 |                     if os.path.isfile(fp):\n1284 |                         out.add(fn)\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1283:24\n     |\n1281 |                 for fn in os.listdir(d):\n1282 |                     fp = os.path.join(d, fn)\n1283 |                     if os.path.isfile(fp):\n     |                        ^^^^^^^^^^^^^^\n1284 |                         out.add(fn)\n1285 |                 return out\n     |\nhelp: Replace with `Path(...).is_file()`\n\nE501 Line too long (103 > 88)\n    --> x_cls_make_all_x.py:1292:89\n     |\n1290 |             for rel in sorted(repo_files - inst_files):\n1291 |                 _error(\n1292 |                     f\"Ancillary directory content missing in installed package {pkg}: {anc_name}/{rel}\"\n     |                                                                                         ^^^^^^^^^^^^^^^\n1293 |                 )\n1294 |                 mismatches += 1\n     |\n\nE501 Line too long (102 > 88)\n    --> x_cls_make_all_x.py:1297:89\n     |\n1295 |             for rel in sorted(inst_files - repo_files):\n1296 |                 _error(\n1297 |                     f\"Ancillary directory has extra file in installed package {pkg}: {anc_name}/{rel}\"\n     |                                                                                         ^^^^^^^^^^^^^^\n1298 |                 )\n1299 |                 mismatches += 1\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1301:29\n     |\n1299 |                 mismatches += 1\n1300 |             for rel in sorted(repo_files & inst_files):\n1301 |                 inst_path = os.path.join(installed_dir, rel)\n     |                             ^^^^^^^^^^^^\n1302 |                 repo_path = os.path.join(repo_dir, rel)\n1303 |                 mismatches += self._compare_ancillary_file(\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1302:29\n     |\n1300 |             for rel in sorted(repo_files & inst_files):\n1301 |                 inst_path = os.path.join(installed_dir, rel)\n1302 |                 repo_path = os.path.join(repo_dir, rel)\n     |                             ^^^^^^^^^^^^\n1303 |                 mismatches += self._compare_ancillary_file(\n1304 |                     inst_path, repo_path, pkg, f\"{anc_name}/{rel}\"\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1306:16\n     |\n1304 |                     inst_path, repo_path, pkg, f\"{anc_name}/{rel}\"\n1305 |                 )\n1306 |         except Exception as e:\n     |                ^^^^^^^^^\n1307 |             _error(\n1308 |                 f\"Error comparing ancillary directory for {pkg}: {anc_name}: {e}\"\n     |\n\nE501 Line too long (98 > 88)\n    --> x_cls_make_all_x.py:1320:89\n     |\n1318 |         expected_anc: list[str],\n1319 |     ) -> int:\n1320 |         \"\"\"Compare ancillary files/directories listed in expected_anc using helper comparators.\"\"\"\n     |                                                                                         ^^^^^^^^^^\n1321 |         mismatches = 0\n1322 |         # Deduplicate expected list to avoid duplicate logs\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1325:16\n     |\n1323 |         try:\n1324 |             expected = list(dict.fromkeys(expected_anc))\n1325 |         except Exception:\n     |                ^^^^^^^^^\n1326 |             expected = expected_anc\n1327 |         for anc_name in expected:\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1330:25\n     |\n1328 |             # Normalize expected path to OS-specific separators for fs access\n1329 |             anc_os_rel = os.path.normpath(anc_name.replace(\"\\\\\", \"/\"))\n1330 |             repo_path = os.path.join(repo_pkg_dir, anc_os_rel)\n     |                         ^^^^^^^^^^^^\n1331 |             target_is_dir = os.path.isdir(repo_path)\n1332 |             # Installed paths are recorded as relative to the package dir\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1331:29\n     |\n1329 |             anc_os_rel = os.path.normpath(anc_name.replace(\"\\\\\", \"/\"))\n1330 |             repo_path = os.path.join(repo_pkg_dir, anc_os_rel)\n1331 |             target_is_dir = os.path.isdir(repo_path)\n     |                             ^^^^^^^^^^^^^\n1332 |             # Installed paths are recorded as relative to the package dir\n1333 |             installed_path = os.path.join(pkg_dir, anc_os_rel)\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1333:30\n     |\n1331 |             target_is_dir = os.path.isdir(repo_path)\n1332 |             # Installed paths are recorded as relative to the package dir\n1333 |             installed_path = os.path.join(pkg_dir, anc_os_rel)\n     |                              ^^^^^^^^^^^^\n1334 |             if not os.path.exists(repo_path):\n1335 |                 _error(f\"Ancillary missing from repo for {pkg}: {anc_name}\")\n     |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n    --> x_cls_make_all_x.py:1334:20\n     |\n1332 |             # Installed paths are recorded as relative to the package dir\n1333 |             installed_path = os.path.join(pkg_dir, anc_os_rel)\n1334 |             if not os.path.exists(repo_path):\n     |                    ^^^^^^^^^^^^^^\n1335 |                 _error(f\"Ancillary missing from repo for {pkg}: {anc_name}\")\n1336 |                 mismatches += 1\n     |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n    --> x_cls_make_all_x.py:1338:20\n     |\n1336 |                 mismatches += 1\n1337 |                 continue\n1338 |             if not os.path.exists(installed_path):\n     |                    ^^^^^^^^^^^^^^\n1339 |                 _error(\n1340 |                     f\"Ancillary missing from installed package for {pkg}: {anc_name}\"\n     |\nhelp: Replace with `Path(...).exists()`\n\nC901 `_find_installed_path` is too complex (12 > 10)\n    --> x_cls_make_all_x.py:1354:9\n     |\n1352 |         return mismatches\n1353 |\n1354 |     def _find_installed_path(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1355 |         self, rel_path: str, target_is_dir: bool\n1356 |     ) -> str | None:\n     |\n\nFBT001 Boolean-typed positional argument in function definition\n    --> x_cls_make_all_x.py:1355:30\n     |\n1354 |     def _find_installed_path(\n1355 |         self, rel_path: str, target_is_dir: bool\n     |                              ^^^^^^^^^^^^^\n1356 |     ) -> str | None:\n1357 |         import site\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1357:9\n     |\n1355 |         self, rel_path: str, target_is_dir: bool\n1356 |     ) -> str | None:\n1357 |         import site\n     |         ^^^^^^^^^^^\n1358 |\n1359 |         for base in site.getsitepackages():\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1360:25\n     |\n1359 |         for base in site.getsitepackages():\n1360 |             candidate = os.path.join(base, rel_path)\n     |                         ^^^^^^^^^^^^\n1361 |             if target_is_dir and os.path.isdir(candidate):\n1362 |                 return candidate\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1361:34\n     |\n1359 |         for base in site.getsitepackages():\n1360 |             candidate = os.path.join(base, rel_path)\n1361 |             if target_is_dir and os.path.isdir(candidate):\n     |                                  ^^^^^^^^^^^^^\n1362 |                 return candidate\n1363 |             if not target_is_dir and os.path.isfile(candidate):\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1363:38\n     |\n1361 |             if target_is_dir and os.path.isdir(candidate):\n1362 |                 return candidate\n1363 |             if not target_is_dir and os.path.isfile(candidate):\n     |                                      ^^^^^^^^^^^^^^\n1364 |                 return candidate\n1365 |         try:\n     |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1371:33\n     |\n1369 |                     if target_is_dir:\n1370 |                         for d in dirs:\n1371 |                             p = os.path.join(root, d)\n     |                                 ^^^^^^^^^^^^\n1372 |                             if os.path.normcase(p).endswith(\n1373 |                                 norm_tail\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1374:35\n     |\n1372 |                             if os.path.normcase(p).endswith(\n1373 |                                 norm_tail\n1374 |                             ) and os.path.isdir(p):\n     |                                   ^^^^^^^^^^^^^\n1375 |                                 return p\n1376 |                     else:\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1378:33\n     |\n1376 |                     else:\n1377 |                         for f in files:\n1378 |                             p = os.path.join(root, f)\n     |                                 ^^^^^^^^^^^^\n1379 |                             if os.path.normcase(p).endswith(\n1380 |                                 norm_tail\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1381:35\n     |\n1379 |                             if os.path.normcase(p).endswith(\n1380 |                                 norm_tail\n1381 |                             ) and os.path.isfile(p):\n     |                                   ^^^^^^^^^^^^^^\n1382 |                                 return p\n1383 |         except Exception:\n     |\nhelp: Replace with `Path(...).is_file()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n    --> x_cls_make_all_x.py:1383:9\n     |\n1381 |                               ) and os.path.isfile(p):\n1382 |                                   return p\n1383 | /         except Exception:\n1384 | |             pass\n     | |________________^\n1385 |           return None\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1383:16\n     |\n1381 |                             ) and os.path.isfile(p):\n1382 |                                 return p\n1383 |         except Exception:\n     |                ^^^^^^^^^\n1384 |             pass\n1385 |         return None\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1388:9\n     |\n1387 |     def _locate_installed_pkg_dir(self, pkg_name: str) -> str:\n1388 |         import importlib.util as _ilu\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1389 |\n1390 |         spec = _ilu.find_spec(pkg_name)\n     |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n    --> x_cls_make_all_x.py:1397:24\n     |\n1395 |                 return locs[0]\n1396 |             if spec.origin:\n1397 |                 return os.path.dirname(spec.origin)\n     |                        ^^^^^^^^^^^^^^^\n1398 |         path = self._find_installed_path(pkg_name, True)\n1399 |         if not path:\n     |\nhelp: Replace with `Path(...).parent`\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_all_x.py:1398:52\n     |\n1396 |             if spec.origin:\n1397 |                 return os.path.dirname(spec.origin)\n1398 |         path = self._find_installed_path(pkg_name, True)\n     |                                                    ^^^^\n1399 |         if not path:\n1400 |             raise FileNotFoundError(\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1400:19\n     |\n1398 |           path = self._find_installed_path(pkg_name, True)\n1399 |           if not path:\n1400 |               raise FileNotFoundError(\n     |  ___________________^\n1401 | |                 f\"Package directory not found for {pkg_name}\"\n1402 | |             )\n     | |_____________^\n1403 |           return path\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1401:17\n     |\n1399 |         if not path:\n1400 |             raise FileNotFoundError(\n1401 |                 f\"Package directory not found for {pkg_name}\"\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1402 |             )\n1403 |         return path\n     |\nhelp: Assign to variable; remove f-string literal\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n    --> x_cls_make_all_x.py:1410:23\n     |\n1408 |         main_path = \"\"\n1409 |         try:\n1410 |             for fn in os.listdir(pkg_dir):\n     |                       ^^^^^^^^^^\n1411 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n1412 |                     main_path = os.path.join(pkg_dir, fn)\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1412:33\n     |\n1410 |             for fn in os.listdir(pkg_dir):\n1411 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n1412 |                     main_path = os.path.join(pkg_dir, fn)\n     |                                 ^^^^^^^^^^^^\n1413 |                     break\n1414 |         except Exception:\n     |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n    --> x_cls_make_all_x.py:1414:9\n     |\n1412 |                       main_path = os.path.join(pkg_dir, fn)\n1413 |                       break\n1414 | /         except Exception:\n1415 | |             pass\n     | |________________^\n1416 |           if not main_path:\n1417 |               raise FileNotFoundError(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1414:16\n     |\n1412 |                     main_path = os.path.join(pkg_dir, fn)\n1413 |                     break\n1414 |         except Exception:\n     |                ^^^^^^^^^\n1415 |             pass\n1416 |         if not main_path:\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1417:19\n     |\n1415 |               pass\n1416 |           if not main_path:\n1417 |               raise FileNotFoundError(\n     |  ___________________^\n1418 | |                 f\"Conventional main file x_cls_make_*.py not found in package dir {pkg_dir}\"\n1419 | |             )\n     | |_____________^\n1420 |           return main_path, []\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1418:17\n     |\n1416 |         if not main_path:\n1417 |             raise FileNotFoundError(\n1418 |                 f\"Conventional main file x_cls_make_*.py not found in package dir {pkg_dir}\"\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1419 |             )\n1420 |         return main_path, []\n     |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (92 > 88)\n    --> x_cls_make_all_x.py:1418:89\n     |\n1416 |         if not main_path:\n1417 |             raise FileNotFoundError(\n1418 |                 f\"Conventional main file x_cls_make_*.py not found in package dir {pkg_dir}\"\n     |                                                                                         ^^^^\n1419 |             )\n1420 |         return main_path, []\n     |\n\nC901 `_compare_installed_with_repo` is too complex (13 > 10)\n    --> x_cls_make_all_x.py:1431:9\n     |\n1429 |         return m.get(dist_name)\n1430 |\n1431 |     def _compare_installed_with_repo(\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1432 |         self,\n1433 |         cloner: Any,\n     |\n\nPLR0912 Too many branches (16 > 12)\n    --> x_cls_make_all_x.py:1431:9\n     |\n1429 |         return m.get(dist_name)\n1430 |\n1431 |     def _compare_installed_with_repo(\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1432 |         self,\n1433 |         cloner: Any,\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1433:17\n     |\n1431 |     def _compare_installed_with_repo(\n1432 |         self,\n1433 |         cloner: Any,\n     |                 ^^^\n1434 |         packages: list[str],\n1435 |         published_artifacts: dict[str, dict[str, Any]],\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1443:16\n     |\n1441 |                 else self.repo_parent_root()\n1442 |             )\n1443 |         except Exception:\n     |                ^^^^^^^^^\n1444 |             base = self.repo_parent_root()\n1445 |         _info(\n     |\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_all_x.py:1446:89\n     |\n1444 |             base = self.repo_parent_root()\n1445 |         _info(\n1446 |             f\"Starting post-install file verification for packages: {','.join(packages)}\"\n     |                                                                                         ^\n1447 |         )\n1448 |         total_mismatches = 0\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1451:30\n     |\n1449 |         for pkg in packages:\n1450 |             repo_dir_name = pkg\n1451 |             repo_candidate = os.path.join(base, repo_dir_name)\n     |                              ^^^^^^^^^^^^\n1452 |             if not os.path.isdir(repo_candidate):\n1453 |                 mapped = self._dist_to_repo(pkg)\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1452:20\n     |\n1450 |             repo_dir_name = pkg\n1451 |             repo_candidate = os.path.join(base, repo_dir_name)\n1452 |             if not os.path.isdir(repo_candidate):\n     |                    ^^^^^^^^^^^^^\n1453 |                 mapped = self._dist_to_repo(pkg)\n1454 |                 if mapped:\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1456:28\n     |\n1454 |                 if mapped:\n1455 |                     repo_dir_name = mapped\n1456 |             repo_pkg_dir = os.path.join(base, repo_dir_name)\n     |                            ^^^^^^^^^^^^\n1457 |\n1458 |             # locate installed dir\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1461:20\n     |\n1459 |             try:\n1460 |                 pkg_dir = self._locate_installed_pkg_dir(pkg)\n1461 |             except Exception as e:\n     |                    ^^^^^^^^^\n1462 |                 _error(\n1463 |                     f\"Skipping comparison for {pkg}: cannot locate installed package: {e}\"\n     |\n\nE501 Line too long (90 > 88)\n    --> x_cls_make_all_x.py:1463:89\n     |\n1461 |             except Exception as e:\n1462 |                 _error(\n1463 |                     f\"Skipping comparison for {pkg}: cannot locate installed package: {e}\"\n     |                                                                                         ^^\n1464 |                 )\n1465 |                 continue\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1478:38\n     |\n1476 |                 if art and isinstance(art.get(\"main\"), str):\n1477 |                     main_rel = cast(\"str\", art[\"main\"])\n1478 |                     installed_main = os.path.join(pkg_dir, main_rel)\n     |                                      ^^^^^^^^^^^^\n1479 |                     repo_main_path = os.path.join(repo_pkg_dir, main_rel)\n1480 |                 else:\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1479:38\n     |\n1477 |                     main_rel = cast(\"str\", art[\"main\"])\n1478 |                     installed_main = os.path.join(pkg_dir, main_rel)\n1479 |                     repo_main_path = os.path.join(repo_pkg_dir, main_rel)\n     |                                      ^^^^^^^^^^^^\n1480 |                 else:\n1481 |                     installed_main, _ = self._find_main_and_ancillaries_in_dir(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1484:20\n     |\n1482 |                         pkg_dir\n1483 |                     )\n1484 |             except Exception as e:\n     |                    ^^^^^^^^^\n1485 |                 _error(f\"Skipping {pkg}: error determining main file: {e}\")\n1486 |                 continue\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1488:20\n     |\n1486 |                 continue\n1487 |\n1488 |             if not os.path.isdir(repo_pkg_dir):\n     |                    ^^^^^^^^^^^^^\n1489 |                 _error(\n1490 |                     f\"Repo copy for dist {pkg} not found (expected repo dir {repo_pkg_dir}); skipping file comparisons\"\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nE501 Line too long (119 > 88)\n    --> x_cls_make_all_x.py:1490:89\n     |\n1488 |             if not os.path.isdir(repo_pkg_dir):\n1489 |                 _error(\n1490 |                     f\"Repo copy for dist {pkg} not found (expected repo dir {repo_pkg_dir}); skipping file comparisons\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1491 |                 )\n1492 |                 continue\n     |\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_all_x.py:1518:89\n     |\n1516 |         if total_mismatches:\n1517 |             _error(\n1518 |                 f\"Post-install verification completed with {total_mismatches} mismatches\"\n     |                                                                                         ^\n1519 |             )\n1520 |         else:\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_make_all_x.py:1522:89\n     |\n1520 |         else:\n1521 |             _info(\n1522 |                 \"Post-install verification completed: all checked files match the cloned repos\"\n     |                                                                                         ^^^^^^^\n1523 |             )\n1524 |         return total_mismatches\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `clone_repos`\n    --> x_cls_make_all_x.py:1538:60\n     |\n1538 | def clone_repos(ctx: OrchestratorContext | None = None) -> Any:\n     |                                                            ^^^\n1539 |     return _orchestrator().clone_repos(ctx)\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1543:13\n     |\n1542 | def publish_all(\n1543 |     cloner: Any, ctx: OrchestratorContext | None = None\n     |             ^^^\n1544 | ) -> tuple[dict[str, str | None], dict[str, dict[str, Any]]]:\n1545 |     return _orchestrator().publish_all(cloner, ctx)\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1549:13\n     |\n1548 | def run_pip_updates(\n1549 |     cloner: Any,\n     |             ^^^\n1550 |     published_versions: dict[str, str | None],\n1551 |     published_artifacts: dict[str, dict[str, Any]],\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `ctx`\n    --> x_cls_make_all_x.py:1552:10\n     |\n1550 |     published_versions: dict[str, str | None],\n1551 |     published_artifacts: dict[str, dict[str, Any]],\n1552 |     ctx: Any | None = None,\n     |          ^^^^^^^^^^\n1553 | ) -> None:\n1554 |     _orchestrator().run_pip_updates(\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1563:26\n     |\n1563 | def _run_visitor(cloner: Any, ctx: OrchestratorContext | None) -> None:\n     |                          ^^^\n1564 |     return _orchestrator().run_visitor(cloner, ctx)\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1568:13\n     |\n1567 | def _process_publishes_and_updates(\n1568 |     cloner: Any, ctx: OrchestratorContext | None\n     |             ^^^\n1569 | ) -> None:\n1570 |     return _orchestrator().process_publishes_and_updates(cloner, ctx)\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1582:12\n     |\n1580 |     try:\n1581 |         main()\n1582 |     except Exception as e:\n     |            ^^^^^^^^^\n1583 |         _error(f\"Error: {e}\")\n1584 |         sys.exit(1)\n     |\n\nFound 350 errors.\nNo fixes available (29 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "BLE001 Do not catch blind exception: `Exception`\n  --> forceit.py:53:12\n   |\n51 |     try:\n52 |         return str(p.relative_to(root))\n53 |     except Exception:\n   |            ^^^^^^^^^\n54 |         return str(p)\n   |\n\nC901 `main` is too complex (17 > 10)\n  --> forceit.py:57:5\n   |\n57 | def main() -> int:\n   |     ^^^^\n58 |     src_root = _repo_parent_root()\n59 |     if not src_root.is_dir():\n   |\n\nPLR0912 Too many branches (16 > 12)\n  --> forceit.py:57:5\n   |\n57 | def main() -> int:\n   |     ^^^^\n58 |     src_root = _repo_parent_root()\n59 |     if not src_root.is_dir():\n   |\n\nPLR0915 Too many statements (56 > 50)\n  --> forceit.py:57:5\n   |\n57 | def main() -> int:\n   |     ^^^^\n58 |     src_root = _repo_parent_root()\n59 |     if not src_root.is_dir():\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> forceit.py:89:20\n   |\n87 |             try:\n88 |                 same = filecmp.cmp(s, d, shallow=False)\n89 |             except Exception:\n   |                    ^^^^^^^^^\n90 |                 same = False\n91 |             if same:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> forceit.py:99:20\n    |\n 97 |                 copied += 1\n 98 |                 copied_pairs.append((s, d))\n 99 |             except Exception as e:\n    |                    ^^^^^^^^^\n100 |                 print(f\"ERROR copying {s} -> {d}: {e}\", file=sys.stderr)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> forceit.py:122:20\n    |\n120 |                 rel = d.relative_to(DEST)\n121 |                 pkg = rel.parts[0] if rel.parts else d.name\n122 |             except Exception:\n    |                    ^^^^^^^^^\n123 |                 pkg = d.name\n124 |             pkg_counter[pkg] += 1\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n  --> x_cls_make_all_x.py:16:19\n   |\n14 | from typing import TYPE_CHECKING, Any, ClassVar, TypeAlias, cast\n15 |\n16 | _WORKSPACE_ROOT = os.path.abspath(\n   |                   ^^^^^^^^^^^^^^^\n17 |     os.path.join(os.path.dirname(__file__), \"..\")\n18 | )\n   |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_all_x.py:17:5\n   |\n16 | _WORKSPACE_ROOT = os.path.abspath(\n17 |     os.path.join(os.path.dirname(__file__), \"..\")\n   |     ^^^^^^^^^^^^\n18 | )\n   |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n  --> x_cls_make_all_x.py:17:18\n   |\n16 | _WORKSPACE_ROOT = os.path.abspath(\n17 |     os.path.join(os.path.dirname(__file__), \"..\")\n   |                  ^^^^^^^^^^^^^^^\n18 | )\n   |\nhelp: Replace with `Path(...).parent`\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_import_class_from_candidates`\n  --> x_cls_make_all_x.py:29:75\n   |\n29 | def _import_class_from_candidates(attr: str, modules: tuple[str, ...]) -> Any:\n   |                                                                           ^^^\n30 |     for module_name in modules:\n31 |         try:\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_all_x.py:39:11\n   |\n37 |           except AttributeError:\n38 |               continue\n39 |       raise ModuleNotFoundError(\n   |  ___________^\n40 | |         f\"Unable to import {attr} from any candidate module: {modules}\"\n41 | |     )\n   | |_____^\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_all_x.py:40:9\n   |\n38 |             continue\n39 |     raise ModuleNotFoundError(\n40 |         f\"Unable to import {attr} from any candidate module: {modules}\"\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n41 |     )\n   |\nhelp: Assign to variable; remove f-string literal\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:100:5\n    |\n 98 |   def _info(*args: object) -> None:\n 99 |       msg = \" \".join(str(a) for a in args)\n100 | /     try:\n101 | |         _LOGGER.info(\"%s\", msg)\n102 | |     except Exception:\n103 | |         pass\n    | |____________^\n104 |       try:\n105 |           print(msg)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:102:5\n    |\n100 |       try:\n101 |           _LOGGER.info(\"%s\", msg)\n102 | /     except Exception:\n103 | |         pass\n    | |____________^\n104 |       try:\n105 |           print(msg)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:102:12\n    |\n100 |     try:\n101 |         _LOGGER.info(\"%s\", msg)\n102 |     except Exception:\n    |            ^^^^^^^^^\n103 |         pass\n104 |     try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:106:12\n    |\n104 |     try:\n105 |         print(msg)\n106 |     except Exception:\n    |            ^^^^^^^^^\n107 |         try:\n108 |             sys.stdout.write(msg + \"\\n\")\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:107:9\n    |\n105 |           print(msg)\n106 |       except Exception:\n107 | /         try:\n108 | |             sys.stdout.write(msg + \"\\n\")\n109 | |         except Exception:\n110 | |             pass\n    | |________________^\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:109:9\n    |\n107 |           try:\n108 |               sys.stdout.write(msg + \"\\n\")\n109 | /         except Exception:\n110 | |             pass\n    | |________________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:109:16\n    |\n107 |         try:\n108 |             sys.stdout.write(msg + \"\\n\")\n109 |         except Exception:\n    |                ^^^^^^^^^\n110 |             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:115:5\n    |\n113 |   def _error(*args: object) -> None:\n114 |       msg = \" \".join(str(a) for a in args)\n115 | /     try:\n116 | |         _LOGGER.error(\"%s\", msg)\n117 | |     except Exception:\n118 | |         pass\n    | |____________^\n119 |       try:\n120 |           print(msg, file=sys.stderr)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:117:5\n    |\n115 |       try:\n116 |           _LOGGER.error(\"%s\", msg)\n117 | /     except Exception:\n118 | |         pass\n    | |____________^\n119 |       try:\n120 |           print(msg, file=sys.stderr)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:117:12\n    |\n115 |     try:\n116 |         _LOGGER.error(\"%s\", msg)\n117 |     except Exception:\n    |            ^^^^^^^^^\n118 |         pass\n119 |     try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:121:12\n    |\n119 |     try:\n120 |         print(msg, file=sys.stderr)\n121 |     except Exception:\n    |            ^^^^^^^^^\n122 |         try:\n123 |             sys.stderr.write(msg + \"\\n\")\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:122:9\n    |\n120 |           print(msg, file=sys.stderr)\n121 |       except Exception:\n122 | /         try:\n123 | |             sys.stderr.write(msg + \"\\n\")\n124 | |         except Exception:\n125 | |             pass\n    | |________________^\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:124:9\n    |\n122 |           try:\n123 |               sys.stderr.write(msg + \"\\n\")\n124 | /         except Exception:\n125 | |             pass\n    | |________________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:124:16\n    |\n122 |         try:\n123 |             sys.stderr.write(msg + \"\\n\")\n124 |         except Exception:\n    |                ^^^^^^^^^\n125 |             pass\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_all_x.py:128:29\n    |\n128 | def get_env_bool(name: str, default: bool = False) -> bool:\n    |                             ^^^^^^^\n129 |     v = os.environ.get(name)\n130 |     if v is None:\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_all_x.py:128:29\n    |\n128 | def get_env_bool(name: str, default: bool = False) -> bool:\n    |                             ^^^^^^^\n129 |     v = os.environ.get(name)\n130 |     if v is None:\n    |\n\nE501 Line too long (97 > 88)\n   --> x_cls_make_all_x.py:152:89\n    |\n150 |     OrchestratorContext = _Any\n151 | else:\n152 |     # At runtime prefer the orchestrator_core helper if available; otherwise fall back to globals\n    |                                                                                         ^^^^^^^^^\n153 |     try:\n154 |         # Dynamically import the optional runtime helper to avoid static\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:162:5\n    |\n160 |           if _bcf is not None:\n161 |               _build_context_from_config = _bcf\n162 | /     except Exception:\n163 | |         # leave _build_context_from_config as the previously-set value\n164 | |         pass\n    | |____________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:162:12\n    |\n160 |         if _bcf is not None:\n161 |             _build_context_from_config = _bcf\n162 |     except Exception:\n    |            ^^^^^^^^^\n163 |         # leave _build_context_from_config as the previously-set value\n164 |         pass\n    |\n\nC901 `validate_publish_manifest` is too complex (15 > 10)\n   --> x_cls_make_all_x.py:177:5\n    |\n177 | def validate_publish_manifest(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n178 |     data: Any,\n179 | ) -> list[ManifestEntry]:\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_all_x.py:177:5\n    |\n177 | def validate_publish_manifest(\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n178 |     data: Any,\n179 | ) -> list[ManifestEntry]:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `data`\n   --> x_cls_make_all_x.py:178:11\n    |\n177 | def validate_publish_manifest(\n178 |     data: Any,\n    |           ^^^\n179 | ) -> list[ManifestEntry]:\n180 |     \"\"\"Validate the loaded manifest JSON and return a typed list of valid entries.\n    |\n\nE501 Line too long (102 > 88)\n   --> x_cls_make_all_x.py:186:89\n    |\n184 |       - version (str)\n185 |       - ancillary names (list[str] or null)\n186 |       - opts (object/dict) with optional keys (author, email, description, license_text, dependencies)\n    |                                                                                         ^^^^^^^^^^^^^^\n187 |\n188 |     Invalid entries are ignored and an error is logged.\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> x_cls_make_all_x.py:202:32\n    |\n200 |             if isinstance(raw, list):\n201 |                 lst = cast(\"list[object]\", raw)\n202 |                 if len(lst) != 4:\n    |                                ^\n203 |                     raise TypeError(\n204 |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n    |\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:203:21\n    |\n201 |                   lst = cast(\"list[object]\", raw)\n202 |                   if len(lst) != 4:\n203 | /                     raise TypeError(\n204 | |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n205 | |                     )\n    | |_____________________^\n206 |                   name, version, anc, opts = lst[0], lst[1], lst[2], lst[3]\n207 |               elif isinstance(raw, tuple):\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:203:27\n    |\n201 |                   lst = cast(\"list[object]\", raw)\n202 |                   if len(lst) != 4:\n203 |                       raise TypeError(\n    |  ___________________________^\n204 | |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n205 | |                     )\n    | |_____________________^\n206 |                   name, version, anc, opts = lst[0], lst[1], lst[2], lst[3]\n207 |               elif isinstance(raw, tuple):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:204:25\n    |\n202 |                 if len(lst) != 4:\n203 |                     raise TypeError(\n204 |                         f\"entry must be a 4-tuple/list, got list with len {len(lst)}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n205 |                     )\n206 |                 name, version, anc, opts = lst[0], lst[1], lst[2], lst[3]\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> x_cls_make_all_x.py:209:32\n    |\n207 |             elif isinstance(raw, tuple):\n208 |                 tpl = cast(\"tuple[object, ...]\", raw)\n209 |                 if len(tpl) != 4:\n    |                                ^\n210 |                     raise TypeError(\n211 |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n    |\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:210:21\n    |\n208 |                   tpl = cast(\"tuple[object, ...]\", raw)\n209 |                   if len(tpl) != 4:\n210 | /                     raise TypeError(\n211 | |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n212 | |                     )\n    | |_____________________^\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:210:27\n    |\n208 |                   tpl = cast(\"tuple[object, ...]\", raw)\n209 |                   if len(tpl) != 4:\n210 |                       raise TypeError(\n    |  ___________________________^\n211 | |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n212 | |                     )\n    | |_____________________^\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:211:25\n    |\n209 |                 if len(tpl) != 4:\n210 |                     raise TypeError(\n211 |                         f\"entry must be a 4-tuple/list, got tuple with len {len(tpl)}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n212 |                     )\n213 |                 name, version, anc, opts = tpl\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:215:17\n    |\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n215 | /                 raise TypeError(\n216 | |                     f\"entry must be a 4-tuple/list, got {type(raw)!r}\"\n217 | |                 )\n    | |_________________^\n218 |\n219 |               if not isinstance(name, str) or not name:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:215:23\n    |\n213 |                   name, version, anc, opts = tpl\n214 |               else:\n215 |                   raise TypeError(\n    |  _______________________^\n216 | |                     f\"entry must be a 4-tuple/list, got {type(raw)!r}\"\n217 | |                 )\n    | |_________________^\n218 |\n219 |               if not isinstance(name, str) or not name:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:216:21\n    |\n214 |             else:\n215 |                 raise TypeError(\n216 |                     f\"entry must be a 4-tuple/list, got {type(raw)!r}\"\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n217 |                 )\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:220:17\n    |\n219 |             if not isinstance(name, str) or not name:\n220 |                 raise TypeError(\"name must be non-empty string\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:220:23\n    |\n219 |             if not isinstance(name, str) or not name:\n220 |                 raise TypeError(\"name must be non-empty string\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:220:33\n    |\n219 |             if not isinstance(name, str) or not name:\n220 |                 raise TypeError(\"name must be non-empty string\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:222:17\n    |\n220 |                 raise TypeError(\"name must be non-empty string\")\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n223 |\n224 |             anc_list: list[str] | None\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:222:23\n    |\n220 |                 raise TypeError(\"name must be non-empty string\")\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n223 |\n224 |             anc_list: list[str] | None\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:222:33\n    |\n220 |                 raise TypeError(\"name must be non-empty string\")\n221 |             if not isinstance(version, str) or not version:\n222 |                 raise TypeError(\"version must be non-empty string\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n223 |\n224 |             anc_list: list[str] | None\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:227:21\n    |\n225 |               if anc is not None:\n226 |                   if not isinstance(anc, list):\n227 | /                     raise TypeError(\n228 | |                         \"ancillaries must be null or list of strings\"\n229 | |                     )\n    | |_____________________^\n230 |                   anc_seq = cast(\"list[object]\", anc)\n231 |                   if not all(isinstance(x, str) for x in anc_seq):\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:227:27\n    |\n225 |               if anc is not None:\n226 |                   if not isinstance(anc, list):\n227 |                       raise TypeError(\n    |  ___________________________^\n228 | |                         \"ancillaries must be null or list of strings\"\n229 | |                     )\n    | |_____________________^\n230 |                   anc_seq = cast(\"list[object]\", anc)\n231 |                   if not all(isinstance(x, str) for x in anc_seq):\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:228:25\n    |\n226 |                 if not isinstance(anc, list):\n227 |                     raise TypeError(\n228 |                         \"ancillaries must be null or list of strings\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n229 |                     )\n230 |                 anc_seq = cast(\"list[object]\", anc)\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:232:21\n    |\n230 |                 anc_seq = cast(\"list[object]\", anc)\n231 |                 if not all(isinstance(x, str) for x in anc_seq):\n232 |                     raise TypeError(\"ancillaries must be list[str]\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n233 |                 anc_list = [cast(\"str\", x) for x in anc_seq]\n234 |             else:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:232:27\n    |\n230 |                 anc_seq = cast(\"list[object]\", anc)\n231 |                 if not all(isinstance(x, str) for x in anc_seq):\n232 |                     raise TypeError(\"ancillaries must be list[str]\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n233 |                 anc_list = [cast(\"str\", x) for x in anc_seq]\n234 |             else:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:232:37\n    |\n230 |                 anc_seq = cast(\"list[object]\", anc)\n231 |                 if not all(isinstance(x, str) for x in anc_seq):\n232 |                     raise TypeError(\"ancillaries must be list[str]\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n233 |                 anc_list = [cast(\"str\", x) for x in anc_seq]\n234 |             else:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:238:17\n    |\n237 |             if not isinstance(opts, dict):\n238 |                 raise TypeError(\"opts must be an object/dict\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n239 |             opts_d = cast(\"dict[str, Any]\", opts)\n240 |             deps = opts_d.get(\"dependencies\", [])\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:238:23\n    |\n237 |             if not isinstance(opts, dict):\n238 |                 raise TypeError(\"opts must be an object/dict\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n239 |             opts_d = cast(\"dict[str, Any]\", opts)\n240 |             deps = opts_d.get(\"dependencies\", [])\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:238:33\n    |\n237 |             if not isinstance(opts, dict):\n238 |                 raise TypeError(\"opts must be an object/dict\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n239 |             opts_d = cast(\"dict[str, Any]\", opts)\n240 |             deps = opts_d.get(\"dependencies\", [])\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:242:17\n    |\n240 |             deps = opts_d.get(\"dependencies\", [])\n241 |             if deps is not None and not isinstance(deps, list):\n242 |                 raise TypeError(\"opts.dependencies must be a list if present\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n243 |\n244 |             valid.append((name, version, anc_list, opts_d))\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:242:23\n    |\n240 |             deps = opts_d.get(\"dependencies\", [])\n241 |             if deps is not None and not isinstance(deps, list):\n242 |                 raise TypeError(\"opts.dependencies must be a list if present\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n243 |\n244 |             valid.append((name, version, anc_list, opts_d))\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_all_x.py:242:33\n    |\n240 |             deps = opts_d.get(\"dependencies\", [])\n241 |             if deps is not None and not isinstance(deps, list):\n242 |                 raise TypeError(\"opts.dependencies must be a list if present\")\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n243 |\n244 |             valid.append((name, version, anc_list, opts_d))\n    |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:245:16\n    |\n244 |             valid.append((name, version, anc_list, opts_d))\n245 |         except Exception as exc:\n    |                ^^^^^^^^^\n246 |             _error(f\"publish_manifest.json: invalid entry at index {i}: {exc}\")\n247 |             continue\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:252:22\n    |\n251 | try:\n252 |     _manifest_path = os.path.join(\n    |                      ^^^^^^^^^^^^\n253 |         os.path.dirname(__file__), \"publish_manifest.json\"\n254 |     )\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:253:9\n    |\n251 | try:\n252 |     _manifest_path = os.path.join(\n253 |         os.path.dirname(__file__), \"publish_manifest.json\"\n    |         ^^^^^^^^^^^^^^^\n254 |     )\n255 |     if os.path.exists(_manifest_path):\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:255:8\n    |\n253 |         os.path.dirname(__file__), \"publish_manifest.json\"\n254 |     )\n255 |     if os.path.exists(_manifest_path):\n    |        ^^^^^^^^^^^^^^\n256 |         with open(_manifest_path, encoding=\"utf-8\") as _mf:\n257 |             _loaded = json.load(_mf)\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_all_x.py:256:14\n    |\n254 |     )\n255 |     if os.path.exists(_manifest_path):\n256 |         with open(_manifest_path, encoding=\"utf-8\") as _mf:\n    |              ^^^^\n257 |             _loaded = json.load(_mf)\n258 |             if isinstance(_loaded, list):\n    |\nhelp: Replace with `Path.open()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:260:8\n    |\n258 |             if isinstance(_loaded, list):\n259 |                 _publish_manifest = validate_publish_manifest(_loaded)\n260 | except Exception:\n    |        ^^^^^^^^^\n261 |     _publish_manifest = []\n    |\n\nN801 Class name `x_cls_make_all_x` should use CapWords convention\n   --> x_cls_make_all_x.py:272:7\n    |\n270 | # Lightweight adapter class so the module exposes a ctx-aware constructor\n271 | # and can be instantiated by orchestrator flows that prefer objects.\n272 | class x_cls_make_all_x:\n    |       ^^^^^^^^^^^^^^^^\n273 |     def __init__(self, ctx: object | None = None) -> None:\n274 |         \"\"\"Context-aware orchestrator with stepwise methods.\"\"\"\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:280:9\n    |\n278 |       def run(self) -> None:\n279 |           ctx = self.build_context()\n280 | /         try:\n281 | |             globals()[\"_ORCHESTRATOR_CTX\"] = ctx\n282 | |         except Exception:\n283 | |             pass\n    | |________________^\n284 |           self.orchestrator_run(ctx)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:282:9\n    |\n280 |           try:\n281 |               globals()[\"_ORCHESTRATOR_CTX\"] = ctx\n282 | /         except Exception:\n283 | |             pass\n    | |________________^\n284 |           self.orchestrator_run(ctx)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:282:16\n    |\n280 |         try:\n281 |             globals()[\"_ORCHESTRATOR_CTX\"] = ctx\n282 |         except Exception:\n    |                ^^^^^^^^^\n283 |             pass\n284 |         self.orchestrator_run(ctx)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:293:20\n    |\n291 |                 res = _build_context_from_config()\n292 |                 return cast(\"OrchestratorContext\", res)\n293 |             except Exception:\n    |                    ^^^^^^^^^\n294 |                 return None\n295 |         return None\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:299:16\n    |\n297 |     # Utilities moved into class\n298 |     def repo_parent_root(self) -> str:\n299 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n    |                ^^^^^^^^^^^^^^^\n300 |\n301 |     def detect_clones_root(self, fallback: str | None = None) -> str:\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:299:32\n    |\n297 |     # Utilities moved into class\n298 |     def repo_parent_root(self) -> str:\n299 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n    |                                ^^^^^^^^^^^^\n300 |\n301 |     def detect_clones_root(self, fallback: str | None = None) -> str:\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:299:45\n    |\n297 |     # Utilities moved into class\n298 |     def repo_parent_root(self) -> str:\n299 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n    |                                             ^^^^^^^^^^^^^^^\n300 |\n301 |     def detect_clones_root(self, fallback: str | None = None) -> str:\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_all_x.py:304:26\n    |\n302 |         cand = fallback or self.repo_parent_root()\n303 |         try:\n304 |             for entry in os.listdir(cand):\n    |                          ^^^^^^^^^^\n305 |                 git_dir = os.path.join(cand, entry, \".git\")\n306 |                 if os.path.isdir(git_dir):\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:305:27\n    |\n303 |         try:\n304 |             for entry in os.listdir(cand):\n305 |                 git_dir = os.path.join(cand, entry, \".git\")\n    |                           ^^^^^^^^^^^^\n306 |                 if os.path.isdir(git_dir):\n307 |                     return cand\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:306:20\n    |\n304 |             for entry in os.listdir(cand):\n305 |                 git_dir = os.path.join(cand, entry, \".git\")\n306 |                 if os.path.isdir(git_dir):\n    |                    ^^^^^^^^^^^^^\n307 |                     return cand\n308 |         except Exception:\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:308:9\n    |\n306 |                   if os.path.isdir(git_dir):\n307 |                       return cand\n308 | /         except Exception:\n309 | |             pass\n    | |________________^\n310 |           return cand\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:308:16\n    |\n306 |                 if os.path.isdir(git_dir):\n307 |                     return cand\n308 |         except Exception:\n    |                ^^^^^^^^^\n309 |             pass\n310 |         return cand\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_instantiate_visitor`\n   --> x_cls_make_all_x.py:314:10\n    |\n312 |     def _instantiate_visitor(\n313 |         self, ctx: OrchestratorContext | None, root_dir: str | None = None\n314 |     ) -> Any:\n    |          ^^^\n315 |         root = root_dir or self.detect_clones_root()\n316 |         try:\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:326:22\n    |\n324 |                 os.path.relpath(path, pkg_dir)\n325 |                 if os.path.commonpath([path, pkg_dir]) == pkg_dir\n326 |                 else os.path.basename(path)\n    |                      ^^^^^^^^^^^^^^^^\n327 |             )\n328 |         except Exception:\n    |\nhelp: Replace with `Path(...).name`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:328:16\n    |\n326 |                 else os.path.basename(path)\n327 |             )\n328 |         except Exception:\n    |                ^^^^^^^^^\n329 |             return os.path.basename(path)\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:329:20\n    |\n327 |             )\n328 |         except Exception:\n329 |             return os.path.basename(path)\n    |                    ^^^^^^^^^^^^^^^^\n330 |\n331 |     # Step 2: top-level flow\n    |\nhelp: Replace with `Path(...).name`\n\nC901 `clone_repos` is too complex (14 > 10)\n   --> x_cls_make_all_x.py:338:9\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |         ^^^^^^^^^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nPLR0912 Too many branches (14 > 12)\n   --> x_cls_make_all_x.py:338:9\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |         ^^^^^^^^^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nARG002 Unused method argument: `ctx`\n   --> x_cls_make_all_x.py:338:27\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |                           ^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `clone_repos`\n   --> x_cls_make_all_x.py:338:63\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n    |                                                               ^^^\n339 |         Cls = x_cls_make_github_clones_x\n340 |         target_dir = getattr(\n    |\n\nN806 Variable `Cls` in function should be lowercase\n   --> x_cls_make_all_x.py:339:9\n    |\n337 |     # Step 3: clone repositories (moved logic from freestanding clone_repos)\n338 |     def clone_repos(self, ctx: OrchestratorContext | None) -> Any:\n339 |         Cls = x_cls_make_github_clones_x\n    |         ^^^\n340 |         target_dir = getattr(\n341 |             MakeAllConfig, \"CLONER_TARGET_DIR\", self.repo_parent_root()\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:366:17\n    |\n364 |                       include_forks=include_forks,\n365 |                   )\n366 | /                 try:\n367 | |                     cloner.force_reclone = False\n368 | |                 except Exception:\n369 | |                     pass\n    | |________________________^\n370 |               else:\n371 |                   raise\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:368:17\n    |\n366 |                   try:\n367 |                       cloner.force_reclone = False\n368 | /                 except Exception:\n369 | |                     pass\n    | |________________________^\n370 |               else:\n371 |                   raise\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:368:24\n    |\n366 |                 try:\n367 |                     cloner.force_reclone = False\n368 |                 except Exception:\n    |                        ^^^^^^^^^\n369 |                     pass\n370 |             else:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:375:9\n    |\n373 |               if hasattr(cloner, \"force_reclone\"):\n374 |                   cloner.force_reclone = False\n375 | /         except Exception:\n376 | |             pass\n    | |________________^\n377 |           try:\n378 |               invoked = False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:375:16\n    |\n373 |             if hasattr(cloner, \"force_reclone\"):\n374 |                 cloner.force_reclone = False\n375 |         except Exception:\n    |                ^^^^^^^^^\n376 |             pass\n377 |         try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:393:21\n    |\n391 |                       cloner.main()\n392 |                   except TypeError:\n393 | /                     try:\n394 | |                         cloner.main()\n395 | |                     except Exception:\n396 | |                         pass\n    | |____________________________^\n397 |                   invoked = True\n398 |               if not invoked:\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:395:21\n    |\n393 |                       try:\n394 |                           cloner.main()\n395 | /                     except Exception:\n396 | |                         pass\n    | |____________________________^\n397 |                   invoked = True\n398 |               if not invoked:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:395:28\n    |\n393 |                     try:\n394 |                         cloner.main()\n395 |                     except Exception:\n    |                            ^^^^^^^^^\n396 |                         pass\n397 |                 invoked = True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:400:16\n    |\n398 |             if not invoked:\n399 |                 _info(\"No recognized cloner entrypoint found; skipping run\")\n400 |         except Exception as e:\n    |                ^^^^^^^^^\n401 |             _error(\"Cloner run failed:\", e)\n402 |         return cloner\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:406:23\n    |\n404 |     # Step 4: run visitor (moved logic from _run_visitor)\n405 |     def run_visitor(\n406 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |                       ^^^\n407 |     ) -> None:\n408 |         root = None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:411:16\n    |\n409 |         try:\n410 |             root = getattr(cloner, \"target_dir\", None)\n411 |         except Exception:\n    |                ^^^^^^^^^\n412 |             root = None\n413 |         root = root or self.detect_clones_root()\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:414:12\n    |\n412 |             root = None\n413 |         root = root or self.detect_clones_root()\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n    |            ^^^^^^^^^^^^^\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:414:26\n    |\n412 |             root = None\n413 |         root = root or self.detect_clones_root()\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n    |                          ^^^^^^^^^^^^\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:415:22\n    |\n413 |         root = root or self.detect_clones_root()\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n    |                      ^^^^^^^^^^^^^^^\n416 |             for entry in os.listdir(parent):\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_all_x.py:416:26\n    |\n414 |         if os.path.isdir(os.path.join(root, \".git\")):\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n    |                          ^^^^^^^^^^\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n418 |                     root = parent\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:417:20\n    |\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n    |                    ^^^^^^^^^^^^^\n418 |                     root = parent\n419 |                     break\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:417:34\n    |\n415 |             parent = os.path.dirname(root.rstrip(\"/\\\\\"))\n416 |             for entry in os.listdir(parent):\n417 |                 if os.path.isdir(os.path.join(parent, entry, \".git\")):\n    |                                  ^^^^^^^^^^^^\n418 |                     root = parent\n419 |                     break\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:426:19\n    |\n424 |               vis = self._instantiate_visitor(ctx, root_dir=root)\n425 |           except Exception as e:\n426 |               raise AssertionError(\n    |  ___________________^\n427 | |                 f\"x_make_github_visitor instantiate failed: {e}\"\n428 | |             ) from e\n    | |_____________^\n429 |           try:\n430 |               vis.run_inspect_flow()\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:427:17\n    |\n425 |         except Exception as e:\n426 |             raise AssertionError(\n427 |                 f\"x_make_github_visitor instantiate failed: {e}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n428 |             ) from e\n429 |         try:\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (110 > 88)\n   --> x_cls_make_all_x.py:435:89\n    |\n433 |             if \"no child git repositories found\" in msg:\n434 |                 _info(\n435 |                     \"Visitor skipped: no child git repositories present at root; continuing orchestrator flow\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^\n436 |                 )\n437 |                 return\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:438:19\n    |\n436 |                   )\n437 |                   return\n438 |               raise AssertionError(\n    |  ___________________^\n439 | |                 f\"x_make_github_visitor run failed: {e}\"\n440 | |             ) from e\n    | |_____________^\n441 |\n442 |       # Step 5: publish and update installations (moved logic from _process_publishes_and_updates)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:439:17\n    |\n437 |                 return\n438 |             raise AssertionError(\n439 |                 f\"x_make_github_visitor run failed: {e}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n440 |             ) from e\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_all_x.py:442:89\n    |\n440 |             ) from e\n441 |\n442 |     # Step 5: publish and update installations (moved logic from _process_publishes_and_updates)\n    |                                                                                         ^^^^^^^^\n443 |     def process_publishes_and_updates(\n444 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:444:23\n    |\n442 |     # Step 5: publish and update installations (moved logic from _process_publishes_and_updates)\n443 |     def process_publishes_and_updates(\n444 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |                       ^^^\n445 |     ) -> None:\n446 |         published_versions, published_artifacts = self.publish_all(cloner, ctx)\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:461:9\n    |\n459 |           deadline = time.time() + timeout\n460 |           candidates = [name, name.replace(\"_\", \"-\")]\n461 | /         try:\n462 | |             time.sleep(5)\n463 | |         except Exception:\n464 | |             pass\n    | |________________^\n465 |           attempt = 0\n466 |           backoff = 1\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:463:9\n    |\n461 |           try:\n462 |               time.sleep(5)\n463 | /         except Exception:\n464 | |             pass\n    | |________________^\n465 |           attempt = 0\n466 |           backoff = 1\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:463:16\n    |\n461 |         try:\n462 |             time.sleep(5)\n463 |         except Exception:\n    |                ^^^^^^^^^\n464 |             pass\n465 |         attempt = 0\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:472:27\n    |\n470 |                 pj_url = f\"https://pypi.org/project/{candidate}/{version}/\"\n471 |                 try:\n472 |                     req = urllib.request.Request(pj_url, method=\"HEAD\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n473 |                     with urllib.request.urlopen(req, timeout=10) as resp:\n474 |                         if getattr(resp, \"status\", 200) == 200:\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:473:26\n    |\n471 |                 try:\n472 |                     req = urllib.request.Request(pj_url, method=\"HEAD\")\n473 |                     with urllib.request.urlopen(req, timeout=10) as resp:\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n474 |                         if getattr(resp, \"status\", 200) == 200:\n475 |                             _info(\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> x_cls_make_all_x.py:474:60\n    |\n472 |                     req = urllib.request.Request(pj_url, method=\"HEAD\")\n473 |                     with urllib.request.urlopen(req, timeout=10) as resp:\n474 |                         if getattr(resp, \"status\", 200) == 200:\n    |                                                            ^^^\n475 |                             _info(\n476 |                                 f\"PyPI: {name}=={version} is now available (queried {candidate} via project page)\"\n    |\n\nE501 Line too long (114 > 88)\n   --> x_cls_make_all_x.py:476:89\n    |\n474 |                         if getattr(resp, \"status\", 200) == 200:\n475 |                             _info(\n476 |                                 f\"PyPI: {name}=={version} is now available (queried {candidate} via project page)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n477 |                             )\n478 |                             return True\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:479:17\n    |\n477 |                               )\n478 |                               return True\n479 | /                 except Exception:\n480 | |                     pass\n    | |________________________^\n481 |                   json_url = f\"https://pypi.org/pypi/{candidate}/json\"\n482 |                   try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:479:24\n    |\n477 |                             )\n478 |                             return True\n479 |                 except Exception:\n    |                        ^^^^^^^^^\n480 |                     pass\n481 |                 json_url = f\"https://pypi.org/pypi/{candidate}/json\"\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:483:26\n    |\n481 |                 json_url = f\"https://pypi.org/pypi/{candidate}/json\"\n482 |                 try:\n483 |                     with urllib.request.urlopen(json_url, timeout=10) as resp:\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n484 |                         data = json.load(resp)\n485 |                     if version in data.get(\"releases\", {}):\n    |\n\nE501 Line too long (102 > 88)\n   --> x_cls_make_all_x.py:487:89\n    |\n485 |                     if version in data.get(\"releases\", {}):\n486 |                         _info(\n487 |                             f\"PyPI: {name}=={version} is now available (queried {candidate} via JSON)\"\n    |                                                                                         ^^^^^^^^^^^^^^\n488 |                         )\n489 |                         return True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:490:24\n    |\n488 |                         )\n489 |                         return True\n490 |                 except Exception as exc:\n    |                        ^^^^^^^^^\n491 |                     _info(\n492 |                         f\"PyPI check attempt {attempt} for {name} (using {candidate}) failed: {exc}\"\n    |\n\nE501 Line too long (100 > 88)\n   --> x_cls_make_all_x.py:492:89\n    |\n490 |                 except Exception as exc:\n491 |                     _info(\n492 |                         f\"PyPI check attempt {attempt} for {name} (using {candidate}) failed: {exc}\"\n    |                                                                                         ^^^^^^^^^^^^\n493 |                     )\n494 |                     continue\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:495:13\n    |\n493 |                       )\n494 |                       continue\n495 | /             try:\n496 | |                 time.sleep(backoff)\n497 | |             except Exception:\n498 | |                 pass\n    | |____________________^\n499 |               backoff = min(backoff * 2, 10)\n500 |           _info(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:497:13\n    |\n495 |               try:\n496 |                   time.sleep(backoff)\n497 | /             except Exception:\n498 | |                 pass\n    | |____________________^\n499 |               backoff = min(backoff * 2, 10)\n500 |           _info(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:497:20\n    |\n495 |             try:\n496 |                 time.sleep(backoff)\n497 |             except Exception:\n    |                    ^^^^^^^^^\n498 |                 pass\n499 |             backoff = min(backoff * 2, 10)\n    |\n\nS107 Possible hardcoded password assigned to function default: \"token_env\"\n   --> x_cls_make_all_x.py:506:49\n    |\n505 |     # Publishing helpers kept as freestanding where small; core flow moved here\n506 |     def _check_test_pypi(self, token_env: str = \"TEST_PYPI_TOKEN\") -> None:\n    |                                                 ^^^^^^^^^^^^^^^^^\n507 |         try:\n508 |             token = os.environ.get(token_env)\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:510:19\n    |\n508 |             token = os.environ.get(token_env)\n509 |             url = \"https://test.pypi.org/\"\n510 |             req = urllib.request.Request(url, method=\"HEAD\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n511 |             if token:\n512 |                 req.add_header(\"Authorization\", f\"token {token}\")\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_all_x.py:513:18\n    |\n511 |             if token:\n512 |                 req.add_header(\"Authorization\", f\"token {token}\")\n513 |             with urllib.request.urlopen(req, timeout=10) as resp:\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n514 |                 status = getattr(resp, \"status\", None)\n515 |                 if status is not None and status >= 400:\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `400` with a constant variable\n   --> x_cls_make_all_x.py:515:53\n    |\n513 |             with urllib.request.urlopen(req, timeout=10) as resp:\n514 |                 status = getattr(resp, \"status\", None)\n515 |                 if status is not None and status >= 400:\n    |                                                     ^^^\n516 |                     raise AssertionError(\n517 |                         f\"test.pypi.org returned status {status}\"\n    |\n\nTRY301 Abstract `raise` to an inner function\n   --> x_cls_make_all_x.py:516:21\n    |\n514 |                   status = getattr(resp, \"status\", None)\n515 |                   if status is not None and status >= 400:\n516 | /                     raise AssertionError(\n517 | |                         f\"test.pypi.org returned status {status}\"\n518 | |                     )\n    | |_____________________^\n519 |           except AssertionError:\n520 |               raise\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:516:27\n    |\n514 |                   status = getattr(resp, \"status\", None)\n515 |                   if status is not None and status >= 400:\n516 |                       raise AssertionError(\n    |  ___________________________^\n517 | |                         f\"test.pypi.org returned status {status}\"\n518 | |                     )\n    | |_____________________^\n519 |           except AssertionError:\n520 |               raise\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:517:25\n    |\n515 |                 if status is not None and status >= 400:\n516 |                     raise AssertionError(\n517 |                         f\"test.pypi.org returned status {status}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n518 |                     )\n519 |         except AssertionError:\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:522:19\n    |\n520 |             raise\n521 |         except Exception as exc:\n522 |             raise AssertionError(f\"test.pypi.org check failed: {exc}\") from exc\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n523 |\n524 |     def _to_posix_rel(self, rel: str) -> str:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:522:34\n    |\n520 |             raise\n521 |         except Exception as exc:\n522 |             raise AssertionError(f\"test.pypi.org check failed: {exc}\") from exc\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n523 |\n524 |     def _to_posix_rel(self, rel: str) -> str:\n    |\nhelp: Assign to variable; remove f-string literal\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:531:9\n    |\n529 |               )  # avoid accidental leading separators\n530 |               rel = rel.replace(\"\\\\\", \"/\")\n531 | /         except Exception:\n532 | |             pass\n    | |________________^\n533 |           return rel\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:531:16\n    |\n529 |             )  # avoid accidental leading separators\n530 |             rel = rel.replace(\"\\\\\", \"/\")\n531 |         except Exception:\n    |                ^^^^^^^^^\n532 |             pass\n533 |         return rel\n    |\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_all_x.py:536:89\n    |\n535 |     def _safe_rel_from_abs(self, abs_path: str, base_dir: str) -> str | None:\n536 |         \"\"\"Return posix relative path if abs_path is a file under base_dir; else None.\"\"\"\n    |                                                                                         ^\n537 |         try:\n538 |             ap = os.path.abspath(abs_path)\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:538:18\n    |\n536 |         \"\"\"Return posix relative path if abs_path is a file under base_dir; else None.\"\"\"\n537 |         try:\n538 |             ap = os.path.abspath(abs_path)\n    |                  ^^^^^^^^^^^^^^^\n539 |             bd = os.path.abspath(base_dir)\n540 |             common = os.path.commonpath([ap, bd])\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:539:18\n    |\n537 |         try:\n538 |             ap = os.path.abspath(abs_path)\n539 |             bd = os.path.abspath(base_dir)\n    |                  ^^^^^^^^^^^^^^^\n540 |             common = os.path.commonpath([ap, bd])\n541 |             if common != bd:\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:543:20\n    |\n541 |             if common != bd:\n542 |                 return None\n543 |             if not os.path.isfile(ap):\n    |                    ^^^^^^^^^^^^^^\n544 |                 return None\n545 |             rel_native = os.path.relpath(ap, bd)\n    |\nhelp: Replace with `Path(...).is_file()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:549:16\n    |\n547 |                 return None\n548 |             return self._to_posix_rel(rel_native)\n549 |         except Exception:\n    |                ^^^^^^^^^\n550 |             return None\n    |\n\nC901 `_load_ancillary_allowlist` is too complex (12 > 10)\n   --> x_cls_make_all_x.py:552:9\n    |\n550 |             return None\n551 |\n552 |     def _load_ancillary_allowlist(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n553 |         self, list_file: str, pkg_dir: str\n554 |     ) -> list[str]:\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_all_x.py:555:89\n    |\n553 |         self, list_file: str, pkg_dir: str\n554 |     ) -> list[str]:\n555 |         \"\"\"Load an allowlist of ancillary files; return clean relative paths under pkg_dir.\"\"\"\n    |                                                                                         ^^^^^^\n556 |         out: list[str] = []\n557 |         try:\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:558:20\n    |\n556 |         out: list[str] = []\n557 |         try:\n558 |             if not os.path.isfile(list_file):\n    |                    ^^^^^^^^^^^^^^\n559 |                 _info(f\"Ancillary allowlist not found: {list_file}\")\n560 |                 return out\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_all_x.py:561:18\n    |\n559 |                 _info(f\"Ancillary allowlist not found: {list_file}\")\n560 |                 return out\n561 |             with open(list_file, encoding=\"utf-8\") as f:\n    |                  ^^^^\n562 |                 lines = f.readlines()\n563 |             seen: set[str] = set()\n    |\nhelp: Replace with `Path.open()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:571:45\n    |\n569 |                 if line.startswith(\"@\"):\n570 |                     line = line[1:].strip()\n571 |                 abs_path = os.path.normpath(os.path.join(pkg_dir, line))\n    |                                             ^^^^^^^^^^^^\n572 |                 # Ensure file is within package dir and is a file\n573 |                 try:\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:575:26\n    |\n573 |                 try:\n574 |                     common = os.path.commonpath(\n575 |                         [os.path.abspath(abs_path), os.path.abspath(pkg_dir)]\n    |                          ^^^^^^^^^^^^^^^\n576 |                     )\n577 |                     if common != os.path.abspath(pkg_dir):\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:575:53\n    |\n573 |                 try:\n574 |                     common = os.path.commonpath(\n575 |                         [os.path.abspath(abs_path), os.path.abspath(pkg_dir)]\n    |                                                     ^^^^^^^^^^^^^^^\n576 |                     )\n577 |                     if common != os.path.abspath(pkg_dir):\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_all_x.py:577:34\n    |\n575 |                         [os.path.abspath(abs_path), os.path.abspath(pkg_dir)]\n576 |                     )\n577 |                     if common != os.path.abspath(pkg_dir):\n    |                                  ^^^^^^^^^^^^^^^\n578 |                         _info(\n579 |                             f\"Skipping ancillary outside package dir: {line}\"\n    |\nhelp: Replace with `Path(...).resolve()`\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_all_x.py:582:17\n    |\n580 |                           )\n581 |                           continue\n582 | /                 except Exception:\n583 | |                     continue\n    | |____________________________^\n584 |                   if not os.path.isfile(abs_path):\n585 |                       _info(f\"Skipping non-file ancillary entry: {line}\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:582:24\n    |\n580 |                         )\n581 |                         continue\n582 |                 except Exception:\n    |                        ^^^^^^^^^\n583 |                     continue\n584 |                 if not os.path.isfile(abs_path):\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:584:24\n    |\n582 |                 except Exception:\n583 |                     continue\n584 |                 if not os.path.isfile(abs_path):\n    |                        ^^^^^^^^^^^^^^\n585 |                     _info(f\"Skipping non-file ancillary entry: {line}\")\n586 |                     continue\n    |\nhelp: Replace with `Path(...).is_file()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:589:24\n    |\n587 |                 try:\n588 |                     rel = os.path.relpath(abs_path, pkg_dir)\n589 |                 except Exception:\n    |                        ^^^^^^^^^\n590 |                     rel = os.path.basename(abs_path)\n591 |                 if rel.startswith(\"..\"):\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:590:27\n    |\n588 |                     rel = os.path.relpath(abs_path, pkg_dir)\n589 |                 except Exception:\n590 |                     rel = os.path.basename(abs_path)\n    |                           ^^^^^^^^^^^^^^^^\n591 |                 if rel.startswith(\"..\"):\n592 |                     continue\n    |\nhelp: Replace with `Path(...).name`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:598:16\n    |\n596 |                     seen.add(rel)\n597 |                     out.append(rel)\n598 |         except Exception as e:\n    |                ^^^^^^^^^\n599 |             _error(f\"Failed to load ancillary allowlist {list_file}: {e}\")\n600 |         return out\n    |\n\nC901 `_locate_repo_main_and_ancillaries` is too complex (16 > 10)\n   --> x_cls_make_all_x.py:602:9\n    |\n600 |         return out\n601 |\n602 |     def _locate_repo_main_and_ancillaries(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n603 |         self,\n604 |         cloner: Any,\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_all_x.py:602:9\n    |\n600 |         return out\n601 |\n602 |     def _locate_repo_main_and_ancillaries(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n603 |         self,\n604 |         cloner: Any,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:604:17\n    |\n602 |     def _locate_repo_main_and_ancillaries(\n603 |         self,\n604 |         cloner: Any,\n    |                 ^^^\n605 |         pkg: str,\n606 |         main_basename: str | None,\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:615:16\n    |\n613 |                 else self.repo_parent_root()\n614 |             )\n615 |         except Exception:\n    |                ^^^^^^^^^\n616 |             base = self.repo_parent_root()\n617 |         pkg_dir = os.path.join(base, pkg)\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:617:19\n    |\n615 |         except Exception:\n616 |             base = self.repo_parent_root()\n617 |         pkg_dir = os.path.join(base, pkg)\n    |                   ^^^^^^^^^^^^\n618 |         if not os.path.isdir(pkg_dir):\n619 |             raise FileNotFoundError(\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:618:16\n    |\n616 |             base = self.repo_parent_root()\n617 |         pkg_dir = os.path.join(base, pkg)\n618 |         if not os.path.isdir(pkg_dir):\n    |                ^^^^^^^^^^^^^\n619 |             raise FileNotFoundError(\n620 |                 f\"Repo package directory not found for {pkg!r} at {pkg_dir}\"\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:619:19\n    |\n617 |           pkg_dir = os.path.join(base, pkg)\n618 |           if not os.path.isdir(pkg_dir):\n619 |               raise FileNotFoundError(\n    |  ___________________^\n620 | |                 f\"Repo package directory not found for {pkg!r} at {pkg_dir}\"\n621 | |             )\n    | |_____________^\n622 |           if main_basename is None:\n623 |               main_basename = pkg.replace(\"x_make_\", \"x_cls_make_\") + \".py\"\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:620:17\n    |\n618 |         if not os.path.isdir(pkg_dir):\n619 |             raise FileNotFoundError(\n620 |                 f\"Repo package directory not found for {pkg!r} at {pkg_dir}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n621 |             )\n622 |         if main_basename is None:\n    |\nhelp: Assign to variable; remove f-string literal\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:624:21\n    |\n622 |         if main_basename is None:\n623 |             main_basename = pkg.replace(\"x_make_\", \"x_cls_make_\") + \".py\"\n624 |         main_path = os.path.join(pkg_dir, main_basename)\n    |                     ^^^^^^^^^^^^\n625 |         if not os.path.exists(main_path):\n626 |             for fn in os.listdir(pkg_dir):\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:625:16\n    |\n623 |             main_basename = pkg.replace(\"x_make_\", \"x_cls_make_\") + \".py\"\n624 |         main_path = os.path.join(pkg_dir, main_basename)\n625 |         if not os.path.exists(main_path):\n    |                ^^^^^^^^^^^^^^\n626 |             for fn in os.listdir(pkg_dir):\n627 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_all_x.py:626:23\n    |\n624 |         main_path = os.path.join(pkg_dir, main_basename)\n625 |         if not os.path.exists(main_path):\n626 |             for fn in os.listdir(pkg_dir):\n    |                       ^^^^^^^^^^\n627 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n628 |                     main_path = os.path.join(pkg_dir, fn)\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:628:33\n    |\n626 |             for fn in os.listdir(pkg_dir):\n627 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n628 |                     main_path = os.path.join(pkg_dir, fn)\n    |                                 ^^^^^^^^^^^^\n629 |                     break\n630 |         if not os.path.exists(main_path):\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:630:16\n    |\n628 |                     main_path = os.path.join(pkg_dir, fn)\n629 |                     break\n630 |         if not os.path.exists(main_path):\n    |                ^^^^^^^^^^^^^^\n631 |             raise FileNotFoundError(\n632 |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:631:19\n    |\n629 |                       break\n630 |           if not os.path.exists(main_path):\n631 |               raise FileNotFoundError(\n    |  ___________________^\n632 | |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n633 | |             )\n    | |_____________^\n634 |           anc_rel: list[str] = []\n635 |           if ancillary_names:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:632:17\n    |\n630 |         if not os.path.exists(main_path):\n631 |             raise FileNotFoundError(\n632 |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n633 |             )\n634 |         anc_rel: list[str] = []\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (100 > 88)\n   --> x_cls_make_all_x.py:632:89\n    |\n630 |         if not os.path.exists(main_path):\n631 |             raise FileNotFoundError(\n632 |                 f\"Could not locate main file in repo for package {pkg!r} (expected {main_basename})\"\n    |                                                                                         ^^^^^^^^^^^^\n633 |             )\n634 |         anc_rel: list[str] = []\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:640:33\n    |\n638 |                 if name.startswith(\"@\"):\n639 |                     # Allowlist file relative to the repo package directory\n640 |                     list_file = os.path.join(pkg_dir, name[1:].strip())\n    |                                 ^^^^^^^^^^^^\n641 |                     for allowed_rel in self._load_ancillary_allowlist(\n642 |                         list_file, pkg_dir\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:650:29\n    |\n648 |                 # Normalize any leading separators from manifest entries\n649 |                 safe_name = name.lstrip(\"/\\\\\")\n650 |                 candidate = os.path.join(pkg_dir, safe_name)\n    |                             ^^^^^^^^^^^^\n651 |                 if os.path.isfile(candidate):\n652 |                     rel_path: str | None = self._safe_rel_from_abs(\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_all_x.py:651:20\n    |\n649 |                 safe_name = name.lstrip(\"/\\\\\")\n650 |                 candidate = os.path.join(pkg_dir, safe_name)\n651 |                 if os.path.isfile(candidate):\n    |                    ^^^^^^^^^^^^^^\n652 |                     rel_path: str | None = self._safe_rel_from_abs(\n653 |                         candidate, pkg_dir\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:658:22\n    |\n656 |                         seen.add(rel_path)\n657 |                         anc_rel.append(rel_path)\n658 |                 elif os.path.isdir(candidate):\n    |                      ^^^^^^^^^^^^^\n659 |                     # No auto-expansion (security). Require allowlist.\n660 |                     _info(\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nE501 Line too long (137 > 88)\n   --> x_cls_make_all_x.py:661:89\n    |\n659 | \u00e2\u20ac\u00a6         # No auto-expansion (security). Require allowlist.\n660 | \u00e2\u20ac\u00a6         _info(\n661 | \u00e2\u20ac\u00a6             f\"Ancillary directory provided but not auto-included (use '@<allowlist>' or opts['ancillary_allowlist']): {name}\"\n    |                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n662 | \u00e2\u20ac\u00a6         )\n663 | \u00e2\u20ac\u00a6     else:\n    |\n\nN803 Argument name `PublisherCls` should be lowercase\n   --> x_cls_make_all_x.py:669:9\n    |\n667 |     def _instantiate_publisher(\n668 |         self,\n669 |         PublisherCls: Any,\n    |         ^^^^^^^^^^^^^^^^^\n670 |         name: str,\n671 |         version: str,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `PublisherCls`\n   --> x_cls_make_all_x.py:669:23\n    |\n667 |     def _instantiate_publisher(\n668 |         self,\n669 |         PublisherCls: Any,\n    |                       ^^^\n670 |         name: str,\n671 |         version: str,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_instantiate_publisher`\n   --> x_cls_make_all_x.py:674:10\n    |\n672 |         ctx: OrchestratorContext | None,\n673 |         safe_kwargs: dict[str, Any],\n674 |     ) -> Any:\n    |          ^^^\n675 |         try:\n676 |             return PublisherCls(\n    |\n\nC901 `_publish_do_publish` is too complex (17 > 10)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nPLR0913 Too many arguments in function definition (10 > 5)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nPLR0912 Too many branches (14 > 12)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nPLR0915 Too many statements (59 > 50)\n   --> x_cls_make_all_x.py:693:9\n    |\n691 |         return PublisherCls(name=name, version=version, **safe_kwargs)\n692 |\n693 |     def _publish_do_publish(\n    |         ^^^^^^^^^^^^^^^^^^^\n694 |         self,\n695 |         name: str,\n    |\n\nARG002 Unused method argument: `base`\n   --> x_cls_make_all_x.py:700:9\n    |\n698 |         ancillary_files: list[str],\n699 |         *,\n700 |         base: str,\n    |         ^^^^\n701 |         cloner: Any,\n702 |         ctx: OrchestratorContext | None,\n    |\n\nARG002 Unused method argument: `cloner`\n   --> x_cls_make_all_x.py:701:9\n    |\n699 |         *,\n700 |         base: str,\n701 |         cloner: Any,\n    |         ^^^^^^\n702 |         ctx: OrchestratorContext | None,\n703 |         local_kwargs: dict[str, Any],\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:701:17\n    |\n699 |         *,\n700 |         base: str,\n701 |         cloner: Any,\n    |                 ^^^\n702 |         ctx: OrchestratorContext | None,\n703 |         local_kwargs: dict[str, Any],\n    |\n\nN806 Variable `PublisherCls` in function should be lowercase\n   --> x_cls_make_all_x.py:707:9\n    |\n705 |         published_artifacts: dict[str, dict[str, Any]],\n706 |     ) -> None:\n707 |         PublisherCls = x_cls_make_pypi_x\n    |         ^^^^^^^^^^^^\n708 |         safe_kwargs = {\n709 |             k: v\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_all_x.py:714:89\n    |\n712 |         }\n713 |\n714 |         # Normalize ancillaries: include only explicitly listed files and files from allowlists.\n    |                                                                                         ^^^^^^^^\n715 |         pkg_dir = os.path.dirname(main_file)\n716 |         seen_rel: set[str] = set()\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_all_x.py:715:19\n    |\n714 |         # Normalize ancillaries: include only explicitly listed files and files from allowlists.\n715 |         pkg_dir = os.path.dirname(main_file)\n    |                   ^^^^^^^^^^^^^^^\n716 |         seen_rel: set[str] = set()\n717 |         norm_anc_rel: list[str] = []\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`\n   --> x_cls_make_all_x.py:723:24\n    |\n721 |                 ap = (\n722 |                     rel_or_abs\n723 |                     if os.path.isabs(rel_or_abs)\n    |                        ^^^^^^^^^^^^^\n724 |                     else os.path.join(pkg_dir, rel_or_abs)\n725 |                 )\n    |\nhelp: Replace with `Path(...).is_absolute()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:724:26\n    |\n722 |                     rel_or_abs\n723 |                     if os.path.isabs(rel_or_abs)\n724 |                     else os.path.join(pkg_dir, rel_or_abs)\n    |                          ^^^^^^^^^^^^\n725 |                 )\n726 |                 if os.path.isdir(ap):\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_all_x.py:726:20\n    |\n724 |                     else os.path.join(pkg_dir, rel_or_abs)\n725 |                 )\n726 |                 if os.path.isdir(ap):\n    |                    ^^^^^^^^^^^^^\n727 |                     # Directories are ignored unless files are enumerated via allowlists\n728 |                     _info(\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nE501 Line too long (148 > 88)\n   --> x_cls_make_all_x.py:729:89\n    |\n727 | \u00e2\u20ac\u00a6 files are enumerated via allowlists\n728 | \u00e2\u20ac\u00a6\n729 | \u00e2\u20ac\u00a6ry (no auto-expansion): {os.path.relpath(ap, pkg_dir) if not os.path.isabs(rel_or_abs) else ap}\"\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n730 | \u00e2\u20ac\u00a6\n731 | \u00e2\u20ac\u00a6\n    |\n\nPTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`\n   --> x_cls_make_all_x.py:729:114\n    |\n727 | \u00e2\u20ac\u00a6     # Directories are ignored unless files are enumerated via allowlists\n728 | \u00e2\u20ac\u00a6     _info(\n729 | \u00e2\u20ac\u00a6         f\"Ignoring ancillary directory (no auto-expansion): {os.path.relpath(ap, pkg_dir) if not os.path.isabs(rel_or_abs) else ap}\"\n    |                                                                                                    ^^^^^^^^^^^^^\n730 | \u00e2\u20ac\u00a6     )\n731 | \u00e2\u20ac\u00a6     return\n    |\nhelp: Replace with `Path(...).is_absolute()`\n\nERA001 Found commented-out code\n   --> x_cls_make_all_x.py:733:17\n    |\n731 |                     return\n732 |                 rel = self._safe_rel_from_abs(ap, pkg_dir)\n733 |                 ##rel = self._safe_rel_from_abs(ap, pkg_dir)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n734 |                 if not rel:\n735 |                     return\n    |\nhelp: Remove commented-out code\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:741:20\n    |\n739 |                     seen_rel.add(rel)\n740 |                     norm_anc_rel.append(rel)\n741 |             except Exception:\n    |                    ^^^^^^^^^\n742 |                 return\n    |\n\nE501 Line too long (107 > 88)\n   --> x_cls_make_all_x.py:746:89\n    |\n744 |         # 1) Files explicitly provided by manifest (already relative to pkg_dir)\n745 |         for a in ancillary_files or []:\n746 |             # Entries like '@list.txt' could have been passed through; ignore here (handled below via opts)\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^\n747 |             if a.startswith(\"@\"):\n748 |                 continue\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:762:17\n    |\n760 |         for spec in allow_files:\n761 |             list_path = (\n762 |                 os.path.join(pkg_dir, spec[1:].strip())\n    |                 ^^^^^^^^^^^^\n763 |                 if spec.startswith(\"@\")\n764 |                 else os.path.join(pkg_dir, spec)\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:764:22\n    |\n762 |                 os.path.join(pkg_dir, spec[1:].strip())\n763 |                 if spec.startswith(\"@\")\n764 |                 else os.path.join(pkg_dir, spec)\n    |                      ^^^^^^^^^^^^\n765 |             )\n766 |             for rel in self._load_ancillary_allowlist(list_path, pkg_dir):\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_all_x.py:778:19\n    |\n776 |             )\n777 |             # Run with cwd=pkg_dir and pass POSIX relative paths\n778 |             cwd = os.getcwd()\n    |                   ^^^^^^^^^\n779 |             main_rel = os.path.basename(main_file)\n780 |             try:\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_all_x.py:779:24\n    |\n777 |             # Run with cwd=pkg_dir and pass POSIX relative paths\n778 |             cwd = os.getcwd()\n779 |             main_rel = os.path.basename(main_file)\n    |                        ^^^^^^^^^^^^^^^^\n780 |             try:\n781 |                 os.chdir(pkg_dir)\n    |\nhelp: Replace with `Path(...).name`\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_all_x.py:784:17\n    |\n782 |                   published = publisher.publish(main_rel, norm_anc_rel)\n783 |               finally:\n784 | /                 try:\n785 | |                     os.chdir(cwd)\n786 | |                 except Exception:\n787 | |                     pass\n    | |________________________^\n788 |           except Exception as exc:\n789 |               # ...existing error handling...\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:786:17\n    |\n784 |                   try:\n785 |                       os.chdir(cwd)\n786 | /                 except Exception:\n787 | |                     pass\n    | |________________________^\n788 |           except Exception as exc:\n789 |               # ...existing error handling...\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:786:24\n    |\n784 |                 try:\n785 |                     os.chdir(cwd)\n786 |                 except Exception:\n    |                        ^^^^^^^^^\n787 |                     pass\n788 |         except Exception as exc:\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_all_x.py:810:89\n    |\n808 |             ):\n809 |                 _info(\n810 |                     f\"SKIP: {name} version {version} already exists on PyPI. Skipping publish.\"\n    |                                                                                         ^^^^^^^\n811 |                 )\n812 |                 published = True\n    |\n\nPLR0913 Too many arguments in function definition (8 > 5)\n   --> x_cls_make_all_x.py:826:9\n    |\n824 |             _info(f\"publish skipped for {name} {version} (minimal stub)\")\n825 |\n826 |     def _publish_one(\n    |         ^^^^^^^^^^^^\n827 |         self,\n828 |         name: str,\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:833:17\n    |\n831 |         ancillary_files: list[str],\n832 |         *,\n833 |         cloner: Any,\n    |                 ^^^\n834 |         ctx: OrchestratorContext | None,\n835 |         published_versions: dict[str, str | None],\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> x_cls_make_all_x.py:837:19\n    |\n835 |         published_versions: dict[str, str | None],\n836 |         published_artifacts: dict[str, dict[str, Any]],\n837 |         **kwargs: Any,\n    |                   ^^^\n838 |     ) -> None:\n839 |         _info(f\"Publishing {name} version {version}\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:849:20\n    |\n847 |                     else self.repo_parent_root()\n848 |                 )\n849 |             except Exception:\n    |                    ^^^^^^^^^\n850 |                 base = self.repo_parent_root()\n851 |             self._publish_do_publish(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:869:23\n    |\n867 |     # Step 5a: publish all packages (moved logic from freestanding publish_all)\n868 |     def publish_all(\n869 |         self, cloner: Any, ctx: OrchestratorContext | None\n    |                       ^^^\n870 |     ) -> tuple[dict[str, str | None], dict[str, dict[str, Any]]]:\n871 |         published_versions: dict[str, str | None] = {}\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_all_x.py:877:19\n    |\n875 |               self._check_test_pypi()\n876 |           except Exception as exc:\n877 |               raise AssertionError(\n    |  ___________________^\n878 | |                 f\"test.pypi.org connectivity/token check failed: {exc}\"\n879 | |             ) from exc\n    | |_____________^\n880 |           to_publish = getattr(MakeAllConfig, \"PUBLISH_MANIFEST\", [])\n881 |           for repo_name, version, anc_names, opts in to_publish:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_all_x.py:878:17\n    |\n876 |         except Exception as exc:\n877 |             raise AssertionError(\n878 |                 f\"test.pypi.org connectivity/token check failed: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n879 |             ) from exc\n880 |         to_publish = getattr(MakeAllConfig, \"PUBLISH_MANIFEST\", [])\n    |\nhelp: Assign to variable; remove f-string literal\n\nN803 Argument name `PipUpdatesCls` should be lowercase\n   --> x_cls_make_all_x.py:907:15\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |               ^^^^^^^^^^^^^^^^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `PipUpdatesCls`\n   --> x_cls_make_all_x.py:907:30\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |                              ^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `ctx`\n   --> x_cls_make_all_x.py:907:40\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |                                        ^^^^^^^^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_all_x.py:907:52\n    |\n905 |     # Step 5b: run pip updates (moved logic from freestanding run_pip_updates)\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n    |                                                    ^^^^^^^^^^^^^\n908 |     ) -> Any:\n909 |         try:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_instantiate_pipupdates`\n   --> x_cls_make_all_x.py:908:10\n    |\n906 |     def _instantiate_pipupdates(\n907 |         self, PipUpdatesCls: Any, ctx: Any | None, use_user_flag: bool\n908 |     ) -> Any:\n    |          ^^^\n909 |         try:\n910 |             return PipUpdatesCls(ctx)\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_all_x.py:911:9\n    |\n909 |           try:\n910 |               return PipUpdatesCls(ctx)\n911 | /         except Exception:\n912 | |             pass\n    | |________________^\n913 |           attempt_kwargs: list[dict[str, Any]] = [\n914 |               {\"ctx\": ctx},\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:911:16\n    |\n909 |         try:\n910 |             return PipUpdatesCls(ctx)\n911 |         except Exception:\n    |                ^^^^^^^^^\n912 |             pass\n913 |         attempt_kwargs: list[dict[str, Any]] = [\n    |\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_all_x.py:922:13\n    |\n920 |               try:\n921 |                   return PipUpdatesCls(**kwargs)\n922 | /             except Exception:\n923 | |                 continue\n    | |________________________^\n924 |           return PipUpdatesCls()\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:922:20\n    |\n920 |             try:\n921 |                 return PipUpdatesCls(**kwargs)\n922 |             except Exception:\n    |                    ^^^^^^^^^\n923 |                 continue\n924 |         return PipUpdatesCls()\n    |\n\nC901 `_locate_and_choose_packages` is too complex (12 > 10)\n   --> x_cls_make_all_x.py:953:9\n    |\n951 |         return any_failures_local\n952 |\n953 |     def _locate_and_choose_packages(\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n954 |         self, cloner: Any, published_versions: dict[str, str | None]\n955 |     ) -> tuple[list[str], str, bool]:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n   --> x_cls_make_all_x.py:954:23\n    |\n953 |     def _locate_and_choose_packages(\n954 |         self, cloner: Any, published_versions: dict[str, str | None]\n    |                       ^^^\n955 |     ) -> tuple[list[str], str, bool]:\n956 |         try:\n    |\n\nARG002 Unused method argument: `published_versions`\n   --> x_cls_make_all_x.py:954:28\n    |\n953 |     def _locate_and_choose_packages(\n954 |         self, cloner: Any, published_versions: dict[str, str | None]\n    |                            ^^^^^^^^^^^^^^^^^^\n955 |     ) -> tuple[list[str], str, bool]:\n956 |         try:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_all_x.py:962:16\n    |\n960 |                 else self.repo_parent_root()\n961 |             )\n962 |         except Exception:\n    |                ^^^^^^^^^\n963 |             base = self.repo_parent_root()\n964 |         pip_updates_script = os.path.join(\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:964:30\n    |\n962 |         except Exception:\n963 |             base = self.repo_parent_root()\n964 |         pip_updates_script = os.path.join(\n    |                              ^^^^^^^^^^^^\n965 |             base, \"x_4357_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n966 |         )\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:967:16\n    |\n965 |             base, \"x_4357_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n966 |         )\n967 |         if not os.path.exists(pip_updates_script):\n    |                ^^^^^^^^^^^^^^\n968 |             # Try alternative workspace naming without 4357 prefix\n969 |             alt_pkg = os.path.join(\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:969:23\n    |\n967 |         if not os.path.exists(pip_updates_script):\n968 |             # Try alternative workspace naming without 4357 prefix\n969 |             alt_pkg = os.path.join(\n    |                       ^^^^^^^^^^^^\n970 |                 base, \"x_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n971 |             )\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:972:16\n    |\n970 |                 base, \"x_make_pip_updates_x\", \"x_cls_make_pip_updates_x.py\"\n971 |             )\n972 |             if os.path.exists(alt_pkg):\n    |                ^^^^^^^^^^^^^^\n973 |                 pip_updates_script = alt_pkg\n974 |         if not os.path.exists(pip_updates_script):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:974:16\n    |\n972 |             if os.path.exists(alt_pkg):\n973 |                 pip_updates_script = alt_pkg\n974 |         if not os.path.exists(pip_updates_script):\n    |                ^^^^^^^^^^^^^^\n975 |             alt = os.path.join(\n976 |                 os.getcwd(),\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:975:19\n    |\n973 |                 pip_updates_script = alt_pkg\n974 |         if not os.path.exists(pip_updates_script):\n975 |             alt = os.path.join(\n    |                   ^^^^^^^^^^^^\n976 |                 os.getcwd(),\n977 |                 \"x_4357_make_pip_updates_x\",\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_all_x.py:976:17\n    |\n974 |         if not os.path.exists(pip_updates_script):\n975 |             alt = os.path.join(\n976 |                 os.getcwd(),\n    |                 ^^^^^^^^^\n977 |                 \"x_4357_make_pip_updates_x\",\n978 |                 \"x_cls_make_pip_updates_x.py\",\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:980:16\n    |\n978 |                 \"x_cls_make_pip_updates_x.py\",\n979 |             )\n980 |             if os.path.exists(alt):\n    |                ^^^^^^^^^^^^^^\n981 |                 pip_updates_script = alt\n982 |         if not os.path.exists(pip_updates_script):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:982:16\n    |\n980 |             if os.path.exists(alt):\n981 |                 pip_updates_script = alt\n982 |         if not os.path.exists(pip_updates_script):\n    |                ^^^^^^^^^^^^^^\n983 |             alt2 = os.path.join(\n984 |                 os.getcwd(),\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_all_x.py:983:20\n    |\n981 |                 pip_updates_script = alt\n982 |         if not os.path.exists(pip_updates_script):\n983 |             alt2 = os.path.join(\n    |                    ^^^^^^^^^^^^\n984 |                 os.getcwd(),\n985 |                 \"x_make_pip_updates_x\",\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_all_x.py:984:17\n    |\n982 |         if not os.path.exists(pip_updates_script):\n983 |             alt2 = os.path.join(\n984 |                 os.getcwd(),\n    |                 ^^^^^^^^^\n985 |                 \"x_make_pip_updates_x\",\n986 |                 \"x_cls_make_pip_updates_x.py\",\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_all_x.py:988:16\n    |\n986 |                 \"x_cls_make_pip_updates_x.py\",\n987 |             )\n988 |             if os.path.exists(alt2):\n    |                ^^^^^^^^^^^^^^\n989 |                 pip_updates_script = alt2\n990 |         use_user_flag = False\n    |\nhelp: Replace with `Path(...).exists()`\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1017:9\n     |\n1015 |         self, packages: list[str]\n1016 |     ) -> dict[str, str | None]:\n1017 |         import importlib.metadata\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n1018 |\n1019 |         initial_installed: dict[str, str | None] = {}\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1026:20\n     |\n1024 |                 initial_installed[pkg] = v\n1025 |                 _info(f\"{pkg}: {v}\")\n1026 |             except Exception as e:\n     |                    ^^^^^^^^^\n1027 |                 initial_installed[pkg] = None\n1028 |                 _info(f\"{pkg}: not installed ({e})\")\n     |\n\nFBT001 Boolean-typed positional argument in function definition\n    --> x_cls_make_all_x.py:1035:9\n     |\n1033 |         mismatches: list[tuple[str, str, str | None]],\n1034 |         pip_updates_script: str,\n1035 |         use_user_flag: bool,\n     |         ^^^^^^^^^^^^^\n1036 |         final_installed: dict[str, str | None],\n1037 |     ) -> int:\n     |\n\nS603 `subprocess` call: check for execution of untrusted input\n    --> x_cls_make_all_x.py:1045:22\n     |\n1043 |         )\n1044 |         _info(f\"Retrying install for pinned versions: {' '.join(retry_cmd)}\")\n1045 |         retry_proc = subprocess.run(\n     |                      ^^^^^^^^^^^^^^\n1046 |             retry_cmd, capture_output=True, text=True, check=False\n1047 |         )\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1055:17\n     |\n1053 |             try:\n1054 |                 # import locally to avoid relying on a top-level import\n1055 |                 import importlib.metadata as _importlib_metadata\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1056 |\n1057 |                 final_installed[p] = _importlib_metadata.version(p)\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1058:20\n     |\n1057 |                 final_installed[p] = _importlib_metadata.version(p)\n1058 |             except Exception:\n     |                    ^^^^^^^^^\n1059 |                 final_installed[p] = None\n1060 |         return retry_proc.returncode\n     |\n\nFBT001 Boolean-typed positional argument in function definition\n    --> x_cls_make_all_x.py:1067:9\n     |\n1065 |         packages: list[str],\n1066 |         published_versions: dict[str, str | None],\n1067 |         use_user_flag: bool,\n     |         ^^^^^^^^^^^^^\n1068 |     ) -> None:\n1069 |         python = sys.executable\n     |\n\nS603 `subprocess` call: check for execution of untrusted input\n    --> x_cls_make_all_x.py:1087:24\n     |\n1085 |             _info(\"Fallback pip install:\", \" \".join(cmd))\n1086 |             try:\n1087 |                 proc = subprocess.run(\n     |                        ^^^^^^^^^^^^^^\n1088 |                     cmd, capture_output=True, text=True, check=False\n1089 |                 )\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1094:20\n     |\n1092 |                 if proc.stderr:\n1093 |                     _error(proc.stderr.strip())\n1094 |             except Exception as e:\n     |                    ^^^^^^^^^\n1095 |                 _error(f\"Fallback pip install failed: {e}\")\n     |\n\nC901 `run_pip_updates` is too complex (15 > 10)\n    --> x_cls_make_all_x.py:1097:9\n     |\n1095 |                 _error(f\"Fallback pip install failed: {e}\")\n1096 |\n1097 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1098 |         self,\n1099 |         cloner: Any,\n     |\n\nPLR0912 Too many branches (15 > 12)\n    --> x_cls_make_all_x.py:1097:9\n     |\n1095 |                 _error(f\"Fallback pip install failed: {e}\")\n1096 |\n1097 |     def run_pip_updates(\n     |         ^^^^^^^^^^^^^^^\n1098 |         self,\n1099 |         cloner: Any,\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1099:17\n     |\n1097 |     def run_pip_updates(\n1098 |         self,\n1099 |         cloner: Any,\n     |                 ^^^\n1100 |         published_versions: dict[str, str | None],\n1101 |         published_artifacts: dict[str, dict[str, Any]],\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `ctx`\n    --> x_cls_make_all_x.py:1102:14\n     |\n1100 |         published_versions: dict[str, str | None],\n1101 |         published_artifacts: dict[str, dict[str, Any]],\n1102 |         ctx: Any | None = None,\n     |              ^^^^^^^^^^\n1103 |     ) -> None:\n1104 |         packages, pip_updates_script, use_user_flag = (\n     |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n    --> x_cls_make_all_x.py:1112:9\n     |\n1110 |                       ctx.publish_opts.get(\"use_user\", use_user_flag)\n1111 |                   )\n1112 | /         except Exception:\n1113 | |             pass\n     | |________________^\n1114 |           if not packages:\n1115 |               _info(\"No published packages to update; skipping pip-updates step\")\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1112:16\n     |\n1110 |                     ctx.publish_opts.get(\"use_user\", use_user_flag)\n1111 |                 )\n1112 |         except Exception:\n     |                ^^^^^^^^^\n1113 |             pass\n1114 |         if not packages:\n     |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n    --> x_cls_make_all_x.py:1118:36\n     |\n1116 |             return\n1117 |         script_exists = bool(\n1118 |             pip_updates_script and os.path.exists(pip_updates_script)\n     |                                    ^^^^^^^^^^^^^^\n1119 |         )\n1120 |         used_fallback = False\n     |\nhelp: Replace with `Path(...).exists()`\n\nE501 Line too long (97 > 88)\n    --> x_cls_make_all_x.py:1129:89\n     |\n1127 |                 if rc != 0:\n1128 |                     _error(\n1129 |                         f\"pip-updates reported exit code {rc}; switching to fallback pip install\"\n     |                                                                                         ^^^^^^^^^\n1130 |                     )\n1131 |                     used_fallback = True\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1132:20\n     |\n1130 |                     )\n1131 |                     used_fallback = True\n1132 |             except Exception as e:\n     |                    ^^^^^^^^^\n1133 |                 _error(\n1134 |                     f\"pip-updates invocation failed: {e}; switching to fallback pip install\"\n     |\n\nE501 Line too long (92 > 88)\n    --> x_cls_make_all_x.py:1134:89\n     |\n1132 |             except Exception as e:\n1133 |                 _error(\n1134 |                     f\"pip-updates invocation failed: {e}; switching to fallback pip install\"\n     |                                                                                         ^^^^\n1135 |                 )\n1136 |                 used_fallback = True\n     |\n\nE501 Line too long (102 > 88)\n    --> x_cls_make_all_x.py:1181:89\n     |\n1179 |             if mismatches:\n1180 |                 _error(\n1181 |                     f\"Post-install verification detected {mismatches} mismatches, exiting with code 2\"\n     |                                                                                         ^^^^^^^^^^^^^^\n1182 |                 )\n1183 |                 sys.exit(2)\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1184:16\n     |\n1182 |                 )\n1183 |                 sys.exit(2)\n1184 |         except Exception as e:\n     |                ^^^^^^^^^\n1185 |             _error(f\"Post-install verification failed: {e}\")\n     |\n\nARG002 Unused method argument: `pkg_dir`\n    --> x_cls_make_all_x.py:1190:9\n     |\n1188 |         self,\n1189 |         pkg: str,\n1190 |         pkg_dir: str,\n     |         ^^^^^^^\n1191 |         repo_pkg_dir: str,\n1192 |         installed_main: str,\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1197:20\n     |\n1195 |         \"\"\"Compare installed main file with repo copy.\"\"\"\n1196 |         try:\n1197 |             if not os.path.isfile(installed_main):\n     |                    ^^^^^^^^^^^^^^\n1198 |                 _error(\n1199 |                     f\"Installed main file not found for {pkg}: {installed_main}\"\n     |\nhelp: Replace with `Path(...).is_file()`\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_all_x.py:1202:89\n     |\n1200 |                 )\n1201 |                 return 1\n1202 |             # Prefer explicit repo_main (from manifest), else fall back to basename match\n     |                                                                                         ^\n1203 |             if repo_main is None:\n1204 |                 main_name = os.path.basename(installed_main)\n     |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n    --> x_cls_make_all_x.py:1204:29\n     |\n1202 |             # Prefer explicit repo_main (from manifest), else fall back to basename match\n1203 |             if repo_main is None:\n1204 |                 main_name = os.path.basename(installed_main)\n     |                             ^^^^^^^^^^^^^^^^\n1205 |                 repo_main_candidate = os.path.join(repo_pkg_dir, main_name)\n1206 |             else:\n     |\nhelp: Replace with `Path(...).name`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1205:39\n     |\n1203 |             if repo_main is None:\n1204 |                 main_name = os.path.basename(installed_main)\n1205 |                 repo_main_candidate = os.path.join(repo_pkg_dir, main_name)\n     |                                       ^^^^^^^^^^^^\n1206 |             else:\n1207 |                 repo_main_candidate = repo_main\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1208:20\n     |\n1206 |             else:\n1207 |                 repo_main_candidate = repo_main\n1208 |             if not os.path.isfile(repo_main_candidate):\n     |                    ^^^^^^^^^^^^^^\n1209 |                 _error(\n1210 |                     f\"Repo main file not found for {pkg}: {repo_main_candidate} (dir={repo_pkg_dir})\"\n     |\nhelp: Replace with `Path(...).is_file()`\n\nE501 Line too long (101 > 88)\n    --> x_cls_make_all_x.py:1210:89\n     |\n1208 |             if not os.path.isfile(repo_main_candidate):\n1209 |                 _error(\n1210 |                     f\"Repo main file not found for {pkg}: {repo_main_candidate} (dir={repo_pkg_dir})\"\n     |                                                                                         ^^^^^^^^^^^^^\n1211 |                 )\n1212 |                 return 1\n     |\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1213:18\n     |\n1211 |                 )\n1212 |                 return 1\n1213 |             with open(installed_main, \"rb\") as f1, open(\n     |                  ^^^^\n1214 |                 repo_main_candidate, \"rb\"\n1215 |             ) as f2:\n     |\nhelp: Replace with `Path.open()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1213:52\n     |\n1211 |                 )\n1212 |                 return 1\n1213 |             with open(installed_main, \"rb\") as f1, open(\n     |                                                    ^^^^\n1214 |                 repo_main_candidate, \"rb\"\n1215 |             ) as f2:\n     |\nhelp: Replace with `Path.open()`\n\nE501 Line too long (118 > 88)\n    --> x_cls_make_all_x.py:1218:89\n     |\n1216 |                 if f1.read() != f2.read():\n1217 |                     _error(\n1218 |                         f\"Main file content mismatch for {pkg}: installed={installed_main} repo={repo_main_candidate}\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1219 |                     )\n1220 |                     return 1\n     |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n    --> x_cls_make_all_x.py:1222:44\n     |\n1220 |                     return 1\n1221 |             _info(\n1222 |                 f\"Main file OK for {pkg}: {os.path.basename(installed_main)}\"\n     |                                            ^^^^^^^^^^^^^^^^\n1223 |             )\n1224 |             return 0\n     |\nhelp: Replace with `Path(...).name`\n\nTRY300 Consider moving this statement to an `else` block\n    --> x_cls_make_all_x.py:1224:13\n     |\n1222 |                 f\"Main file OK for {pkg}: {os.path.basename(installed_main)}\"\n1223 |             )\n1224 |             return 0\n     |             ^^^^^^^^\n1225 |         except Exception as e:\n1226 |             _error(f\"Error comparing main file for {pkg}: {e}\")\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1225:16\n     |\n1223 |             )\n1224 |             return 0\n1225 |         except Exception as e:\n     |                ^^^^^^^^^\n1226 |             _error(f\"Error comparing main file for {pkg}: {e}\")\n1227 |             return 1\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1238:20\n     |\n1236 |     ) -> int:\n1237 |         try:\n1238 |             if not os.path.isfile(installed_path):\n     |                    ^^^^^^^^^^^^^^\n1239 |                 _error(f\"Installed ancillary file not found: {installed_path}\")\n1240 |                 return 1\n     |\nhelp: Replace with `Path(...).is_file()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1241:20\n     |\n1239 |                 _error(f\"Installed ancillary file not found: {installed_path}\")\n1240 |                 return 1\n1241 |             if not os.path.isfile(repo_path):\n     |                    ^^^^^^^^^^^^^^\n1242 |                 _error(f\"Repo ancillary file not found: {repo_path}\")\n1243 |                 return 1\n     |\nhelp: Replace with `Path(...).is_file()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1244:18\n     |\n1242 |                 _error(f\"Repo ancillary file not found: {repo_path}\")\n1243 |                 return 1\n1244 |             with open(installed_path, \"rb\") as f_inst, open(\n     |                  ^^^^\n1245 |                 repo_path, \"rb\"\n1246 |             ) as f_repo:\n     |\nhelp: Replace with `Path.open()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_make_all_x.py:1244:56\n     |\n1242 |                 _error(f\"Repo ancillary file not found: {repo_path}\")\n1243 |                 return 1\n1244 |             with open(installed_path, \"rb\") as f_inst, open(\n     |                                                        ^^^^\n1245 |                 repo_path, \"rb\"\n1246 |             ) as f_repo:\n     |\nhelp: Replace with `Path.open()`\n\nTRY300 Consider moving this statement to an `else` block\n    --> x_cls_make_all_x.py:1253:13\n     |\n1251 |                     return 1\n1252 |             _info(f\"Ancillary file OK for {pkg}: {anc_name}\")\n1253 |             return 0\n     |             ^^^^^^^^\n1254 |         except Exception as e:\n1255 |             _error(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1254:16\n     |\n1252 |             _info(f\"Ancillary file OK for {pkg}: {anc_name}\")\n1253 |             return 0\n1254 |         except Exception as e:\n     |                ^^^^^^^^^\n1255 |             _error(\n1256 |                 f\"Error comparing ancillary file for {pkg}: {anc_name}: {e}\"\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1270:20\n     |\n1268 |         mismatches = 0\n1269 |         try:\n1270 |             if not os.path.isdir(installed_dir):\n     |                    ^^^^^^^^^^^^^\n1271 |                 _error(\n1272 |                     f\"Installed ancillary directory not found: {installed_dir}\"\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1275:20\n     |\n1273 |                 )\n1274 |                 return 1\n1275 |             if not os.path.isdir(repo_dir):\n     |                    ^^^^^^^^^^^^^\n1276 |                 _error(f\"Repo ancillary directory not found: {repo_dir}\")\n1277 |                 return 1\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n    --> x_cls_make_all_x.py:1281:27\n     |\n1279 |             def _top_files(d: str) -> set[str]:\n1280 |                 out: set[str] = set()\n1281 |                 for fn in os.listdir(d):\n     |                           ^^^^^^^^^^\n1282 |                     fp = os.path.join(d, fn)\n1283 |                     if os.path.isfile(fp):\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1282:26\n     |\n1280 |                 out: set[str] = set()\n1281 |                 for fn in os.listdir(d):\n1282 |                     fp = os.path.join(d, fn)\n     |                          ^^^^^^^^^^^^\n1283 |                     if os.path.isfile(fp):\n1284 |                         out.add(fn)\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1283:24\n     |\n1281 |                 for fn in os.listdir(d):\n1282 |                     fp = os.path.join(d, fn)\n1283 |                     if os.path.isfile(fp):\n     |                        ^^^^^^^^^^^^^^\n1284 |                         out.add(fn)\n1285 |                 return out\n     |\nhelp: Replace with `Path(...).is_file()`\n\nE501 Line too long (103 > 88)\n    --> x_cls_make_all_x.py:1292:89\n     |\n1290 |             for rel in sorted(repo_files - inst_files):\n1291 |                 _error(\n1292 |                     f\"Ancillary directory content missing in installed package {pkg}: {anc_name}/{rel}\"\n     |                                                                                         ^^^^^^^^^^^^^^^\n1293 |                 )\n1294 |                 mismatches += 1\n     |\n\nE501 Line too long (102 > 88)\n    --> x_cls_make_all_x.py:1297:89\n     |\n1295 |             for rel in sorted(inst_files - repo_files):\n1296 |                 _error(\n1297 |                     f\"Ancillary directory has extra file in installed package {pkg}: {anc_name}/{rel}\"\n     |                                                                                         ^^^^^^^^^^^^^^\n1298 |                 )\n1299 |                 mismatches += 1\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1301:29\n     |\n1299 |                 mismatches += 1\n1300 |             for rel in sorted(repo_files & inst_files):\n1301 |                 inst_path = os.path.join(installed_dir, rel)\n     |                             ^^^^^^^^^^^^\n1302 |                 repo_path = os.path.join(repo_dir, rel)\n1303 |                 mismatches += self._compare_ancillary_file(\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1302:29\n     |\n1300 |             for rel in sorted(repo_files & inst_files):\n1301 |                 inst_path = os.path.join(installed_dir, rel)\n1302 |                 repo_path = os.path.join(repo_dir, rel)\n     |                             ^^^^^^^^^^^^\n1303 |                 mismatches += self._compare_ancillary_file(\n1304 |                     inst_path, repo_path, pkg, f\"{anc_name}/{rel}\"\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1306:16\n     |\n1304 |                     inst_path, repo_path, pkg, f\"{anc_name}/{rel}\"\n1305 |                 )\n1306 |         except Exception as e:\n     |                ^^^^^^^^^\n1307 |             _error(\n1308 |                 f\"Error comparing ancillary directory for {pkg}: {anc_name}: {e}\"\n     |\n\nE501 Line too long (98 > 88)\n    --> x_cls_make_all_x.py:1320:89\n     |\n1318 |         expected_anc: list[str],\n1319 |     ) -> int:\n1320 |         \"\"\"Compare ancillary files/directories listed in expected_anc using helper comparators.\"\"\"\n     |                                                                                         ^^^^^^^^^^\n1321 |         mismatches = 0\n1322 |         # Deduplicate expected list to avoid duplicate logs\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1325:16\n     |\n1323 |         try:\n1324 |             expected = list(dict.fromkeys(expected_anc))\n1325 |         except Exception:\n     |                ^^^^^^^^^\n1326 |             expected = expected_anc\n1327 |         for anc_name in expected:\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1330:25\n     |\n1328 |             # Normalize expected path to OS-specific separators for fs access\n1329 |             anc_os_rel = os.path.normpath(anc_name.replace(\"\\\\\", \"/\"))\n1330 |             repo_path = os.path.join(repo_pkg_dir, anc_os_rel)\n     |                         ^^^^^^^^^^^^\n1331 |             target_is_dir = os.path.isdir(repo_path)\n1332 |             # Installed paths are recorded as relative to the package dir\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1331:29\n     |\n1329 |             anc_os_rel = os.path.normpath(anc_name.replace(\"\\\\\", \"/\"))\n1330 |             repo_path = os.path.join(repo_pkg_dir, anc_os_rel)\n1331 |             target_is_dir = os.path.isdir(repo_path)\n     |                             ^^^^^^^^^^^^^\n1332 |             # Installed paths are recorded as relative to the package dir\n1333 |             installed_path = os.path.join(pkg_dir, anc_os_rel)\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1333:30\n     |\n1331 |             target_is_dir = os.path.isdir(repo_path)\n1332 |             # Installed paths are recorded as relative to the package dir\n1333 |             installed_path = os.path.join(pkg_dir, anc_os_rel)\n     |                              ^^^^^^^^^^^^\n1334 |             if not os.path.exists(repo_path):\n1335 |                 _error(f\"Ancillary missing from repo for {pkg}: {anc_name}\")\n     |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n    --> x_cls_make_all_x.py:1334:20\n     |\n1332 |             # Installed paths are recorded as relative to the package dir\n1333 |             installed_path = os.path.join(pkg_dir, anc_os_rel)\n1334 |             if not os.path.exists(repo_path):\n     |                    ^^^^^^^^^^^^^^\n1335 |                 _error(f\"Ancillary missing from repo for {pkg}: {anc_name}\")\n1336 |                 mismatches += 1\n     |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n    --> x_cls_make_all_x.py:1338:20\n     |\n1336 |                 mismatches += 1\n1337 |                 continue\n1338 |             if not os.path.exists(installed_path):\n     |                    ^^^^^^^^^^^^^^\n1339 |                 _error(\n1340 |                     f\"Ancillary missing from installed package for {pkg}: {anc_name}\"\n     |\nhelp: Replace with `Path(...).exists()`\n\nC901 `_find_installed_path` is too complex (12 > 10)\n    --> x_cls_make_all_x.py:1354:9\n     |\n1352 |         return mismatches\n1353 |\n1354 |     def _find_installed_path(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1355 |         self, rel_path: str, target_is_dir: bool\n1356 |     ) -> str | None:\n     |\n\nFBT001 Boolean-typed positional argument in function definition\n    --> x_cls_make_all_x.py:1355:30\n     |\n1354 |     def _find_installed_path(\n1355 |         self, rel_path: str, target_is_dir: bool\n     |                              ^^^^^^^^^^^^^\n1356 |     ) -> str | None:\n1357 |         import site\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1357:9\n     |\n1355 |         self, rel_path: str, target_is_dir: bool\n1356 |     ) -> str | None:\n1357 |         import site\n     |         ^^^^^^^^^^^\n1358 |\n1359 |         for base in site.getsitepackages():\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1360:25\n     |\n1359 |         for base in site.getsitepackages():\n1360 |             candidate = os.path.join(base, rel_path)\n     |                         ^^^^^^^^^^^^\n1361 |             if target_is_dir and os.path.isdir(candidate):\n1362 |                 return candidate\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1361:34\n     |\n1359 |         for base in site.getsitepackages():\n1360 |             candidate = os.path.join(base, rel_path)\n1361 |             if target_is_dir and os.path.isdir(candidate):\n     |                                  ^^^^^^^^^^^^^\n1362 |                 return candidate\n1363 |             if not target_is_dir and os.path.isfile(candidate):\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1363:38\n     |\n1361 |             if target_is_dir and os.path.isdir(candidate):\n1362 |                 return candidate\n1363 |             if not target_is_dir and os.path.isfile(candidate):\n     |                                      ^^^^^^^^^^^^^^\n1364 |                 return candidate\n1365 |         try:\n     |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1371:33\n     |\n1369 |                     if target_is_dir:\n1370 |                         for d in dirs:\n1371 |                             p = os.path.join(root, d)\n     |                                 ^^^^^^^^^^^^\n1372 |                             if os.path.normcase(p).endswith(\n1373 |                                 norm_tail\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1374:35\n     |\n1372 |                             if os.path.normcase(p).endswith(\n1373 |                                 norm_tail\n1374 |                             ) and os.path.isdir(p):\n     |                                   ^^^^^^^^^^^^^\n1375 |                                 return p\n1376 |                     else:\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1378:33\n     |\n1376 |                     else:\n1377 |                         for f in files:\n1378 |                             p = os.path.join(root, f)\n     |                                 ^^^^^^^^^^^^\n1379 |                             if os.path.normcase(p).endswith(\n1380 |                                 norm_tail\n     |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n    --> x_cls_make_all_x.py:1381:35\n     |\n1379 |                             if os.path.normcase(p).endswith(\n1380 |                                 norm_tail\n1381 |                             ) and os.path.isfile(p):\n     |                                   ^^^^^^^^^^^^^^\n1382 |                                 return p\n1383 |         except Exception:\n     |\nhelp: Replace with `Path(...).is_file()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n    --> x_cls_make_all_x.py:1383:9\n     |\n1381 |                               ) and os.path.isfile(p):\n1382 |                                   return p\n1383 | /         except Exception:\n1384 | |             pass\n     | |________________^\n1385 |           return None\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1383:16\n     |\n1381 |                             ) and os.path.isfile(p):\n1382 |                                 return p\n1383 |         except Exception:\n     |                ^^^^^^^^^\n1384 |             pass\n1385 |         return None\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> x_cls_make_all_x.py:1388:9\n     |\n1387 |     def _locate_installed_pkg_dir(self, pkg_name: str) -> str:\n1388 |         import importlib.util as _ilu\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1389 |\n1390 |         spec = _ilu.find_spec(pkg_name)\n     |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n    --> x_cls_make_all_x.py:1397:24\n     |\n1395 |                 return locs[0]\n1396 |             if spec.origin:\n1397 |                 return os.path.dirname(spec.origin)\n     |                        ^^^^^^^^^^^^^^^\n1398 |         path = self._find_installed_path(pkg_name, True)\n1399 |         if not path:\n     |\nhelp: Replace with `Path(...).parent`\n\nFBT003 Boolean positional value in function call\n    --> x_cls_make_all_x.py:1398:52\n     |\n1396 |             if spec.origin:\n1397 |                 return os.path.dirname(spec.origin)\n1398 |         path = self._find_installed_path(pkg_name, True)\n     |                                                    ^^^^\n1399 |         if not path:\n1400 |             raise FileNotFoundError(\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1400:19\n     |\n1398 |           path = self._find_installed_path(pkg_name, True)\n1399 |           if not path:\n1400 |               raise FileNotFoundError(\n     |  ___________________^\n1401 | |                 f\"Package directory not found for {pkg_name}\"\n1402 | |             )\n     | |_____________^\n1403 |           return path\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1401:17\n     |\n1399 |         if not path:\n1400 |             raise FileNotFoundError(\n1401 |                 f\"Package directory not found for {pkg_name}\"\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1402 |             )\n1403 |         return path\n     |\nhelp: Assign to variable; remove f-string literal\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n    --> x_cls_make_all_x.py:1410:23\n     |\n1408 |         main_path = \"\"\n1409 |         try:\n1410 |             for fn in os.listdir(pkg_dir):\n     |                       ^^^^^^^^^^\n1411 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n1412 |                     main_path = os.path.join(pkg_dir, fn)\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1412:33\n     |\n1410 |             for fn in os.listdir(pkg_dir):\n1411 |                 if fn.startswith(\"x_cls_make_\") and fn.endswith(\".py\"):\n1412 |                     main_path = os.path.join(pkg_dir, fn)\n     |                                 ^^^^^^^^^^^^\n1413 |                     break\n1414 |         except Exception:\n     |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n    --> x_cls_make_all_x.py:1414:9\n     |\n1412 |                       main_path = os.path.join(pkg_dir, fn)\n1413 |                       break\n1414 | /         except Exception:\n1415 | |             pass\n     | |________________^\n1416 |           if not main_path:\n1417 |               raise FileNotFoundError(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1414:16\n     |\n1412 |                     main_path = os.path.join(pkg_dir, fn)\n1413 |                     break\n1414 |         except Exception:\n     |                ^^^^^^^^^\n1415 |             pass\n1416 |         if not main_path:\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_make_all_x.py:1417:19\n     |\n1415 |               pass\n1416 |           if not main_path:\n1417 |               raise FileNotFoundError(\n     |  ___________________^\n1418 | |                 f\"Conventional main file x_cls_make_*.py not found in package dir {pkg_dir}\"\n1419 | |             )\n     | |_____________^\n1420 |           return main_path, []\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_make_all_x.py:1418:17\n     |\n1416 |         if not main_path:\n1417 |             raise FileNotFoundError(\n1418 |                 f\"Conventional main file x_cls_make_*.py not found in package dir {pkg_dir}\"\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1419 |             )\n1420 |         return main_path, []\n     |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (92 > 88)\n    --> x_cls_make_all_x.py:1418:89\n     |\n1416 |         if not main_path:\n1417 |             raise FileNotFoundError(\n1418 |                 f\"Conventional main file x_cls_make_*.py not found in package dir {pkg_dir}\"\n     |                                                                                         ^^^^\n1419 |             )\n1420 |         return main_path, []\n     |\n\nC901 `_compare_installed_with_repo` is too complex (13 > 10)\n    --> x_cls_make_all_x.py:1431:9\n     |\n1429 |         return m.get(dist_name)\n1430 |\n1431 |     def _compare_installed_with_repo(\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1432 |         self,\n1433 |         cloner: Any,\n     |\n\nPLR0912 Too many branches (16 > 12)\n    --> x_cls_make_all_x.py:1431:9\n     |\n1429 |         return m.get(dist_name)\n1430 |\n1431 |     def _compare_installed_with_repo(\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1432 |         self,\n1433 |         cloner: Any,\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1433:17\n     |\n1431 |     def _compare_installed_with_repo(\n1432 |         self,\n1433 |         cloner: Any,\n     |                 ^^^\n1434 |         packages: list[str],\n1435 |         published_artifacts: dict[str, dict[str, Any]],\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1443:16\n     |\n1441 |                 else self.repo_parent_root()\n1442 |             )\n1443 |         except Exception:\n     |                ^^^^^^^^^\n1444 |             base = self.repo_parent_root()\n1445 |         _info(\n     |\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_all_x.py:1446:89\n     |\n1444 |             base = self.repo_parent_root()\n1445 |         _info(\n1446 |             f\"Starting post-install file verification for packages: {','.join(packages)}\"\n     |                                                                                         ^\n1447 |         )\n1448 |         total_mismatches = 0\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1451:30\n     |\n1449 |         for pkg in packages:\n1450 |             repo_dir_name = pkg\n1451 |             repo_candidate = os.path.join(base, repo_dir_name)\n     |                              ^^^^^^^^^^^^\n1452 |             if not os.path.isdir(repo_candidate):\n1453 |                 mapped = self._dist_to_repo(pkg)\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1452:20\n     |\n1450 |             repo_dir_name = pkg\n1451 |             repo_candidate = os.path.join(base, repo_dir_name)\n1452 |             if not os.path.isdir(repo_candidate):\n     |                    ^^^^^^^^^^^^^\n1453 |                 mapped = self._dist_to_repo(pkg)\n1454 |                 if mapped:\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1456:28\n     |\n1454 |                 if mapped:\n1455 |                     repo_dir_name = mapped\n1456 |             repo_pkg_dir = os.path.join(base, repo_dir_name)\n     |                            ^^^^^^^^^^^^\n1457 |\n1458 |             # locate installed dir\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1461:20\n     |\n1459 |             try:\n1460 |                 pkg_dir = self._locate_installed_pkg_dir(pkg)\n1461 |             except Exception as e:\n     |                    ^^^^^^^^^\n1462 |                 _error(\n1463 |                     f\"Skipping comparison for {pkg}: cannot locate installed package: {e}\"\n     |\n\nE501 Line too long (90 > 88)\n    --> x_cls_make_all_x.py:1463:89\n     |\n1461 |             except Exception as e:\n1462 |                 _error(\n1463 |                     f\"Skipping comparison for {pkg}: cannot locate installed package: {e}\"\n     |                                                                                         ^^\n1464 |                 )\n1465 |                 continue\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1478:38\n     |\n1476 |                 if art and isinstance(art.get(\"main\"), str):\n1477 |                     main_rel = cast(\"str\", art[\"main\"])\n1478 |                     installed_main = os.path.join(pkg_dir, main_rel)\n     |                                      ^^^^^^^^^^^^\n1479 |                     repo_main_path = os.path.join(repo_pkg_dir, main_rel)\n1480 |                 else:\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_make_all_x.py:1479:38\n     |\n1477 |                     main_rel = cast(\"str\", art[\"main\"])\n1478 |                     installed_main = os.path.join(pkg_dir, main_rel)\n1479 |                     repo_main_path = os.path.join(repo_pkg_dir, main_rel)\n     |                                      ^^^^^^^^^^^^\n1480 |                 else:\n1481 |                     installed_main, _ = self._find_main_and_ancillaries_in_dir(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1484:20\n     |\n1482 |                         pkg_dir\n1483 |                     )\n1484 |             except Exception as e:\n     |                    ^^^^^^^^^\n1485 |                 _error(f\"Skipping {pkg}: error determining main file: {e}\")\n1486 |                 continue\n     |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n    --> x_cls_make_all_x.py:1488:20\n     |\n1486 |                 continue\n1487 |\n1488 |             if not os.path.isdir(repo_pkg_dir):\n     |                    ^^^^^^^^^^^^^\n1489 |                 _error(\n1490 |                     f\"Repo copy for dist {pkg} not found (expected repo dir {repo_pkg_dir}); skipping file comparisons\"\n     |\nhelp: Replace with `Path(...).is_dir()`\n\nE501 Line too long (119 > 88)\n    --> x_cls_make_all_x.py:1490:89\n     |\n1488 |             if not os.path.isdir(repo_pkg_dir):\n1489 |                 _error(\n1490 |                     f\"Repo copy for dist {pkg} not found (expected repo dir {repo_pkg_dir}); skipping file comparisons\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1491 |                 )\n1492 |                 continue\n     |\n\nE501 Line too long (89 > 88)\n    --> x_cls_make_all_x.py:1518:89\n     |\n1516 |         if total_mismatches:\n1517 |             _error(\n1518 |                 f\"Post-install verification completed with {total_mismatches} mismatches\"\n     |                                                                                         ^\n1519 |             )\n1520 |         else:\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_make_all_x.py:1522:89\n     |\n1520 |         else:\n1521 |             _info(\n1522 |                 \"Post-install verification completed: all checked files match the cloned repos\"\n     |                                                                                         ^^^^^^^\n1523 |             )\n1524 |         return total_mismatches\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `clone_repos`\n    --> x_cls_make_all_x.py:1538:60\n     |\n1538 | def clone_repos(ctx: OrchestratorContext | None = None) -> Any:\n     |                                                            ^^^\n1539 |     return _orchestrator().clone_repos(ctx)\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1543:13\n     |\n1542 | def publish_all(\n1543 |     cloner: Any, ctx: OrchestratorContext | None = None\n     |             ^^^\n1544 | ) -> tuple[dict[str, str | None], dict[str, dict[str, Any]]]:\n1545 |     return _orchestrator().publish_all(cloner, ctx)\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1549:13\n     |\n1548 | def run_pip_updates(\n1549 |     cloner: Any,\n     |             ^^^\n1550 |     published_versions: dict[str, str | None],\n1551 |     published_artifacts: dict[str, dict[str, Any]],\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `ctx`\n    --> x_cls_make_all_x.py:1552:10\n     |\n1550 |     published_versions: dict[str, str | None],\n1551 |     published_artifacts: dict[str, dict[str, Any]],\n1552 |     ctx: Any | None = None,\n     |          ^^^^^^^^^^\n1553 | ) -> None:\n1554 |     _orchestrator().run_pip_updates(\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1563:26\n     |\n1563 | def _run_visitor(cloner: Any, ctx: OrchestratorContext | None) -> None:\n     |                          ^^^\n1564 |     return _orchestrator().run_visitor(cloner, ctx)\n     |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `cloner`\n    --> x_cls_make_all_x.py:1568:13\n     |\n1567 | def _process_publishes_and_updates(\n1568 |     cloner: Any, ctx: OrchestratorContext | None\n     |             ^^^\n1569 | ) -> None:\n1570 |     return _orchestrator().process_publishes_and_updates(cloner, ctx)\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_make_all_x.py:1582:12\n     |\n1580 |     try:\n1581 |         main()\n1582 |     except Exception as e:\n     |            ^^^^^^^^^\n1583 |         _error(f\"Error: {e}\")\n1584 |         sys.exit(1)\n     |\n\nFound 350 errors.\nNo fixes available (29 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_legatus_acta_schedae_x": {
        "files": [
            "__init__.py",
            "__main__.py",
            "adapters/__init__.py",
            "adapters/taskwarrior/__init__.py",
            "adapters/taskwarrior/tw_repository.py",
            "app.py",
            "core/__init__.py",
            "core/domain/__init__.py",
            "core/domain/events.py",
            "core/domain/review.py",
            "core/domain/task.py",
            "core/ports/__init__.py",
            "core/ports/review_repo.py",
            "core/ports/scheduler.py",
            "core/ports/search_index.py",
            "core/ports/task_repo.py",
            "core/services/__init__.py",
            "core/services/ai_briefing_service.py",
            "core/services/ai_service.py",
            "core/services/automation_service.py",
            "core/services/card_action_service.py",
            "core/services/collaboration_service.py",
            "core/services/plugin_bus.py",
            "core/services/review_guidance_service.py",
            "core/services/review_service.py",
            "core/services/scheduler_service.py",
            "core/services/search_service.py",
            "core/services/task_service.py",
            "infrastructure/__init__.py",
            "infrastructure/automation/__init__.py",
            "infrastructure/automation/webhook_client.py",
            "infrastructure/collaboration/hub_client.py",
            "infrastructure/collaboration/store.py",
            "infrastructure/config.py",
            "infrastructure/di.py",
            "infrastructure/logging.py",
            "infrastructure/review/__init__.py",
            "infrastructure/review/json_repository.py",
            "infrastructure/scheduler/__init__.py",
            "infrastructure/scheduler/apscheduler_adapter.py",
            "infrastructure/scheduler/null_scheduler.py",
            "infrastructure/search/__init__.py",
            "infrastructure/search/memory_index.py",
            "infrastructure/telemetry.py",
            "interface/__init__.py",
            "interface/api/__init__.py",
            "interface/api/server.py",
            "interface/cli/__init__.py",
            "interface/cli/main.py",
            "interface/tui/app.py",
            "interface/tui/controller.py",
            "plugins/__init__.py",
            "plugins/ai_assistant.py",
            "plugins/calendar_sync.py",
            "plugins/task_scoring.py",
            "save.py",
            "tests/test_ai_briefing_service.py",
            "tests/test_ai_service.py",
            "tests/test_api.py",
            "tests/test_automation_service.py",
            "tests/test_card_action_service.py",
            "tests/test_cli_ai_briefing.py",
            "tests/test_cli_collab.py",
            "tests/test_collaboration_hub.py",
            "tests/test_collaboration_service.py",
            "tests/test_plugin_ai_assistant.py",
            "tests/test_plugin_calendar_sync.py",
            "tests/test_review_guidance_service.py",
            "tests/test_review_service.py",
            "tests/test_scheduler_service.py",
            "tests/test_search_service.py",
            "tests/test_task_service.py",
            "tests/test_tui_controller.py",
            "tui/__init__.py",
            "tui/__main__.py",
            "x_cls_legatus_acta_schedae_x.py"
        ],
        "files_index": [
            "__init__.py",
            "__main__.py",
            "adapters/__init__.py",
            "adapters/taskwarrior/__init__.py",
            "adapters/taskwarrior/tw_repository.py",
            "app.py",
            "core/__init__.py",
            "core/domain/__init__.py",
            "core/domain/events.py",
            "core/domain/review.py",
            "core/domain/task.py",
            "core/ports/__init__.py",
            "core/ports/review_repo.py",
            "core/ports/scheduler.py",
            "core/ports/search_index.py",
            "core/ports/task_repo.py",
            "core/services/__init__.py",
            "core/services/ai_briefing_service.py",
            "core/services/ai_service.py",
            "core/services/automation_service.py",
            "core/services/card_action_service.py",
            "core/services/collaboration_service.py",
            "core/services/plugin_bus.py",
            "core/services/review_guidance_service.py",
            "core/services/review_service.py",
            "core/services/scheduler_service.py",
            "core/services/search_service.py",
            "core/services/task_service.py",
            "infrastructure/__init__.py",
            "infrastructure/automation/__init__.py",
            "infrastructure/automation/webhook_client.py",
            "infrastructure/collaboration/hub_client.py",
            "infrastructure/collaboration/store.py",
            "infrastructure/config.py",
            "infrastructure/di.py",
            "infrastructure/logging.py",
            "infrastructure/review/__init__.py",
            "infrastructure/review/json_repository.py",
            "infrastructure/scheduler/__init__.py",
            "infrastructure/scheduler/apscheduler_adapter.py",
            "infrastructure/scheduler/null_scheduler.py",
            "infrastructure/search/__init__.py",
            "infrastructure/search/memory_index.py",
            "infrastructure/telemetry.py",
            "interface/__init__.py",
            "interface/api/__init__.py",
            "interface/api/server.py",
            "interface/cli/__init__.py",
            "interface/cli/main.py",
            "interface/tui/app.py",
            "interface/tui/controller.py",
            "plugins/__init__.py",
            "plugins/ai_assistant.py",
            "plugins/calendar_sync.py",
            "plugins/task_scoring.py",
            "save.py",
            "tests/test_ai_briefing_service.py",
            "tests/test_ai_service.py",
            "tests/test_api.py",
            "tests/test_automation_service.py",
            "tests/test_card_action_service.py",
            "tests/test_cli_ai_briefing.py",
            "tests/test_cli_collab.py",
            "tests/test_collaboration_hub.py",
            "tests/test_collaboration_service.py",
            "tests/test_plugin_ai_assistant.py",
            "tests/test_plugin_calendar_sync.py",
            "tests/test_review_guidance_service.py",
            "tests/test_review_service.py",
            "tests/test_scheduler_service.py",
            "tests/test_search_service.py",
            "tests/test_task_service.py",
            "tests/test_tui_controller.py",
            "tui/__init__.py",
            "tui/__main__.py",
            "x_cls_legatus_acta_schedae_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\domain\\events.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\ai_briefing_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\automation_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\adapters\\taskwarrior\\tw_repository.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\domain\\review.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\ai_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\card_action_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\review_guidance_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\plugin_bus.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\search_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\collaboration_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\automation\\webhook_client.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\task_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\logging.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\scheduler\\apscheduler_adapter.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\review\\json_repository.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\di.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\collaboration\\hub_client.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\telemetry.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\config.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\collaboration\\store.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\review_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\plugins\\calendar_sync.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\tui\\app.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\plugins\\ai_assistant.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\tui\\controller.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\api\\server.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_api.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_hub.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\cli\\main.py\nwould reformat C:\\x_runner_x\\x_legatus_acta_schedae_x\\x_cls_legatus_acta_schedae_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n41 files would be reformatted, 35 files would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\domain\\events.py\t2025-10-07 16:24:25.205410+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\domain\\events.py\t2025-10-07 17:45:41.546919+00:00\n@@ -60,13 +60,11 @@\n \n class EventDispatcher:\n     def __init__(self) -> None:\n         self._subs: dict[type[Any], list[EventSubscriber]] = {}\n \n-    def subscribe(\n-        self, event_type: type[Any], handler: EventSubscriber\n-    ) -> None:\n+    def subscribe(self, event_type: type[Any], handler: EventSubscriber) -> None:\n         self._subs.setdefault(event_type, []).append(handler)\n \n     def publish(self, event: DomainEvent) -> None:\n         for etype, handlers in self._subs.items():\n             if isinstance(event, etype):\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\ai_briefing_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\ai_briefing_service.py\t2025-10-07 17:45:41.594942+00:00\n@@ -44,11 +44,9 @@\n             now=moment,\n             limit=limit,\n             include_completed=include_completed,\n             tags=tags,\n         )\n-        return AIBriefing(\n-            generated_at=moment, summary=summary, guidance=list(guidance)\n-        )\n+        return AIBriefing(generated_at=moment, summary=summary, guidance=list(guidance))\n \n \n __all__ = [\"AIBriefing\", \"AIBriefingService\"]\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\automation_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\automation_service.py\t2025-10-07 17:45:41.678854+00:00\n@@ -31,13 +31,11 @@\n         ai_service: AIService | None = None,\n     ) -> None:\n         self._dispatcher = dispatcher\n         self._task_repository = task_repository\n         self._webhook_client = webhook_client\n-        self._enabled = webhook_client is not None and bool(\n-            webhook_client.endpoints\n-        )\n+        self._enabled = webhook_client is not None and bool(webhook_client.endpoints)\n         self._telemetry = telemetry\n         self._ai_service = ai_service\n         if self._enabled:\n             dispatcher.subscribe(events.CardScanned, self._on_card_scanned)\n \n@@ -79,13 +77,11 @@\n                     \"delivered\": delivered,\n                     \"failed\": failures,\n                 },\n             )\n \n-    def _task_payload(\n-        self, event: events.CardScanned\n-    ) -> Mapping[str, Any] | None:\n+    def _task_payload(self, event: events.CardScanned) -> Mapping[str, Any] | None:\n         if not event.task_id:\n             return None\n         task = self._task_repository.get(event.task_id)\n         if task is None:\n             return None\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\adapters\\taskwarrior\\tw_repository.py\t2025-10-07 16:24:25.205410+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\adapters\\taskwarrior\\tw_repository.py\t2025-10-07 17:45:41.681032+00:00\n@@ -71,15 +71,11 @@\n                 task = self._convert(cast(\"Mapping[str, Any]\", t))\n                 if status and task.status != status:\n                     continue\n                 tasks.append(task)\n             return tasks\n-        return [\n-            t\n-            for t in self._cache.values()\n-            if (not status or t.status == status)\n-        ]\n+        return [t for t in self._cache.values() if (not status or t.status == status)]\n \n     def save(self, task: Task) -> Task:\n         if HAVE_TASKLIB and self._tw is not None:\n             for t in self._tw.tasks.all():\n                 task_data = cast(\"Mapping[str, Any]\", t)\n@@ -118,12 +114,11 @@\n             else None\n         )\n         return Task(\n             id=str(tw_task[\"uuid\"]),\n             description=tw_task[\"description\"],\n-            created=self._ensure_datetime(created)\n-            or datetime.now(UTC),\n+            created=self._ensure_datetime(created) or datetime.now(UTC),\n             status=status,\n             tags=tags,\n             due=self._ensure_datetime(due),\n             priority=priority,\n         )\n@@ -136,13 +131,11 @@\n         if not value:\n             return None\n         reverse = {\"L\": \"low\", \"M\": \"medium\", \"H\": \"high\"}\n         return reverse.get(value.upper())\n \n-    def _ensure_datetime(\n-        self, value: datetime | None\n-    ) -> datetime | None:\n+    def _ensure_datetime(self, value: datetime | None) -> datetime | None:\n         if value is None:\n             return None\n         if isinstance(value, datetime):\n             if value.tzinfo is None:\n                 return value.replace(tzinfo=UTC)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\domain\\review.py\t2025-10-07 16:24:25.205410+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\domain\\review.py\t2025-10-07 17:45:41.692958+00:00\n@@ -50,20 +50,16 @@\n         next_due = datetime.fromisoformat(data[\"next_due\"])\n         context_candidate = data.get(\"context\")\n         context_value: dict[str, Any]\n         if isinstance(context_candidate, Mapping):\n             context_mapping = cast(\"Mapping[object, Any]\", context_candidate)\n-            context_value = {\n-                str(key): value for key, value in context_mapping.items()\n-            }\n+            context_value = {str(key): value for key, value in context_mapping.items()}\n         else:\n             context_value = {}\n         source_raw = data.get(\"source\")\n         source_value = (\n-            str(source_raw)\n-            if isinstance(source_raw, str) and source_raw\n-            else \"manual\"\n+            str(source_raw) if isinstance(source_raw, str) and source_raw else \"manual\"\n         )\n         return ReviewHistoryEntry(\n             reviewed_at=_ensure_tzaware(reviewed_at),\n             quality=int(data[\"quality\"]),\n             next_due=_ensure_tzaware(next_due),\n@@ -100,13 +96,11 @@\n         return {\n             \"task_id\": self.task_id,\n             \"created_at\": self.created_at.isoformat(),\n             \"due_at\": self.due_at.isoformat(),\n             \"last_reviewed_at\": (\n-                self.last_reviewed_at.isoformat()\n-                if self.last_reviewed_at\n-                else None\n+                self.last_reviewed_at.isoformat() if self.last_reviewed_at else None\n             ),\n             \"repetitions\": self.repetitions,\n             \"interval_days\": self.interval_days,\n             \"ease_factor\": self.ease_factor,\n             \"history\": [entry.to_dict() for entry in self.history],\n@@ -117,12 +111,11 @@\n     def from_dict(data: dict[str, Any]) -> ReviewRecord:\n         created_at = datetime.fromisoformat(data[\"created_at\"])\n         due_at = datetime.fromisoformat(data[\"due_at\"])\n         last_reviewed = data.get(\"last_reviewed_at\")\n         history_entries = [\n-            ReviewHistoryEntry.from_dict(entry)\n-            for entry in data.get(\"history\", [])\n+            ReviewHistoryEntry.from_dict(entry) for entry in data.get(\"history\", [])\n         ]\n         return ReviewRecord(\n             task_id=data[\"task_id\"],\n             created_at=_ensure_tzaware(created_at),\n             due_at=_ensure_tzaware(due_at),\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\ai_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\ai_service.py\t2025-10-07 17:45:41.695344+00:00\n@@ -34,13 +34,11 @@\n         self, repository: ITaskRepository, dispatcher: EventDispatcher\n     ) -> None:\n         self._repository = repository\n         self._dispatcher = dispatcher\n \n-    def summarize(\n-        self, *, now: datetime | None = None, top_n: int = 3\n-    ) -> TaskSummary:\n+    def summarize(self, *, now: datetime | None = None, top_n: int = 3) -> TaskSummary:\n         snapshot = list(self._repository.list())\n         moment = now or datetime.now(UTC)\n         pending = sum(1 for task in snapshot if task.status != \"completed\")\n         completed = sum(1 for task in snapshot if task.status == \"completed\")\n         overdue = sum(\n@@ -71,13 +69,11 @@\n         if \"meeting\" in lowered or \"meet\" in lowered:\n             base_prompts.append(\n                 \"Prepare a meeting recap with action items for attendees.\"\n             )\n         if \"write\" in lowered or \"draft\" in lowered:\n-            base_prompts.append(\n-                \"Outline the key sections to polish the written draft.\"\n-            )\n+            base_prompts.append(\"Outline the key sections to polish the written draft.\")\n         if \"review\" in lowered:\n             base_prompts.append(\n                 \"List the checklist items to complete the review efficiently.\"\n             )\n         if not base_prompts:\n@@ -115,13 +111,11 @@\n     ) -> list[UpcomingTask]:\n         horizon = moment + timedelta(days=7)\n         candidates = [\n             task\n             for task in tasks\n-            if task.status != \"completed\"\n-            and task.due\n-            and moment <= task.due <= horizon\n+            if task.status != \"completed\" and task.due and moment <= task.due <= horizon\n         ]\n         candidates.sort(key=lambda t: (t.due, t.priority or \"\", t.created))\n         upcoming_rows: list[UpcomingTask] = []\n         for task in candidates[:count]:\n             upcoming_rows.append(\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\card_action_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\card_action_service.py\t2025-10-07 17:45:41.696239+00:00\n@@ -92,18 +92,14 @@\n             tags=list(card.tags),\n             task=update_result,\n             metadata=meta,\n         )\n \n-    def _apply_task_update(\n-        self, card: Notecard, action: str\n-    ) -> TaskUpdateResult:\n+    def _apply_task_update(self, card: Notecard, action: str) -> TaskUpdateResult:\n         task_id = self._extract_task_id(card)\n         if not task_id or action == \"none\":\n-            return TaskUpdateResult(\n-                task_id=task_id, action=None, updated=False\n-            )\n+            return TaskUpdateResult(task_id=task_id, action=None, updated=False)\n \n         if action == \"complete\":\n             try:\n                 task = self._task_service.complete_task(task_id)\n             except KeyError:\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\review_guidance_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\review_guidance_service.py\t2025-10-07 17:45:41.750983+00:00\n@@ -64,13 +64,11 @@\n             }.get(priority, 0.5)\n             score += priority_boost\n             reasons.append(f\"priority {priority}\")\n \n         if task.due:\n-            delta_days = (\n-                task.due - item.reference_time\n-            ).total_seconds() / 86400.0\n+            delta_days = (task.due - item.reference_time).total_seconds() / 86400.0\n             if delta_days <= 0:\n                 score += 1.25\n                 reasons.append(\"task due\")\n             elif delta_days < 2:\n                 score += 0.75\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\plugin_bus.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\plugin_bus.py\t2025-10-07 17:45:41.758618+00:00\n@@ -74,13 +74,11 @@\n \n     @property\n     def ai_service(self) -> AIService:\n         return self._ai_service\n \n-    def subscribe(\n-        self, event_type: DomainEventType, handler: EventSubscriber\n-    ) -> None:\n+    def subscribe(self, event_type: DomainEventType, handler: EventSubscriber) -> None:\n         self._dispatcher.subscribe(event_type, handler)\n \n \n class PluginBus:\n     def __init__(\n@@ -124,13 +122,11 @@\n                 version=getattr(plugin, \"version\", \"0.0.0\"),\n                 module=plugin.__class__.__module__,\n                 spec=spec,\n             )\n             self._plugins.append(loaded)\n-            self._logger.info(\n-                \"Loaded plugin %s %s\", loaded.name, loaded.version\n-            )\n+            self._logger.info(\"Loaded plugin %s %s\", loaded.name, loaded.version)\n             self._telemetry.track(\n                 \"plugin.loaded\",\n                 {\n                     \"name\": loaded.name,\n                     \"version\": loaded.version,\n@@ -172,13 +168,11 @@\n             plugin_instance = plugin_obj()\n         else:\n             plugin_instance = plugin_obj\n \n         if not hasattr(plugin_instance, \"setup\"):\n-            self._logger.error(\n-                \"Plugin %s is missing required setup method\", spec\n-            )\n+            self._logger.error(\"Plugin %s is missing required setup method\", spec)\n             return None\n \n         return cast(\"Plugin\", plugin_instance)\n \n     @property\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\search_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\search_service.py\t2025-10-07 17:45:41.789779+00:00\n@@ -37,13 +37,11 @@\n         text: str | None = None,\n         status: str | None = None,\n         tags: Sequence[str] | None = None,\n         limit: int | None = None,\n     ) -> list[Task]:\n-        filters = SearchFilters(\n-            text=text, status=status, tags=tags, limit=limit\n-        )\n+        filters = SearchFilters(text=text, status=status, tags=tags, limit=limit)\n         return self._index.search(\n             text=filters.text,\n             status=filters.status,\n             tags=filters.tags,\n             limit=filters.limit,\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\collaboration_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\collaboration_service.py\t2025-10-07 17:45:41.818245+00:00\n@@ -45,13 +45,11 @@\n         *,\n         include_completed: bool = True,\n         limit: int | None = None,\n     ) -> ExportResult:\n         tasks = list(\n-            self._select_tasks(\n-                include_completed=include_completed, limit=limit\n-            )\n+            self._select_tasks(include_completed=include_completed, limit=limit)\n         )\n         payload = json.dumps(\n             [self._task_to_dict(task) for task in tasks], default=str\n         ).encode(\"utf-8\")\n         salt = os.urandom(16)\n@@ -85,13 +83,11 @@\n             raise ValueError(\"Malformed sync bundle\")\n         salt = base64.b64decode(salt_b64)\n         decrypted = self._decrypt(ciphertext.encode(\"utf-8\"), passphrase, salt)\n         try:\n             records = json.loads(decrypted.decode(\"utf-8\"))\n-        except (\n-            json.JSONDecodeError\n-        ) as exc:  # pragma: no cover - defensive guard\n+        except json.JSONDecodeError as exc:  # pragma: no cover - defensive guard\n             raise ValueError(\"Unable to decode sync payload\") from exc\n         imported_tasks: list[Task] = []\n         for record in records:\n             task = self._dict_to_task(record)\n             existing = self._repository.get(task.id)\n@@ -99,13 +95,11 @@\n                 continue\n             self._repository.save(task)\n             imported_tasks.append(task)\n         if imported_tasks:\n             self._dispatcher.publish(\n-                events.TasksImported(\n-                    tasks=tuple(imported_tasks), source=str(src_path)\n-                )\n+                events.TasksImported(tasks=tuple(imported_tasks), source=str(src_path))\n             )\n         return imported_tasks\n \n     def _select_tasks(\n         self,\n@@ -159,26 +153,20 @@\n         created = (\n             datetime.fromisoformat(created_raw)\n             if isinstance(created_raw, str)\n             else datetime.now(UTC)\n         )\n-        due = (\n-            datetime.fromisoformat(due_raw)\n-            if isinstance(due_raw, str)\n-            else None\n-        )\n+        due = datetime.fromisoformat(due_raw) if isinstance(due_raw, str) else None\n         description = str(data.get(\"description\", \"\"))\n         status = str(data.get(\"status\", \"pending\"))\n         priority = data.get(\"priority\")\n         priority_value = str(priority) if isinstance(priority, str) else None\n         tags_raw = data.get(\"tags\")\n         tags_value: Sequence[str]\n         if isinstance(tags_raw, list):\n             tags_value = [\n-                str(t)\n-                for t in cast(\"list[object]\", tags_raw)\n-                if isinstance(t, str)\n+                str(t) for t in cast(\"list[object]\", tags_raw) if isinstance(t, str)\n             ]\n         else:\n             tags_value = []\n         return Task(\n             id=str(data.get(\"id\", \"\")),\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\automation\\webhook_client.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\automation\\webhook_client.py\t2025-10-07 17:45:41.854888+00:00\n@@ -40,13 +40,11 @@\n \n     @property\n     def endpoints(self) -> tuple[str, ...]:\n         return tuple(self._endpoints)\n \n-    def dispatch(\n-        self, event: str, payload: Mapping[str, Any]\n-    ) -> list[DispatchResult]:\n+    def dispatch(self, event: str, payload: Mapping[str, Any]) -> list[DispatchResult]:\n         if not self._endpoints:\n             return []\n         payload_dict: dict[str, Any] = dict(payload)\n         envelope: dict[str, Any] = {\n             \"event\": event,\n@@ -56,17 +54,13 @@\n         results: list[DispatchResult] = []\n         for url in self._endpoints:\n             try:\n                 response = self._client.post(url, json=envelope)\n             except httpx.HTTPError as exc:\n-                logger.warning(\n-                    \"Automation webhook dispatch failed\", exc_info=exc\n-                )\n+                logger.warning(\"Automation webhook dispatch failed\", exc_info=exc)\n                 results.append(\n-                    DispatchResult(\n-                        url=url, status_code=None, ok=False, error=str(exc)\n-                    )\n+                    DispatchResult(url=url, status_code=None, ok=False, error=str(exc))\n                 )\n                 continue\n             ok = 200 <= response.status_code < 300\n             if not ok:\n                 logger.warning(\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\task_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\task_service.py\t2025-10-07 17:45:41.860965+00:00\n@@ -7,13 +7,11 @@\n from ..domain.task import Task\n from ..ports.task_repo import ITaskRepository\n \n \n class TaskService:\n-    def __init__(\n-        self, repo: ITaskRepository, dispatcher: events.EventDispatcher\n-    ):\n+    def __init__(self, repo: ITaskRepository, dispatcher: events.EventDispatcher):\n         self._repo = repo\n         self._dispatcher = dispatcher\n \n     def add_task(\n         self,\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\logging.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\logging.py\t2025-10-07 17:45:41.876104+00:00\n@@ -30,17 +30,13 @@\n     \"processName\",\n }\n \n \n class StructuredFormatter(logging.Formatter):\n-    def format(\n-        self, record: logging.LogRecord\n-    ) -> str:  # pragma: no cover - formatters\n+    def format(self, record: logging.LogRecord) -> str:  # pragma: no cover - formatters\n         base: dict[str, Any] = {\n-            \"timestamp\": datetime.fromtimestamp(\n-                record.created, tz=UTC\n-            ).isoformat(),\n+            \"timestamp\": datetime.fromtimestamp(record.created, tz=UTC).isoformat(),\n             \"level\": record.levelname,\n             \"logger\": record.name,\n             \"message\": record.getMessage(),\n         }\n         for key, value in record.__dict__.items():\n@@ -61,10 +57,8 @@\n     handler = logging.StreamHandler()\n     if cfg.log_json:\n         handler.setFormatter(StructuredFormatter())\n     else:\n         handler.setFormatter(\n-            logging.Formatter(\n-                \"%(asctime)s %(levelname)s %(name)s :: %(message)s\"\n-            )\n+            logging.Formatter(\"%(asctime)s %(levelname)s %(name)s :: %(message)s\")\n         )\n     root.addHandler(handler)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\scheduler\\apscheduler_adapter.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\scheduler\\apscheduler_adapter.py\t2025-10-07 17:45:41.971309+00:00\n@@ -8,19 +8,15 @@\n \n from ...core.ports.scheduler import IScheduler\n \n BackgroundScheduler: Any | None\n try:  # pragma: no cover - optional dependency\n-    background_module = importlib.import_module(\n-        \"apscheduler.schedulers.background\"\n-    )\n+    background_module = importlib.import_module(\"apscheduler.schedulers.background\")\n except Exception:  # pragma: no cover\n     BackgroundScheduler = None\n else:\n-    BackgroundScheduler = getattr(\n-        background_module, \"BackgroundScheduler\", None\n-    )\n+    BackgroundScheduler = getattr(background_module, \"BackgroundScheduler\", None)\n \n logger = logging.getLogger(__name__)\n \n \n class ApschedulerScheduler(IScheduler):\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\review\\json_repository.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\review\\json_repository.py\t2025-10-07 17:45:41.974656+00:00\n@@ -58,11 +58,9 @@\n             }\n             records[task_id] = ReviewRecord.from_dict(normalised)\n         return records\n \n     def _write(self, data: dict[str, ReviewRecord]) -> None:\n-        serialised = {\n-            task_id: record.to_dict() for task_id, record in data.items()\n-        }\n+        serialised = {task_id: record.to_dict() for task_id, record in data.items()}\n         tmp_path = self._path.with_suffix(self._path.suffix + \".tmp\")\n         tmp_path.write_text(json.dumps(serialised, indent=2), encoding=\"utf-8\")\n         tmp_path.replace(self._path)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\di.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\di.py\t2025-10-07 17:45:41.990456+00:00\n@@ -66,13 +66,11 @@\n         task_repository=repo,\n         dispatcher=dispatcher,\n     )\n     review_guidance_service = ReviewGuidanceService(review_service)\n     ai_service = AIService(repository=repo, dispatcher=dispatcher)\n-    ai_briefing_service = AIBriefingService(\n-        ai_service, review_guidance_service\n-    )\n+    ai_briefing_service = AIBriefingService(ai_service, review_guidance_service)\n     automation_service: AutomationService | None = None\n     if cfg.automation_webhooks:\n         automation_client = AutomationWebhookClient(cfg.automation_webhooks)\n         automation_service = AutomationService(\n             dispatcher,\n@@ -89,18 +87,14 @@\n         ai_service=ai_service,\n     )\n     loaded_plugins = plugin_bus.load(cfg.plugins)\n     scheduler_service: SchedulerService | None = None\n     card_storage = Storage(cfg.cards_db_path)\n-    collaboration_service = CollaborationService(\n-        repository=repo, dispatcher=dispatcher\n-    )\n+    collaboration_service = CollaborationService(repository=repo, dispatcher=dispatcher)\n     if cfg.scheduler_enabled:\n         try:\n-            scheduler_adapter = ApschedulerScheduler(\n-                timezone=cfg.scheduler_timezone\n-            )\n+            scheduler_adapter = ApschedulerScheduler(timezone=cfg.scheduler_timezone)\n         except RuntimeError:\n             logging.getLogger(\"x_legatus.scheduler\").warning(\n                 \"Scheduler disabled because APScheduler is not installed\"\n             )\n         else:\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\collaboration\\hub_client.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\collaboration\\hub_client.py\t2025-10-07 17:45:42.013641+00:00\n@@ -85,16 +85,12 @@\n         if response.status_code == 404:\n             return None\n         response.raise_for_status()\n         return self._parse_download(response.json())\n \n-    def list_bundles(\n-        self, *, limit: int | None = None\n-    ) -> list[BundleUploadResult]:\n-        params: dict[str, Any] | None = (\n-            {\"limit\": limit} if limit is not None else None\n-        )\n+    def list_bundles(self, *, limit: int | None = None) -> list[BundleUploadResult]:\n+        params: dict[str, Any] | None = {\"limit\": limit} if limit is not None else None\n         response = self._client.get(\"/api/collab/bundles\", params=params)\n         response.raise_for_status()\n         payload = response.json()\n         if isinstance(payload, list):\n             payload_list: list[Any] = list(payload)\n@@ -104,16 +100,12 @@\n                     raise ValueError(\"Unexpected bundle list entry\")\n                 results.append(self._parse_upload(self._to_str_dict(item)))\n             return results\n         raise ValueError(\"Unexpected bundle list payload\")\n \n-    def prune_bundles(\n-        self, *, keep: int\n-    ) -> tuple[list[BundleUploadResult], int]:\n-        response = self._client.delete(\n-            \"/api/collab/bundles\", params={\"keep\": keep}\n-        )\n+    def prune_bundles(self, *, keep: int) -> tuple[list[BundleUploadResult], int]:\n+        response = self._client.delete(\"/api/collab/bundles\", params={\"keep\": keep})\n         response.raise_for_status()\n         payload = response.json()\n         if not isinstance(payload, Mapping):\n             raise ValueError(\"Unexpected prune payload\")\n         payload_mapping = cast(\"Mapping[str, Any]\", payload)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\telemetry.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\telemetry.py\t2025-10-07 17:45:42.044109+00:00\n@@ -6,13 +6,11 @@\n from pathlib import Path\n from typing import Any\n \n \n class TelemetryClient:\n-    def __init__(\n-        self, enabled: bool, path: str | None, flush_seconds: int = 5\n-    ):\n+    def __init__(self, enabled: bool, path: str | None, flush_seconds: int = 5):\n         self._enabled = enabled and bool(path)\n         self._path = Path(path) if path else None\n         self._flush_seconds = flush_seconds\n         if self._enabled and self._path:\n             self._path.parent.mkdir(parents=True, exist_ok=True)\n@@ -23,13 +21,11 @@\n \n     @property\n     def path(self) -> Path | None:\n         return self._path\n \n-    def track(\n-        self, event: str, properties: Mapping[str, Any] | None = None\n-    ) -> None:\n+    def track(self, event: str, properties: Mapping[str, Any] | None = None) -> None:\n         if not self._enabled or not self._path:\n             return\n         entry: dict[str, Any] = {\n             \"timestamp\": datetime.now(UTC).isoformat(),\n             \"event\": event,\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\config.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\config.py\t2025-10-07 17:45:42.053915+00:00\n@@ -72,18 +72,14 @@\n     plugins: list[str] = field(default_factory=_default_plugins)\n     scheduler_enabled: bool = field(default_factory=_default_scheduler_enabled)\n     scheduler_timezone: str | None = None\n     review_store_path: str = field(default_factory=_default_review_store_path)\n     cards_db_path: str = field(default_factory=_default_cards_db_path)\n-    collaboration_bundle_path: str = field(\n-        default_factory=_default_collab_path\n-    )\n+    collaboration_bundle_path: str = field(default_factory=_default_collab_path)\n     collaboration_hub_dir: str = field(default_factory=_default_collab_hub_dir)\n     collaboration_endpoint: str | None = None\n-    automation_webhooks: list[str] = field(\n-        default_factory=_default_automation_webhooks\n-    )\n+    automation_webhooks: list[str] = field(default_factory=_default_automation_webhooks)\n \n \n def load_config(env: Mapping[str, str] | None = None) -> AppConfig:\n     source_env: Mapping[str, str] = env if env is not None else os.environ\n     overrides: dict[str, str] = {}\n@@ -106,13 +102,11 @@\n \n     telemetry_path = source_env.get(\"LEGATUS_TELEMETRY_PATH\")\n     if telemetry_path:\n         overrides[\"LEGATUS_TELEMETRY_PATH\"] = telemetry_path\n     if telemetry_enabled and not telemetry_path:\n-        telemetry_path = str(\n-            (_package_root() / \"data\" / \"telemetry.jsonl\").resolve()\n-        )\n+        telemetry_path = str((_package_root() / \"data\" / \"telemetry.jsonl\").resolve())\n \n     log_json = _read_bool(source_env.get(\"LEGATUS_LOG_JSON\"), True)\n     if \"LEGATUS_LOG_JSON\" in source_env:\n         overrides[\"LEGATUS_LOG_JSON\"] = source_env[\"LEGATUS_LOG_JSON\"]\n \n@@ -145,25 +139,19 @@\n         \"LEGATUS_REVIEW_STORE\", _default_review_store_path()\n     )\n     if \"LEGATUS_REVIEW_STORE\" in source_env:\n         overrides[\"LEGATUS_REVIEW_STORE\"] = review_store_path\n \n-    cards_db_path = source_env.get(\n-        \"LEGATUS_CARDS_DB\", _default_cards_db_path()\n-    )\n+    cards_db_path = source_env.get(\"LEGATUS_CARDS_DB\", _default_cards_db_path())\n     if \"LEGATUS_CARDS_DB\" in source_env:\n         overrides[\"LEGATUS_CARDS_DB\"] = cards_db_path\n \n-    collab_bundle_path = source_env.get(\n-        \"LEGATUS_COLLAB_BUNDLE\", _default_collab_path()\n-    )\n+    collab_bundle_path = source_env.get(\"LEGATUS_COLLAB_BUNDLE\", _default_collab_path())\n     if \"LEGATUS_COLLAB_BUNDLE\" in source_env:\n         overrides[\"LEGATUS_COLLAB_BUNDLE\"] = collab_bundle_path\n \n-    collab_hub_dir = source_env.get(\n-        \"LEGATUS_COLLAB_HUB_DIR\", _default_collab_hub_dir()\n-    )\n+    collab_hub_dir = source_env.get(\"LEGATUS_COLLAB_HUB_DIR\", _default_collab_hub_dir())\n     if \"LEGATUS_COLLAB_HUB_DIR\" in source_env:\n         overrides[\"LEGATUS_COLLAB_HUB_DIR\"] = collab_hub_dir\n \n     collab_endpoint = source_env.get(\"LEGATUS_COLLAB_ENDPOINT\")\n     if collab_endpoint:\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\collaboration\\store.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\infrastructure\\collaboration\\store.py\t2025-10-07 17:45:42.079665+00:00\n@@ -90,19 +90,15 @@\n             return []\n         sorted_entries = sorted(entries, key=self._entry_stored_at)\n         if keep >= len(sorted_entries):\n             return []\n         split_index = len(sorted_entries) - keep if keep else 0\n-        remove_entries = (\n-            sorted_entries[:split_index] if keep else sorted_entries\n-        )\n+        remove_entries = sorted_entries[:split_index] if keep else sorted_entries\n         keep_entries: Sequence[dict[str, object]] = (\n             sorted_entries[split_index:] if keep else []\n         )\n-        removed_bundles = [\n-            self._build_bundle(entry) for entry in remove_entries\n-        ]\n+        removed_bundles = [self._build_bundle(entry) for entry in remove_entries]\n         for bundle in removed_bundles:\n             try:\n                 bundle.path.unlink()\n             except FileNotFoundError:\n                 pass\n@@ -136,15 +132,11 @@\n         if isinstance(stored_at_raw, str):\n             try:\n                 parsed = datetime.fromisoformat(stored_at_raw)\n             except ValueError:\n                 return datetime.now(UTC)\n-            return (\n-                parsed\n-                if parsed.tzinfo\n-                else parsed.replace(tzinfo=UTC)\n-            )\n+            return parsed if parsed.tzinfo else parsed.replace(tzinfo=UTC)\n         if isinstance(stored_at_raw, datetime):\n             return (\n                 stored_at_raw\n                 if stored_at_raw.tzinfo\n                 else stored_at_raw.replace(tzinfo=UTC)\n@@ -165,13 +157,11 @@\n         source_value = entry.get(\"source\")\n         source = str(source_value) if isinstance(source_value, str) else None\n         metadata_entry = entry.get(\"metadata\")\n         metadata: dict[str, object]\n         if isinstance(metadata_entry, Mapping):\n-            metadata = {\n-                str(key): value for key, value in metadata_entry.items()\n-            }\n+            metadata = {str(key): value for key, value in metadata_entry.items()}\n         else:\n             metadata = {}\n         size_value = entry.get(\"size\")\n         size = (\n             int(size_value)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\review_service.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\core\\services\\review_service.py\t2025-10-07 17:45:42.124854+00:00\n@@ -40,17 +40,13 @@\n     ):\n         self._repository = repository\n         self._task_repository = task_repository\n         self._dispatcher = dispatcher\n         self._dispatcher.subscribe(events.TaskCreated, self._on_task_created)\n-        self._dispatcher.subscribe(\n-            events.TaskCompleted, self._on_task_completed\n-        )\n+        self._dispatcher.subscribe(events.TaskCompleted, self._on_task_completed)\n         self._dispatcher.subscribe(events.CardScanned, self._on_card_scanned)\n-        self._dispatcher.subscribe(\n-            events.TasksImported, self._on_tasks_imported\n-        )\n+        self._dispatcher.subscribe(events.TasksImported, self._on_tasks_imported)\n         self._bootstrap_existing_tasks()\n \n     def _bootstrap_existing_tasks(self) -> None:\n         for task in self._task_repository.list():\n             self.ensure_record(task)\n@@ -284,15 +280,11 @@\n \n         def _convert(value: Any) -> Any:\n             if isinstance(value, (str, int, float, bool)) or value is None:\n                 return value\n             if isinstance(value, datetime):\n-                normalized = (\n-                    value\n-                    if value.tzinfo\n-                    else value.replace(tzinfo=UTC)\n-                )\n+                normalized = value if value.tzinfo else value.replace(tzinfo=UTC)\n                 return normalized.astimezone(UTC).isoformat()\n             if isinstance(value, Mapping):\n                 mapping_value = cast(\"Mapping[object, Any]\", value)\n                 return {str(k): _convert(v) for k, v in mapping_value.items()}\n             if isinstance(value, (list, tuple, set)):\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\plugins\\calendar_sync.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\plugins\\calendar_sync.py\t2025-10-07 17:45:42.206346+00:00\n@@ -40,13 +40,11 @@\n         ctx.subscribe(events.TaskCreated, _handle)\n         ctx.subscribe(events.TaskUpdated, _handle)\n         ctx.subscribe(events.TaskCompleted, _handle)\n         ctx.subscribe(events.TaskReminderTriggered, _handle)\n \n-    def _sync(\n-        self, task_id: str, due: datetime | None, ctx: PluginContext\n-    ) -> None:\n+    def _sync(self, task_id: str, due: datetime | None, ctx: PluginContext) -> None:\n         if due is None:\n             self._synced_tasks.pop(task_id, None)\n             ctx.logger.debug(\n                 \"Task %s removed from calendar due to missing due date\",\n                 task_id,\n@@ -66,13 +64,11 @@\n             {\n                 \"task_id\": task_id,\n                 \"due_at\": normalized.isoformat(),\n             },\n         )\n-        ctx.logger.debug(\n-            \"Task %s synced to calendar at %s\", task_id, normalized\n-        )\n+        ctx.logger.debug(\"Task %s synced to calendar at %s\", task_id, normalized)\n \n     def _unsync(self, task_id: str, ctx: PluginContext) -> None:\n         if task_id in self._synced_tasks:\n             self._synced_tasks.pop(task_id, None)\n             ctx.telemetry.track(\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\tui\\app.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\tui\\app.py\t2025-10-07 17:45:42.237622+00:00\n@@ -37,13 +37,11 @@\n if not TYPE_CHECKING:\n     try:  # pragma: no cover - dependency guard\n         _textual_app = import_module(\"textual.app\")\n         App = cast(\"type[Any]\", _textual_app.App)\n         ComposeResult = cast(\"type[Any]\", _textual_app.ComposeResult)\n-        Binding = cast(\n-            \"type[Any]\", import_module(\"textual.binding\").Binding\n-        )\n+        Binding = cast(\"type[Any]\", import_module(\"textual.binding\").Binding)\n         _widgets = import_module(\"textual.widgets\")\n         Footer = cast(\"type[Any]\", _widgets.Footer)\n         Header = cast(\"type[Any]\", _widgets.Header)\n         Input = cast(\"type[Any]\", _widgets.Input)\n         Static = cast(\"type[Any]\", _widgets.Static)\n@@ -148,13 +146,11 @@\n         ]\n         if summary.upcoming:\n             lines.append(\"Upcoming (\u00e2\u2030\u00a47d):\")\n             for item in summary.upcoming:\n                 due_display = (\n-                    item.due.astimezone(UTC).strftime(\n-                        \"%Y-%m-%d %H:%M\"\n-                    )\n+                    item.due.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n                     if item.due\n                     else \"-\"\n                 )\n                 priority: str = item.priority or \"-\"\n                 lines.append(\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py\t2025-10-07 17:45:42.259005+00:00\n@@ -19,13 +19,11 @@\n \n class StubAIService:\n     def __init__(self, summary: TaskSummary) -> None:\n         self._summary = summary\n \n-    def summarize(\n-        self, *, now: datetime | None = None, top_n: int = 3\n-    ) -> TaskSummary:\n+    def summarize(self, *, now: datetime | None = None, top_n: int = 3) -> TaskSummary:\n         return self._summary\n \n \n class StubReviewGuidanceService:\n     def __init__(self, guidance: list[ReviewGuidance]) -> None:\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\plugins\\ai_assistant.py\t2025-10-07 16:24:25.236543+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\plugins\\ai_assistant.py\t2025-10-07 17:45:42.269597+00:00\n@@ -62,13 +62,11 @@\n                     \"pending\": summary.pending,\n                     \"completed\": summary.completed,\n                     \"overdue\": summary.overdue,\n                     \"top_tags\": summary.top_tags,\n                 },\n-                \"suggestions\": [\n-                    entry for entry in suggestions if entry[\"prompts\"]\n-                ],\n+                \"suggestions\": [entry for entry in suggestions if entry[\"prompts\"]],\n             }\n         )\n \n     def _handle_card_scanned(self, event: events.DomainEvent) -> None:\n         if not isinstance(event, events.CardScanned):\n@@ -77,13 +75,11 @@\n             return\n         try:\n             task = self._ctx.task_service.get_task(event.task_id)\n         except KeyError:\n             return\n-        prompts = self._ctx.ai_service.draft_followups(task)[\n-            : self._max_prompts\n-        ]\n+        prompts = self._ctx.ai_service.draft_followups(task)[: self._max_prompts]\n         if not prompts:\n             return\n         self._ctx.telemetry.track(\n             \"plugin.ai_assistant.card_followups\",\n             {\n@@ -126,13 +122,11 @@\n         )\n \n     # Helpers ------------------------------------------------------------------------\n \n     def _build_prompt_entry(self, task: Task, origin: str) -> dict[str, Any]:\n-        prompts = self._ctx.ai_service.draft_followups(task)[\n-            : self._max_prompts\n-        ]\n+        prompts = self._ctx.ai_service.draft_followups(task)[: self._max_prompts]\n         return {\n             \"task_id\": task.id,\n             \"description\": task.description,\n             \"origin\": origin,\n             \"tags\": sorted(task.tags),\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\tui\\controller.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\tui\\controller.py\t2025-10-07 17:45:42.264720+00:00\n@@ -40,18 +40,14 @@\n \n     @classmethod\n     def from_task(cls, task: Task) -> TaskRow:\n         due_display = \"-\"\n         if task.due:\n-            due_display = task.due.astimezone(UTC).strftime(\n-                \"%Y-%m-%d %H:%M\"\n-            )\n+            due_display = task.due.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n         priority_display = task.priority or \"-\"\n         tags_display = \",\".join(sorted(task.tags)) or \"-\"\n-        created_display = task.created.astimezone(UTC).strftime(\n-            \"%Y-%m-%d %H:%M\"\n-        )\n+        created_display = task.created.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n         return cls(\n             id=task.id,\n             description=task.description,\n             status=task.status,\n             due_display=due_display,\n@@ -77,13 +73,11 @@\n \n     def list_tasks(self, filters: TaskFilters | None = None) -> list[TaskRow]:\n         filters = filters or TaskFilters()\n         tasks: Iterable[Task]\n         if filters.text:\n-            tag_filter: Sequence[str] | None = (\n-                [filters.tag] if filters.tag else None\n-            )\n+            tag_filter: Sequence[str] | None = [filters.tag] if filters.tag else None\n             tasks = self._ctx.search_service.search(\n                 text=filters.text,\n                 status=filters.status,\n                 tags=tag_filter,\n                 limit=None,\n@@ -91,13 +85,11 @@\n         else:\n             tasks = self._ctx.task_service.list_tasks(status=filters.status)\n             if filters.tag:\n                 tasks = [t for t in tasks if filters.tag in t.tags]\n         if filters.priority:\n-            tasks = [\n-                t for t in tasks if (t.priority or \"-\") == filters.priority\n-            ]\n+            tasks = [t for t in tasks if (t.priority or \"-\") == filters.priority]\n \n         def sort_key(task: Task):\n             due = task.due or datetime.max.replace(tzinfo=UTC)\n             return (task.status != \"pending\", due, task.created)\n \n@@ -139,13 +131,11 @@\n     ) -> TaskRow:\n         if days is None and not until:\n             raise ValueError(\"Provide at least one defer option\")\n         delta = timedelta(days=days) if days is not None else None\n         until_dt = _parse_due(until) if until else None\n-        task = self._ctx.task_service.defer_task(\n-            task_id, until=until_dt, delta=delta\n-        )\n+        task = self._ctx.task_service.defer_task(task_id, until=until_dt, delta=delta)\n         return TaskRow.from_task(task)\n \n     def prioritize_task(self, task_id: str, priority: str | None) -> TaskRow:\n         task = self._ctx.task_service.prioritize_task(task_id, priority)\n         return TaskRow.from_task(task)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\api\\server.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\api\\server.py\t2025-10-07 17:45:42.283213+00:00\n@@ -63,16 +63,12 @@\n     task: TaskUpdatePayload\n     ai_summary: AISummaryPayload\n \n \n class BundleUploadRequest(BaseModel):\n-    payload: str = Field(\n-        ..., description=\"Base64-encoded encrypted bundle content\"\n-    )\n-    source: str | None = Field(\n-        None, description=\"Origin identifier for the upload\"\n-    )\n+    payload: str = Field(..., description=\"Base64-encoded encrypted bundle content\")\n+    source: str | None = Field(None, description=\"Origin identifier for the upload\")\n     metadata: dict[str, Any] | None = Field(\n         None, description=\"Additional metadata to store with the bundle\"\n     )\n \n \n@@ -124,13 +120,11 @@\n         config = cfg or load_config()\n         setup_logging(config)\n         local_ctx = build_context(config)\n     service = _build_service(local_ctx)\n     ai_service = _build_ai_service(local_ctx)\n-    bundle_store = CollaborationBundleStore(\n-        local_ctx.config.collaboration_hub_dir\n-    )\n+    bundle_store = CollaborationBundleStore(local_ctx.config.collaboration_hub_dir)\n \n     app = FastAPI(\n         title=\"Legatus Automations API\",\n         version=\"0.1.0\",\n         summary=\"Webhook endpoints to connect card scans with automations.\",\n@@ -188,13 +182,11 @@\n     ) -> list[BundleUploadResponse]:\n         stored = bundle_store.list(limit=limit)\n         return [_bundle_upload_response(bundle) for bundle in stored]\n \n     @app.delete(\"/api/collab/bundles\", response_model=BundlePruneResponse)\n-    async def prune_bundles(\n-        keep: int = Query(10, ge=0, le=100)\n-    ) -> BundlePruneResponse:\n+    async def prune_bundles(keep: int = Query(10, ge=0, le=100)) -> BundlePruneResponse:\n         removed = bundle_store.prune(keep)\n         remaining = bundle_store.list()\n         return BundlePruneResponse(\n             removed=[_bundle_upload_response(bundle) for bundle in removed],\n             remaining=len(remaining),\n@@ -217,13 +209,11 @@\n         stored = bundle_store.save(\n             payload, source=request.source, metadata=request.metadata\n         )\n         return _bundle_upload_response(stored)\n \n-    @app.get(\n-        \"/api/collab/bundles/latest\", response_model=BundleDownloadResponse\n-    )\n+    @app.get(\"/api/collab/bundles/latest\", response_model=BundleDownloadResponse)\n     async def download_latest_bundle() -> BundleDownloadResponse:\n         stored = bundle_store.latest()\n         if stored is None:\n             raise HTTPException(\n                 status_code=404, detail=\"No collaboration bundles available\"\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_api.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_api.py\t2025-10-07 17:45:42.403312+00:00\n@@ -50,13 +50,11 @@\n     assert response.json()[\"status\"] == \"ok\"\n \n \n def test_scan_endpoint_returns_ai_summary(api_client: Any) -> None:\n     ctx = api_client.app.state.ctx  # type: ignore[attr-defined]\n-    task = ctx.task_service.add_task(\n-        \"API test task\", tags=[\"api\"], priority=\"high\"\n-    )\n+    task = ctx.task_service.add_task(\"API test task\", tags=[\"api\"], priority=\"high\")\n     note = Notecard(\n         id=\"card-123\",\n         type=\"task\",\n         front_md=\"Follow up\",\n         tags=[f\"task:{task.id}\"],\n@@ -115,13 +113,11 @@\n \n     latest = api_client.get(\"/api/collab/bundles/latest\")\n     assert latest.status_code == 200\n     latest_payload = latest.json()\n     assert latest_payload[\"bundle_id\"] == bundle_id_two\n-    assert (\n-        base64.b64decode(latest_payload[\"payload\"]) == b'{\"hello\": \"second\"}'\n-    )\n+    assert base64.b64decode(latest_payload[\"payload\"]) == b'{\"hello\": \"second\"}'\n \n     specific = api_client.get(f\"/api/collab/bundles/{bundle_id}\")\n     assert specific.status_code == 200\n     assert specific.json()[\"bundle_id\"] == bundle_id\n \n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py\t2025-10-07 17:45:42.404770+00:00\n@@ -23,13 +23,11 @@\n \n class StubTelemetry:\n     def __init__(self) -> None:\n         self.events: list[tuple[str, dict[str, object]]] = []\n \n-    def track(\n-        self, event: str, properties: dict[str, object] | None = None\n-    ) -> None:\n+    def track(self, event: str, properties: dict[str, object] | None = None) -> None:\n         self.events.append((event, properties or {}))\n \n \n class _CliResult(Protocol):\n     exit_code: int\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py\t2025-10-07 17:45:42.468854+00:00\n@@ -116,14 +116,11 @@\n     imported_overwrite = target_service.import_tasks(\n         export_path, \"secret\", overwrite_existing=True\n     )\n     assert len(imported_overwrite) == 1\n     stored_overwrite = repo_updated.get(task.id)\n-    assert (\n-        stored_overwrite is not None\n-        and stored_overwrite.description == \"Original\"\n-    )\n+    assert stored_overwrite is not None and stored_overwrite.description == \"Original\"\n \n \n def test_import_fails_with_wrong_passphrase(tmp_path: Path) -> None:\n     repo = InMemoryTaskRepository()\n     service, _ = _make_service(repo)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py\t2025-10-07 17:45:42.470212+00:00\n@@ -39,13 +39,11 @@\n         ]\n         self.dispatcher = events.EventDispatcher()\n         self.telemetry = RecordingTelemetry()\n         self.repo = _InMemoryTaskRepository()\n         self.task_service = TaskService(self.repo, self.dispatcher)\n-        self.ai_service = AIService(\n-            repository=self.repo, dispatcher=self.dispatcher\n-        )\n+        self.ai_service = AIService(repository=self.repo, dispatcher=self.dispatcher)\n         self.plugin_bus = PluginBus(\n             self.dispatcher,\n             self.telemetry,\n             self.config,\n             task_service=self.task_service,\n@@ -73,13 +71,11 @@\n         self.dispatcher.publish(scan_event)\n \n         self.assertTrue(self.suggestions_path.exists())\n         entries = [\n             json.loads(line)\n-            for line in self.suggestions_path.read_text(\n-                encoding=\"utf-8\"\n-            ).splitlines()\n+            for line in self.suggestions_path.read_text(encoding=\"utf-8\").splitlines()\n             if line\n         ]\n         event_types = {entry[\"event\"] for entry in entries}\n         self.assertIn(\"task_created\", event_types)\n         self.assertIn(\"tasks_imported\", event_types)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py\t2025-10-07 17:45:42.492242+00:00\n@@ -41,13 +41,11 @@\n             review_store_path=str(data_dir / \"reviews.json\"),\n             collaboration_bundle_path=str(data_dir / \"bundle.json\"),\n         )\n         self.repo = _InMemoryTaskRepository()\n         self.task_service = TaskService(self.repo, self.dispatcher)\n-        self.ai_service = AIService(\n-            repository=self.repo, dispatcher=self.dispatcher\n-        )\n+        self.ai_service = AIService(repository=self.repo, dispatcher=self.dispatcher)\n         self.plugin_bus = PluginBus(\n             self.dispatcher,\n             self.telemetry,\n             self.config,\n             task_service=self.task_service,\n@@ -58,17 +56,13 @@\n     def tearDown(self) -> None:\n         self.telemetry.events.clear()\n         self.tempdir.cleanup()\n \n     def test_calendar_sync_tracks_events(self) -> None:\n-        task = Task.create(\n-            \"Prep meeting\", due=datetime.now(UTC) + timedelta(hours=2)\n-        )\n+        task = Task.create(\"Prep meeting\", due=datetime.now(UTC) + timedelta(hours=2))\n         self.dispatcher.publish(TaskCreated(task))\n-        updated = (\n-            task.with_due(task.due + timedelta(hours=1)) if task.due else task\n-        )\n+        updated = task.with_due(task.due + timedelta(hours=1)) if task.due else task\n         self.dispatcher.publish(TaskUpdated(updated))\n         reminder = TaskReminderTriggered(\n             task=updated, due_at=updated.due or datetime.now(UTC)\n         )\n         self.dispatcher.publish(reminder)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_hub.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_hub.py\t2025-10-07 17:45:42.571962+00:00\n@@ -18,13 +18,11 @@\n \n \n def test_bundle_store_roundtrip(tmp_path: Path) -> None:\n     store = CollaborationBundleStore(tmp_path)\n     payload = b'{\"task\": \"demo\"}'\n-    stored = store.save(\n-        payload, source=\"unit\", metadata={\"label\": \"roundtrip\"}\n-    )\n+    stored = store.save(payload, source=\"unit\", metadata={\"label\": \"roundtrip\"})\n \n     latest = store.latest()\n     assert latest is not None\n     assert latest.bundle_id == stored.bundle_id\n     assert latest.path.read_bytes() == payload\n@@ -68,14 +66,11 @@\n     bundle_path.write_bytes(bundle_bytes)\n \n     state: dict[str, dict[str, object]] = {}\n \n     def _handler(request: httpx.Request) -> httpx.Response:\n-        if (\n-            request.method == \"POST\"\n-            and request.url.path == \"/api/collab/bundles\"\n-        ):\n+        if request.method == \"POST\" and request.url.path == \"/api/collab/bundles\":\n             body = json.loads(request.content.decode(\"utf-8\"))\n             decoded = base64.b64decode(body[\"payload\"].encode(\"utf-8\"))\n             stored_at = datetime.now(UTC).isoformat()\n             bundle_id = \"bundle-1\"\n             state[\"bundle\"] = {\n@@ -92,30 +87,23 @@\n                 \"source\": body.get(\"source\"),\n                 \"metadata\": body.get(\"metadata\", {}),\n             }\n             return httpx.Response(201, json=bundle_upload_response)\n \n-        if (\n-            request.method == \"GET\"\n-            and request.url.path == \"/api/collab/bundles\"\n-        ):\n+        if request.method == \"GET\" and request.url.path == \"/api/collab/bundles\":\n             bundle = state.get(\"bundle\")\n             if not bundle:\n                 return httpx.Response(200, json=[])\n             payload_bytes_obj = bundle.get(\"payload_bytes\")\n             payload_size = (\n-                len(payload_bytes_obj)\n-                if isinstance(payload_bytes_obj, bytes)\n-                else 0\n+                len(payload_bytes_obj) if isinstance(payload_bytes_obj, bytes) else 0\n             )\n             metadata_obj = bundle.get(\"metadata\", {})\n             metadata: dict[str, object]\n             if isinstance(metadata_obj, dict):\n                 metadata_mapping = cast(\"Mapping[Any, object]\", metadata_obj)\n-                metadata = {\n-                    str(key): value for key, value in metadata_mapping.items()\n-                }\n+                metadata = {str(key): value for key, value in metadata_mapping.items()}\n             else:\n                 metadata = {}\n             list_payload: dict[str, object] = {\n                 \"bundle_id\": bundle.get(\"bundle_id\"),\n                 \"stored_at\": bundle.get(\"stored_at\"),\n@@ -131,27 +119,22 @@\n             bundle = state.get(\"bundle\")\n             if not bundle:\n                 return httpx.Response(404, json={\"detail\": \"not found\"})\n             payload_bytes = bundle.get(\"payload_bytes\")\n             if not isinstance(payload_bytes, bytes):\n-                return httpx.Response(\n-                    500, json={\"detail\": \"invalid bundle payload\"}\n-                )\n+                return httpx.Response(500, json={\"detail\": \"invalid bundle payload\"})\n             download_payload: dict[str, object] = {\n                 \"bundle_id\": bundle[\"bundle_id\"],\n                 \"stored_at\": bundle[\"stored_at\"],\n                 \"size\": len(payload_bytes),\n                 \"source\": bundle[\"source\"],\n                 \"metadata\": bundle[\"metadata\"],\n                 \"payload\": base64.b64encode(payload_bytes).decode(\"utf-8\"),\n             }\n             return httpx.Response(200, json=download_payload)\n \n-        if (\n-            request.method == \"DELETE\"\n-            and request.url.path == \"/api/collab/bundles\"\n-        ):\n+        if request.method == \"DELETE\" and request.url.path == \"/api/collab/bundles\":\n             keep_param = request.url.params.get(\"keep\")\n             keep = int(keep_param) if keep_param is not None else 0\n             bundle = state.get(\"bundle\")\n             removed: list[dict[str, Any]] = []\n             if bundle and keep == 0:\n@@ -180,13 +163,11 @@\n \n         return httpx.Response(500, json={\"detail\": \"unexpected request\"})\n \n     transport = httpx.MockTransport(_handler)\n \n-    with CollaborationHubClient(\n-        \"http://testserver\", transport=transport\n-    ) as client:\n+    with CollaborationHubClient(\"http://testserver\", transport=transport) as client:\n         upload: BundleUploadResult = client.push_bundle(\n             bundle_path, source=\"tester\", metadata={\"note\": \"demo\"}\n         )\n         assert upload.bundle_id == \"bundle-1\"\n         assert upload.size == len(bundle_bytes)\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py\t2025-10-07 17:45:42.585892+00:00\n@@ -56,16 +56,12 @@\n         matches = self.search_service.search(text=\"report\")\n         self.assertEqual(1, len(matches))\n         self.assertIn(\"report\", matches[0].description.lower())\n \n     def test_search_filters_status_and_tags(self) -> None:\n-        first = self.task_service.add_task(\n-            \"File expenses\", tags=[\"finance\", \"work\"]\n-        )\n-        second = self.task_service.add_task(\n-            \"Book flights\", tags=[\"travel\", \"work\"]\n-        )\n+        first = self.task_service.add_task(\"File expenses\", tags=[\"finance\", \"work\"])\n+        second = self.task_service.add_task(\"Book flights\", tags=[\"travel\", \"work\"])\n         self.task_service.complete_task(second.id)\n \n         completed = self.search_service.search(status=\"completed\")\n         self.assertEqual([second.id], [task.id for task in completed])\n \n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py\t2025-10-07 17:45:42.614559+00:00\n@@ -126,13 +126,11 @@\n \n     recommendations = guidance.generate(now=now, limit=2)\n \n     assert recommendations\n     assert recommendations[0].task.id == high_task.id\n-    assert any(\n-        \"priority high\" in reason for reason in recommendations[0].reasons\n-    )\n+    assert any(\"priority high\" in reason for reason in recommendations[0].reasons)\n     assert recommendations[0].suggested_action in {\n         \"review then commit\",\n         \"rescue overdue review\",\n     }\n \n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py\t2025-10-07 17:45:42.630462+00:00\n@@ -91,13 +91,11 @@\n     task = Task.create(\"Learn CLI\")\n     task_repo.add(task)\n     service = ReviewService(review_repo, task_repo, dispatcher)\n \n     first_review_time = task.created\n-    record = service.record_review(\n-        task.id, quality=5, reviewed_at=first_review_time\n-    )\n+    record = service.record_review(task.id, quality=5, reviewed_at=first_review_time)\n     assert approx(record.interval_days, rel=1e-3) == 1.0\n     assert record.repetitions == 1\n     assert record.last_reviewed_at == first_review_time\n     assert record.history[-1].quality == 5\n     assert record.history[-1].source == \"manual\"\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py\t2025-10-07 17:45:42.641781+00:00\n@@ -48,13 +48,11 @@\n class FakeScheduler(IScheduler):\n     def __init__(self) -> None:\n         self.started = False\n         self.jobs: dict[\n             str,\n-            tuple[\n-                datetime, Callable[..., None], tuple[Any, ...], dict[str, Any]\n-            ],\n+            tuple[datetime, Callable[..., None], tuple[Any, ...], dict[str, Any]],\n         ] = {}\n \n     def start(self) -> None:\n         self.started = True\n \n@@ -85,13 +83,11 @@\n class RecordingTelemetry(TelemetryClient):\n     def __init__(self) -> None:\n         super().__init__(enabled=False, path=None)\n         self.events: list[tuple[str, Mapping[str, object]]] = []\n \n-    def track(\n-        self, event: str, properties: Mapping[str, object] | None = None\n-    ) -> None:\n+    def track(self, event: str, properties: Mapping[str, object] | None = None) -> None:\n         self.events.append((event, dict(properties or {})))\n \n \n class SchedulerServiceTests(unittest.TestCase):\n     def setUp(self) -> None:\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py\t2025-10-07 17:45:42.695120+00:00\n@@ -26,13 +26,11 @@\n \n class StubTelemetry:\n     def __init__(self) -> None:\n         self.events: list[tuple[str, dict[str, Any]]] = []\n \n-    def track(\n-        self, event: str, properties: dict[str, Any] | None = None\n-    ) -> None:\n+    def track(self, event: str, properties: dict[str, Any] | None = None) -> None:\n         self.events.append((event, dict(properties or {})))\n \n \n class StubCollaborationService:\n     def __init__(self) -> None:\n@@ -176,21 +174,17 @@\n         return self\n \n     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n         return None\n \n-    def list_bundles(\n-        self, *, limit: int | None = None\n-    ) -> list[BundleUploadResult]:\n+    def list_bundles(self, *, limit: int | None = None) -> list[BundleUploadResult]:\n         self.limits.append(limit)\n         if limit is None:\n             return self.bundles\n         return self.bundles[: max(limit, 0)]\n \n-    def prune_bundles(\n-        self, *, keep: int\n-    ) -> tuple[list[BundleUploadResult], int]:\n+    def prune_bundles(self, *, keep: int) -> tuple[list[BundleUploadResult], int]:\n         self.prune_calls.append(keep)\n         return (self._prune_removed, self._prune_remaining)\n \n \n class StubAIService:\n@@ -239,13 +233,11 @@\n     uploads: list[dict[str, Any]] = []\n \n     def _ctx() -> Any:\n         return ctx\n \n-    def _client_factory(\n-        base_url: str, *args: Any, **kwargs: Any\n-    ) -> StubPushClient:\n+    def _client_factory(base_url: str, *args: Any, **kwargs: Any) -> StubPushClient:\n         return StubPushClient(base_url, uploads)\n \n     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n \n     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n@@ -279,13 +271,11 @@\n     assert ai_meta[\"pending\"] == summary.pending\n     assert ai_meta[\"completed\"] == summary.completed\n     assert ai_meta[\"overdue\"] == summary.overdue\n     assert ai_meta[\"top_tags\"] == summary.top_tags\n     expected_due = (\n-        summary.upcoming[0].due.isoformat()\n-        if summary.upcoming[0].due\n-        else None\n+        summary.upcoming[0].due.isoformat() if summary.upcoming[0].due else None\n     )\n     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n     assert uploads[0][\"source\"] == \"unit-test\"\n     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n@@ -319,13 +309,11 @@\n     )\n \n     def _ctx() -> Any:\n         return ctx\n \n-    def _client_factory(\n-        base_url: str, *args: Any, **kwargs: Any\n-    ) -> StubPullClient:\n+    def _client_factory(base_url: str, *args: Any, **kwargs: Any) -> StubPullClient:\n         return StubPullClient(base_url, download)\n \n     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n \n     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n@@ -344,14 +332,11 @@\n         ],\n     )\n \n     assert result.exit_code == 0\n     assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n-    assert (\n-        service.import_calls\n-        and service.import_calls[0][\"passphrase\"] == \"secret\"\n-    )\n+    assert service.import_calls and service.import_calls[0][\"passphrase\"] == \"secret\"\n     assert service.import_calls[0][\"overwrite_existing\"] is True\n     assert service.import_calls[0][\"payload\"] == payload\n     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n     assert telemetry.events[0][1][\"from_latest\"] is True\n@@ -390,13 +375,11 @@\n     clients: list[StubHistoryClient] = []\n \n     def _ctx() -> Any:\n         return ctx\n \n-    def _client_factory(\n-        base_url: str, *args: Any, **kwargs: Any\n-    ) -> StubHistoryClient:\n+    def _client_factory(base_url: str, *args: Any, **kwargs: Any) -> StubHistoryClient:\n         client = StubHistoryClient(base_url, bundles)\n         clients.append(client)\n         return client\n \n     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n@@ -449,13 +432,11 @@\n     clients: list[StubHistoryClient] = []\n \n     def _ctx() -> Any:\n         return ctx\n \n-    def _client_factory(\n-        base_url: str, *args: Any, **kwargs: Any\n-    ) -> StubHistoryClient:\n+    def _client_factory(base_url: str, *args: Any, **kwargs: Any) -> StubHistoryClient:\n         client = StubHistoryClient(\n             base_url,\n             [],\n             prune_removed=[removed_bundle],\n             prune_remaining=2,\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\cli\\main.py\t2025-10-07 16:24:25.220917+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\interface\\cli\\main.py\t2025-10-07 17:45:42.979802+00:00\n@@ -92,21 +92,18 @@\n         \"==========\",\n         f\"Pending tasks:   {summary.pending}\",\n         f\"Completed tasks: {summary.completed}\",\n         f\"Overdue tasks:   {summary.overdue}\",\n         \"\",\n-        \"Top tags: \"\n-        + (\", \".join(summary.top_tags) if summary.top_tags else \"-\"),\n+        \"Top tags: \" + (\", \".join(summary.top_tags) if summary.top_tags else \"-\"),\n     ]\n     if summary.upcoming:\n         lines.append(\"\")\n         lines.append(\"Upcoming focus (7d horizon):\")\n         for item in summary.upcoming:\n             due = (\n-                item.due.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n-                if item.due\n-                else \"-\"\n+                item.due.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\") if item.due else \"-\"\n             )\n             priority = item.priority or \"-\"\n             lines.append(\n                 f\"- {item.description} (id={item.task_id[:8]}, due={due}, priority={priority})\"\n             )\n@@ -134,13 +131,11 @@\n         lines.append(\"\")\n         lines.append(\"Upcoming focus (7d)\")\n         lines.append(\"-------------------\")\n         for item in summary.upcoming:\n             due = (\n-                item.due.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n-                if item.due\n-                else \"-\"\n+                item.due.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\") if item.due else \"-\"\n             )\n             priority = item.priority or \"-\"\n             lines.append(\n                 f\"- {item.description} (id={item.task_id[:8]}, due={due}, priority={priority})\"\n             )\n@@ -151,13 +146,11 @@\n     if not guidance:\n         lines.append(\"No review guidance available.\")\n     else:\n         for insight in guidance:\n             score = f\"{insight.score:.2f}\"\n-            due = insight.record.due_at.astimezone(UTC).strftime(\n-                \"%Y-%m-%d %H:%M\"\n-            )\n+            due = insight.record.due_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n             lines.append(\n                 f\"- {insight.task.description} (score={score}, due={due}, action={insight.suggested_action})\"\n             )\n             for reason in insight.reasons:\n                 lines.append(f\"  \u00c2\u00b7 {reason}\")\n@@ -170,13 +163,11 @@\n     confirm: bool = False,\n     prompt_text: str = \"Passphrase\",\n ) -> str:\n     if value:\n         return value\n-    secret = typer.prompt(\n-        prompt_text, hide_input=True, confirmation_prompt=confirm\n-    )\n+    secret = typer.prompt(prompt_text, hide_input=True, confirmation_prompt=confirm)\n     if not secret:\n         raise typer.BadParameter(\"Passphrase is required\")\n     return secret\n \n \n@@ -269,13 +260,11 @@\n @app.command()\n def add(\n     description: str,\n     due: str = typer.Option(None, help=\"ISO datetime\"),\n     tags: str = typer.Option(\"\", help=\"Comma tags\"),\n-    priority: str | None = typer.Option(\n-        None, help=\"Priority: low|medium|high\"\n-    ),\n+    priority: str | None = typer.Option(None, help=\"Priority: low|medium|high\"),\n ):\n     ctx = _ctx()\n     due_dt = _parse_due(due)\n     tag_list = [t for t in tags.split(\",\") if t] if tags else []\n     task = ctx.task_service.add_task(\n@@ -301,25 +290,21 @@\n     ctx = _ctx()\n     tasks = list(ctx.task_service.list_tasks(status=status))\n     if tag:\n         tasks = [t for t in tasks if tag in t.tags]\n     if priority:\n-        tasks = [\n-            t for t in tasks if (t.priority or \"\").lower() == priority.lower()\n-        ]\n+        tasks = [t for t in tasks if (t.priority or \"\").lower() == priority.lower()]\n     if tasks:\n         typer.echo(_format_tasks(tasks))\n     else:\n         typer.echo(\"No tasks found\")\n     _record(ctx, \"task.list\", status=status, tag=tag, priority=priority)\n \n \n @app.command()\n def search(\n-    text: str = typer.Option(\n-        \"\", help=\"Substring match against task description\"\n-    ),\n+    text: str = typer.Option(\"\", help=\"Substring match against task description\"),\n     status: str | None = typer.Option(None, help=\"Filter by status\"),\n     tag: list[str] = typer.Option(\n         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n     ),\n     limit: int = typer.Option(20, help=\"Maximum number of results\"),\n@@ -368,13 +353,11 @@\n \n @app.command()\n def defer(\n     task_id: str,\n     until: str = typer.Option(None, help=\"ISO datetime to defer until\"),\n-    days: int | None = typer.Option(\n-        None, help=\"Number of days to push the due date\"\n-    ),\n+    days: int | None = typer.Option(None, help=\"Number of days to push the due date\"),\n ):\n     ctx = _ctx()\n     due = _parse_due(until)\n     if due and days is not None:\n         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n@@ -420,26 +403,22 @@\n         tags=tags or None,\n     )\n     if not items:\n         typer.echo(\"No reviews due\")\n     else:\n-        header = \"ID       Due (UTC)        Overdue  Interval  Reps Last Source  Description\"\n+        header = (\n+            \"ID       Due (UTC)        Overdue  Interval  Reps Last Source  Description\"\n+        )\n         lines = [header, \"-\" * len(header)]\n         for item in items:\n             tid = item.task.id[:8]\n-            due_str = item.record.due_at.astimezone(UTC).strftime(\n-                \"%Y-%m-%d %H:%M\"\n-            )\n+            due_str = item.record.due_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n             overdue_hours = max(0.0, item.overdue.total_seconds() / 3600.0)\n-            overdue_display = (\n-                f\"{overdue_hours:6.1f}h\" if overdue_hours else \"  -   \"\n-            )\n+            overdue_display = f\"{overdue_hours:6.1f}h\" if overdue_hours else \"  -   \"\n             interval_display = f\"{item.record.interval_days:7.2f}d\"\n             reps_display = f\"{item.record.repetitions:3d}\"\n-            last_source = (\n-                item.record.history[-1].source if item.record.history else \"-\"\n-            )\n+            last_source = item.record.history[-1].source if item.record.history else \"-\"\n             source_display = last_source[:11].ljust(11)\n             lines.append(\n                 f\"{tid} {due_str} {overdue_display} {interval_display} {reps_display} {source_display} {item.task.description}\"\n             )\n         typer.echo(\"\\n\".join(lines))\n@@ -453,13 +432,11 @@\n     )\n \n \n @review_app.command(\"focus\")\n def review_focus(\n-    limit: int = typer.Option(\n-        5, help=\"Maximum number of guidance entries to display\"\n-    ),\n+    limit: int = typer.Option(5, help=\"Maximum number of guidance entries to display\"),\n     include_completed: bool = typer.Option(\n         False, help=\"Include completed tasks when computing guidance\"\n     ),\n     tag: list[str] = typer.Option(\n         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n@@ -482,30 +459,26 @@\n             tags=tags,\n             results=0,\n         )\n         return\n \n-    header = \"ID       Score  Review Due        Overdue  Priority Last Review        Action\"\n+    header = (\n+        \"ID       Score  Review Due        Overdue  Priority Last Review        Action\"\n+    )\n     lines = [header, \"-\" * len(header)]\n     for insight in insights:\n         tid = insight.task.id[:8]\n         score_display = f\"{insight.score:5.2f}\"\n-        due_str = insight.record.due_at.astimezone(UTC).strftime(\n-            \"%Y-%m-%d %H:%M\"\n-        )\n+        due_str = insight.record.due_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n         overdue_hours = max(insight.overdue.total_seconds() / 3600.0, 0.0)\n-        overdue_display = (\n-            f\"{overdue_hours:6.1f}h\" if overdue_hours else \"  -   \"\n-        )\n+        overdue_display = f\"{overdue_hours:6.1f}h\" if overdue_hours else \"  -   \"\n         priority_display = (insight.task.priority or \"-\").ljust(7)\n         last_review_time = insight.last_reviewed_at\n         if last_review_time and last_review_time.tzinfo is None:\n             last_review_time = last_review_time.replace(tzinfo=UTC)\n         last_str = (\n-            last_review_time.astimezone(UTC).strftime(\n-                \"%Y-%m-%d %H:%M\"\n-            )\n+            last_review_time.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n             if last_review_time\n             else \"-\"\n         )\n         action_display = insight.suggested_action[:18].ljust(18)\n         lines.append(\n@@ -536,13 +509,11 @@\n \n \n @review_app.command(\"log\")\n def review_log(\n     task_id: str,\n-    quality: int = typer.Option(\n-        ..., min=0, max=5, help=\"Review quality score (0-5)\"\n-    ),\n+    quality: int = typer.Option(..., min=0, max=5, help=\"Review quality score (0-5)\"),\n     reviewed_at: str | None = typer.Option(\n         None, help=\"Override review timestamp (ISO datetime)\"\n     ),\n ):\n     ctx = _ctx()\n@@ -575,20 +546,16 @@\n ):\n     ctx = _ctx()\n     record = ctx.review_service.suspend(task_id, suspended=suspend)\n     state = \"suspended\" if suspend else \"active\"\n     due_str = record.due_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n-    typer.echo(\n-        f\"Review schedule for {task_id[:8]} is now {state} (next due {due_str})\"\n-    )\n+    typer.echo(f\"Review schedule for {task_id[:8]} is now {state} (next due {due_str})\")\n     _record(ctx, \"review.suspend\", task_id=task_id, suspended=suspend)\n \n \n @tags_app.command(\"add\")\n-def tag_add(\n-    task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to add\")\n-):\n+def tag_add(task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to add\")):\n     ctx = _ctx()\n     task = ctx.task_service.add_tags(task_id, tags)\n     typer.echo(f\"Tags now: {','.join(sorted(task.tags)) or '-'}\")\n     _record(ctx, \"task.tag.add\", task_id=task.id, tags=list(tags))\n \n@@ -602,13 +569,11 @@\n     typer.echo(f\"Tags now: {','.join(sorted(task.tags)) or '-'}\")\n     _record(ctx, \"task.tag.remove\", task_id=task.id, tags=list(tags))\n \n \n @tags_app.command(\"set\")\n-def tag_set(\n-    task_id: str, tags: list[str] = typer.Argument(..., help=\"Replace tags\")\n-):\n+def tag_set(task_id: str, tags: list[str] = typer.Argument(..., help=\"Replace tags\")):\n     ctx = _ctx()\n     task = ctx.task_service.set_tags(task_id, tags)\n     typer.echo(f\"Tags now: {','.join(sorted(task.tags)) or '-'}\")\n     _record(ctx, \"task.tag.set\", task_id=task.id, tags=list(tags))\n \n@@ -649,34 +614,28 @@\n         \"telemetry_enabled\": cfg.telemetry_enabled,\n         \"telemetry_writable\": bool(cfg.telemetry_path),\n         \"scheduler_enabled\": cfg.scheduler_enabled,\n         \"scheduler_active\": bool(ctx.scheduler_service),\n         \"review_store_exists\": Path(cfg.review_store_path).exists(),\n-        \"review_store_parent_exists\": Path(\n-            cfg.review_store_path\n-        ).parent.exists(),\n+        \"review_store_parent_exists\": Path(cfg.review_store_path).parent.exists(),\n         \"cards_db_exists\": Path(cfg.cards_db_path).exists(),\n         \"cards_db_parent_exists\": Path(cfg.cards_db_path).parent.exists(),\n         \"collaboration_bundle_parent_exists\": Path(\n             cfg.collaboration_bundle_path\n         ).parent.exists(),\n         \"automation_webhooks_configured\": bool(cfg.automation_webhooks),\n     }\n     if cfg.taskwarrior_data_dir:\n-        checks[\"taskwarrior_data_dir_exists\"] = Path(\n-            cfg.taskwarrior_data_dir\n-        ).exists()\n+        checks[\"taskwarrior_data_dir_exists\"] = Path(cfg.taskwarrior_data_dir).exists()\n     if cfg.telemetry_path:\n         telemetry_path = Path(cfg.telemetry_path)\n         checks[\"telemetry_dir_exists\"] = telemetry_path.parent.exists()\n     bundle_path = Path(cfg.collaboration_bundle_path)\n     checks[\"collaboration_bundle_exists\"] = bundle_path.exists()\n     hub_dir = Path(cfg.collaboration_hub_dir)\n     checks[\"collaboration_hub_dir_exists\"] = hub_dir.exists()\n-    checks[\"collaboration_endpoint_configured\"] = bool(\n-        cfg.collaboration_endpoint\n-    )\n+    checks[\"collaboration_endpoint_configured\"] = bool(cfg.collaboration_endpoint)\n     typer.echo(json.dumps(checks, indent=2, default=str))\n     _record(ctx, \"config.doctor\", **checks)\n \n \n @automation_app.command(\"endpoints\")\n@@ -699,22 +658,16 @@\n     _record(ctx, \"automation.endpoints\", count=len(endpoints))\n \n \n @collab_app.command(\"export\")\n def collab_export(\n-    output: Path = typer.Option(\n-        None, \"--output\", \"-o\", help=\"Destination bundle path\"\n-    ),\n+    output: Path = typer.Option(None, \"--output\", \"-o\", help=\"Destination bundle path\"),\n     passphrase: str | None = typer.Option(\n         None, help=\"Passphrase used to encrypt the bundle\"\n     ),\n-    include_completed: bool = typer.Option(\n-        True, help=\"Include completed tasks\"\n-    ),\n-    limit: int | None = typer.Option(\n-        None, help=\"Maximum number of tasks to export\"\n-    ),\n+    include_completed: bool = typer.Option(True, help=\"Include completed tasks\"),\n+    limit: int | None = typer.Option(None, help=\"Maximum number of tasks to export\"),\n ):\n     ctx = _ctx()\n     dest = output or Path(ctx.config.collaboration_bundle_path)\n     secret = _prompt_passphrase(passphrase, confirm=True)\n     result = ctx.collaboration_service.export_tasks(\n@@ -762,32 +715,26 @@\n     )\n \n \n @collab_app.command(\"push\")\n def collab_push(\n-    endpoint: str | None = typer.Option(\n-        None, help=\"Collaboration hub base URL\"\n-    ),\n+    endpoint: str | None = typer.Option(None, help=\"Collaboration hub base URL\"),\n     passphrase: str | None = typer.Option(\n         None, help=\"Passphrase used to encrypt the bundle\"\n     ),\n     include_completed: bool = typer.Option(\n         True, help=\"Include completed tasks in the export\"\n     ),\n-    limit: int | None = typer.Option(\n-        None, help=\"Maximum number of tasks to export\"\n-    ),\n+    limit: int | None = typer.Option(None, help=\"Maximum number of tasks to export\"),\n     source: str | None = typer.Option(\n         None, help=\"Source identifier stored with the upload\"\n     ),\n ):\n     ctx = _ctx()\n     base_url = endpoint or ctx.config.collaboration_endpoint\n     if not base_url:\n-        raise typer.BadParameter(\n-            \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n-        )\n+        raise typer.BadParameter(\"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\")\n     secret = _prompt_passphrase(passphrase, confirm=True)\n     summary = ctx.ai_service.summarize()\n     summary_payload: dict[str, Any] = {\n         \"pending\": summary.pending,\n         \"completed\": summary.completed,\n@@ -855,23 +802,17 @@\n     )\n \n \n @collab_app.command(\"history\")\n def collab_history(\n-    endpoint: str | None = typer.Option(\n-        None, help=\"Collaboration hub base URL\"\n-    ),\n-    limit: int = typer.Option(\n-        10, help=\"Maximum number of bundles to list\", min=0\n-    ),\n+    endpoint: str | None = typer.Option(None, help=\"Collaboration hub base URL\"),\n+    limit: int = typer.Option(10, help=\"Maximum number of bundles to list\", min=0),\n ):\n     ctx = _ctx()\n     base_url = endpoint or ctx.config.collaboration_endpoint\n     if not base_url:\n-        raise typer.BadParameter(\n-            \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n-        )\n+        raise typer.BadParameter(\"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\")\n     try:\n         with CollaborationHubClient(base_url) as client:\n             bundles = client.list_bundles(limit=limit)\n     except Exception as exc:\n         raise typer.BadParameter(\n@@ -884,19 +825,15 @@\n         return\n \n     header = \"ID        Stored (UTC)        Size  Source      Metadata\"\n     lines = [header, \"-\" * len(header)]\n     for bundle in bundles:\n-        stored = bundle.stored_at.astimezone(UTC).strftime(\n-            \"%Y-%m-%d %H:%M\"\n-        )\n+        stored = bundle.stored_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n         size_display = f\"{bundle.size:5d}\"\n         source_display = (bundle.source or \"-\")[:10].ljust(10)\n         metadata_display = (\n-            json.dumps(bundle.metadata, default=str)\n-            if bundle.metadata\n-            else \"-\"\n+            json.dumps(bundle.metadata, default=str) if bundle.metadata else \"-\"\n         )\n         lines.append(\n             f\"{bundle.bundle_id[:8]} {stored} {size_display} {source_display} {metadata_display}\"\n         )\n     typer.echo(\"\\n\".join(lines))\n@@ -909,13 +846,11 @@\n     )\n \n \n @collab_app.command(\"pull\")\n def collab_pull(\n-    endpoint: str | None = typer.Option(\n-        None, help=\"Collaboration hub base URL\"\n-    ),\n+    endpoint: str | None = typer.Option(None, help=\"Collaboration hub base URL\"),\n     passphrase: str | None = typer.Option(\n         None, help=\"Passphrase used to decrypt the bundle\"\n     ),\n     overwrite_existing: bool = typer.Option(\n         False, help=\"Replace tasks with matching IDs\"\n@@ -928,13 +863,11 @@\n     ),\n ):\n     ctx = _ctx()\n     base_url = endpoint or ctx.config.collaboration_endpoint\n     if not base_url:\n-        raise typer.BadParameter(\n-            \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n-        )\n+        raise typer.BadParameter(\"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\")\n \n     try:\n         with CollaborationHubClient(base_url) as client:\n             if bundle_id:\n                 download = client.fetch_bundle(bundle_id)\n@@ -960,13 +893,11 @@\n     tasks = ctx.collaboration_service.import_tasks(\n         destination,\n         secret,\n         overwrite_existing=overwrite_existing,\n     )\n-    typer.echo(\n-        f\"Imported {len(tasks)} task(s) from bundle {download.bundle_id}\"\n-    )\n+    typer.echo(f\"Imported {len(tasks)} task(s) from bundle {download.bundle_id}\")\n     _record(\n         ctx,\n         \"collab.pull\",\n         endpoint=base_url,\n         bundle_id=download.bundle_id,\n@@ -976,23 +907,19 @@\n     )\n \n \n @collab_app.command(\"prune\")\n def collab_prune(\n-    endpoint: str | None = typer.Option(\n-        None, help=\"Collaboration hub base URL\"\n-    ),\n+    endpoint: str | None = typer.Option(None, help=\"Collaboration hub base URL\"),\n     keep: int = typer.Option(\n         10, help=\"Number of most recent bundles to keep\", min=0, max=100\n     ),\n ):\n     ctx = _ctx()\n     base_url = endpoint or ctx.config.collaboration_endpoint\n     if not base_url:\n-        raise typer.BadParameter(\n-            \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n-        )\n+        raise typer.BadParameter(\"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\")\n     try:\n         with CollaborationHubClient(base_url) as client:\n             removed, remaining = client.prune_bundles(keep=keep)\n     except Exception as exc:\n         raise typer.BadParameter(\n@@ -1002,16 +929,12 @@\n     if not removed:\n         typer.echo(\"No bundles pruned.\")\n     else:\n         typer.echo(f\"Removed {len(removed)} bundle(s):\")\n         for item in removed:\n-            stored = item.stored_at.astimezone(UTC).strftime(\n-                \"%Y-%m-%d %H:%M\"\n-            )\n-            typer.echo(\n-                f\"- {item.bundle_id} at {stored} (size={item.size} bytes)\"\n-            )\n+            stored = item.stored_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n+            typer.echo(f\"- {item.bundle_id} at {stored} (size={item.size} bytes)\")\n     typer.echo(f\"Remaining bundles on hub: {remaining}\")\n     _record(\n         ctx,\n         \"collab.prune\",\n         endpoint=base_url,\n@@ -1023,13 +946,11 @@\n \n @app.command(\"webhook\")\n def run_webhook_server(\n     host: str = typer.Option(\"127.0.0.1\", help=\"Host interface to bind\"),\n     port: int = typer.Option(8080, help=\"Port to bind\"),\n-    reload: bool = typer.Option(\n-        False, help=\"Enable auto-reload (development only)\"\n-    ),\n+    reload: bool = typer.Option(False, help=\"Enable auto-reload (development only)\"),\n ):\n     ctx = _ctx()\n     from ...interface.api.server import create_api_app\n \n     try:\n--- C:\\x_runner_x\\x_legatus_acta_schedae_x\\x_cls_legatus_acta_schedae_x.py\t2025-10-07 16:24:25.237139+00:00\n+++ C:\\x_runner_x\\x_legatus_acta_schedae_x\\x_cls_legatus_acta_schedae_x.py\t2025-10-07 17:45:43.448178+00:00\n@@ -84,13 +84,11 @@\n         )\n \n     # Dev fallback for PDF via wkhtmltopdf when enabled\n     def to_pdf(self, html_str: str, out_path: str) -> None:\n         # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n-        raise RuntimeError(\n-            \"PDF export not available (no PDF engine configured)\"\n-        )\n+        raise RuntimeError(\"PDF export not available (no PDF engine configured)\")\n \n \n # Built-in PDF adapter using wkhtmltopdf (subprocess)\n _DEFAULT_WKHTMLTOPDF_PATH = r\"C:\\Program Files\\wkhtmltopdf\\bin\\wkhtmltopdf.exe\"\n \n@@ -174,13 +172,11 @@\n class _MarkdownAdapter:\n     def __init__(self, base_folder: str) -> None:\n         # Track whether the adapter provides a PDF exporter\n         self._inner, self._has_pdf = self._load_from_manifest(base_folder)\n \n-    def _load_from_manifest(\n-        self, base_folder: str\n-    ) -> tuple[MarkdownLike, bool]:\n+    def _load_from_manifest(self, base_folder: str) -> tuple[MarkdownLike, bool]:\n         # Search common locations and optional explicit path\n         env_manifest = os.environ.get(\"X_MANIFEST_PATH\")\n         candidates = [\n             os.path.join(base_folder, \"publish_manifest.json\"),\n             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n@@ -298,13 +294,11 @@\n                             os.remove(tmp_path)\n                         except Exception:\n                             pass\n \n             pdf_func = _call_to_pdf\n-        elif hasattr(inst, \"export_pdf\") and callable(\n-            inst.export_pdf\n-        ):\n+        elif hasattr(inst, \"export_pdf\") and callable(inst.export_pdf):\n             exp = cast(\"Callable[[str, str], None]\", inst.export_pdf)\n \n             def export_pdf_html(html_str: str, out_path: str) -> None:\n                 with tempfile.NamedTemporaryFile(\n                     \"w\", delete=False, suffix=\".html\", encoding=\"utf-8\"\n@@ -474,22 +468,18 @@\n         # Also append to JSON for easy inspection (preserve original field names)\n         self._append_jsonl(self.json_cards_path, d)\n \n     def update_status(self, card_id: str, status: str) -> None:\n         with self._conn() as cx:\n-            cx.execute(\n-                \"UPDATE cards SET status=? WHERE id=?\", (status, card_id)\n-            )\n+            cx.execute(\"UPDATE cards SET status=? WHERE id=?\", (status, card_id))\n         self._append_jsonl(\n             self.json_actions_path,\n             {\n                 \"card_id\": card_id,\n                 \"action_type\": \"status_update\",\n                 \"meta\": {\"status\": status},\n-                \"created_at\": _dt.datetime.now(_dt.UTC).isoformat(\n-                    timespec=\"seconds\"\n-                ),\n+                \"created_at\": _dt.datetime.now(_dt.UTC).isoformat(timespec=\"seconds\"),\n             },\n         )\n \n     def insert_action(\n         self, card_id: str, action_type: str, meta: dict[str, Any]\n@@ -503,13 +493,11 @@\n             self.json_actions_path,\n             {\n                 \"card_id\": card_id,\n                 \"action_type\": action_type,\n                 \"meta\": meta or {},\n-                \"created_at\": _dt.datetime.now(_dt.UTC).isoformat(\n-                    timespec=\"seconds\"\n-                ),\n+                \"created_at\": _dt.datetime.now(_dt.UTC).isoformat(timespec=\"seconds\"),\n             },\n         )\n \n     def get_card(self, card_id: str) -> Notecard | None:\n         with self._conn() as cx:\n@@ -569,13 +557,11 @@\n class Notecard:\n     id: str\n     type: str\n     front_md: str\n     back_md: str | None = None\n-    size: str = (\n-        \"3x5\"  # accepts: \"WxH\" (in|mm|cm), aliases, suffix p/l for orientation\n-    )\n+    size: str = \"3x5\"  # accepts: \"WxH\" (in|mm|cm), aliases, suffix p/l for orientation\n     tags: list[str] = field(default_factory=list)\n     symbol_type: str = \"qr\"  # \"qr\" or \"code\"\n     symbol_data: str | None = None  # payload/URI encoded in symbol\n     status: str = \"new\"  # \"new\" | \"acted\" | \"completed\"\n     created_at: str = field(\n@@ -606,27 +592,21 @@\n             for c in payload[\"cards\"]:\n                 result.append(\n                     {\n                         \"front_md\": c.get(\"front_md\", \"\"),\n                         \"back_md\": c.get(\"back_md\"),\n-                        \"tags\": list(\n-                            set([*(global_tags), *(c.get(\"tags\", []) or [])])\n-                        ),\n+                        \"tags\": list(set([*(global_tags), *(c.get(\"tags\", []) or [])])),\n                     }\n                 )\n             return result\n         if \"qa\" in payload:\n             for pair in payload[\"qa\"]:\n                 front = (\n-                    pair[0]\n-                    if isinstance(pair, (list, tuple)) and len(pair) > 0\n-                    else \"\"\n+                    pair[0] if isinstance(pair, (list, tuple)) and len(pair) > 0 else \"\"\n                 )\n                 back = (\n-                    pair[1]\n-                    if isinstance(pair, (list, tuple)) and len(pair) > 1\n-                    else \"\"\n+                    pair[1] if isinstance(pair, (list, tuple)) and len(pair) > 1 else \"\"\n                 )\n                 result.append(\n                     {\n                         \"front_md\": front,\n                         \"back_md\": back,\n@@ -699,13 +679,11 @@\n             for a in payload[\"appointments\"]:\n                 result.append(\n                     {\n                         \"front_md\": mk_front(a),\n                         \"back_md\": mk_back(a),\n-                        \"tags\": list(\n-                            set([*(global_tags), *(a.get(\"tags\", []) or [])])\n-                        ),\n+                        \"tags\": list(set([*(global_tags), *(a.get(\"tags\", []) or [])])),\n                     }\n                 )\n             return result\n         result.append(\n             {\n@@ -731,23 +709,19 @@\n \n # ---------- Orchestrator ----------\n \n \n class x_cls_legatus_acta_schedae_x:  # noqa: N801\n-    def __init__(\n-        self, base_dir: str | None = None, db_path: str | None = None\n-    ) -> None:\n+    def __init__(self, base_dir: str | None = None, db_path: str | None = None) -> None:\n         self.base_dir = base_dir or _base_dir_default()\n         # All output under this folder to satisfy co-location requirement\n         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n         os.makedirs(self.out_dir, exist_ok=True)\n         self.media_dir = os.path.join(self.out_dir, \"media\")\n         os.makedirs(self.media_dir, exist_ok=True)\n-        self.db_path = db_path or os.path.join(\n-            self.pkg_dir, \"data\", \"cards.db\"\n-        )\n+        self.db_path = db_path or os.path.join(self.pkg_dir, \"data\", \"cards.db\")\n         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n         self.storage = Storage(self.db_path)\n         # Prefer base_dir for manifest lookup; still searches package/CWD/env\n         self.md = _MarkdownAdapter(self.base_dir)\n         self._pdf = _PDFAdapter()  # built-in PDF adapter using wkhtmltopdf\n@@ -824,15 +798,11 @@\n         t = re.sub(r\"-{2,}\", \"-\", t).strip(\"-\")\n         return t or \"card\"\n \n     def _output_filename(self, c: Notecard, ext: str) -> str:\n         base = self._slug(c.series_name or c.type or \"card\")\n-        tags = (\n-            \"-\".join(self._slug(t) for t in (c.tags or [])[:3])\n-            if c.tags\n-            else \"\"\n-        )\n+        tags = \"-\".join(self._slug(t) for t in (c.tags or [])[:3]) if c.tags else \"\"\n         idx = f\"{c.index:02d}\" if isinstance(c.index, int) else \"\"\n         short = (c.id.split(\"-\")[0] if c.id else \"\")[:8].upper()\n         parts = [p for p in [base, tags, idx, short] if p]\n         name = \"_\".join(parts)[:120]\n         return f\"{name}.{ext}\"\n@@ -852,13 +822,11 @@\n             return None\n         if raw in (\"letter\", \"us-letter\"):\n             return (8.5, 11.0)\n         if raw in (\"a4\", \"iso-a4\"):\n             return (8.27, 11.69)\n-        m = re.match(\n-            r\"^\\s*(\\d+(?:\\.\\d+)?)\\s*x\\s*(\\d+(?:\\.\\d+)?)(mm|cm|in)?\\s*$\", raw\n-        )\n+        m = re.match(r\"^\\s*(\\d+(?:\\.\\d+)?)\\s*x\\s*(\\d+(?:\\.\\d+)?)(mm|cm|in)?\\s*$\", raw)\n         if m:\n             w_raw, h_raw, unit = m.groups()\n             unit = unit or \"in\"\n             return (\n                 _to_inches(float(w_raw), unit),\n@@ -939,13 +907,11 @@\n         orient: str | None = None\n         if s.endswith((\"p\", \"l\")):\n             orient, s = s[-1], s[:-1]\n \n         # Try strict \"WxH\" with optional unit\n-        m = re.match(\n-            r\"^\\s*(\\d+(?:\\.\\d+)?)\\s*x\\s*(\\d+(?:\\.\\d+)?)(mm|cm|in)?\\s*$\", s\n-        )\n+        m = re.match(r\"^\\s*(\\d+(?:\\.\\d+)?)\\s*x\\s*(\\d+(?:\\.\\d+)?)(mm|cm|in)?\\s*$\", s)\n         if m:\n             w_raw, h_raw, unit = m.groups()\n             unit = unit or \"in\"\n             w = _to_inches(float(w_raw), unit)\n             h = _to_inches(float(h_raw), unit)\n@@ -996,13 +962,11 @@\n         total = len(raw_cards)\n         set_id = series_id or str(uuid.uuid4())\n         cards: list[Notecard] = []\n \n         global_tags = [\n-            t.strip().lower()\n-            for t in (tags or [])\n-            if isinstance(t, str) and t.strip()\n+            t.strip().lower() for t in (tags or []) if isinstance(t, str) and t.strip()\n         ]\n         for idx, rc in enumerate(raw_cards, start=1):\n             card_id = str(uuid.uuid4())\n             payload_uri = f\"ncx://card/{card_id}?scan=1\"\n             joined_tags = global_tags + [\n@@ -1065,13 +1029,11 @@\n         Each page contains the front content of a single card. Card back_md is not included\n         in duplex PDFs to support simple double-sided printing.\n         \"\"\"\n         out_paths: list[str] = []\n         sheet = self._sheet_size()\n-        force_wk = sheet is not None or _truthy_env(\n-            \"X_FORCE_WKHTMLTOPDF\", False\n-        )\n+        force_wk = sheet is not None or _truthy_env(\"X_FORCE_WKHTMLTOPDF\", False)\n \n         # Group cards by normalized size key (\"3x5\" or \"4x6\")\n         groups: dict[str, list[Notecard]] = {\"3x5\": [], \"4x6\": []}\n         for c in cards:\n             w_in, h_in = self._parse_size_spec(c.size)\n@@ -1088,13 +1050,11 @@\n             )\n             style_s = m_style.group(1) if m_style else \"<style></style>\"\n             body_s = m_body.group(1).strip() if m_body else \"\"\n             return (style_s, body_s)\n \n-        def _write_duplex_set(\n-            size_key: str, subset: list[Notecard]\n-        ) -> list[str]:\n+        def _write_duplex_set(size_key: str, subset: list[Notecard]) -> list[str]:\n             if not subset:\n                 return []\n             # Split into odds/evens based on per-size order\n             odds: list[Notecard] = []\n             evens: list[Notecard] = []\n@@ -1110,13 +1070,11 @@\n                     seq[0], sheet=sheet, both_sides=False\n                 )\n                 style_s, body_first = _extract_style_and_body(first_html)\n                 bodies = [body_first]\n                 for c in seq[1:]:\n-                    h = self._render_card_html(\n-                        c, sheet=sheet, both_sides=False\n-                    )\n+                    h = self._render_card_html(c, sheet=sheet, both_sides=False)\n                     _, b = _extract_style_and_body(h)\n                     bodies.append(b)\n \n                 doc_html = f\"\"\"<!doctype html>\n <html>\n@@ -1135,13 +1093,11 @@\n                 )\n                 with open(html_path, \"w\", encoding=\"utf-8\") as fh:\n                     fh.write(doc_html)\n \n                 # Export to PDF\n-                pdf_path = os.path.join(\n-                    self.out_dir, f\"duplex_{size_key}_{label}.pdf\"\n-                )\n+                pdf_path = os.path.join(self.out_dir, f\"duplex_{size_key}_{label}.pdf\")\n                 w_in, h_in = (5.0, 3.0) if size_key == \"3x5\" else (6.0, 4.0)\n                 if (\n                     not force_wk\n                     and getattr(self.md, \"can_pdf\", None)\n                     and self.md.can_pdf()\n@@ -1339,15 +1295,11 @@\n         kind = (c.type or \"\").strip().lower()\n         series = c.series_name or \"\"\n         ver = c.series_version or \"\"\n         n = f\"{c.index} of {c.total}\" if c.index and c.total else \"\"\n         b1 = f'<span class=\"badge\">{html.escape(kind)}</span>' if kind else \"\"\n-        b2 = (\n-            f'<span class=\"badge\">{html.escape(series)}</span>'\n-            if series\n-            else \"\"\n-        )\n+        b2 = f'<span class=\"badge\">{html.escape(series)}</span>' if series else \"\"\n         b3 = f'<span class=\"badge\">v{html.escape(ver)}</span>' if ver else \"\"\n         b4 = f'<span class=\"badge\">{html.escape(n)}</span>' if n else \"\"\n         return \"\".join([b1, b2, b3, b4])\n \n     def _qr_data_uri(self, payload: str) -> str:\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "infrastructure\\telemetry.py:28: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\telemetry.py:33: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\telemetry.py:36: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\ninfrastructure\\telemetry.py:36: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ninfrastructure\\telemetry.py:36: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninfrastructure\\telemetry.py:36: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninfrastructure\\telemetry.py:36: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\telemetry.py:38: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\ports\\scheduler.py:13: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\task.py:96: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\task.py:97: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\task.py:97: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\task.py:98: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\task.py:99: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\task.py:99: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\task.py:100: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\task.py:100: error: Expression has type \"Any\"  [misc]\ncore\\domain\\task.py:101: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\task.py:101: error: Expression has type \"Any\"  [misc]\ncore\\domain\\task.py:102: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\task.py:102: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\task.py:103: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\task.py:104: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\task.py:104: error: Expression has type \"Any\"  [misc]\ncore\\domain\\task.py:105: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:22: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:30: error: Expression type contains \"Any\" (has type \"type[ReviewHistoryEntry]\")  [misc]\ncore\\domain\\review.py:31: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:36: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:36: error: Expression type contains \"Any\" (has type \"Callable[[], dict[str, Any]]\")  [misc]\ncore\\domain\\review.py:38: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:39: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:44: error: Expression type contains \"Any\" (has type \"tuple[str, dict[str, Any]]\")  [misc]\ncore\\domain\\review.py:44: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:48: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:49: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:49: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:50: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:50: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:51: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:51: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\review.py:52: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:53: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\review.py:54: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:54: error: Expression type contains \"Any\" (has type \"Mapping[object, Any]\")  [misc]\ncore\\domain\\review.py:55: error: Expression type contains \"Any\" (has type \"tuple[object, Any]\")  [misc]\ncore\\domain\\review.py:55: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:56: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:56: error: Expression type contains \"Any\" (has type \"Mapping[object, Any]\")  [misc]\ncore\\domain\\review.py:56: error: Expression type contains \"Any\" (has type \"ItemsView[object, Any]\")  [misc]\ncore\\domain\\review.py:60: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:60: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\review.py:63: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\review.py:68: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:68: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:71: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:99: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:100: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:112: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\ncore\\domain\\review.py:112: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ncore\\domain\\review.py:112: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:117: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\review.py:118: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:118: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:119: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:119: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:120: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:120: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\review.py:121: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:122: error: Expression type contains \"Any\" (has type \"type[ReviewHistoryEntry]\")  [misc]\ncore\\domain\\review.py:122: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:123: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:123: error: Expression type contains \"Any\" (has type \"Any | list[Never]\")  [misc]\ncore\\domain\\review.py:126: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:126: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:130: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:131: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\domain\\review.py:134: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:134: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:135: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:135: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:136: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:136: error: Expression has type \"Any\"  [misc]\ncore\\domain\\review.py:138: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\domain\\review.py:138: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\null_scheduler.py:20: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\events.py:31: error: Expression type contains \"Any\" (has type \"type[CardScanned]\")  [misc]\ncore\\domain\\events.py:32: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\events.py:37: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\events.py:63: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\events.py:65: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\domain\\events.py:68: error: Expression type contains \"Any\" (has type \"dict[type[Any], list[EventSubscriber]]\")  [misc]\ncore\\domain\\events.py:68: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\ncore\\domain\\events.py:71: error: Expression type contains \"Any\" (has type \"tuple[type[Any], list[EventSubscriber]]\")  [misc]\ncore\\domain\\events.py:71: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\ncore\\domain\\events.py:71: error: Expression type contains \"Any\" (has type \"dict[type[Any], list[EventSubscriber]]\")  [misc]\ncore\\domain\\events.py:71: error: Expression type contains \"Any\" (has type \"dict_items[type[Any], list[EventSubscriber]]\")  [misc]\ncore\\domain\\events.py:72: error: Expression type contains \"Any\" (has type \"type[Any]\")  [misc]\ncore\\domain\\events.py:74: error: Expression has type \"Any\"  [misc]\ninfrastructure\\logging.py:38: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\logging.py:46: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\ninfrastructure\\logging.py:46: error: Expression has type \"Any\"  [misc]\ninfrastructure\\logging.py:46: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\logging.py:46: error: Expression type contains \"Any\" (has type \"dict_items[str, Any]\")  [misc]\ninfrastructure\\logging.py:49: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\logging.py:49: error: Expression has type \"Any\"  [misc]\ninfrastructure\\logging.py:51: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\logging.py:52: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\search\\memory_index.py:66: error: Expression type contains \"Any\" (has type \"Callable[[Any], Any]\")  [misc]\ninfrastructure\\search\\memory_index.py:66: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:11: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\scheduler\\apscheduler_adapter.py:28: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:29: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:34: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\scheduler\\apscheduler_adapter.py:34: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:39: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:44: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:47: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\scheduler\\apscheduler_adapter.py:56: error: Expression type contains \"Any\" (has type \"tuple[Any, ...] | None\")  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:57: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:57: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:58: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:59: error: Expression type contains \"Any\" (has type \"Callable[..., Any]\")  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:64: error: Expression type contains \"Any\" (has type \"tuple[Any, ...]\")  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:65: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:67: error: Expression has type \"Any\"  [misc]\ninfrastructure\\scheduler\\apscheduler_adapter.py:71: error: Expression has type \"Any\"  [misc]\ninfrastructure\\review\\json_repository.py:44: error: Expression has type \"Any\"  [misc]\ninfrastructure\\review\\json_repository.py:46: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ninfrastructure\\review\\json_repository.py:47: error: Expression has type \"Any\"  [misc]\ninfrastructure\\review\\json_repository.py:55: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\review\\json_repository.py:55: error: Expression type contains \"Any\" (has type \"Mapping[object, Any]\")  [misc]\ninfrastructure\\review\\json_repository.py:56: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\review\\json_repository.py:56: error: Expression type contains \"Any\" (has type \"tuple[object, Any]\")  [misc]\ninfrastructure\\review\\json_repository.py:56: error: Expression has type \"Any\"  [misc]\ninfrastructure\\review\\json_repository.py:57: error: Expression has type \"Any\"  [misc]\ninfrastructure\\review\\json_repository.py:57: error: Expression type contains \"Any\" (has type \"Mapping[object, Any]\")  [misc]\ninfrastructure\\review\\json_repository.py:57: error: Expression type contains \"Any\" (has type \"ItemsView[object, Any]\")  [misc]\ninfrastructure\\review\\json_repository.py:59: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\review\\json_repository.py:63: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\ninfrastructure\\review\\json_repository.py:64: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\review\\json_repository.py:67: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\ncore\\services\\scheduler_service.py:70: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\scheduler_service.py:86: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\scheduler_service.py:98: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:48: error: Expression type contains \"Any\" (has type \"type[CardScanned]\")  [misc]\ncore\\services\\review_service.py:78: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:80: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\ncore\\services\\review_service.py:80: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ncore\\services\\review_service.py:85: error: Expression type contains \"Any\" (has type \"type[CardScanned]\")  [misc]\ncore\\services\\review_service.py:92: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:94: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:97: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\ncore\\services\\review_service.py:97: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ncore\\services\\review_service.py:98: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\ncore\\services\\review_service.py:98: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ncore\\services\\review_service.py:98: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:101: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:107: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:146: error: Expression type contains \"Any\" (has type \"set[Any]\")  [misc]\ncore\\services\\review_service.py:157: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:202: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:202: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ncore\\services\\review_service.py:221: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:224: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ncore\\services\\review_service.py:226: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ncore\\services\\review_service.py:226: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:227: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:239: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:242: error: Expression type contains \"Any\" (has type \"list[Any | None]\")  [misc]\ncore\\services\\review_service.py:243: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:243: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:245: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:245: error: Expression type contains \"Any\" (has type \"list[Any | None]\")  [misc]\ncore\\services\\review_service.py:246: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:249: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:249: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:250: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:254: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:254: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:255: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ncore\\services\\review_service.py:266: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:267: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:269: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:271: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:279: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:282: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ncore\\services\\review_service.py:285: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:286: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:288: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:295: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:296: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:296: error: Expression type contains \"Any\" (has type \"Mapping[object, Any]\")  [misc]\ncore\\services\\review_service.py:297: error: Expression type contains \"Any\" (has type \"tuple[object, Any]\")  [misc]\ncore\\services\\review_service.py:297: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:297: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ncore\\services\\review_service.py:297: error: Expression type contains \"Any\" (has type \"Mapping[object, Any]\")  [misc]\ncore\\services\\review_service.py:297: error: Expression type contains \"Any\" (has type \"ItemsView[object, Any]\")  [misc]\ncore\\services\\review_service.py:298: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:299: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\review_service.py:299: error: Expression type contains \"Any\" (has type \"Iterable[Any]\")  [misc]\ncore\\services\\review_service.py:300: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:300: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ncore\\services\\review_service.py:300: error: Expression type contains \"Any\" (has type \"Iterable[Any]\")  [misc]\ncore\\services\\review_service.py:301: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:303: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\ncore\\services\\review_service.py:303: error: Expression has type \"Any\"  [misc]\ncore\\services\\review_service.py:303: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\review_service.py:303: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ncore\\services\\review_service.py:303: error: Expression type contains \"Any\" (has type \"ItemsView[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:11: error: Explicit \"Any\" is not allowed  [explicit-any]\nadapters\\taskwarrior\\tw_repository.py:19: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:28: error: Explicit \"Any\" is not allowed  [explicit-any]\nadapters\\taskwarrior\\tw_repository.py:29: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:39: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:42: error: Explicit \"Any\" is not allowed  [explicit-any]\nadapters\\taskwarrior\\tw_repository.py:44: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:44: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:47: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:49: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:50: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:50: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:51: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:58: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:59: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:60: error: Explicit \"Any\" is not allowed  [explicit-any]\nadapters\\taskwarrior\\tw_repository.py:60: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:61: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:61: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:62: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:68: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:70: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:71: error: Explicit \"Any\" is not allowed  [explicit-any]\nadapters\\taskwarrior\\tw_repository.py:71: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:83: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:84: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:85: error: Explicit \"Any\" is not allowed  [explicit-any]\nadapters\\taskwarrior\\tw_repository.py:85: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:86: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:86: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:88: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:88: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:89: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:92: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:93: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:95: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:97: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:99: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:101: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:102: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:110: error: Explicit \"Any\" is not allowed  [explicit-any]\nadapters\\taskwarrior\\tw_repository.py:111: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:111: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:112: error: Expression type contains \"Any\" (has type \"frozenset[Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:112: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:112: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:112: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:112: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:113: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:113: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:114: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:114: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:116: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:116: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:117: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:117: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:121: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:121: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:122: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:122: error: Expression has type \"Any\"  [misc]\nadapters\\taskwarrior\\tw_repository.py:123: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:126: error: Expression type contains \"Any\" (has type \"frozenset[Any]\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:127: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nadapters\\taskwarrior\\tw_repository.py:150: error: Statement is unreachable  [unreachable]\ncore\\services\\plugin_bus.py:123: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\ncore\\services\\plugin_bus.py:124: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\ncore\\services\\plugin_bus.py:134: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\plugin_bus.py:152: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\plugin_bus.py:161: error: Expression has type \"Any\"  [misc]\ncore\\services\\plugin_bus.py:169: error: Expression has type \"Any\"  [misc]\ncore\\services\\plugin_bus.py:171: error: Expression has type \"Any\"  [misc]\ncore\\services\\plugin_bus.py:172: error: Expression has type \"Any\"  [misc]\ncore\\services\\plugin_bus.py:174: error: Expression has type \"Any\"  [misc]\ncore\\services\\plugin_bus.py:176: error: Expression has type \"Any\"  [misc]\ncore\\services\\card_action_service.py:26: error: Expression type contains \"Any\" (has type \"type[CardScanResult]\")  [misc]\ncore\\services\\card_action_service.py:27: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\card_action_service.py:32: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\card_action_service.py:48: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\card_action_service.py:61: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\card_action_service.py:61: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\ncore\\services\\card_action_service.py:63: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\card_action_service.py:64: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\card_action_service.py:66: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\card_action_service.py:84: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\card_action_service.py:94: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\task_scoring.py:26: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\calendar_sync.py:27: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\calendar_sync.py:56: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\calendar_sync.py:66: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\calendar_sync.py:80: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:32: error: Expression type contains \"Any\" (has type \"type[CardScanned]\")  [misc]\nplugins\\ai_assistant.py:43: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:52: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nplugins\\ai_assistant.py:53: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:57: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:60: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\nplugins\\ai_assistant.py:60: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nplugins\\ai_assistant.py:61: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\nplugins\\ai_assistant.py:61: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nplugins\\ai_assistant.py:67: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\nplugins\\ai_assistant.py:67: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:67: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nplugins\\ai_assistant.py:68: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:68: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nplugins\\ai_assistant.py:68: error: Expression has type \"Any\"  [misc]\nplugins\\ai_assistant.py:74: error: Expression type contains \"Any\" (has type \"type[CardScanned]\")  [misc]\nplugins\\ai_assistant.py:89: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:96: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:101: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\nplugins\\ai_assistant.py:101: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nplugins\\ai_assistant.py:109: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:110: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:110: error: Expression has type \"Any\"  [misc]\nplugins\\ai_assistant.py:114: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:116: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:116: error: Expression has type \"Any\"  [misc]\nplugins\\ai_assistant.py:120: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:124: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nplugins\\ai_assistant.py:124: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:124: error: Expression has type \"Any\"  [misc]\nplugins\\ai_assistant.py:130: error: Explicit \"Any\" is not allowed  [explicit-any]\nplugins\\ai_assistant.py:142: error: Explicit \"Any\" is not allowed  [explicit-any]\nplugins\\ai_assistant.py:143: error: Explicit \"Any\" is not allowed  [explicit-any]\nplugins\\ai_assistant.py:145: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nplugins\\ai_assistant.py:149: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\collaboration_service.py:55: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ncore\\services\\collaboration_service.py:81: error: Expression has type \"Any\"  [misc]\ncore\\services\\collaboration_service.py:82: error: Expression has type \"Any\"  [misc]\ncore\\services\\collaboration_service.py:83: error: Expression has type \"Any\"  [misc]\ncore\\services\\collaboration_service.py:84: error: Expression has type \"Any\"  [misc]\ncore\\services\\collaboration_service.py:89: error: Expression has type \"Any\"  [misc]\ncore\\services\\collaboration_service.py:95: error: Expression has type \"Any\"  [misc]\ncore\\services\\collaboration_service.py:96: error: Expression has type \"Any\"  [misc]\ncore\\services\\collaboration_service.py:144: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\collaboration_service.py:146: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\collaboration_service.py:147: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\collaboration_service.py:153: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:15: error: Expression type contains \"Any\" (has type \"type[BundleUploadResult]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:16: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:21: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:24: error: Expression type contains \"Any\" (has type \"type[BundleDownloadResult]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:25: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:32: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:40: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:57: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:67: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:70: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:70: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:70: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:70: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:70: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:74: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:81: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:88: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:93: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:94: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:96: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:98: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:99: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:100: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:102: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:102: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:103: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:105: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:116: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:117: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:119: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:119: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:120: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:120: error: Expression type contains \"Any\" (has type \"Any | list[Never]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:120: error: Need type annotation for \"removed_raw\"  [var-annotated]\ninfrastructure\\collaboration\\hub_client.py:121: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:121: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:122: error: Expression type contains \"Any\" (has type \"Any | list[Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:124: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:126: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:126: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:127: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:129: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:130: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:134: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:135: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:135: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:136: error: Expression type contains \"Any\" (has type \"type[CollaborationHubClient]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:136: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:137: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:137: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:138: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:139: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:140: error: Expression type contains \"Any\" (has type \"type[CollaborationHubClient]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:144: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:144: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:146: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:146: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:147: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:147: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:148: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:152: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:153: error: Expression type contains \"Any\" (has type \"type[CollaborationHubClient]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:153: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:154: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:154: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:155: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:155: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:161: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:166: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:167: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:169: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:181: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\collaboration\\hub_client.py:182: error: Expression type contains \"Any\" (has type \"tuple[Any, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:182: error: Expression has type \"Any\"  [misc]\ninfrastructure\\collaboration\\hub_client.py:182: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:182: error: Expression type contains \"Any\" (has type \"Mapping[Any, Any]\")  [misc]\ninfrastructure\\collaboration\\hub_client.py:182: error: Expression type contains \"Any\" (has type \"ItemsView[Any, Any]\")  [misc]\ninfrastructure\\automation\\webhook_client.py:45: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\automation\\webhook_client.py:50: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\automation\\webhook_client.py:50: error: Expression type contains \"Any\" (has type \"Mapping[str, Any]\")  [misc]\ninfrastructure\\automation\\webhook_client.py:51: error: Explicit \"Any\" is not allowed  [explicit-any]\ninfrastructure\\automation\\webhook_client.py:54: error: Expression type contains \"Any\" (has type \"tuple[str, dict[str, Any]]\")  [misc]\ninfrastructure\\automation\\webhook_client.py:54: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninfrastructure\\automation\\webhook_client.py:59: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\automation_service.py:42: error: Expression type contains \"Any\" (has type \"type[CardScanned]\")  [misc]\ncore\\services\\automation_service.py:49: error: Expression type contains \"Any\" (has type \"type[CardScanned]\")  [misc]\ncore\\services\\automation_service.py:53: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ncore\\services\\automation_service.py:54: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\automation_service.py:55: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\automation_service.py:59: error: Expression type contains \"Any\" (has type \"tuple[str, list[Any]]\")  [misc]\ncore\\services\\automation_service.py:59: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\ncore\\services\\automation_service.py:60: error: Expression type contains \"Any\" (has type \"tuple[str, dict[str, Any]]\")  [misc]\ncore\\services\\automation_service.py:60: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\automation_service.py:62: error: Expression type contains \"Any\" (has type \"tuple[str, Mapping[str, Any] | None]\")  [misc]\ncore\\services\\automation_service.py:62: error: Expression type contains \"Any\" (has type \"Mapping[str, Any] | None\")  [misc]\ncore\\services\\automation_service.py:66: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\automation_service.py:68: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\automation_service.py:76: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ncore\\services\\automation_service.py:84: error: Explicit \"Any\" is not allowed  [explicit-any]\ncore\\services\\automation_service.py:102: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:27: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:36: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:42: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:50: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:55: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:58: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:62: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:67: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:74: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:79: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:84: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:87: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:91: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:99: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:138: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:138: error: Expression has type \"Any\"  [misc]\ninterface\\api\\server.py:139: error: Expression has type \"Any\"  [misc]\ninterface\\api\\server.py:141: error: Expression type contains \"Any\" (has type \"Callable[[DecoratedCallable], DecoratedCallable]\")  [misc]\ninterface\\api\\server.py:141: error: Expression type contains \"Any\" (has type \"Callable[[], Coroutine[Any, Any, dict[str, Any]]]\")  [misc]\ninterface\\api\\server.py:142: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:142: error: Type of decorated function contains type \"Any\" (\"Callable[[], Coroutine[Any, Any, dict[str, Any]]]\")  [misc]\ninterface\\api\\server.py:145: error: Expression type contains \"Any\" (has type \"Callable[[DecoratedCallable], DecoratedCallable]\")  [misc]\ninterface\\api\\server.py:145: error: Expression type contains \"Any\" (has type \"type[ScanResponse]\")  [misc]\ninterface\\api\\server.py:152: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\ninterface\\api\\server.py:159: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:166: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\ninterface\\api\\server.py:167: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:180: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:185: error: Expression type contains \"Any\" (has type \"Callable[[DecoratedCallable], DecoratedCallable]\")  [misc]\ninterface\\api\\server.py:192: error: Expression type contains \"Any\" (has type \"Callable[[DecoratedCallable], DecoratedCallable]\")  [misc]\ninterface\\api\\server.py:203: error: Expression type contains \"Any\" (has type \"Callable[[DecoratedCallable], DecoratedCallable]\")  [misc]\ninterface\\api\\server.py:205: error: Expression type contains \"Any\" (has type \"type[BundleUploadResponse]\")  [misc]\ninterface\\api\\server.py:218: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\ninterface\\api\\server.py:222: error: Expression type contains \"Any\" (has type \"Callable[[DecoratedCallable], DecoratedCallable]\")  [misc]\ninterface\\api\\server.py:223: error: Expression type contains \"Any\" (has type \"type[BundleDownloadResponse]\")  [misc]\ninterface\\api\\server.py:233: error: Expression type contains \"Any\" (has type \"Callable[[DecoratedCallable], DecoratedCallable]\")  [misc]\ninterface\\api\\server.py:235: error: Expression type contains \"Any\" (has type \"type[BundleDownloadResponse]\")  [misc]\ninterface\\api\\server.py:252: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:259: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:260: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\api\\server.py:261: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\api\\server.py:262: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:262: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:264: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\api\\server.py:265: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\ninterface\\api\\server.py:266: error: Explicit \"Any\" is not allowed  [explicit-any]\ninterface\\api\\server.py:266: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:268: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:269: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\ninterface\\api\\server.py:270: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nFound 497 errors in 23 files (checked 74 source files)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py:6:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.review\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py:7:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_briefing_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_briefing_service.py:15:6 - error: Import \"x_legatus_acta_schedae_x.core.services.review_guidance_service\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_service.py:7:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_ai_service.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_service\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py:12:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py:17:6 - error: Import \"x_legatus_acta_schedae_x.core.services.automation_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py:20:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.automation\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_automation_service.py:23:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.telemetry\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_card_action_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_card_action_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_card_action_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_card_action_service.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_card_action_service.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.services.card_action_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_card_action_service.py:15:6 - error: Import \"x_legatus_acta_schedae_x.core.services.task_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_card_action_service.py:16:6 - error: Import \"x_legatus_acta_schedae_x.x_cls_legatus_acta_schedae_x\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.review\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_briefing_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:14:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:18:6 - error: Import \"x_legatus_acta_schedae_x.core.services.review_guidance_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:21:6 - error: Import \"x_legatus_acta_schedae_x.interface.cli.main\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:100:10 - error: Import \"x_legatus_acta_schedae_x\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_ai_briefing.py:104:12 - error: Import \"x_legatus_acta_schedae_x.interface.cli.main\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:12:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:13:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:17:6 - error: Import \"x_legatus_acta_schedae_x.core.services.collaboration_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:20:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.collaboration.hub_client\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:24:6 - error: Import \"x_legatus_acta_schedae_x.interface.cli.main\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:249:12 - error: Import \"x_legatus_acta_schedae_x.interface.cli.main\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:329:12 - error: Import \"x_legatus_acta_schedae_x.interface.cli.main\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:402:12 - error: Import \"x_legatus_acta_schedae_x.interface.cli.main\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_cli_collab.py:466:12 - error: Import \"x_legatus_acta_schedae_x.interface.cli.main\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_hub.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_hub.py:11:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.collaboration.hub_client\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_hub.py:15:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.collaboration.store\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_collaboration_service.py:12:6 - error: Import \"x_legatus_acta_schedae_x.core.services.collaboration_service\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:12:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:13:6 - error: Import \"x_legatus_acta_schedae_x.core.services.plugin_bus\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:14:6 - error: Import \"x_legatus_acta_schedae_x.core.services.task_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:15:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.config\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_ai_assistant.py:16:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.telemetry\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.events\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:15:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:16:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:17:6 - error: Import \"x_legatus_acta_schedae_x.core.services.ai_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:18:6 - error: Import \"x_legatus_acta_schedae_x.core.services.plugin_bus\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:19:6 - error: Import \"x_legatus_acta_schedae_x.core.services.task_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:20:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.config\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_plugin_calendar_sync.py:21:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.telemetry\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:6:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:7:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.events\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.review\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.review_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:12:6 - error: Import \"x_legatus_acta_schedae_x.core.services.review_guidance_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_guidance_service.py:15:6 - error: Import \"x_legatus_acta_schedae_x.core.services.review_service\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py:7:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.events\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.review\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.review_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py:12:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_review_service.py:13:6 - error: Import \"x_legatus_acta_schedae_x.core.services.review_service\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.events\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:13:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:14:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.scheduler\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:15:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:16:6 - error: Import \"x_legatus_acta_schedae_x.core.services.scheduler_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:19:6 - error: Import \"x_legatus_acta_schedae_x.core.services.task_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_scheduler_service.py:20:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.telemetry\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py:7:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.events\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py:9:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py:10:6 - error: Import \"x_legatus_acta_schedae_x.core.services.search_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py:11:6 - error: Import \"x_legatus_acta_schedae_x.core.services.task_service\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_search_service.py:12:6 - error: Import \"x_legatus_acta_schedae_x.infrastructure.search\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_task_service.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_task_service.py:7:6 - error: Import \"x_legatus_acta_schedae_x.core.domain\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_task_service.py:8:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.events\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_task_service.py:12:6 - error: Import \"x_legatus_acta_schedae_x.core.domain.task\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_task_service.py:13:6 - error: Import \"x_legatus_acta_schedae_x.core.ports.task_repo\" could not be resolved (reportMissingImports)\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_task_service.py:14:6 - error: Import \"x_legatus_acta_schedae_x.core.services.task_service\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_tui_controller.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\tests\\test_tui_controller.py:5:6 - error: Import \"x_legatus_acta_schedae_x.interface.tui.controller\" could not be resolved (reportMissingImports)\nc:\\x_runner_x\\x_legatus_acta_schedae_x\\x_cls_legatus_acta_schedae_x.py\n  c:\\x_runner_x\\x_legatus_acta_schedae_x\\x_cls_legatus_acta_schedae_x.py:663:40 - error: Argument of type \"set[Any | Unknown | _T@set]\" cannot be assigned to parameter \"iterable\" of type \"Iterable[SupportsRichComparisonT@sorted]\" in function \"sorted\"\n  \u00c2\u00a0\u00c2\u00a0\"set[Any | Unknown | _T@set]\" is not assignable to \"Iterable[SupportsRichComparisonT@sorted]\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type parameter \"_T_co@Iterable\" is covariant, but \"Any | Unknown | _T@set\" is not a subtype of \"SupportsRichComparisonT@sorted\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"Any | Unknown | _T@set\" is not assignable to type \"SupportsRichComparison\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"Any | Unknown | _T@set\" is not assignable to type \"SupportsRichComparison\"\n  \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0Type \"_T@set\" is not assignable to type \"SupportsRichComparison\" (reportArgumentType)\n97 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> adapters\\taskwarrior\\tw_repository.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Iterable, Mapping\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> adapters\\taskwarrior\\tw_repository.py:4:39\n  |\n3 | import importlib\n4 | from collections.abc import Iterable, Mapping\n  |                                       ^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> adapters\\taskwarrior\\tw_repository.py:8:1\n  |\n6 | from typing import Any, cast\n7 |\n8 | from ...core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from ...core.ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> adapters\\taskwarrior\\tw_repository.py:9:1\n   |\n 8 | from ...core.domain.task import Task\n 9 | from ...core.ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 |\n11 | TaskWarriorClient: Any | None\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nANN204 Missing return type annotation for special method `__init__`\n  --> adapters\\taskwarrior\\tw_repository.py:23:9\n   |\n22 | class TaskwarriorRepository(ITaskRepository):\n23 |     def __init__(\n   |         ^^^^^^^^\n24 |         self,\n25 |         data_dir: str | None = None,\n   |\nhelp: Add return type annotation: `None`\n\nDTZ003 `datetime.datetime.utcnow()` used\n   --> adapters\\taskwarrior\\tw_repository.py:108:16\n    |\n107 |     def now(self) -> datetime:\n108 |         return datetime.utcnow()\n    |                ^^^^^^^^^^^^^^^^^\n109 |\n110 |     def _convert(self, tw_task: Mapping[str, Any]) -> Task:\n    |\nhelp: Use `datetime.datetime.now(tz=...)` instead\n\nTC001 Move application import `.core.services.ai_service.AIService` into a type-checking block\n --> app.py:5:39\n  |\n3 | from dataclasses import dataclass\n4 |\n5 | from .core.services.ai_service import AIService\n  |                                       ^^^^^^^^^\n6 | from .core.services.collaboration_service import CollaborationService\n7 | from .core.services.scheduler_service import SchedulerService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.collaboration_service.CollaborationService` into a type-checking block\n --> app.py:6:50\n  |\n5 | from .core.services.ai_service import AIService\n6 | from .core.services.collaboration_service import CollaborationService\n  |                                                  ^^^^^^^^^^^^^^^^^^^^\n7 | from .core.services.scheduler_service import SchedulerService\n8 | from .core.services.search_service import SearchService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.scheduler_service.SchedulerService` into a type-checking block\n --> app.py:7:46\n  |\n5 | from .core.services.ai_service import AIService\n6 | from .core.services.collaboration_service import CollaborationService\n7 | from .core.services.scheduler_service import SchedulerService\n  |                                              ^^^^^^^^^^^^^^^^\n8 | from .core.services.search_service import SearchService\n9 | from .core.services.task_service import TaskService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.search_service.SearchService` into a type-checking block\n  --> app.py:8:43\n   |\n 6 | from .core.services.collaboration_service import CollaborationService\n 7 | from .core.services.scheduler_service import SchedulerService\n 8 | from .core.services.search_service import SearchService\n   |                                           ^^^^^^^^^^^^^\n 9 | from .core.services.task_service import TaskService\n10 | from .infrastructure.config import AppConfig, load_config\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.task_service.TaskService` into a type-checking block\n  --> app.py:9:41\n   |\n 7 | from .core.services.scheduler_service import SchedulerService\n 8 | from .core.services.search_service import SearchService\n 9 | from .core.services.task_service import TaskService\n   |                                         ^^^^^^^^^^^\n10 | from .infrastructure.config import AppConfig, load_config\n11 | from .infrastructure.di import AppContext, build_context\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\domain\\events.py:4:22\n  |\n3 | from dataclasses import dataclass\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Any, Protocol\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.task.Task` into a type-checking block\n --> core\\domain\\events.py:7:19\n  |\n5 | from typing import Any, Protocol\n6 |\n7 | from .task import Task\n  |                   ^^^^\n  |\nhelp: Move into type-checking block\n\nFBT001 Boolean-typed positional argument in function definition\n   --> core\\domain\\review.py:146:30\n    |\n144 |         self.due_at = entry.next_due\n145 |\n146 |     def mark_suspended(self, suspended: bool) -> None:\n    |                              ^^^^^^^^^\n147 |         self.suspended = suspended\n    |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\domain\\task.py:4:29\n  |\n3 | import uuid\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from dataclasses import dataclass, field\n6 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\domain\\task.py:26:15\n   |\n24 |     normalized = priority.lower()\n25 |     if normalized not in VALID_PRIORITIES:\n26 |         raise ValueError(f\"Invalid priority {priority}\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n27 |     return normalized\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> core\\domain\\task.py:26:26\n   |\n24 |     normalized = priority.lower()\n25 |     if normalized not in VALID_PRIORITIES:\n26 |         raise ValueError(f\"Invalid priority {priority}\")\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n27 |     return normalized\n   |\nhelp: Assign to variable; remove f-string literal\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**changes`\n  --> core\\domain\\task.py:96:35\n   |\n94 |         return self.with_tags(remaining)\n95 |\n96 |     def _replace(self, **changes: Any) -> Task:\n   |                                   ^^^\n97 |         data: dict[str, Any] = dict(self.__dict__)\n98 |         data.update(changes)\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:109:19\n    |\n107 |     def validate(self) -> None:\n108 |         if not self.description:\n109 |             raise ValueError(\"Description empty\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\domain\\task.py:109:30\n    |\n107 |     def validate(self) -> None:\n108 |         if not self.description:\n109 |             raise ValueError(\"Description empty\")\n    |                              ^^^^^^^^^^^^^^^^^^^\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:111:19\n    |\n109 |             raise ValueError(\"Description empty\")\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\domain\\task.py:111:30\n    |\n109 |             raise ValueError(\"Description empty\")\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:113:19\n    |\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\domain\\task.py:113:30\n    |\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:115:19\n    |\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\domain\\task.py:115:30\n    |\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Assign to variable; remove string literal\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\ports\\review_repo.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\ports\\review_repo.py:6:1\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.review import ReviewRecord\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.review.ReviewRecord` into a type-checking block\n --> core\\ports\\review_repo.py:6:29\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.review import ReviewRecord\n  |                             ^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> core\\ports\\scheduler.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Callable\n  |                             ^^^^^^^^\n4 | from datetime import datetime\n5 | from typing import Any, Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\ports\\scheduler.py:4:22\n  |\n3 | from collections.abc import Callable\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Any, Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\ports\\search_index.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\ports\\search_index.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\ports\\search_index.py:6:1\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n --> core\\ports\\search_index.py:6:27\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.task import Task\n  |                           ^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\ports\\task_repo.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import datetime\n5 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\ports\\task_repo.py:4:22\n  |\n3 | from collections.abc import Iterable\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\ports\\task_repo.py:7:1\n  |\n5 | from typing import Protocol\n6 |\n7 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n --> core\\ports\\task_repo.py:7:27\n  |\n5 | from typing import Protocol\n6 |\n7 | from ..domain.task import Task\n  |                           ^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\ai_briefing_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.AIService` into a type-checking block\n --> core\\services\\ai_briefing_service.py:7:25\n  |\n5 | from datetime import UTC, datetime\n6 |\n7 | from .ai_service import AIService, TaskSummary\n  |                         ^^^^^^^^^\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.TaskSummary` into a type-checking block\n --> core\\services\\ai_briefing_service.py:7:36\n  |\n5 | from datetime import UTC, datetime\n6 |\n7 | from .ai_service import AIService, TaskSummary\n  |                                    ^^^^^^^^^^^\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_guidance_service.ReviewGuidance` into a type-checking block\n --> core\\services\\ai_briefing_service.py:8:38\n  |\n7 | from .ai_service import AIService, TaskSummary\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |                                      ^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_guidance_service.ReviewGuidanceService` into a type-checking block\n --> core\\services\\ai_briefing_service.py:8:54\n  |\n7 | from .ai_service import AIService, TaskSummary\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |                                                      ^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nE501 Line too long (90 > 88)\n  --> core\\services\\ai_briefing_service.py:23:89\n   |\n22 | class AIBriefingService:\n23 |     \"\"\"Produces consolidated daily briefings blending AI summaries and review guidance.\"\"\"\n   |                                                                                         ^^\n24 |\n25 |     def __init__(\n   |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\ai_service.py:4:29\n  |\n3 | from collections import Counter\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from dataclasses import dataclass\n6 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\ai_service.py:8:1\n   |\n 6 | from datetime import UTC, datetime, timedelta\n 7 |\n 8 | from ..domain.events import EventDispatcher\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n  --> core\\services\\ai_service.py:8:29\n   |\n 6 | from datetime import UTC, datetime, timedelta\n 7 |\n 8 | from ..domain.events import EventDispatcher\n   |                             ^^^^^^^^^^^^^^^\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\ai_service.py:9:1\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n  --> core\\services\\ai_service.py:9:27\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n   |                           ^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\ai_service.py:10:1\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\ai_service.py:10:31\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nPERF401 Use a list comprehension to create a transformed list\n   --> core\\services\\ai_service.py:127:13\n    |\n125 |           upcoming_rows: list[UpcomingTask] = []\n126 |           for task in candidates[:count]:\n127 | /             upcoming_rows.append(\n128 | |                 UpcomingTask(\n129 | |                     task_id=task.id,\n130 | |                     description=task.description,\n131 | |                     due=task.due,\n132 | |                     priority=task.priority,\n133 | |                 )\n134 | |             )\n    | |_____________^\n135 |           return upcoming_rows\n    |\nhelp: Replace for loop with list comprehension\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> core\\services\\automation_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Mapping\n  |                             ^^^^^^^\n4 | from datetime import UTC, datetime\n5 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\automation_service.py:7:1\n  |\n5 | from typing import Any\n6 |\n7 | from ...infrastructure.automation import AutomationWebhookClient\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ...infrastructure.telemetry import TelemetryClient\n9 | from ..domain import events\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.automation.AutomationWebhookClient` into a type-checking block\n --> core\\services\\automation_service.py:7:42\n  |\n5 | from typing import Any\n6 |\n7 | from ...infrastructure.automation import AutomationWebhookClient\n  |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ...infrastructure.telemetry import TelemetryClient\n9 | from ..domain import events\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\automation_service.py:8:1\n   |\n 7 | from ...infrastructure.automation import AutomationWebhookClient\n 8 | from ...infrastructure.telemetry import TelemetryClient\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.telemetry.TelemetryClient` into a type-checking block\n  --> core\\services\\automation_service.py:8:41\n   |\n 7 | from ...infrastructure.automation import AutomationWebhookClient\n 8 | from ...infrastructure.telemetry import TelemetryClient\n   |                                         ^^^^^^^^^^^^^^^\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\automation_service.py:9:1\n   |\n 7 | from ...infrastructure.automation import AutomationWebhookClient\n 8 | from ...infrastructure.telemetry import TelemetryClient\n 9 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n11 | from .ai_service import AIService, TaskSummary\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\automation_service.py:10:1\n   |\n 8 | from ...infrastructure.telemetry import TelemetryClient\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from .ai_service import AIService, TaskSummary\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\automation_service.py:10:31\n   |\n 8 | from ...infrastructure.telemetry import TelemetryClient\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n11 | from .ai_service import AIService, TaskSummary\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.AIService` into a type-checking block\n  --> core\\services\\automation_service.py:11:25\n   |\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n11 | from .ai_service import AIService, TaskSummary\n   |                         ^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.TaskSummary` into a type-checking block\n  --> core\\services\\automation_service.py:11:36\n   |\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n11 | from .ai_service import AIService, TaskSummary\n   |                                    ^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\card_action_service.py:7:1\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\card_action_service.py:7:1\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...x_cls_legatus_acta_schedae_x.Notecard` into a type-checking block\n --> core\\services\\card_action_service.py:7:45\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  |                                             ^^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `...x_cls_legatus_acta_schedae_x.Storage` into a type-checking block\n --> core\\services\\card_action_service.py:7:55\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  |                                                       ^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\card_action_service.py:8:1\n   |\n 7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n 8 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain.events import EventDispatcher\n10 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\card_action_service.py:9:1\n   |\n 7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n  --> core\\services\\card_action_service.py:9:29\n   |\n 7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n   |                             ^^^^^^^^^^^^^^^\n10 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\card_action_service.py:10:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n10 | from ..services.task_service import TaskService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..services.task_service.TaskService` into a type-checking block\n  --> core\\services\\card_action_service.py:10:37\n   |\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n10 | from ..services.task_service import TaskService\n   |                                     ^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\card_action_service.py:123:15\n    |\n121 |             )\n122 |\n123 |         raise ValueError(f\"Unsupported task update action '{action}'\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |\n125 |     @staticmethod\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\card_action_service.py:123:26\n    |\n121 |             )\n122 |\n123 |         raise ValueError(f\"Unsupported task update action '{action}'\")\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |\n125 |     @staticmethod\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\card_action_service.py:129:19\n    |\n127 |         normalized = (task_update or \"\").strip().lower() or \"complete\"\n128 |         if normalized not in {\"complete\", \"none\"}:\n129 |             raise ValueError(\"task_update must be one of: 'complete', 'none'\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n130 |         return normalized\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\services\\card_action_service.py:129:30\n    |\n127 |         normalized = (task_update or \"\").strip().lower() or \"complete\"\n128 |         if normalized not in {\"complete\", \"none\"}:\n129 |             raise ValueError(\"task_update must be one of: 'complete', 'none'\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n130 |         return normalized\n    |\nhelp: Assign to variable; remove string literal\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> core\\services\\card_action_service.py:135:55\n    |\n133 |     def _extract_task_id(card: Notecard) -> str | None:\n134 |         for tag in card.tags:\n135 |             if tag.startswith(\"task:\") and len(tag) > 5:\n    |                                                       ^\n136 |                 return tag.split(\":\", 1)[1]\n137 |         if card.symbol_data:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> core\\services\\card_action_service.py:144:20\n    |\n142 |                 if task_param:\n143 |                     return task_param[0]\n144 |             except Exception:\n    |                    ^^^^^^^^^\n145 |                 return None\n146 |         return None\n    |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\collaboration_service.py:6:29\n  |\n4 | import json\n5 | import os\n6 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n7 | from dataclasses import asdict, dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\collaboration_service.py:6:39\n  |\n4 | import json\n5 | import os\n6 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n7 | from dataclasses import asdict, dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\collaboration_service.py:16:1\n   |\n14 | from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\n15 |\n16 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 | from ..domain.task import Task\n18 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\collaboration_service.py:17:1\n   |\n16 | from ..domain import events\n17 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\collaboration_service.py:18:1\n   |\n16 | from ..domain import events\n17 | from ..domain.task import Task\n18 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\collaboration_service.py:18:31\n   |\n16 | from ..domain import events\n17 | from ..domain.task import Task\n18 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\collaboration_service.py:80:19\n   |\n78 |         src_path = Path(source)\n79 |         if not src_path.exists():\n80 |             raise FileNotFoundError(f\"Sync bundle not found: {src_path}\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |         bundle = json.loads(src_path.read_text(encoding=\"utf-8\"))\n82 |         salt_b64 = bundle.get(\"salt\")\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> core\\services\\collaboration_service.py:80:37\n   |\n78 |         src_path = Path(source)\n79 |         if not src_path.exists():\n80 |             raise FileNotFoundError(f\"Sync bundle not found: {src_path}\")\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |         bundle = json.loads(src_path.read_text(encoding=\"utf-8\"))\n82 |         salt_b64 = bundle.get(\"salt\")\n   |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n  --> core\\services\\collaboration_service.py:85:13\n   |\n83 |         ciphertext = bundle.get(\"ciphertext\")\n84 |         if not isinstance(salt_b64, str) or not isinstance(ciphertext, str):\n85 |             raise ValueError(\"Malformed sync bundle\")\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n86 |         salt = base64.b64decode(salt_b64)\n87 |         decrypted = self._decrypt(ciphertext.encode(\"utf-8\"), passphrase, salt)\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\collaboration_service.py:85:19\n   |\n83 |         ciphertext = bundle.get(\"ciphertext\")\n84 |         if not isinstance(salt_b64, str) or not isinstance(ciphertext, str):\n85 |             raise ValueError(\"Malformed sync bundle\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n86 |         salt = base64.b64decode(salt_b64)\n87 |         decrypted = self._decrypt(ciphertext.encode(\"utf-8\"), passphrase, salt)\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\collaboration_service.py:85:30\n   |\n83 |         ciphertext = bundle.get(\"ciphertext\")\n84 |         if not isinstance(salt_b64, str) or not isinstance(ciphertext, str):\n85 |             raise ValueError(\"Malformed sync bundle\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^\n86 |         salt = base64.b64decode(salt_b64)\n87 |         decrypted = self._decrypt(ciphertext.encode(\"utf-8\"), passphrase, salt)\n   |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\collaboration_service.py:93:19\n   |\n91 |             json.JSONDecodeError\n92 |         ) as exc:  # pragma: no cover - defensive guard\n93 |             raise ValueError(\"Unable to decode sync payload\") from exc\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n94 |         imported_tasks: list[Task] = []\n95 |         for record in records:\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\collaboration_service.py:93:30\n   |\n91 |             json.JSONDecodeError\n92 |         ) as exc:  # pragma: no cover - defensive guard\n93 |             raise ValueError(\"Unable to decode sync payload\") from exc\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n94 |         imported_tasks: list[Task] = []\n95 |         for record in records:\n   |\nhelp: Assign to variable; remove string literal\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\plugin_bus.py:5:29\n  |\n3 | import inspect\n4 | import logging\n5 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n6 | from dataclasses import dataclass\n7 | from importlib import import_module\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\plugin_bus.py:5:39\n  |\n3 | import inspect\n4 | import logging\n5 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n6 | from dataclasses import dataclass\n7 | from importlib import import_module\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:10:1\n   |\n 8 | from typing import Any, Protocol, cast\n 9 |\n10 | from ...infrastructure.config import AppConfig\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.config.AppConfig` into a type-checking block\n  --> core\\services\\plugin_bus.py:10:38\n   |\n 8 | from typing import Any, Protocol, cast\n 9 |\n10 | from ...infrastructure.config import AppConfig\n   |                                      ^^^^^^^^^\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:11:1\n   |\n10 | from ...infrastructure.config import AppConfig\n11 | from ...infrastructure.telemetry import TelemetryClient\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.telemetry.TelemetryClient` into a type-checking block\n  --> core\\services\\plugin_bus.py:11:41\n   |\n10 | from ...infrastructure.config import AppConfig\n11 | from ...infrastructure.telemetry import TelemetryClient\n   |                                         ^^^^^^^^^^^^^^^\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:12:1\n   |\n10 | from ...infrastructure.config import AppConfig\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:13:1\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:13:1\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n  --> core\\services\\plugin_bus.py:13:29\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |                             ^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `..domain.events.EventSubscriber` into a type-checking block\n  --> core\\services\\plugin_bus.py:13:46\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |                                              ^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:14:1\n   |\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n15 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..services.ai_service.AIService` into a type-checking block\n  --> core\\services\\plugin_bus.py:14:35\n   |\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n   |                                   ^^^^^^^^^\n15 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:15:1\n   |\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n16 |\n17 | DomainEventType = (\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..services.task_service.TaskService` into a type-checking block\n  --> core\\services\\plugin_bus.py:15:37\n   |\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |                                     ^^^^^^^^^^^\n16 |\n17 | DomainEventType = (\n   |\nhelp: Move into type-checking block\n\nPLR0913 Too many arguments in function definition (6 > 5)\n  --> core\\services\\plugin_bus.py:43:9\n   |\n42 | class PluginContext:\n43 |     def __init__(\n   |         ^^^^^^^^\n44 |         self,\n45 |         plugin_name: str,\n   |\n\nSIM108 Use ternary operator `plugin_instance = plugin_obj() if inspect.isclass(plugin_obj) else plugin_obj` instead of `if`-`else`-block\n   --> core\\services\\plugin_bus.py:171:9\n    |\n169 |               plugin_obj = module.plugin\n170 |\n171 | /         if inspect.isclass(plugin_obj):\n172 | |             plugin_instance = plugin_obj()\n173 | |         else:\n174 | |             plugin_instance = plugin_obj\n    | |________________________________________^\n175 |\n176 |           if not hasattr(plugin_instance, \"setup\"):\n    |\nhelp: Replace `if`-`else`-block with `plugin_instance = plugin_obj() if inspect.isclass(plugin_obj) else plugin_obj`\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\review_guidance_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\services\\review_guidance_service.py:5:22\n  |\n3 | from collections.abc import Sequence\n4 | from dataclasses import dataclass\n5 | from datetime import datetime, timedelta\n  |                      ^^^^^^^^\n6 |\n7 | from ..domain.review import ReviewRecord\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.timedelta` into a type-checking block\n --> core\\services\\review_guidance_service.py:5:32\n  |\n3 | from collections.abc import Sequence\n4 | from dataclasses import dataclass\n5 | from datetime import datetime, timedelta\n  |                                ^^^^^^^^^\n6 |\n7 | from ..domain.review import ReviewRecord\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\review_guidance_service.py:7:1\n  |\n5 | from datetime import datetime, timedelta\n6 |\n7 | from ..domain.review import ReviewRecord\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.review.ReviewRecord` into a type-checking block\n --> core\\services\\review_guidance_service.py:7:29\n  |\n5 | from datetime import datetime, timedelta\n6 |\n7 | from ..domain.review import ReviewRecord\n  |                             ^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\review_guidance_service.py:8:1\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n --> core\\services\\review_guidance_service.py:8:27\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n  |                           ^^^^\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_service.ReviewPlanItem` into a type-checking block\n --> core\\services\\review_guidance_service.py:9:29\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |                             ^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_service.ReviewService` into a type-checking block\n --> core\\services\\review_guidance_service.py:9:45\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |                                             ^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> core\\services\\review_guidance_service.py:75:31\n   |\n73 |                 score += 1.25\n74 |                 reasons.append(\"task due\")\n75 |             elif delta_days < 2:\n   |                               ^\n76 |                 score += 0.75\n77 |                 reasons.append(\"task due soon\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> core\\services\\review_guidance_service.py:88:33\n   |\n86 |             reasons.append(\"recent card scan\")\n87 |\n88 |         if record.repetitions < 3:\n   |                                 ^\n89 |             score += 0.3\n90 |             reasons.append(f\"{record.repetitions} reps\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable\n  --> core\\services\\review_guidance_service.py:92:33\n   |\n90 |             reasons.append(f\"{record.repetitions} reps\")\n91 |\n92 |         if record.ease_factor < 2.0:\n   |                                 ^^^\n93 |             score += 0.4\n94 |             reasons.append(\"low ease\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> core\\services\\review_guidance_service.py:113:27\n    |\n111 |         if task.status == \"completed\":\n112 |             return \"confirm archive\"\n113 |         if overdue_days > 2:\n    |                           ^\n114 |             return \"rescue overdue review\"\n115 |         if task.priority == \"high\":\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable\n   --> core\\services\\review_guidance_service.py:117:27\n    |\n115 |         if task.priority == \"high\":\n116 |             return \"review then commit\"\n117 |         if overdue_days > 0.5:\n    |                           ^^^\n118 |             return \"refresh context\"\n119 |         return \"review next\"\n    |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:8:1\n   |\n 6 | from typing import Any, cast\n 7 |\n 8 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:9:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:9:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:10:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n  --> core\\services\\review_service.py:10:27\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n   |                           ^^^^\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:11:1\n   |\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.review_repo.IReviewRepository` into a type-checking block\n  --> core\\services\\review_service.py:11:33\n   |\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   |                                 ^^^^^^^^^^^^^^^^^\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:12:1\n   |\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\review_service.py:12:31\n   |\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> core\\services\\review_service.py:35:9\n   |\n34 | class ReviewService:\n35 |     def __init__(\n   |         ^^^^^^^^\n36 |         self,\n37 |         repository: IReviewRepository,\n   |\nhelp: Add return type annotation: `None`\n\nC401 Unnecessary generator (rewrite as a set comprehension)\n   --> core\\services\\review_service.py:133:22\n    |\n131 |         moment = now or _now()\n132 |         results: list[ReviewPlanItem] = []\n133 |         tag_filter = set(t.lower() for t in tags) if tags else None\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n134 |         for record in self._repository.list():\n135 |             if record.suspended:\n    |\nhelp: Rewrite as a set comprehension\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> core\\services\\review_service.py:166:37\n    |\n164 |         context: Mapping[str, Any] | None = None,\n165 |     ) -> ReviewRecord:\n166 |         if quality < 0 or quality > 5:\n    |                                     ^\n167 |             raise ValueError(\"quality must be between 0 and 5\")\n168 |         reviewed_time = reviewed_at or _now()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\review_service.py:167:19\n    |\n165 |     ) -> ReviewRecord:\n166 |         if quality < 0 or quality > 5:\n167 |             raise ValueError(\"quality must be between 0 and 5\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n168 |         reviewed_time = reviewed_at or _now()\n169 |         if reviewed_time.tzinfo is None:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\services\\review_service.py:167:30\n    |\n165 |     ) -> ReviewRecord:\n166 |         if quality < 0 or quality > 5:\n167 |             raise ValueError(\"quality must be between 0 and 5\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n168 |         reviewed_time = reviewed_at or _now()\n169 |         if reviewed_time.tzinfo is None:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\review_service.py:173:19\n    |\n171 |         task = self._task_repository.get(task_id)\n172 |         if task is None:\n173 |             raise KeyError(f\"Task {task_id} not found\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n174 |         record = self._repository.get(task_id)\n175 |         if record is None:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\review_service.py:173:28\n    |\n171 |         task = self._task_repository.get(task_id)\n172 |         if task is None:\n173 |             raise KeyError(f\"Task {task_id} not found\")\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n174 |         record = self._repository.get(task_id)\n175 |         if record is None:\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> core\\services\\review_service.py:181:22\n    |\n179 |         )\n180 |         ease = max(1.3, ease)\n181 |         if quality < 3:\n    |                      ^\n182 |             repetitions = 0\n183 |             interval_days = 1.0\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> core\\services\\review_service.py:188:33\n    |\n186 |             if repetitions == 1:\n187 |                 interval_days = 1.0\n188 |             elif repetitions == 2:\n    |                                 ^\n189 |                 interval_days = 6.0\n190 |             else:\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> core\\services\\review_service.py:207:37\n    |\n205 |         return self._repository.save(record)\n206 |\n207 |     def suspend(self, task_id: str, suspended: bool) -> ReviewRecord:\n    |                                     ^^^^^^^^^\n208 |         task = self._task_repository.get(task_id)\n209 |         if task is None:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\review_service.py:210:19\n    |\n208 |         task = self._task_repository.get(task_id)\n209 |         if task is None:\n210 |             raise KeyError(f\"Task {task_id} not found\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n211 |         record = self._repository.get(task_id)\n212 |         if record is None:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\review_service.py:210:28\n    |\n208 |         task = self._task_repository.get(task_id)\n209 |         if task is None:\n210 |             raise KeyError(f\"Task {task_id} not found\")\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n211 |         record = self._repository.get(task_id)\n212 |         if record is None:\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR0911 Too many return statements (7 > 6)\n   --> core\\services\\review_service.py:238:9\n    |\n237 |     @staticmethod\n238 |     def _infer_quality_from_scan(event: events.CardScanned) -> int:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n239 |         metadata = event.metadata or {}\n240 |         if event.task_error:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`\n   --> core\\services\\review_service.py:266:28\n    |\n265 |     @staticmethod\n266 |     def _coerce_int(value: Any) -> int | None:\n    |                            ^^^\n267 |         if isinstance(value, bool):\n268 |             return 1 if value else 0\n    |\n\nRUF046 Value being cast to `int` is already an integer\n   --> core\\services\\review_service.py:270:20\n    |\n268 |             return 1 if value else 0\n269 |         if isinstance(value, (int, float)):\n270 |             return int(round(value))\n    |                    ^^^^^^^^^^^^^^^^^\n271 |         if isinstance(value, str):\n272 |             try:\n    |\nhelp: Remove unnecessary `int` call\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`\n   --> core\\services\\review_service.py:285:29\n    |\n283 |             return {}\n284 |\n285 |         def _convert(value: Any) -> Any:\n    |                             ^^^\n286 |             if isinstance(value, (str, int, float, bool)) or value is None:\n287 |                 return value\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_convert`\n   --> core\\services\\review_service.py:285:37\n    |\n283 |             return {}\n284 |\n285 |         def _convert(value: Any) -> Any:\n    |                                     ^^^\n286 |             if isinstance(value, (str, int, float, bool)) or value is None:\n287 |                 return value\n    |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:5:1\n  |\n3 | from datetime import UTC, datetime\n4 |\n5 | from ...infrastructure.telemetry import TelemetryClient\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.telemetry.TelemetryClient` into a type-checking block\n --> core\\services\\scheduler_service.py:5:41\n  |\n3 | from datetime import UTC, datetime\n4 |\n5 | from ...infrastructure.telemetry import TelemetryClient\n  |                                         ^^^^^^^^^^^^^^^\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:6:1\n  |\n5 | from ...infrastructure.telemetry import TelemetryClient\n6 | from ..domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:7:1\n  |\n5 | from ...infrastructure.telemetry import TelemetryClient\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n --> core\\services\\scheduler_service.py:7:29\n  |\n5 | from ...infrastructure.telemetry import TelemetryClient\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |                             ^^^^^^^^^^^^^^^\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:8:1\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.scheduler.IScheduler` into a type-checking block\n --> core\\services\\scheduler_service.py:8:31\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n  |                               ^^^^^^^^^^\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:9:1\n  |\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n --> core\\services\\scheduler_service.py:9:31\n  |\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  |                               ^^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\search_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\search_service.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from dataclasses import dataclass\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\search_service.py:6:1\n  |\n4 | from dataclasses import dataclass\n5 |\n6 | from ..domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..domain.events import EventDispatcher\n8 | from ..domain.task import Task\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\search_service.py:7:1\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from ..ports.search_index import ISearchIndex\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n --> core\\services\\search_service.py:7:29\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |                             ^^^^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from ..ports.search_index import ISearchIndex\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\search_service.py:8:1\n   |\n 6 | from ..domain import events\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n  --> core\\services\\search_service.py:8:27\n   |\n 6 | from ..domain import events\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n   |                           ^^^^\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\search_service.py:9:1\n   |\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.search_index.ISearchIndex` into a type-checking block\n  --> core\\services\\search_service.py:9:34\n   |\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n   |                                  ^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\search_service.py:10:1\n   |\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\search_service.py:10:31\n   |\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\task_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from datetime import datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\task_service.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from datetime import datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\services\\task_service.py:4:22\n  |\n3 | from collections.abc import Iterable, Sequence\n4 | from datetime import datetime, timedelta\n  |                      ^^^^^^^^\n5 |\n6 | from ..domain import events\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.timedelta` into a type-checking block\n --> core\\services\\task_service.py:4:32\n  |\n3 | from collections.abc import Iterable, Sequence\n4 | from datetime import datetime, timedelta\n  |                                ^^^^^^^^^\n5 |\n6 | from ..domain import events\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\task_service.py:6:1\n  |\n4 | from datetime import datetime, timedelta\n5 |\n6 | from ..domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..domain.task import Task\n8 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\task_service.py:7:1\n  |\n6 | from ..domain import events\n7 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\task_service.py:8:1\n  |\n6 | from ..domain import events\n7 | from ..domain.task import Task\n8 | from ..ports.task_repo import ITaskRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n --> core\\services\\task_service.py:8:31\n  |\n6 | from ..domain import events\n7 | from ..domain.task import Task\n8 | from ..ports.task_repo import ITaskRepository\n  |                               ^^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> core\\services\\task_service.py:12:9\n   |\n11 | class TaskService:\n12 |     def __init__(\n   |         ^^^^^^^^\n13 |         self, repo: ITaskRepository, dispatcher: events.EventDispatcher\n14 |     ):\n   |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\task_service.py:61:19\n   |\n59 |     ) -> Task:\n60 |         if until is None and delta is None:\n61 |             raise ValueError(\"Provide either until or delta\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n62 |         task = self._get_task(task_id)\n63 |         if until is not None:\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\task_service.py:61:30\n   |\n59 |     ) -> Task:\n60 |         if until is None and delta is None:\n61 |             raise ValueError(\"Provide either until or delta\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n62 |         task = self._get_task(task_id)\n63 |         if until is not None:\n   |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\task_service.py:67:23\n   |\n65 |         else:\n66 |             if delta is None:\n67 |                 raise ValueError(\"Delta required when until is not provided\")\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |             updated = task.deferred(delta)\n69 |         updated.validate()\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\task_service.py:67:34\n   |\n65 |         else:\n66 |             if delta is None:\n67 |                 raise ValueError(\"Delta required when until is not provided\")\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |             updated = task.deferred(delta)\n69 |         updated.validate()\n   |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\task_service.py:99:19\n    |\n 97 |         task = self._repo.get(task_id)\n 98 |         if not task:\n 99 |             raise KeyError(f\"Task {task_id} not found\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n100 |         return task\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\task_service.py:99:28\n    |\n 97 |         task = self._repo.get(task_id)\n 98 |         if not task:\n 99 |             raise KeyError(f\"Task {task_id} not found\")\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n100 |         return task\n    |\nhelp: Assign to variable; remove f-string literal\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> infrastructure\\automation\\webhook_client.py:4:29\n  |\n3 | import logging\n4 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n5 | from dataclasses import dataclass\n6 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> infrastructure\\automation\\webhook_client.py:4:38\n  |\n3 | import logging\n4 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n5 | from dataclasses import dataclass\n6 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n  --> infrastructure\\automation\\webhook_client.py:70:18\n   |\n68 |                 )\n69 |                 continue\n70 |             ok = 200 <= response.status_code < 300\n   |                  ^^^\n71 |             if not ok:\n72 |                 logger.warning(\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `300` with a constant variable\n  --> infrastructure\\automation\\webhook_client.py:70:48\n   |\n68 |                 )\n69 |                 continue\n70 |             ok = 200 <= response.status_code < 300\n   |                                                ^^^\n71 |             if not ok:\n72 |                 logger.warning(\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> infrastructure\\automation\\webhook_client.py:91:9\n   |\n90 |       def __del__(self) -> None:  # pragma: no cover - defensive cleanup\n91 | /         try:\n92 | |             self.close()\n93 | |         except Exception:  # pragma: no cover - best effort cleanup\n94 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> infrastructure\\automation\\webhook_client.py:93:9\n   |\n91 |           try:\n92 |               self.close()\n93 | /         except Exception:  # pragma: no cover - best effort cleanup\n94 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> infrastructure\\automation\\webhook_client.py:93:16\n   |\n91 |         try:\n92 |             self.close()\n93 |         except Exception:  # pragma: no cover - best effort cleanup\n   |                ^^^^^^^^^\n94 |             pass\n   |\n\nINP001 File `infrastructure\\collaboration\\hub_client.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> infrastructure\\collaboration\\hub_client.py:1:1\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> infrastructure\\collaboration\\hub_client.py:8:21\n   |\n 6 | from dataclasses import dataclass\n 7 | from datetime import datetime\n 8 | from pathlib import Path\n   |                     ^^^^\n 9 | from types import TracebackType\n10 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `types.TracebackType` into a type-checking block\n  --> infrastructure\\collaboration\\hub_client.py:9:19\n   |\n 7 | from datetime import datetime\n 8 | from pathlib import Path\n 9 | from types import TracebackType\n   |                   ^^^^^^^^^^^^^\n10 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `transport`\n  --> infrastructure\\collaboration\\hub_client.py:37:20\n   |\n35 |         *,\n36 |         timeout: float = 10.0,\n37 |         transport: Any | None = None,\n   |                    ^^^^^^^^^^\n38 |     ) -> None:\n39 |         self._client = httpx.Client(\n   |\n\nPYI034 `__enter__` methods in classes like `CollaborationHubClient` usually return `self` at runtime\n  --> infrastructure\\collaboration\\hub_client.py:46:9\n   |\n44 |         self._client.close()\n45 |\n46 |     def __enter__(self) -> CollaborationHubClient:\n   |         ^^^^^^^^^\n47 |         return self\n   |\nhelp: Use `Self` as return type\n\nPLR2004 Magic value used in comparison, consider replacing `404` with a constant variable\n  --> infrastructure\\collaboration\\hub_client.py:78:36\n   |\n76 |     def fetch_latest_bundle(self) -> BundleDownloadResult | None:\n77 |         response = self._client.get(\"/api/collab/bundles/latest\")\n78 |         if response.status_code == 404:\n   |                                    ^^^\n79 |             return None\n80 |         response.raise_for_status()\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `404` with a constant variable\n  --> infrastructure\\collaboration\\hub_client.py:85:36\n   |\n83 |     def fetch_bundle(self, bundle_id: str) -> BundleDownloadResult | None:\n84 |         response = self._client.get(f\"/api/collab/bundles/{bundle_id}\")\n85 |         if response.status_code == 404:\n   |                                    ^^^\n86 |             return None\n87 |         response.raise_for_status()\n   |\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:104:21\n    |\n102 |             for item in payload_list:\n103 |                 if not isinstance(item, Mapping):\n104 |                     raise ValueError(\"Unexpected bundle list entry\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:104:27\n    |\n102 |             for item in payload_list:\n103 |                 if not isinstance(item, Mapping):\n104 |                     raise ValueError(\"Unexpected bundle list entry\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:104:38\n    |\n102 |             for item in payload_list:\n103 |                 if not isinstance(item, Mapping):\n104 |                     raise ValueError(\"Unexpected bundle list entry\")\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:107:15\n    |\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n107 |         raise ValueError(\"Unexpected bundle list payload\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n108 |\n109 |     def prune_bundles(\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:107:26\n    |\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n107 |         raise ValueError(\"Unexpected bundle list payload\")\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n108 |\n109 |     def prune_bundles(\n    |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:118:13\n    |\n116 |         payload = response.json()\n117 |         if not isinstance(payload, Mapping):\n118 |             raise ValueError(\"Unexpected prune payload\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n119 |         payload_mapping = cast(\"Mapping[str, Any]\", payload)\n120 |         removed_raw = payload_mapping.get(\"removed\", [])\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:118:19\n    |\n116 |         payload = response.json()\n117 |         if not isinstance(payload, Mapping):\n118 |             raise ValueError(\"Unexpected prune payload\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n119 |         payload_mapping = cast(\"Mapping[str, Any]\", payload)\n120 |         removed_raw = payload_mapping.get(\"removed\", [])\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:118:30\n    |\n116 |         payload = response.json()\n117 |         if not isinstance(payload, Mapping):\n118 |             raise ValueError(\"Unexpected prune payload\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n119 |         payload_mapping = cast(\"Mapping[str, Any]\", payload)\n120 |         removed_raw = payload_mapping.get(\"removed\", [])\n    |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:123:13\n    |\n121 |         remaining_raw = payload_mapping.get(\"remaining\", 0)\n122 |         if not isinstance(removed_raw, list):\n123 |             raise ValueError(\"Unexpected removed bundles payload\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |         removed_items: list[Any] = list(removed_raw)\n125 |         removed: list[BundleUploadResult] = []\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:123:19\n    |\n121 |         remaining_raw = payload_mapping.get(\"remaining\", 0)\n122 |         if not isinstance(removed_raw, list):\n123 |             raise ValueError(\"Unexpected removed bundles payload\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |         removed_items: list[Any] = list(removed_raw)\n125 |         removed: list[BundleUploadResult] = []\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:123:30\n    |\n121 |         remaining_raw = payload_mapping.get(\"remaining\", 0)\n122 |         if not isinstance(removed_raw, list):\n123 |             raise ValueError(\"Unexpected removed bundles payload\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |         removed_items: list[Any] = list(removed_raw)\n125 |         removed: list[BundleUploadResult] = []\n    |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:128:17\n    |\n126 |         for item in removed_items:\n127 |             if not isinstance(item, Mapping):\n128 |                 raise ValueError(\"Unexpected prune entry\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n129 |             removed.append(self._parse_upload(self._to_str_dict(item)))\n130 |         remaining = int(remaining_raw)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:128:23\n    |\n126 |         for item in removed_items:\n127 |             if not isinstance(item, Mapping):\n128 |                 raise ValueError(\"Unexpected prune entry\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n129 |             removed.append(self._parse_upload(self._to_str_dict(item)))\n130 |         remaining = int(remaining_raw)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:128:34\n    |\n126 |         for item in removed_items:\n127 |             if not isinstance(item, Mapping):\n128 |                 raise ValueError(\"Unexpected prune entry\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n129 |             removed.append(self._parse_upload(self._to_str_dict(item)))\n130 |         remaining = int(remaining_raw)\n    |\nhelp: Assign to variable; remove string literal\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`\n   --> infrastructure\\collaboration\\hub_client.py:166:32\n    |\n165 |     @staticmethod\n166 |     def _parse_datetime(value: Any) -> datetime:\n    |                                ^^^\n167 |         if isinstance(value, datetime):\n168 |             return value\n    |\n\nDTZ901 Use of `datetime.datetime.min` without timezone information\n   --> infrastructure\\collaboration\\hub_client.py:178:16\n    |\n176 |                     return parsed\n177 |                 return parsed\n178 |         return datetime.min\n    |                ^^^^^^^^^^^^\n179 |\n180 |     @staticmethod\n    |\nhelp: Replace with `datetime.datetime.min.replace(tzinfo=...)`\n\nINP001 File `infrastructure\\collaboration\\store.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> infrastructure\\collaboration\\store.py:1:1\n\nTC003 Move standard library import `builtins` into a type-checking block\n --> infrastructure\\collaboration\\store.py:3:8\n  |\n1 | from __future__ import annotations\n2 |\n3 | import builtins\n  |        ^^^^^^^^\n4 | import json\n5 | from collections.abc import Iterable, Mapping, Sequence\n  |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> infrastructure\\collaboration\\store.py:26:9\n   |\n24 |     \"\"\"Persist encrypted collaboration bundles for later retrieval.\"\"\"\n25 |\n26 |     def __init__(self, directory: str | Path):\n   |         ^^^^^^^^\n27 |         self._directory = Path(directory)\n28 |         self._directory.mkdir(parents=True, exist_ok=True)\n   |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> infrastructure\\collaboration\\store.py:87:19\n   |\n85 |     def prune(self, keep: int) -> builtins.list[StoredBundle]:\n86 |         if keep < 0:\n87 |             raise ValueError(\"keep must be non-negative\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n88 |         entries = list(self._iter_entries())\n89 |         if not entries:\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> infrastructure\\collaboration\\store.py:87:30\n   |\n85 |     def prune(self, keep: int) -> builtins.list[StoredBundle]:\n86 |         if keep < 0:\n87 |             raise ValueError(\"keep must be non-negative\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n88 |         entries = list(self._iter_entries())\n89 |         if not entries:\n   |\nhelp: Assign to variable; remove string literal\n\nSIM105 Use `contextlib.suppress(FileNotFoundError)` instead of `try`-`except`-`pass`\n   --> infrastructure\\collaboration\\store.py:105:13\n    |\n103 |           ]\n104 |           for bundle in removed_bundles:\n105 | /             try:\n106 | |                 bundle.path.unlink()\n107 | |             except FileNotFoundError:\n108 | |                 pass\n    | |____________________^\n109 |           self._write_entries(keep_entries)\n110 |           return removed_bundles\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(FileNotFoundError): ...`\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> infrastructure\\config.py:4:29\n  |\n3 | import os\n4 | from collections.abc import Mapping\n  |                             ^^^^^^^\n5 | from dataclasses import dataclass, field\n6 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nFBT001 Boolean-typed positional argument in function definition\n  --> infrastructure\\config.py:13:35\n   |\n13 | def _read_bool(value: str | None, default: bool = False) -> bool:\n   |                                   ^^^^^^^\n14 |     if value is None:\n15 |         return default\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> infrastructure\\config.py:13:35\n   |\n13 | def _read_bool(value: str | None, default: bool = False) -> bool:\n   |                                   ^^^^^^^\n14 |     if value is None:\n15 |         return default\n   |\n\nC901 `load_config` is too complex (19 > 10)\n  --> infrastructure\\config.py:87:5\n   |\n87 | def load_config(env: Mapping[str, str] | None = None) -> AppConfig:\n   |     ^^^^^^^^^^^\n88 |     source_env: Mapping[str, str] = env if env is not None else os.environ\n89 |     overrides: dict[str, str] = {}\n   |\n\nPLR0912 Too many branches (18 > 12)\n  --> infrastructure\\config.py:87:5\n   |\n87 | def load_config(env: Mapping[str, str] | None = None) -> AppConfig:\n   |     ^^^^^^^^^^^\n88 |     source_env: Mapping[str, str] = env if env is not None else os.environ\n89 |     overrides: dict[str, str] = {}\n   |\n\nPLR0915 Too many statements (59 > 50)\n  --> infrastructure\\config.py:87:5\n   |\n87 | def load_config(env: Mapping[str, str] | None = None) -> AppConfig:\n   |     ^^^^^^^^^^^\n88 |     source_env: Mapping[str, str] = env if env is not None else os.environ\n89 |     overrides: dict[str, str] = {}\n   |\n\nFBT003 Boolean positional value in function call\n   --> infrastructure\\config.py:115:63\n    |\n113 |         )\n114 |\n115 |     log_json = _read_bool(source_env.get(\"LEGATUS_LOG_JSON\"), True)\n    |                                                               ^^^^\n116 |     if \"LEGATUS_LOG_JSON\" in source_env:\n117 |         overrides[\"LEGATUS_LOG_JSON\"] = source_env[\"LEGATUS_LOG_JSON\"]\n    |\n\nRET504 Unnecessary assignment to `cfg` before `return` statement\n   --> infrastructure\\config.py:196:12\n    |\n194 |         automation_webhooks=automation_webhooks,\n195 |     )\n196 |     return cfg\n    |            ^^^\n    |\nhelp: Remove unnecessary assignment\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> infrastructure\\di.py:4:29\n  |\n3 | import logging\n4 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n5 | from dataclasses import dataclass\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\di.py:7:1\n  |\n5 | from dataclasses import dataclass\n6 |\n7 | from ..adapters.taskwarrior.tw_repository import TaskwarriorRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..core.domain.events import EventDispatcher\n9 | from ..core.services.ai_briefing_service import AIBriefingService\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:8:1\n   |\n 7 | from ..adapters.taskwarrior.tw_repository import TaskwarriorRepository\n 8 | from ..core.domain.events import EventDispatcher\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n10 | from ..core.services.ai_service import AIService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:9:1\n   |\n 7 | from ..adapters.taskwarrior.tw_repository import TaskwarriorRepository\n 8 | from ..core.domain.events import EventDispatcher\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..core.services.ai_service import AIService\n11 | from ..core.services.automation_service import AutomationService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:10:1\n   |\n 8 | from ..core.domain.events import EventDispatcher\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n10 | from ..core.services.ai_service import AIService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:11:1\n   |\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n10 | from ..core.services.ai_service import AIService\n11 | from ..core.services.automation_service import AutomationService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:12:1\n   |\n10 | from ..core.services.ai_service import AIService\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:13:1\n   |\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:13:1\n   |\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:14:1\n   |\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n15 | from ..core.services.review_service import ReviewService\n16 | from ..core.services.scheduler_service import SchedulerService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:15:1\n   |\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n16 | from ..core.services.scheduler_service import SchedulerService\n17 | from ..core.services.search_service import SearchService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:16:1\n   |\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n16 | from ..core.services.scheduler_service import SchedulerService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 | from ..core.services.search_service import SearchService\n18 | from ..core.services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:17:1\n   |\n15 | from ..core.services.review_service import ReviewService\n16 | from ..core.services.scheduler_service import SchedulerService\n17 | from ..core.services.search_service import SearchService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ..core.services.task_service import TaskService\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:18:1\n   |\n16 | from ..core.services.scheduler_service import SchedulerService\n17 | from ..core.services.search_service import SearchService\n18 | from ..core.services.task_service import TaskService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n20 | from .automation import AutomationWebhookClient\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:19:1\n   |\n17 | from ..core.services.search_service import SearchService\n18 | from ..core.services.task_service import TaskService\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n20 | from .automation import AutomationWebhookClient\n21 | from .config import AppConfig\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `.config.AppConfig` into a type-checking block\n  --> infrastructure\\di.py:21:21\n   |\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n20 | from .automation import AutomationWebhookClient\n21 | from .config import AppConfig\n   |                     ^^^^^^^^^\n22 | from .review.json_repository import JsonReviewRepository\n23 | from .scheduler import ApschedulerScheduler\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.config.AppConfig` into a type-checking block\n  --> infrastructure\\logging.py:8:21\n   |\n 6 | from typing import Any\n 7 |\n 8 | from .config import AppConfig\n   |                     ^^^^^^^^^\n 9 |\n10 | STRUCTURED_EXCLUDE = {\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\review\\json_repository.py:8:1\n  |\n6 | from typing import Any, cast\n7 |\n8 | from ...core.domain.review import ReviewRecord\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from ...core.ports.review_repo import IReviewRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\review\\json_repository.py:9:1\n  |\n8 | from ...core.domain.review import ReviewRecord\n9 | from ...core.ports.review_repo import IReviewRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nANN204 Missing return type annotation for special method `__init__`\n  --> infrastructure\\review\\json_repository.py:13:9\n   |\n12 | class JsonReviewRepository(IReviewRepository):\n13 |     def __init__(self, path: str | Path):\n   |         ^^^^^^^^\n14 |         self._path = Path(path)\n15 |         self._path.parent.mkdir(parents=True, exist_ok=True)\n   |\nhelp: Add return type annotation: `None`\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> infrastructure\\scheduler\\apscheduler_adapter.py:5:29\n  |\n3 | import importlib\n4 | import logging\n5 | from collections.abc import Callable\n  |                             ^^^^^^^^\n6 | from datetime import datetime\n7 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> infrastructure\\scheduler\\apscheduler_adapter.py:6:22\n  |\n4 | import logging\n5 | from collections.abc import Callable\n6 | from datetime import datetime\n  |                      ^^^^^^^^\n7 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:9:1\n   |\n 7 | from typing import Any\n 8 |\n 9 | from ...core.ports.scheduler import IScheduler\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 |\n11 | BackgroundScheduler: Any | None\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nBLE001 Do not catch blind exception: `Exception`\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:16:8\n   |\n14 |         \"apscheduler.schedulers.background\"\n15 |     )\n16 | except Exception:  # pragma: no cover\n   |        ^^^^^^^^^\n17 |     BackgroundScheduler = None\n18 | else:\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:31:19\n   |\n29 |               BackgroundScheduler\n30 |           ):  # pragma: no cover - runtime guard\n31 |               raise RuntimeError(\n   |  ___________________^\n32 | |                 \"APScheduler is not installed; install apscheduler to enable scheduling\"\n33 | |             )\n   | |_____________^\n34 |           self._scheduler: Any = BackgroundScheduler(timezone=timezone)\n35 |           self._started = False\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:32:17\n   |\n30 |         ):  # pragma: no cover - runtime guard\n31 |             raise RuntimeError(\n32 |                 \"APScheduler is not installed; install apscheduler to enable scheduling\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n33 |             )\n34 |         self._scheduler: Any = BackgroundScheduler(timezone=timezone)\n   |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:73:13\n   |\n71 |             self._scheduler.remove_job(job_id)\n72 |         except (\n73 |             Exception\n   |             ^^^^^^^^^\n74 |         ) as exc:  # pragma: no cover - APScheduler raises when job missing\n75 |             logger.debug(\"Failed to cancel job %s: %s\", job_id, exc)\n   |\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> infrastructure\\scheduler\\null_scheduler.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Callable\n  |                             ^^^^^^^^\n4 | from datetime import datetime\n5 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> infrastructure\\scheduler\\null_scheduler.py:4:22\n  |\n3 | from collections.abc import Callable\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\scheduler\\null_scheduler.py:7:1\n  |\n5 | from typing import Any\n6 |\n7 | from ...core.ports.scheduler import IScheduler\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nARG002 Unused method argument: `func`\n  --> infrastructure\\scheduler\\null_scheduler.py:25:9\n   |\n23 |         job_id: str,\n24 |         run_at: datetime,\n25 |         func: Callable[..., Any],\n   |         ^^^^\n26 |         args: tuple[Any, ...] | None = None,\n27 |         kwargs: dict[str, Any] | None = None,\n   |\n\nARG002 Unused method argument: `args`\n  --> infrastructure\\scheduler\\null_scheduler.py:26:9\n   |\n24 |         run_at: datetime,\n25 |         func: Callable[..., Any],\n26 |         args: tuple[Any, ...] | None = None,\n   |         ^^^^\n27 |         kwargs: dict[str, Any] | None = None,\n28 |     ) -> str:\n   |\n\nARG002 Unused method argument: `kwargs`\n  --> infrastructure\\scheduler\\null_scheduler.py:27:9\n   |\n25 |         func: Callable[..., Any],\n26 |         args: tuple[Any, ...] | None = None,\n27 |         kwargs: dict[str, Any] | None = None,\n   |         ^^^^^^\n28 |     ) -> str:\n29 |         self._jobs[job_id] = run_at\n   |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> infrastructure\\search\\memory_index.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass, field\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> infrastructure\\search\\memory_index.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from dataclasses import dataclass, field\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\search\\memory_index.py:6:1\n  |\n4 | from dataclasses import dataclass, field\n5 |\n6 | from ...core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ...core.ports.search_index import ISearchIndex\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.domain.task.Task` into a type-checking block\n --> infrastructure\\search\\memory_index.py:6:33\n  |\n4 | from dataclasses import dataclass, field\n5 |\n6 | from ...core.domain.task import Task\n  |                                 ^^^^\n7 | from ...core.ports.search_index import ISearchIndex\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\search\\memory_index.py:7:1\n  |\n6 | from ...core.domain.task import Task\n7 | from ...core.ports.search_index import ISearchIndex\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> infrastructure\\telemetry.py:4:29\n  |\n3 | import json\n4 | from collections.abc import Mapping\n  |                             ^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> infrastructure\\telemetry.py:11:9\n   |\n10 | class TelemetryClient:\n11 |     def __init__(\n   |         ^^^^^^^^\n12 |         self, enabled: bool, path: str | None, flush_seconds: int = 5\n13 |     ):\n   |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n  --> infrastructure\\telemetry.py:12:15\n   |\n10 | class TelemetryClient:\n11 |     def __init__(\n12 |         self, enabled: bool, path: str | None, flush_seconds: int = 5\n   |               ^^^^^^^\n13 |     ):\n14 |         self._enabled = enabled and bool(path)\n   |\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> interface\\api\\server.py:7:22\n  |\n5 | import binascii\n6 | from dataclasses import asdict\n7 | from datetime import datetime\n  |                      ^^^^^^^^\n8 | from typing import Any, Literal, cast\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:13:1\n   |\n11 | from pydantic import BaseModel, Field\n12 |\n13 | from ...core.services.ai_service import AIService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ...core.services.card_action_service import (\n15 |     CardActionService,\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.AIService` into a type-checking block\n  --> interface\\api\\server.py:13:41\n   |\n11 | from pydantic import BaseModel, Field\n12 |\n13 | from ...core.services.ai_service import AIService\n   |                                         ^^^^^^^^^\n14 | from ...core.services.card_action_service import (\n15 |     CardActionService,\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:14:1\n   |\n13 |   from ...core.services.ai_service import AIService\n14 | / from ...core.services.card_action_service import (\n15 | |     CardActionService,\n16 | |     CardNotFoundError,\n17 | | )\n   | |_^\n18 |   from ...infrastructure.collaboration.store import (\n19 |       CollaborationBundleStore,\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:14:1\n   |\n13 |   from ...core.services.ai_service import AIService\n14 | / from ...core.services.card_action_service import (\n15 | |     CardActionService,\n16 | |     CardNotFoundError,\n17 | | )\n   | |_^\n18 |   from ...infrastructure.collaboration.store import (\n19 |       CollaborationBundleStore,\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:18:1\n   |\n16 |       CardNotFoundError,\n17 |   )\n18 | / from ...infrastructure.collaboration.store import (\n19 | |     CollaborationBundleStore,\n20 | |     StoredBundle,\n21 | | )\n   | |_^\n22 |   from ...infrastructure.config import AppConfig, load_config\n23 |   from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:18:1\n   |\n16 |       CardNotFoundError,\n17 |   )\n18 | / from ...infrastructure.collaboration.store import (\n19 | |     CollaborationBundleStore,\n20 | |     StoredBundle,\n21 | | )\n   | |_^\n22 |   from ...infrastructure.config import AppConfig, load_config\n23 |   from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:22:1\n   |\n20 |     StoredBundle,\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n23 | from ...infrastructure.di import AppContext, build_context\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:22:1\n   |\n20 |     StoredBundle,\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n23 | from ...infrastructure.di import AppContext, build_context\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:23:1\n   |\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n23 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:23:1\n   |\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n23 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:24:1\n   |\n22 | from ...infrastructure.config import AppConfig, load_config\n23 | from ...infrastructure.di import AppContext, build_context\n24 | from ...infrastructure.logging import setup_logging\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nC901 `create_api_app` is too complex (14 > 10)\n   --> interface\\api\\server.py:118:5\n    |\n118 | def create_api_app(\n    |     ^^^^^^^^^^^^^^\n119 |     ctx: AppContext | None = None,\n120 |     cfg: AppConfig | None = None,\n    |\n\nB904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling\n   --> interface\\api\\server.py:155:13\n    |\n153 |             )\n154 |         except CardNotFoundError:\n155 |             raise HTTPException(status_code=404, detail=\"Card not found\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n156 |         except ValueError as exc:\n157 |             raise HTTPException(status_code=400, detail=str(exc)) from exc\n    |\n\nFAST002 FastAPI dependency without `Annotated`\n   --> interface\\api\\server.py:187:9\n    |\n185 |     @app.get(\"/api/collab/bundles\", response_model=list[BundleInfo])\n186 |     async def list_bundles(\n187 |         limit: int = Query(10, ge=0, le=100)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n188 |     ) -> list[BundleUploadResponse]:\n189 |         stored = bundle_store.list(limit=limit)\n    |\nhelp: Replace with `typing.Annotated`\n\nFAST002 FastAPI dependency without `Annotated`\n   --> interface\\api\\server.py:194:9\n    |\n192 |     @app.delete(\"/api/collab/bundles\", response_model=BundlePruneResponse)\n193 |     async def prune_bundles(\n194 |         keep: int = Query(10, ge=0, le=100)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n195 |     ) -> BundlePruneResponse:\n196 |         removed = bundle_store.prune(keep)\n    |\nhelp: Replace with `typing.Annotated`\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\cli\\main.py:6:29\n  |\n4 | import logging\n5 | import tempfile\n6 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n7 | from datetime import UTC, datetime, timedelta\n8 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:11:1\n   |\n 9 | from typing import Any, cast\n10 |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:12:1\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.domain.task.Task` into a type-checking block\n  --> interface\\cli\\main.py:12:33\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n   |                                 ^^^^\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:13:1\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_briefing_service.AIBriefing` into a type-checking block\n  --> interface\\cli\\main.py:13:50\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n   |                                                  ^^^^^^^^^^\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:14:1\n   |\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.TaskSummary` into a type-checking block\n  --> interface\\cli\\main.py:14:41\n   |\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   |                                         ^^^^^^^^^^^\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:15:1\n   |\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:16:1\n   |\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 | from ...infrastructure.di import AppContext, build_context\n18 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:17:1\n   |\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:17:1\n   |\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:18:1\n   |\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n18 | from ...infrastructure.logging import setup_logging\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n19 |\n20 | try:  # pragma: no cover - import guard\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> interface\\cli\\main.py:23:11\n   |\n21 |     import typer as _typer_mod  # type: ignore[import]\n22 | except ImportError as exc:  # pragma: no cover\n23 |     raise RuntimeError(\"The 'typer' package is required for the CLI\") from exc\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 |\n25 | typer: Any = cast(\"Any\", _typer_mod)\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> interface\\cli\\main.py:23:24\n   |\n21 |     import typer as _typer_mod  # type: ignore[import]\n22 | except ImportError as exc:  # pragma: no cover\n23 |     raise RuntimeError(\"The 'typer' package is required for the CLI\") from exc\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 |\n25 | typer: Any = cast(\"Any\", _typer_mod)\n   |\nhelp: Assign to variable; remove string literal\n\nANN202 Missing return type annotation for private function `_ctx`\n  --> interface\\cli\\main.py:45:5\n   |\n45 | def _ctx():\n   |     ^^^^\n46 |     cfg = load_config()\n47 |     setup_logging(cfg)\n   |\nhelp: Add return type annotation\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**properties`\n  --> interface\\cli\\main.py:51:56\n   |\n51 | def _record(ctx: AppContext, event: str, **properties: Any) -> None:\n   |                                                        ^^^\n52 |     payload: dict[str, Any] = dict(properties)\n53 |     ctx.telemetry.track(event, payload)\n   |\n\nE501 Line too long (95 > 88)\n   --> interface\\cli\\main.py:111:89\n    |\n109 |             priority = item.priority or \"-\"\n110 |             lines.append(\n111 |                 f\"- {item.description} (id={item.task_id[:8]}, due={due}, priority={priority})\"\n    |                                                                                         ^^^^^^^\n112 |             )\n113 |     return \"\\n\".join(lines)\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\cli\\main.py:122:89\n    |\n120 |     lines.append(\"=================\")\n121 |     lines.append(\n122 |         f\"Generated: {briefing.generated_at.astimezone(UTC).strftime('%Y-%m-%d %H:%M %Z')}\"\n    |                                                                                         ^^^\n123 |     )\n124 |     lines.append(\"\")\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\cli\\main.py:145:89\n    |\n143 |             priority = item.priority or \"-\"\n144 |             lines.append(\n145 |                 f\"- {item.description} (id={item.task_id[:8]}, due={due}, priority={priority})\"\n    |                                                                                         ^^^^^^^\n146 |             )\n147 |     guidance = briefing.guidance\n    |\n\nE501 Line too long (109 > 88)\n   --> interface\\cli\\main.py:160:89\n    |\n158 |             )\n159 |             lines.append(\n160 |                 f\"- {insight.task.description} (score={score}, due={due}, action={insight.suggested_action})\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n161 |             )\n162 |             for reason in insight.reasons:\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> interface\\cli\\main.py:163:17\n    |\n161 |             )\n162 |             for reason in insight.reasons:\n163 |                 lines.append(f\"  \u00c2\u00b7 {reason}\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n164 |     return \"\\n\".join(lines)\n    |\nhelp: Replace for loop with list.extend\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:179:15\n    |\n177 |     )\n178 |     if not secret:\n179 |         raise typer.BadParameter(\"Passphrase is required\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n180 |     return secret\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:179:34\n    |\n177 |     )\n178 |     if not secret:\n179 |         raise typer.BadParameter(\"Passphrase is required\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n180 |     return secret\n    |\nhelp: Assign to variable; remove string literal\n\nANN201 Missing return type annotation for public function `ai_summarize`\n   --> interface\\cli\\main.py:184:5\n    |\n183 | @ai_app.command(\"summarize\")\n184 | def ai_summarize(\n    |     ^^^^^^^^^^^^\n185 |     limit: int = typer.Option(\n186 |         3, help=\"Number of top tags and upcoming tasks to include\"\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `ai_draft`\n   --> interface\\cli\\main.py:204:5\n    |\n203 | @ai_app.command(\"draft\")\n204 | def ai_draft(task_id: str):\n    |     ^^^^^^^^\n205 |     ctx = _ctx()\n206 |     task = ctx.task_service.get_task(task_id)\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `ai_brainstorm`\n   --> interface\\cli\\main.py:218:5\n    |\n217 | @ai_app.command(\"brainstorm\")\n218 | def ai_brainstorm(\n    |     ^^^^^^^^^^^^^\n219 |     topic: str = typer.Argument(..., help=\"Focus topic for brainstorming\"),\n220 |     variants: int = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `ai_briefing`\n   --> interface\\cli\\main.py:233:5\n    |\n232 | @ai_app.command(\"briefing\")\n233 | def ai_briefing(\n    |     ^^^^^^^^^^^\n234 |     limit: int = typer.Option(\n235 |         5, help=\"Maximum number of review guidance entries to include\"\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:237:22\n    |\n235 |           5, help=\"Maximum number of review guidance entries to include\"\n236 |       ),\n237 |       tag: list[str] = typer.Option(\n    |  ______________________^\n238 | |         [], \"--tag\", \"-t\", help=\"Filter review guidance by tag; repeatable\"\n239 | |     ),\n    | |_____^\n240 |       include_completed: bool = typer.Option(\n241 |           False, help=\"Include completed tasks in guidance\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:240:5\n    |\n238 |         [], \"--tag\", \"-t\", help=\"Filter review guidance by tag; repeatable\"\n239 |     ),\n240 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n241 |         False, help=\"Include completed tasks in guidance\"\n242 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:241:9\n    |\n239 |     ),\n240 |     include_completed: bool = typer.Option(\n241 |         False, help=\"Include completed tasks in guidance\"\n    |         ^^^^^\n242 |     ),\n243 |     output: Path | None = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:243:27\n    |\n241 |           False, help=\"Include completed tasks in guidance\"\n242 |       ),\n243 |       output: Path | None = typer.Option(\n    |  ___________________________^\n244 | |         None, help=\"Optional path to write the briefing as Markdown\"\n245 | |     ),\n    | |_____^\n246 |   ):\n247 |       ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `add`\n   --> interface\\cli\\main.py:270:5\n    |\n269 | @app.command()\n270 | def add(\n    |     ^^^\n271 |     description: str,\n272 |     due: str = typer.Option(None, help=\"ISO datetime\"),\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `list_tasks`\n   --> interface\\cli\\main.py:296:5\n    |\n295 | @app.command(\"list\")\n296 | def list_tasks(\n    |     ^^^^^^^^^^\n297 |     status: str = typer.Option(None, help=\"Filter by status\"),\n298 |     tag: str = typer.Option(None, help=\"Filter by tag\"),\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `search`\n   --> interface\\cli\\main.py:317:5\n    |\n316 | @app.command()\n317 | def search(\n    |     ^^^^^^\n318 |     text: str = typer.Option(\n319 |         \"\", help=\"Substring match against task description\"\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:322:22\n    |\n320 |       ),\n321 |       status: str | None = typer.Option(None, help=\"Filter by status\"),\n322 |       tag: list[str] = typer.Option(\n    |  ______________________^\n323 | |         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n324 | |     ),\n    | |_____^\n325 |       limit: int = typer.Option(20, help=\"Maximum number of results\"),\n326 |   ):\n    |\n\nANN201 Missing return type annotation for public function `complete`\n   --> interface\\cli\\main.py:354:5\n    |\n353 | @app.command()\n354 | def complete(task_id: str):\n    |     ^^^^^^^^\n355 |     ctx = _ctx()\n356 |     task = ctx.task_service.complete_task(task_id)\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `edit`\n   --> interface\\cli\\main.py:362:5\n    |\n361 | @app.command()\n362 | def edit(task_id: str, description: str):\n    |     ^^^^\n363 |     ctx = _ctx()\n364 |     task = ctx.task_service.edit_task(task_id, description)\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `defer`\n   --> interface\\cli\\main.py:370:5\n    |\n369 | @app.command()\n370 | def defer(\n    |     ^^^^^\n371 |     task_id: str,\n372 |     until: str = typer.Option(None, help=\"ISO datetime to defer until\"),\n    |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:380:15\n    |\n378 |     due = _parse_due(until)\n379 |     if due and days is not None:\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:380:34\n    |\n378 |     due = _parse_due(until)\n379 |     if due and days is not None:\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:382:15\n    |\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n383 |     delta = timedelta(days=days) if days is not None else None\n384 |     task = ctx.task_service.defer_task(task_id, until=due, delta=delta)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:382:34\n    |\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n383 |     delta = timedelta(days=days) if days is not None else None\n384 |     task = ctx.task_service.defer_task(task_id, until=due, delta=delta)\n    |\nhelp: Assign to variable; remove string literal\n\nANN201 Missing return type annotation for public function `prioritize`\n   --> interface\\cli\\main.py:396:5\n    |\n395 | @app.command()\n396 | def prioritize(\n    |     ^^^^^^^^^^\n397 |     task_id: str, priority: str = typer.Argument(..., help=\"low|medium|high\")\n398 | ):\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `review_queue`\n   --> interface\\cli\\main.py:406:5\n    |\n405 | @review_app.command(\"queue\")\n406 | def review_queue(\n    |     ^^^^^^^^^^^^\n407 |     limit: int = typer.Option(10, help=\"Maximum number of items to display\"),\n408 |     include_completed: bool = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:408:5\n    |\n406 | def review_queue(\n407 |     limit: int = typer.Option(10, help=\"Maximum number of items to display\"),\n408 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n409 |         False, help=\"Include completed tasks in the queue\"\n410 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:409:9\n    |\n407 |     limit: int = typer.Option(10, help=\"Maximum number of items to display\"),\n408 |     include_completed: bool = typer.Option(\n409 |         False, help=\"Include completed tasks in the queue\"\n    |         ^^^^^\n410 |     ),\n411 |     tag: list[str] = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:411:22\n    |\n409 |           False, help=\"Include completed tasks in the queue\"\n410 |       ),\n411 |       tag: list[str] = typer.Option(\n    |  ______________________^\n412 | |         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n413 | |     ),\n    | |_____^\n414 |   ):\n415 |       ctx = _ctx()\n    |\n\nE501 Line too long (93 > 88)\n   --> interface\\cli\\main.py:425:89\n    |\n423 |         typer.echo(\"No reviews due\")\n424 |     else:\n425 |         header = \"ID       Due (UTC)        Overdue  Interval  Reps Last Source  Description\"\n    |                                                                                         ^^^^^\n426 |         lines = [header, \"-\" * len(header)]\n427 |         for item in items:\n    |\n\nE501 Line too long (127 > 88)\n   --> interface\\cli\\main.py:443:89\n    |\n441 |             source_display = last_source[:11].ljust(11)\n442 |             lines.append(\n443 |                 f\"{tid} {due_str} {overdue_display} {interval_display} {reps_display} {source_display} {item.task.description}\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n444 |             )\n445 |         typer.echo(\"\\n\".join(lines))\n    |\n\nANN201 Missing return type annotation for public function `review_focus`\n   --> interface\\cli\\main.py:457:5\n    |\n456 | @review_app.command(\"focus\")\n457 | def review_focus(\n    |     ^^^^^^^^^^^^\n458 |     limit: int = typer.Option(\n459 |         5, help=\"Maximum number of guidance entries to display\"\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:461:5\n    |\n459 |         5, help=\"Maximum number of guidance entries to display\"\n460 |     ),\n461 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n462 |         False, help=\"Include completed tasks when computing guidance\"\n463 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:462:9\n    |\n460 |     ),\n461 |     include_completed: bool = typer.Option(\n462 |         False, help=\"Include completed tasks when computing guidance\"\n    |         ^^^^^\n463 |     ),\n464 |     tag: list[str] = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:464:22\n    |\n462 |           False, help=\"Include completed tasks when computing guidance\"\n463 |       ),\n464 |       tag: list[str] = typer.Option(\n    |  ______________________^\n465 | |         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n466 | |     ),\n    | |_____^\n467 |   ):\n468 |       ctx = _ctx()\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\cli\\main.py:487:89\n    |\n485 |         return\n486 |\n487 |     header = \"ID       Score  Review Due        Overdue  Priority Last Review        Action\"\n    |                                                                                         ^^^^\n488 |     lines = [header, \"-\" * len(header)]\n489 |     for insight in insights:\n    |\n\nE501 Line too long (115 > 88)\n   --> interface\\cli\\main.py:512:89\n    |\n510 |         action_display = insight.suggested_action[:18].ljust(18)\n511 |         lines.append(\n512 |             f\"{tid} {score_display} {due_str} {overdue_display} {priority_display} {last_str:>16} {action_display}\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n513 |         )\n    |\n\nANN201 Missing return type annotation for public function `review_log`\n   --> interface\\cli\\main.py:539:5\n    |\n538 | @review_app.command(\"log\")\n539 | def review_log(\n    |     ^^^^^^^^^^\n540 |     task_id: str,\n541 |     quality: int = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nE501 Line too long (103 > 88)\n   --> interface\\cli\\main.py:555:89\n    |\n553 |     due_str = record.due_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n554 |     typer.echo(\n555 |         f\"Logged review for {task_id[:8]} :: next due {due_str} (interval {record.interval_days:.2f}d)\"\n    |                                                                                         ^^^^^^^^^^^^^^^\n556 |     )\n557 |     _record(\n    |\n\nANN201 Missing return type annotation for public function `review_suspend`\n   --> interface\\cli\\main.py:568:5\n    |\n567 | @review_app.command(\"suspend\")\n568 | def review_suspend(\n    |     ^^^^^^^^^^^^^^\n569 |     task_id: str,\n570 |     suspend: bool = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:570:5\n    |\n568 | def review_suspend(\n569 |     task_id: str,\n570 |     suspend: bool = typer.Option(\n    |     ^^^^^^^\n571 |         True,\n572 |         \"--suspend/--resume\",\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:571:9\n    |\n569 |     task_id: str,\n570 |     suspend: bool = typer.Option(\n571 |         True,\n    |         ^^^^\n572 |         \"--suspend/--resume\",\n573 |         help=\"Temporarily pause reviews for the task\",\n    |\n\nANN201 Missing return type annotation for public function `tag_add`\n   --> interface\\cli\\main.py:587:5\n    |\n586 | @tags_app.command(\"add\")\n587 | def tag_add(\n    |     ^^^^^^^\n588 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to add\")\n589 | ):\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:588:37\n    |\n586 | @tags_app.command(\"add\")\n587 | def tag_add(\n588 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to add\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n589 | ):\n590 |     ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `tag_remove`\n   --> interface\\cli\\main.py:597:5\n    |\n596 | @tags_app.command(\"remove\")\n597 | def tag_remove(\n    |     ^^^^^^^^^^\n598 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to remove\")\n599 | ):\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:598:37\n    |\n596 | @tags_app.command(\"remove\")\n597 | def tag_remove(\n598 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to remove\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n599 | ):\n600 |     ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `tag_set`\n   --> interface\\cli\\main.py:607:5\n    |\n606 | @tags_app.command(\"set\")\n607 | def tag_set(\n    |     ^^^^^^^\n608 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Replace tags\")\n609 | ):\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:608:37\n    |\n606 | @tags_app.command(\"set\")\n607 | def tag_set(\n608 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Replace tags\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n609 | ):\n610 |     ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `config_show`\n   --> interface\\cli\\main.py:617:5\n    |\n616 | @config_app.command(\"show\")\n617 | def config_show():\n    |     ^^^^^^^^^^^\n618 |     ctx = _ctx()\n619 |     cfg = ctx.config\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `config_doctor`\n   --> interface\\cli\\main.py:644:5\n    |\n643 | @config_app.command(\"doctor\")\n644 | def config_doctor():\n    |     ^^^^^^^^^^^^^\n645 |     ctx = _ctx()\n646 |     cfg = ctx.config\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `automation_endpoints`\n   --> interface\\cli\\main.py:683:5\n    |\n682 | @automation_app.command(\"endpoints\")\n683 | def automation_endpoints():\n    |     ^^^^^^^^^^^^^^^^^^^^\n684 |     ctx = _ctx()\n685 |     endpoints = ctx.config.automation_webhooks\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `collab_export`\n   --> interface\\cli\\main.py:703:5\n    |\n702 | @collab_app.command(\"export\")\n703 | def collab_export(\n    |     ^^^^^^^^^^^^^\n704 |     output: Path = typer.Option(\n705 |         None, \"--output\", \"-o\", help=\"Destination bundle path\"\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:704:20\n    |\n702 |   @collab_app.command(\"export\")\n703 |   def collab_export(\n704 |       output: Path = typer.Option(\n    |  ____________________^\n705 | |         None, \"--output\", \"-o\", help=\"Destination bundle path\"\n706 | |     ),\n    | |_____^\n707 |       passphrase: str | None = typer.Option(\n708 |           None, help=\"Passphrase used to encrypt the bundle\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:710:5\n    |\n708 |         None, help=\"Passphrase used to encrypt the bundle\"\n709 |     ),\n710 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n711 |         True, help=\"Include completed tasks\"\n712 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:711:9\n    |\n709 |     ),\n710 |     include_completed: bool = typer.Option(\n711 |         True, help=\"Include completed tasks\"\n    |         ^^^^\n712 |     ),\n713 |     limit: int | None = typer.Option(\n    |\n\nANN201 Missing return type annotation for public function `collab_import`\n   --> interface\\cli\\main.py:738:5\n    |\n737 | @collab_app.command(\"import\")\n738 | def collab_import(\n    |     ^^^^^^^^^^^^^\n739 |     bundle: Path = typer.Argument(..., help=\"Encrypted bundle to import\"),\n740 |     passphrase: str | None = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:739:20\n    |\n737 | @collab_app.command(\"import\")\n738 | def collab_import(\n739 |     bundle: Path = typer.Argument(..., help=\"Encrypted bundle to import\"),\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n740 |     passphrase: str | None = typer.Option(\n741 |         None, help=\"Passphrase used to decrypt the bundle\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:743:5\n    |\n741 |         None, help=\"Passphrase used to decrypt the bundle\"\n742 |     ),\n743 |     overwrite_existing: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^^\n744 |         False,\n745 |         help=\"Replace tasks with matching IDs if they already exist\",\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:744:9\n    |\n742 |     ),\n743 |     overwrite_existing: bool = typer.Option(\n744 |         False,\n    |         ^^^^^\n745 |         help=\"Replace tasks with matching IDs if they already exist\",\n746 |     ),\n    |\n\nANN201 Missing return type annotation for public function `collab_push`\n   --> interface\\cli\\main.py:766:5\n    |\n765 | @collab_app.command(\"push\")\n766 | def collab_push(\n    |     ^^^^^^^^^^^\n767 |     endpoint: str | None = typer.Option(\n768 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:773:5\n    |\n771 |         None, help=\"Passphrase used to encrypt the bundle\"\n772 |     ),\n773 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n774 |         True, help=\"Include completed tasks in the export\"\n775 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:774:9\n    |\n772 |     ),\n773 |     include_completed: bool = typer.Option(\n774 |         True, help=\"Include completed tasks in the export\"\n    |         ^^^^\n775 |     ),\n776 |     limit: int | None = typer.Option(\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:786:15\n    |\n784 |       base_url = endpoint or ctx.config.collaboration_endpoint\n785 |       if not base_url:\n786 |           raise typer.BadParameter(\n    |  _______________^\n787 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n788 | |         )\n    | |_________^\n789 |       secret = _prompt_passphrase(passphrase, confirm=True)\n790 |       summary = ctx.ai_service.summarize()\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:787:13\n    |\n785 |     if not base_url:\n786 |         raise typer.BadParameter(\n787 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n788 |         )\n789 |     secret = _prompt_passphrase(passphrase, confirm=True)\n    |\nhelp: Assign to variable; remove string literal\n\nPERF401 Use a list comprehension to create a transformed list\n   --> interface\\cli\\main.py:799:9\n    |\n797 |       upcoming_items: list[dict[str, Any]] = []\n798 |       for item in summary.upcoming[:3]:\n799 | /         upcoming_items.append(\n800 | |             {\n801 | |                 \"task_id\": item.task_id,\n802 | |                 \"description\": item.description,\n803 | |                 \"due\": item.due.isoformat() if item.due else None,\n804 | |                 \"priority\": item.priority,\n805 | |             }\n806 | |         )\n    | |_________^\n807 |       if upcoming_items:\n808 |           summary_payload[\"upcoming\"] = upcoming_items\n    |\nhelp: Replace for loop with list comprehension\n\nSIM115 Use a context manager for opening files\n   --> interface\\cli\\main.py:809:17\n    |\n807 |     if upcoming_items:\n808 |         summary_payload[\"upcoming\"] = upcoming_items\n809 |     temp_file = tempfile.NamedTemporaryFile(\"w\", delete=False, suffix=\".json\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n810 |     temp_path = Path(temp_file.name)\n811 |     temp_file.close()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:831:19\n    |\n829 |                   )\n830 |           except Exception as exc:\n831 |               raise typer.BadParameter(\n    |  ___________________^\n832 | |                 f\"Failed to push bundle to {base_url}: {exc}\"\n833 | |             ) from exc\n    | |_____________^\n834 |       finally:\n835 |           try:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:832:17\n    |\n830 |         except Exception as exc:\n831 |             raise typer.BadParameter(\n832 |                 f\"Failed to push bundle to {base_url}: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n833 |             ) from exc\n834 |     finally:\n    |\nhelp: Assign to variable; remove f-string literal\n\nSIM105 Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`\n   --> interface\\cli\\main.py:835:9\n    |\n833 |               ) from exc\n834 |       finally:\n835 | /         try:\n836 | |             temp_path.unlink()\n837 | |         except OSError:\n838 | |             pass\n    | |________________^\n839 |\n840 |       typer.echo(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(OSError): ...`\n\nANN201 Missing return type annotation for public function `collab_history`\n   --> interface\\cli\\main.py:859:5\n    |\n858 | @collab_app.command(\"history\")\n859 | def collab_history(\n    |     ^^^^^^^^^^^^^^\n860 |     endpoint: str | None = typer.Option(\n861 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:870:15\n    |\n868 |       base_url = endpoint or ctx.config.collaboration_endpoint\n869 |       if not base_url:\n870 |           raise typer.BadParameter(\n    |  _______________^\n871 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n872 | |         )\n    | |_________^\n873 |       try:\n874 |           with CollaborationHubClient(base_url) as client:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:871:13\n    |\n869 |     if not base_url:\n870 |         raise typer.BadParameter(\n871 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n872 |         )\n873 |     try:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:877:15\n    |\n875 |               bundles = client.list_bundles(limit=limit)\n876 |       except Exception as exc:\n877 |           raise typer.BadParameter(\n    |  _______________^\n878 | |             f\"Failed to fetch bundle history from {base_url}: {exc}\"\n879 | |         ) from exc\n    | |_________^\n880 |\n881 |       if not bundles:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:878:13\n    |\n876 |     except Exception as exc:\n877 |         raise typer.BadParameter(\n878 |             f\"Failed to fetch bundle history from {base_url}: {exc}\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n879 |         ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (97 > 88)\n   --> interface\\cli\\main.py:900:89\n    |\n898 |         )\n899 |         lines.append(\n900 |             f\"{bundle.bundle_id[:8]} {stored} {size_display} {source_display} {metadata_display}\"\n    |                                                                                         ^^^^^^^^^\n901 |         )\n902 |     typer.echo(\"\\n\".join(lines))\n    |\n\nANN201 Missing return type annotation for public function `collab_pull`\n   --> interface\\cli\\main.py:913:5\n    |\n912 | @collab_app.command(\"pull\")\n913 | def collab_pull(\n    |     ^^^^^^^^^^^\n914 |     endpoint: str | None = typer.Option(\n915 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:920:5\n    |\n918 |         None, help=\"Passphrase used to decrypt the bundle\"\n919 |     ),\n920 |     overwrite_existing: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^^\n921 |         False, help=\"Replace tasks with matching IDs\"\n922 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:921:9\n    |\n919 |     ),\n920 |     overwrite_existing: bool = typer.Option(\n921 |         False, help=\"Replace tasks with matching IDs\"\n    |         ^^^^^\n922 |     ),\n923 |     bundle_id: str | None = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:926:27\n    |\n924 |           None, help=\"Fetch a specific bundle identifier\"\n925 |       ),\n926 |       output: Path | None = typer.Option(\n    |  ___________________________^\n927 | |         None, help=\"Save the downloaded bundle to this path\"\n928 | |     ),\n    | |_____^\n929 |   ):\n930 |       ctx = _ctx()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:933:15\n    |\n931 |       base_url = endpoint or ctx.config.collaboration_endpoint\n932 |       if not base_url:\n933 |           raise typer.BadParameter(\n    |  _______________^\n934 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n935 | |         )\n    | |_________^\n936 |\n937 |       try:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:934:13\n    |\n932 |     if not base_url:\n933 |         raise typer.BadParameter(\n934 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n935 |         )\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> interface\\cli\\main.py:942:21\n    |\n940 |                   download = client.fetch_bundle(bundle_id)\n941 |                   if download is None:\n942 | /                     raise typer.BadParameter(\n943 | |                         f\"Bundle {bundle_id} not found on {base_url}\"\n944 | |                     )\n    | |_____________________^\n945 |               else:\n946 |                   download = client.fetch_latest_bundle()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:942:27\n    |\n940 |                   download = client.fetch_bundle(bundle_id)\n941 |                   if download is None:\n942 |                       raise typer.BadParameter(\n    |  ___________________________^\n943 | |                         f\"Bundle {bundle_id} not found on {base_url}\"\n944 | |                     )\n    | |_____________________^\n945 |               else:\n946 |                   download = client.fetch_latest_bundle()\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:943:25\n    |\n941 |                 if download is None:\n942 |                     raise typer.BadParameter(\n943 |                         f\"Bundle {bundle_id} not found on {base_url}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n944 |                     )\n945 |             else:\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:952:15\n    |\n950 |                       return\n951 |       except Exception as exc:\n952 |           raise typer.BadParameter(\n    |  _______________^\n953 | |             f\"Failed to fetch bundle from {base_url}: {exc}\"\n954 | |         ) from exc\n    | |_________^\n955 |\n956 |       destination = output or Path(ctx.config.collaboration_bundle_path)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:953:13\n    |\n951 |     except Exception as exc:\n952 |         raise typer.BadParameter(\n953 |             f\"Failed to fetch bundle from {base_url}: {exc}\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n954 |         ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nANN201 Missing return type annotation for public function `collab_prune`\n   --> interface\\cli\\main.py:980:5\n    |\n979 | @collab_app.command(\"prune\")\n980 | def collab_prune(\n    |     ^^^^^^^^^^^^\n981 |     endpoint: str | None = typer.Option(\n982 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:991:15\n    |\n989 |       base_url = endpoint or ctx.config.collaboration_endpoint\n990 |       if not base_url:\n991 |           raise typer.BadParameter(\n    |  _______________^\n992 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n993 | |         )\n    | |_________^\n994 |       try:\n995 |           with CollaborationHubClient(base_url) as client:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:992:13\n    |\n990 |     if not base_url:\n991 |         raise typer.BadParameter(\n992 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n993 |         )\n994 |     try:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> interface\\cli\\main.py:998:15\n     |\n 996 |               removed, remaining = client.prune_bundles(keep=keep)\n 997 |       except Exception as exc:\n 998 |           raise typer.BadParameter(\n     |  _______________^\n 999 | |             f\"Failed to prune bundles on {base_url}: {exc}\"\n1000 | |         ) from exc\n     | |_________^\n1001 |\n1002 |       if not removed:\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> interface\\cli\\main.py:999:13\n     |\n 997 |     except Exception as exc:\n 998 |         raise typer.BadParameter(\n 999 |             f\"Failed to prune bundles on {base_url}: {exc}\"\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1000 |         ) from exc\n     |\nhelp: Assign to variable; remove f-string literal\n\nANN201 Missing return type annotation for public function `run_webhook_server`\n    --> interface\\cli\\main.py:1025:5\n     |\n1024 | @app.command(\"webhook\")\n1025 | def run_webhook_server(\n     |     ^^^^^^^^^^^^^^^^^^\n1026 |     host: str = typer.Option(\"127.0.0.1\", help=\"Host interface to bind\"),\n1027 |     port: int = typer.Option(8080, help=\"Port to bind\"),\n     |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n    --> interface\\cli\\main.py:1028:5\n     |\n1026 |     host: str = typer.Option(\"127.0.0.1\", help=\"Host interface to bind\"),\n1027 |     port: int = typer.Option(8080, help=\"Port to bind\"),\n1028 |     reload: bool = typer.Option(\n     |     ^^^^^^\n1029 |         False, help=\"Enable auto-reload (development only)\"\n1030 |     ),\n     |\n\nFBT003 Boolean positional value in function call\n    --> interface\\cli\\main.py:1029:9\n     |\n1027 |     port: int = typer.Option(8080, help=\"Port to bind\"),\n1028 |     reload: bool = typer.Option(\n1029 |         False, help=\"Enable auto-reload (development only)\"\n     |         ^^^^^\n1030 |     ),\n1031 | ):\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> interface\\cli\\main.py:1033:5\n     |\n1031 | ):\n1032 |     ctx = _ctx()\n1033 |     from ...interface.api.server import create_api_app\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1034 |\n1035 |     try:\n     |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n    --> interface\\cli\\main.py:1033:5\n     |\n1031 | ):\n1032 |     ctx = _ctx()\n1033 |     from ...interface.api.server import create_api_app\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1034 |\n1035 |     try:\n     |\nhelp: Replace relative imports from parent modules with absolute imports\n\nPLC0415 `import` should be at the top-level of a file\n    --> interface\\cli\\main.py:1036:9\n     |\n1035 |     try:\n1036 |         import uvicorn\n     |         ^^^^^^^^^^^^^^\n1037 |     except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |         raise typer.BadParameter(\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> interface\\cli\\main.py:1038:15\n     |\n1036 |           import uvicorn\n1037 |       except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |           raise typer.BadParameter(\n     |  _______________^\n1039 | |             \"uvicorn is required to run the webhook server; install with 'pip install uvicorn[standard]'\"\n1040 | |         ) from exc\n     | |_________^\n1041 |\n1042 |       api_app = create_api_app(ctx=ctx)\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> interface\\cli\\main.py:1039:13\n     |\n1037 |     except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |         raise typer.BadParameter(\n1039 |             \"uvicorn is required to run the webhook server; install with 'pip install uvicorn[standard]'\"\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1040 |         ) from exc\n     |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (105 > 88)\n    --> interface\\cli\\main.py:1039:89\n     |\n1037 |     except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |         raise typer.BadParameter(\n1039 |             \"uvicorn is required to run the webhook server; install with 'pip install uvicorn[standard]'\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^\n1040 |         ) from exc\n     |\n\nANN201 Missing return type annotation for public function `run`\n    --> interface\\cli\\main.py:1054:5\n     |\n1054 | def run():\n     |     ^^^\n1055 |     app()\n     |\nhelp: Add return type annotation: `None`\n\nINP001 File `interface\\tui\\app.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> interface\\tui\\app.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\tui\\app.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC\n5 | from importlib import import_module\n  |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:11:35\n   |\n10 |     class App:  # type: ignore[too-many-ancestors]\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:11:50\n   |\n10 |     class App:  # type: ignore[too-many-ancestors]\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:13:30\n   |\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |                              ^^^\n14 |\n15 |     class ComposeResult: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:13:45\n   |\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                             ^^^\n14 |\n15 |     class ComposeResult: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:18:35\n   |\n17 |     class Binding:  # pragma: no cover - placeholder\n18 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n19 |\n20 |     class Footer:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:18:50\n   |\n17 |     class Binding:  # pragma: no cover - placeholder\n18 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n19 |\n20 |     class Footer:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:21:35\n   |\n20 |     class Footer:  # pragma: no cover\n21 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n22 |\n23 |     class Header:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:21:50\n   |\n20 |     class Footer:  # pragma: no cover\n21 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n22 |\n23 |     class Header:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:24:35\n   |\n23 |     class Header:  # pragma: no cover\n24 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n25 |\n26 |     class Input:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:24:50\n   |\n23 |     class Header:  # pragma: no cover\n24 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n25 |\n26 |     class Input:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:27:35\n   |\n26 |     class Input:  # pragma: no cover\n27 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n28 |\n29 |         def focus(self) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:27:50\n   |\n26 |     class Input:  # pragma: no cover\n27 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n28 |\n29 |         def focus(self) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:32:35\n   |\n31 |     class Static:  # pragma: no cover\n32 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n33 |\n34 |         def update(self, value: str) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:32:50\n   |\n31 |     class Static:  # pragma: no cover\n32 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n33 |\n34 |         def update(self, value: str) -> None: ...\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> interface\\tui\\app.py:51:15\n   |\n49 |           Static = cast(\"type[Any]\", _widgets.Static)\n50 |       except ModuleNotFoundError as exc:  # pragma: no cover\n51 |           raise RuntimeError(\n   |  _______________^\n52 | |             \"The 'textual' package is required for the TUI. Install it via 'pip install textual'.\"\n53 | |         ) from exc\n   | |_________^\n54 |\n55 |   from ...core.services.ai_service import TaskSummary\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> interface\\tui\\app.py:52:13\n   |\n50 |     except ModuleNotFoundError as exc:  # pragma: no cover\n51 |         raise RuntimeError(\n52 |             \"The 'textual' package is required for the TUI. Install it via 'pip install textual'.\"\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n53 |         ) from exc\n   |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (98 > 88)\n  --> interface\\tui\\app.py:52:89\n   |\n50 |     except ModuleNotFoundError as exc:  # pragma: no cover\n51 |         raise RuntimeError(\n52 |             \"The 'textual' package is required for the TUI. Install it via 'pip install textual'.\"\n   |                                                                                         ^^^^^^^^^^\n53 |         ) from exc\n   |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\app.py:55:1\n   |\n53 |         ) from exc\n54 |\n55 | from ...core.services.ai_service import TaskSummary\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n56 | from .controller import TaskController, TaskFilters, TaskRow\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.TaskSummary` into a type-checking block\n  --> interface\\tui\\app.py:55:41\n   |\n53 |         ) from exc\n54 |\n55 | from ...core.services.ai_service import TaskSummary\n   |                                         ^^^^^^^^^^^\n56 | from .controller import TaskController, TaskFilters, TaskRow\n   |\nhelp: Move into type-checking block\n\nE501 Line too long (99 > 88)\n  --> interface\\tui\\app.py:63:89\n   |\n62 |     def update_rows(self, rows: Iterable[TaskRow]) -> None:\n63 |         header = \"ID       Status     Due                Priority Tags                 Description\"\n   |                                                                                         ^^^^^^^^^^^\n64 |         lines = [header, \"-\" * len(header)]\n65 |         for row in rows:\n   |\n\nPERF401 Use `list.extend` to create a transformed list\n  --> interface\\tui\\app.py:66:13\n   |\n64 |           lines = [header, \"-\" * len(header)]\n65 |           for row in rows:\n66 | /             lines.append(\n67 | |                 f\"{row.id[:8]} {row.status.ljust(9)} \"\n68 | |                 f\"{row.due_display.ljust(18)} {row.priority_display.ljust(8)} \"\n69 | |                 f\"{row.tags_display[:18].ljust(18)} {row.description}\"\n70 | |             )\n   | |_____________^\n71 |           if len(lines) == 2:\n72 |               lines.append(\"(no tasks found)\")\n   |\nhelp: Replace for loop with list.extend\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> interface\\tui\\app.py:71:26\n   |\n69 |                 f\"{row.tags_display[:18].ljust(18)} {row.description}\"\n70 |             )\n71 |         if len(lines) == 2:\n   |                          ^\n72 |             lines.append(\"(no tasks found)\")\n73 |         self.update(\"\\n\".join(lines))\n   |\n\nRUF012 Mutable class attributes should be annotated with `typing.ClassVar`\n  --> interface\\tui\\app.py:80:16\n   |\n79 |       TITLE = \"Legatus Acta Schedae \u00e2\u20ac\u201d TUI\"\n80 |       BINDINGS = [\n   |  ________________^\n81 | |         Binding(\"q\", \"quit\", \"Quit\"),\n82 | |         Binding(\"r\", \"refresh\", \"Refresh\"),\n83 | |         Binding(\"/\", \"focus_search\", \"Search\"),\n84 | |     ]\n   | |_____^\n85 |\n86 |       def __init__(self, controller: TaskController | None = None) -> None:\n   |\n\nANN201 Missing return type annotation for public function `compose`\n  --> interface\\tui\\app.py:95:9\n   |\n93 |         self._summary: Any | None = None\n94 |\n95 |     def compose(self):  # type: ignore[override]\n   |         ^^^^^^^\n96 |         yield Header(show_clock=True)\n97 |         summary: Any = Static(\"AI summary unavailable\", id=\"summary\")\n   |\nhelp: Add return type annotation\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `event`\n   --> interface\\tui\\app.py:125:41\n    |\n123 |             self._search.focus()\n124 |\n125 |     def on_input_submitted(self, event: Any) -> None:\n    |                                         ^^^\n126 |         if getattr(event, \"input\", None) is None:\n127 |             return\n    |\n\nE501 Line too long (104 > 88)\n   --> interface\\tui\\app.py:146:89\n    |\n144 |         top_tags = \", \".join(summary.top_tags) if summary.top_tags else \"-\"\n145 |         lines = [\n146 |             f\"Pending: {summary.pending} | Completed: {summary.completed} | Overdue: {summary.overdue}\",\n    |                                                                                         ^^^^^^^^^^^^^^^^\n147 |             f\"Top tags: {top_tags}\",\n148 |         ]\n    |\n\nE501 Line too long (109 > 88)\n   --> interface\\tui\\app.py:161:89\n    |\n159 |                 priority: str = item.priority or \"-\"\n160 |                 lines.append(\n161 |                     f\"  \u00e2\u20ac\u00a2 {item.description} (id={item.task_id[:8]}, due={due_display}, priority={priority})\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n162 |                 )\n163 |         else:\n    |\n\nINP001 File `interface\\tui\\controller.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> interface\\tui\\controller.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\tui\\controller.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> interface\\tui\\controller.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> interface\\tui\\controller.py:7:1\n  |\n5 | from datetime import UTC, datetime, timedelta\n6 |\n7 | from ...core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ...core.services.ai_service import TaskSummary\n9 | from ...infrastructure.config import AppConfig, load_config\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.domain.task.Task` into a type-checking block\n --> interface\\tui\\controller.py:7:33\n  |\n5 | from datetime import UTC, datetime, timedelta\n6 |\n7 | from ...core.domain.task import Task\n  |                                 ^^^^\n8 | from ...core.services.ai_service import TaskSummary\n9 | from ...infrastructure.config import AppConfig, load_config\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:8:1\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.TaskSummary` into a type-checking block\n  --> interface\\tui\\controller.py:8:41\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n   |                                         ^^^^^^^^^^^\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:9:1\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ...infrastructure.di import AppContext, build_context\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:9:1\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ...infrastructure.di import AppContext, build_context\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:10:1\n   |\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:10:1\n   |\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:11:1\n   |\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n11 | from ...infrastructure.logging import setup_logging\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nANN202 Missing return type annotation for private function `sort_key`\n   --> interface\\tui\\controller.py:100:13\n    |\n 98 |             ]\n 99 |\n100 |         def sort_key(task: Task):\n    |             ^^^^^^^^\n101 |             due = task.due or datetime.max.replace(tzinfo=UTC)\n102 |             return (task.status != \"pending\", due, task.created)\n    |\nhelp: Add return type annotation\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\tui\\controller.py:141:19\n    |\n139 |     ) -> TaskRow:\n140 |         if days is None and not until:\n141 |             raise ValueError(\"Provide at least one defer option\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n142 |         delta = timedelta(days=days) if days is not None else None\n143 |         until_dt = _parse_due(until) if until else None\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\tui\\controller.py:141:30\n    |\n139 |     ) -> TaskRow:\n140 |         if days is None and not until:\n141 |             raise ValueError(\"Provide at least one defer option\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n142 |         delta = timedelta(days=days) if days is not None else None\n143 |         until_dt = _parse_due(until) if until else None\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\tui\\controller.py:163:15\n    |\n161 |             if task.id == task_id:\n162 |                 return TaskRow.from_task(task)\n163 |         raise KeyError(f\"Task {task_id} not found\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n164 |\n165 |     def ai_summary(self, top_n: int = 3) -> TaskSummary:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\tui\\controller.py:163:24\n    |\n161 |             if task.id == task_id:\n162 |                 return TaskRow.from_task(task)\n163 |         raise KeyError(f\"Task {task_id} not found\")\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n164 |\n165 |     def ai_summary(self, top_n: int = 3) -> TaskSummary:\n    |\nhelp: Assign to variable; remove f-string literal\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:9:1\n   |\n 7 | from typing import Any\n 8 |\n 9 | from ..core.domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..core.domain.task import Task\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:10:1\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..core.domain.task.Task` into a type-checking block\n  --> plugins\\ai_assistant.py:10:32\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n   |                                ^^^^\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:11:1\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:11:1\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\calendar_sync.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\calendar_sync.py:7:1\n  |\n6 | from ..core.domain import events\n7 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\calendar_sync.py:7:1\n  |\n6 | from ..core.domain import events\n7 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:7:1\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..core.domain.task.Task` into a type-checking block\n --> plugins\\task_scoring.py:7:32\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n  |                                ^^^^\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:8:1\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:8:1\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nINP001 File `tests\\test_ai_briefing_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_ai_briefing_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_ai_briefing_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nARG002 Unused method argument: `now`\n  --> tests\\test_ai_briefing_service.py:25:18\n   |\n24 |     def summarize(\n25 |         self, *, now: datetime | None = None, top_n: int = 3\n   |                  ^^^\n26 |     ) -> TaskSummary:\n27 |         return self._summary\n   |\n\nARG002 Unused method argument: `top_n`\n  --> tests\\test_ai_briefing_service.py:25:47\n   |\n24 |     def summarize(\n25 |         self, *, now: datetime | None = None, top_n: int = 3\n   |                                               ^^^^^\n26 |     ) -> TaskSummary:\n27 |         return self._summary\n   |\n\nANN201 Missing return type annotation for public function `generate`\n  --> tests\\test_ai_briefing_service.py:34:9\n   |\n32 |         self._guidance = guidance\n33 |\n34 |     def generate(\n   |         ^^^^^^^^\n35 |         self,\n36 |         *,\n   |\nhelp: Add return type annotation\n\nARG002 Unused method argument: `now`\n  --> tests\\test_ai_briefing_service.py:37:9\n   |\n35 |         self,\n36 |         *,\n37 |         now: datetime | None = None,\n   |         ^^^\n38 |         limit: int | None = None,\n39 |         include_completed: bool = False,\n   |\n\nARG002 Unused method argument: `limit`\n  --> tests\\test_ai_briefing_service.py:38:9\n   |\n36 |         *,\n37 |         now: datetime | None = None,\n38 |         limit: int | None = None,\n   |         ^^^^^\n39 |         include_completed: bool = False,\n40 |         tags: Sequence[str] | None = None,\n   |\n\nARG002 Unused method argument: `include_completed`\n  --> tests\\test_ai_briefing_service.py:39:9\n   |\n37 |         now: datetime | None = None,\n38 |         limit: int | None = None,\n39 |         include_completed: bool = False,\n   |         ^^^^^^^^^^^^^^^^^\n40 |         tags: Sequence[str] | None = None,\n41 |     ):\n   |\n\nARG002 Unused method argument: `tags`\n  --> tests\\test_ai_briefing_service.py:40:9\n   |\n38 |         limit: int | None = None,\n39 |         include_completed: bool = False,\n40 |         tags: Sequence[str] | None = None,\n   |         ^^^^\n41 |     ):\n42 |         return list(self._guidance)\n   |\n\nE501 Line too long (100 > 88)\n  --> tests\\test_ai_briefing_service.py:78:89\n   |\n76 |     )\n77 |\n78 |     service = AIBriefingService(StubAIService(summary), StubReviewGuidanceService([guidance_entry]))  # type: ignore[arg-type]\n   |                                                                                         ^^^^^^^^^^^^\n79 |\n80 |     briefing = service.generate(now=now, limit=3)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_briefing_service.py:82:5\n   |\n80 |     briefing = service.generate(now=now, limit=3)\n81 |\n82 |     assert briefing.summary is summary\n   |     ^^^^^^\n83 |     assert briefing.guidance == [guidance_entry]\n84 |     assert briefing.generated_at == now\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_briefing_service.py:83:5\n   |\n82 |     assert briefing.summary is summary\n83 |     assert briefing.guidance == [guidance_entry]\n   |     ^^^^^^\n84 |     assert briefing.generated_at == now\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_briefing_service.py:84:5\n   |\n82 |     assert briefing.summary is summary\n83 |     assert briefing.guidance == [guidance_entry]\n84 |     assert briefing.generated_at == now\n   |     ^^^^^^\n   |\n\nINP001 File `tests\\test_ai_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_ai_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_ai_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:67:5\n   |\n65 |     summary = service.summarize(now=moment, top_n=2)\n66 |\n67 |     assert summary.pending == 2\n   |     ^^^^^^\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_ai_service.py:67:31\n   |\n65 |     summary = service.summarize(now=moment, top_n=2)\n66 |\n67 |     assert summary.pending == 2\n   |                               ^\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:68:5\n   |\n67 |     assert summary.pending == 2\n68 |     assert summary.completed == 1\n   |     ^^^^^^\n69 |     assert summary.overdue == 1\n70 |     assert summary.top_tags[0] == \"work\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:69:5\n   |\n67 |     assert summary.pending == 2\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n   |     ^^^^^^\n70 |     assert summary.top_tags[0] == \"work\"\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:70:5\n   |\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n70 |     assert summary.top_tags[0] == \"work\"\n   |     ^^^^^^\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n72 |     assert all(item.due and item.due >= moment for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:71:5\n   |\n69 |     assert summary.overdue == 1\n70 |     assert summary.top_tags[0] == \"work\"\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n   |     ^^^^^^\n72 |     assert all(item.due and item.due >= moment for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:72:5\n   |\n70 |     assert summary.top_tags[0] == \"work\"\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n72 |     assert all(item.due and item.due >= moment for item in summary.upcoming)\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:82:5\n   |\n80 |     prompts = service.draft_followups(task)\n81 |\n82 |     assert any(\"follow-up\" in prompt.lower() for prompt in prompts)\n   |     ^^^^^^\n83 |     assert any(\"meeting\" in prompt.lower() for prompt in prompts)\n84 |     assert \"account\" in prompts[0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:83:5\n   |\n82 |     assert any(\"follow-up\" in prompt.lower() for prompt in prompts)\n83 |     assert any(\"meeting\" in prompt.lower() for prompt in prompts)\n   |     ^^^^^^\n84 |     assert \"account\" in prompts[0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:84:5\n   |\n82 |     assert any(\"follow-up\" in prompt.lower() for prompt in prompts)\n83 |     assert any(\"meeting\" in prompt.lower() for prompt in prompts)\n84 |     assert \"account\" in prompts[0]\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:93:5\n   |\n91 |     ideas = service.brainstorm(\"quarterly planning\", variants=4)\n92 |\n93 |     assert len(ideas) == 4\n   |     ^^^^^^\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n  --> tests\\test_ai_service.py:93:26\n   |\n91 |     ideas = service.brainstorm(\"quarterly planning\", variants=4)\n92 |\n93 |     assert len(ideas) == 4\n   |                          ^\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:94:5\n   |\n93 |     assert len(ideas) == 4\n94 |     assert ideas[0].startswith(\"Plan:\")\n   |     ^^^^^^\n95 |     assert ideas[-1].startswith(\"Share:\")\n96 |     assert all(\"quarterly planning\" in idea for idea in ideas)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:95:5\n   |\n93 |     assert len(ideas) == 4\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n   |     ^^^^^^\n96 |     assert all(\"quarterly planning\" in idea for idea in ideas)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:96:5\n   |\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n96 |     assert all(\"quarterly planning\" in idea for idea in ideas)\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_ai_service.py:106:5\n    |\n104 |     ideas = service.brainstorm(\"ops review\", variants=variants)\n105 |\n106 |     assert len(ideas) == variants\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_api.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_api.py:1:1\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_api.py:6:21\n  |\n5 | import base64\n6 | from pathlib import Path\n  |                     ^^^^\n7 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:25:35\n   |\n24 | @pytest.fixture\n25 | def api_client(tmp_path: Path) -> Any:\n   |                                   ^^^\n26 |     cfg = load_config(\n27 |         {\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:47:38\n   |\n47 | def test_health_endpoint(api_client: Any) -> None:\n   |                                      ^^^\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:49:5\n   |\n47 | def test_health_endpoint(api_client: Any) -> None:\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n   |     ^^^^^^\n50 |     assert response.json()[\"status\"] == \"ok\"\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n  --> tests\\test_api.py:49:36\n   |\n47 | def test_health_endpoint(api_client: Any) -> None:\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n   |                                    ^^^\n50 |     assert response.json()[\"status\"] == \"ok\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:50:5\n   |\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n50 |     assert response.json()[\"status\"] == \"ok\"\n   |     ^^^^^^\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:53:55\n   |\n53 | def test_scan_endpoint_returns_ai_summary(api_client: Any) -> None:\n   |                                                       ^^^\n54 |     ctx = api_client.app.state.ctx  # type: ignore[attr-defined]\n55 |     task = ctx.task_service.add_task(\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:71:5\n   |\n69 |     )\n70 |\n71 |     assert response.status_code == 200\n   |     ^^^^^^\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n  --> tests\\test_api.py:71:36\n   |\n69 |     )\n70 |\n71 |     assert response.status_code == 200\n   |                                    ^^^\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:73:5\n   |\n71 |     assert response.status_code == 200\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n   |     ^^^^^^\n74 |     assert payload[\"task\"][\"updated\"] is True\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:74:5\n   |\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n74 |     assert payload[\"task\"][\"updated\"] is True\n   |     ^^^^^^\n75 |\n76 |     summary = payload[\"ai_summary\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:77:5\n   |\n76 |     summary = payload[\"ai_summary\"]\n77 |     assert summary[\"pending\"] >= 0\n   |     ^^^^^^\n78 |     assert summary[\"completed\"] >= 0\n79 |     assert summary[\"top_tags\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:78:5\n   |\n76 |     summary = payload[\"ai_summary\"]\n77 |     assert summary[\"pending\"] >= 0\n78 |     assert summary[\"completed\"] >= 0\n   |     ^^^^^^\n79 |     assert summary[\"top_tags\"]\n80 |     assert isinstance(summary[\"upcoming\"], list)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:79:5\n   |\n77 |     assert summary[\"pending\"] >= 0\n78 |     assert summary[\"completed\"] >= 0\n79 |     assert summary[\"top_tags\"]\n   |     ^^^^^^\n80 |     assert isinstance(summary[\"upcoming\"], list)\n81 |     if summary[\"upcoming\"]:\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:80:5\n   |\n78 |     assert summary[\"completed\"] >= 0\n79 |     assert summary[\"top_tags\"]\n80 |     assert isinstance(summary[\"upcoming\"], list)\n   |     ^^^^^^\n81 |     if summary[\"upcoming\"]:\n82 |         first = summary[\"upcoming\"][0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:83:9\n   |\n81 |     if summary[\"upcoming\"]:\n82 |         first = summary[\"upcoming\"][0]\n83 |         assert \"task_id\" in first and \"description\" in first\n   |         ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_api.py:83:9\n   |\n81 |     if summary[\"upcoming\"]:\n82 |         first = summary[\"upcoming\"][0]\n83 |         assert \"task_id\" in first and \"description\" in first\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:86:53\n   |\n86 | def test_collaboration_bundle_endpoints(api_client: Any) -> None:\n   |                                                     ^^^\n87 |     payload = base64.b64encode(b'{\"hello\": \"world\"}').decode(\"utf-8\")\n88 |     metadata = {\"label\": \"demo\"}\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:98:5\n    |\n 96 |         },\n 97 |     )\n 98 |     assert response.status_code == 201\n    |     ^^^^^^\n 99 |     created = response.json()\n100 |     bundle_id = created[\"bundle_id\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `201` with a constant variable\n   --> tests\\test_api.py:98:36\n    |\n 96 |         },\n 97 |     )\n 98 |     assert response.status_code == 201\n    |                                    ^^^\n 99 |     created = response.json()\n100 |     bundle_id = created[\"bundle_id\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:101:5\n    |\n 99 |     created = response.json()\n100 |     bundle_id = created[\"bundle_id\"]\n101 |     assert created[\"metadata\"] == metadata\n    |     ^^^^^^\n102 |\n103 |     payload_two = base64.b64encode(b'{\"hello\": \"second\"}').decode(\"utf-8\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:112:5\n    |\n110 |         },\n111 |     )\n112 |     assert response_two.status_code == 201\n    |     ^^^^^^\n113 |     created_two = response_two.json()\n114 |     bundle_id_two = created_two[\"bundle_id\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `201` with a constant variable\n   --> tests\\test_api.py:112:40\n    |\n110 |         },\n111 |     )\n112 |     assert response_two.status_code == 201\n    |                                        ^^^\n113 |     created_two = response_two.json()\n114 |     bundle_id_two = created_two[\"bundle_id\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:117:5\n    |\n116 |     latest = api_client.get(\"/api/collab/bundles/latest\")\n117 |     assert latest.status_code == 200\n    |     ^^^^^^\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:117:34\n    |\n116 |     latest = api_client.get(\"/api/collab/bundles/latest\")\n117 |     assert latest.status_code == 200\n    |                                  ^^^\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:119:5\n    |\n117 |     assert latest.status_code == 200\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n    |     ^^^^^^\n120 |     assert (\n121 |         base64.b64decode(latest_payload[\"payload\"]) == b'{\"hello\": \"second\"}'\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:120:5\n    |\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n120 |     assert (\n    |     ^^^^^^\n121 |         base64.b64decode(latest_payload[\"payload\"]) == b'{\"hello\": \"second\"}'\n122 |     )\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:125:5\n    |\n124 |     specific = api_client.get(f\"/api/collab/bundles/{bundle_id}\")\n125 |     assert specific.status_code == 200\n    |     ^^^^^^\n126 |     assert specific.json()[\"bundle_id\"] == bundle_id\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:125:36\n    |\n124 |     specific = api_client.get(f\"/api/collab/bundles/{bundle_id}\")\n125 |     assert specific.status_code == 200\n    |                                    ^^^\n126 |     assert specific.json()[\"bundle_id\"] == bundle_id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:126:5\n    |\n124 |     specific = api_client.get(f\"/api/collab/bundles/{bundle_id}\")\n125 |     assert specific.status_code == 200\n126 |     assert specific.json()[\"bundle_id\"] == bundle_id\n    |     ^^^^^^\n127 |\n128 |     listing = api_client.get(\"/api/collab/bundles?limit=5\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:129:5\n    |\n128 |     listing = api_client.get(\"/api/collab/bundles?limit=5\")\n129 |     assert listing.status_code == 200\n    |     ^^^^^^\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:129:35\n    |\n128 |     listing = api_client.get(\"/api/collab/bundles?limit=5\")\n129 |     assert listing.status_code == 200\n    |                                   ^^^\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:131:5\n    |\n129 |     assert listing.status_code == 200\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n    |     ^^^^^^\n132 |     assert len(listing_payload) >= 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:132:5\n    |\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n132 |     assert len(listing_payload) >= 2\n    |     ^^^^^^\n133 |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_api.py:132:36\n    |\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n132 |     assert len(listing_payload) >= 2\n    |                                    ^\n133 |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:135:5\n    |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n135 |     assert prune.status_code == 200\n    |     ^^^^^^\n136 |     pruned_payload = cast(\"dict[str, Any]\", prune.json())\n137 |     assert pruned_payload[\"remaining\"] == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:135:33\n    |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n135 |     assert prune.status_code == 200\n    |                                 ^^^\n136 |     pruned_payload = cast(\"dict[str, Any]\", prune.json())\n137 |     assert pruned_payload[\"remaining\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:137:5\n    |\n135 |     assert prune.status_code == 200\n136 |     pruned_payload = cast(\"dict[str, Any]\", prune.json())\n137 |     assert pruned_payload[\"remaining\"] == 1\n    |     ^^^^^^\n138 |     expected_removed = max(len(listing_payload) - 1, 0)\n139 |     assert len(pruned_payload[\"removed\"]) == expected_removed\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:139:5\n    |\n137 |     assert pruned_payload[\"remaining\"] == 1\n138 |     expected_removed = max(len(listing_payload) - 1, 0)\n139 |     assert len(pruned_payload[\"removed\"]) == expected_removed\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_automation_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_automation_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_automation_service.py:4:29\n  |\n3 | import json\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from typing import cast\n  |\nhelp: Move into type-checking block\n\nE501 Line too long (89 > 88)\n  --> tests\\test_automation_service.py:73:89\n   |\n71 |             self.events: list[tuple[str, dict[str, object]]] = []\n72 |\n73 |         def track(self, event: str, properties: dict[str, object] | None = None) -> None:  # type: ignore[override]\n   |                                                                                         ^\n74 |             self.events.append((event, properties or {}))\n   |\n\nARG002 Unused method argument: `now`\n  --> tests\\test_automation_service.py:94:22\n   |\n92 |     class StubAIService:\n93 |         def summarize(\n94 |             self, *, now: datetime | None = None, top_n: int = 3\n   |                      ^^^\n95 |         ) -> TaskSummary:\n96 |             return summary\n   |\n\nARG002 Unused method argument: `top_n`\n  --> tests\\test_automation_service.py:94:51\n   |\n92 |     class StubAIService:\n93 |         def summarize(\n94 |             self, *, now: datetime | None = None, top_n: int = 3\n   |                                                   ^^^^^\n95 |         ) -> TaskSummary:\n96 |             return summary\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:112:5\n    |\n110 |     )\n111 |\n112 |     assert len(captured) == 1\n    |     ^^^^^^\n113 |     request = captured[0]\n114 |     assert request.url == httpx.URL(\"https://example.com/automation\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:114:5\n    |\n112 |     assert len(captured) == 1\n113 |     request = captured[0]\n114 |     assert request.url == httpx.URL(\"https://example.com/automation\")\n    |     ^^^^^^\n115 |     payload = json.loads(request.content.decode(\"utf-8\"))\n116 |     assert payload[\"event\"] == \"card_scanned\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:116:5\n    |\n114 |     assert request.url == httpx.URL(\"https://example.com/automation\")\n115 |     payload = json.loads(request.content.decode(\"utf-8\"))\n116 |     assert payload[\"event\"] == \"card_scanned\"\n    |     ^^^^^^\n117 |     inner = payload[\"payload\"]\n118 |     assert inner[\"task\"][\"id\"] == task.id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:118:5\n    |\n116 |     assert payload[\"event\"] == \"card_scanned\"\n117 |     inner = payload[\"payload\"]\n118 |     assert inner[\"task\"][\"id\"] == task.id\n    |     ^^^^^^\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:119:5\n    |\n117 |     inner = payload[\"payload\"]\n118 |     assert inner[\"task\"][\"id\"] == task.id\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n    |     ^^^^^^\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:120:5\n    |\n118 |     assert inner[\"task\"][\"id\"] == task.id\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n    |     ^^^^^^\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:121:5\n    |\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n    |     ^^^^^^\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n123 |     assert telemetry.events == [\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> tests\\test_automation_service.py:121:46\n    |\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n    |                                              ^\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n123 |     assert telemetry.events == [\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:122:5\n    |\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n    |     ^^^^^^\n123 |     assert telemetry.events == [\n124 |         (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:123:5\n    |\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n123 |     assert telemetry.events == [\n    |     ^^^^^^\n124 |         (\n125 |             \"automation.dispatch\",\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:141:5\n    |\n139 |     service = AutomationService(dispatcher, repo, None)\n140 |\n141 |     assert service.enabled is False\n    |     ^^^^^^\n142 |     # Publishing should not raise\n143 |     dispatcher.publish(\n    |\n\nC408 Unnecessary `tuple()` call (rewrite as a literal)\n   --> tests\\test_automation_service.py:148:18\n    |\n146 |             task_id=None,\n147 |             action=\"scan\",\n148 |             tags=tuple(),\n    |                  ^^^^^^^\n149 |             metadata={},\n150 |             task_error=None,\n    |\nhelp: Rewrite as a literal\n\nINP001 File `tests\\test_card_action_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_card_action_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_card_action_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime\n5 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_card_action_service.py:5:21\n  |\n3 | from collections.abc import Iterable\n4 | from datetime import UTC, datetime\n5 | from pathlib import Path\n  |                     ^^^^\n6 |\n7 | import pytest\n  |\nhelp: Move into type-checking block\n\nANN202 Missing return type annotation for private function `_make_service`\n  --> tests\\test_card_action_service.py:47:5\n   |\n47 | def _make_service(tmp_path: Path):\n   |     ^^^^^^^^^^^^^\n48 |     storage = Storage(str(tmp_path / \"cards.db\"))\n49 |     dispatcher = events.EventDispatcher()\n   |\nhelp: Add return type annotation\n\nANN201 Missing return type annotation for public function `test_scan_completes_linked_task`\n  --> tests\\test_card_action_service.py:59:5\n   |\n59 | def test_scan_completes_linked_task(tmp_path: Path):\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n60 |     storage, repo, dispatcher, service = _make_service(tmp_path)\n61 |     task = Task.create(\"Demo task\")\n   |\nhelp: Add return type annotation: `None`\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:83:5\n   |\n82 |     saved = repo.get(task.id)\n83 |     assert saved is not None\n   |     ^^^^^^\n84 |     assert saved.status == \"completed\"\n85 |     assert result.card_status == \"completed\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:84:5\n   |\n82 |     saved = repo.get(task.id)\n83 |     assert saved is not None\n84 |     assert saved.status == \"completed\"\n   |     ^^^^^^\n85 |     assert result.card_status == \"completed\"\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:85:5\n   |\n83 |     assert saved is not None\n84 |     assert saved.status == \"completed\"\n85 |     assert result.card_status == \"completed\"\n   |     ^^^^^^\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:86:5\n   |\n84 |     assert saved.status == \"completed\"\n85 |     assert result.card_status == \"completed\"\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n   |     ^^^^^^\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:87:5\n   |\n85 |     assert result.card_status == \"completed\"\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n   |     ^^^^^^\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:88:5\n   |\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_card_action_service.py:88:5\n   |\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nANN201 Missing return type annotation for public function `test_scan_without_task_tag_marks_card`\n  --> tests\\test_card_action_service.py:91:5\n   |\n91 | def test_scan_without_task_tag_marks_card(tmp_path: Path):\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n92 |     storage, _, _, service = _make_service(tmp_path)\n93 |     card = Notecard(\n   |\nhelp: Add return type annotation: `None`\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:104:5\n    |\n102 |     result = service.handle_scan(card.id, task_update=\"none\")\n103 |\n104 |     assert result.card_status == \"acted\"\n    |     ^^^^^^\n105 |     assert result.task.updated is False\n106 |     stored = storage.get_card(card.id)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:105:5\n    |\n104 |     assert result.card_status == \"acted\"\n105 |     assert result.task.updated is False\n    |     ^^^^^^\n106 |     stored = storage.get_card(card.id)\n107 |     assert stored is not None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:107:5\n    |\n105 |     assert result.task.updated is False\n106 |     stored = storage.get_card(card.id)\n107 |     assert stored is not None\n    |     ^^^^^^\n108 |     assert stored.status == \"acted\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:108:5\n    |\n106 |     stored = storage.get_card(card.id)\n107 |     assert stored is not None\n108 |     assert stored.status == \"acted\"\n    |     ^^^^^^\n    |\n\nANN201 Missing return type annotation for public function `test_scan_missing_card_raises`\n   --> tests\\test_card_action_service.py:111:5\n    |\n111 | def test_scan_missing_card_raises(tmp_path: Path):\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |     _, _, _, service = _make_service(tmp_path)\n113 |     with pytest.raises(CardNotFoundError):\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `test_scan_with_missing_task_records_error`\n   --> tests\\test_card_action_service.py:117:5\n    |\n117 | def test_scan_with_missing_task_records_error(tmp_path: Path):\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n118 |     storage, _, _, service = _make_service(tmp_path)\n119 |     card = Notecard(\n    |\nhelp: Add return type annotation: `None`\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:130:5\n    |\n128 |     result = service.handle_scan(card.id)\n129 |\n130 |     assert result.task.error == \"task_not_found\"\n    |     ^^^^^^\n131 |     assert result.card_status == \"acted\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:131:5\n    |\n130 |     assert result.task.error == \"task_not_found\"\n131 |     assert result.card_status == \"acted\"\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_cli_ai_briefing.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_cli_ai_briefing.py:1:1\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_cli_ai_briefing.py:4:21\n  |\n3 | from datetime import UTC, datetime, timedelta\n4 | from pathlib import Path\n  |                     ^^^^\n5 | from typing import Any, Protocol, cast\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n --> tests\\test_cli_ai_briefing.py:7:8\n  |\n5 | from typing import Any, Protocol, cast\n6 |\n7 | import pytest\n  |        ^^^^^^\n8 | from typer.testing import CliRunner  # type: ignore[import-not-found]\n9 | from x_legatus_acta_schedae_x.core.domain.review import ReviewRecord\n  |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `app`\n  --> tests\\test_cli_ai_briefing.py:40:27\n   |\n39 | class _CliRunner(Protocol):\n40 |     def invoke(self, app: Any, args: list[str]) -> _CliResult: ...\n   |                           ^^^\n   |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_ai_briefing.py:100:5\n    |\n 98 |     ctx = StubContext(briefing)\n 99 |\n100 |     from x_legatus_acta_schedae_x import interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n101 |\n102 |     interface.cli.main  # type: ignore[attr-defined]\n    |\n\nB018 Found useless expression. Either assign it to a variable or remove it.\n   --> tests\\test_cli_ai_briefing.py:102:5\n    |\n100 |     from x_legatus_acta_schedae_x import interface\n101 |\n102 |     interface.cli.main  # type: ignore[attr-defined]\n    |     ^^^^^^^^^^^^^^^^^^\n103 |\n104 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_ai_briefing.py:104:5\n    |\n102 |     interface.cli.main  # type: ignore[attr-defined]\n103 |\n104 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |\n106 |     monkeypatch.setattr(cli_main, \"_ctx\", lambda: ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:114:5\n    |\n112 |     )\n113 |\n114 |     assert result.exit_code == 0\n    |     ^^^^^^\n115 |     assert \"AI Daily Briefing\" in result.stdout\n116 |     assert \"Pending:   4\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:115:5\n    |\n114 |     assert result.exit_code == 0\n115 |     assert \"AI Daily Briefing\" in result.stdout\n    |     ^^^^^^\n116 |     assert \"Pending:   4\" in result.stdout\n117 |     assert \"delegate follow-up\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:116:5\n    |\n114 |     assert result.exit_code == 0\n115 |     assert \"AI Daily Briefing\" in result.stdout\n116 |     assert \"Pending:   4\" in result.stdout\n    |     ^^^^^^\n117 |     assert \"delegate follow-up\" in result.stdout\n118 |     assert output_path.exists()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:117:5\n    |\n115 |     assert \"AI Daily Briefing\" in result.stdout\n116 |     assert \"Pending:   4\" in result.stdout\n117 |     assert \"delegate follow-up\" in result.stdout\n    |     ^^^^^^\n118 |     assert output_path.exists()\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:118:5\n    |\n116 |     assert \"Pending:   4\" in result.stdout\n117 |     assert \"delegate follow-up\" in result.stdout\n118 |     assert output_path.exists()\n    |     ^^^^^^\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:120:5\n    |\n118 |     assert output_path.exists()\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n    |     ^^^^^^\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:121:5\n    |\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n    |     ^^^^^^\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> tests\\test_cli_ai_briefing.py:121:57\n    |\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n    |                                                         ^\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:122:5\n    |\n120 |     assert \"AI Daily Briefing\" in written\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n    |     ^^^^^^\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:123:5\n    |\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_cli_collab.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_cli_collab.py:1:1\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `app`\n  --> tests\\test_cli_collab.py:94:27\n   |\n93 | class _CliRunner(Protocol):\n94 |     def invoke(self, app: Any, args: list[str]) -> _CliResult: ...\n   |                           ^^^\n   |\n\nPYI034 `__enter__` methods in classes like `StubPushClient` usually return `self` at runtime\n   --> tests\\test_cli_collab.py:102:9\n    |\n100 |         self.uploads = uploads\n101 |\n102 |     def __enter__(self) -> StubPushClient:\n    |         ^^^^^^^^^\n103 |         return self\n    |\nhelp: Use `Self` as return type\n\nANN001 Missing type annotation for function argument `exc_type`\n   --> tests\\test_cli_collab.py:105:24\n    |\n103 |         return self\n104 |\n105 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                        ^^^^^^^^\n106 |         return None\n    |\n\nANN001 Missing type annotation for function argument `exc`\n   --> tests\\test_cli_collab.py:105:34\n    |\n103 |         return self\n104 |\n105 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                  ^^^\n106 |         return None\n    |\n\nANN001 Missing type annotation for function argument `tb`\n   --> tests\\test_cli_collab.py:105:39\n    |\n103 |         return self\n104 |\n105 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                       ^^\n106 |         return None\n    |\n\nPYI034 `__enter__` methods in classes like `StubPullClient` usually return `self` at runtime\n   --> tests\\test_cli_collab.py:139:9\n    |\n137 |         self.fetch_specific: list[str] = []\n138 |\n139 |     def __enter__(self) -> StubPullClient:\n    |         ^^^^^^^^^\n140 |         return self\n    |\nhelp: Use `Self` as return type\n\nANN001 Missing type annotation for function argument `exc_type`\n   --> tests\\test_cli_collab.py:142:24\n    |\n140 |         return self\n141 |\n142 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                        ^^^^^^^^\n143 |         return None\n    |\n\nANN001 Missing type annotation for function argument `exc`\n   --> tests\\test_cli_collab.py:142:34\n    |\n140 |         return self\n141 |\n142 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                  ^^^\n143 |         return None\n    |\n\nANN001 Missing type annotation for function argument `tb`\n   --> tests\\test_cli_collab.py:142:39\n    |\n140 |         return self\n141 |\n142 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                       ^^\n143 |         return None\n    |\n\nARG002 Unused method argument: `args`\n   --> tests\\test_cli_collab.py:145:28\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                            ^^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:145:34\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                                  ^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nARG002 Unused method argument: `kwargs`\n   --> tests\\test_cli_collab.py:145:41\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                                         ^^^^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:145:49\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                                                 ^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> tests\\test_cli_collab.py:146:15\n    |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n147 |\n148 |     def fetch_latest_bundle(self) -> BundleDownloadResult | None:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> tests\\test_cli_collab.py:146:30\n    |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n147 |\n148 |     def fetch_latest_bundle(self) -> BundleDownloadResult | None:\n    |\nhelp: Assign to variable; remove string literal\n\nPYI034 `__enter__` methods in classes like `StubHistoryClient` usually return `self` at runtime\n   --> tests\\test_cli_collab.py:175:9\n    |\n173 |         self._prune_remaining = prune_remaining\n174 |\n175 |     def __enter__(self) -> StubHistoryClient:\n    |         ^^^^^^^^^\n176 |         return self\n    |\nhelp: Use `Self` as return type\n\nANN001 Missing type annotation for function argument `exc_type`\n   --> tests\\test_cli_collab.py:178:24\n    |\n176 |         return self\n177 |\n178 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                        ^^^^^^^^\n179 |         return None\n    |\n\nANN001 Missing type annotation for function argument `exc`\n   --> tests\\test_cli_collab.py:178:34\n    |\n176 |         return self\n177 |\n178 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                  ^^^\n179 |         return None\n    |\n\nANN001 Missing type annotation for function argument `tb`\n   --> tests\\test_cli_collab.py:178:39\n    |\n176 |         return self\n177 |\n178 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                       ^^\n179 |         return None\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:241:19\n    |\n239 |     uploads: list[dict[str, Any]] = []\n240 |\n241 |     def _ctx() -> Any:\n    |                   ^^^\n242 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:245:25\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:245:31\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:245:38\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:245:46\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:249:5\n    |\n247 |         return StubPushClient(base_url, uploads)\n248 |\n249 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n250 |\n251 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:270:5\n    |\n268 |     )\n269 |\n270 |     assert result.exit_code == 0\n    |     ^^^^^^\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:271:5\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n    |     ^^^^^^\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:272:5\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |     ^^^^^^\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:272:5\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |\nhelp: Break down assertion into multiple parts\n\nS105 Possible hardcoded password assigned to: \"passphrase\"\n   --> tests\\test_cli_collab.py:272:68\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |                                                                    ^^^^^^^^\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:273:5\n    |\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n    |     ^^^^^^\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> tests\\test_cli_collab.py:273:43\n    |\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n    |                                           ^\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:274:5\n    |\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |     ^^^^^^\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:276:5\n    |\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n    |     ^^^^^^\n277 |     assert metadata[\"include_completed\"] is True\n278 |     ai_meta = metadata[\"ai_summary\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_cli_collab.py:276:33\n    |\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n    |                                 ^\n277 |     assert metadata[\"include_completed\"] is True\n278 |     ai_meta = metadata[\"ai_summary\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:277:5\n    |\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n277 |     assert metadata[\"include_completed\"] is True\n    |     ^^^^^^\n278 |     ai_meta = metadata[\"ai_summary\"]\n279 |     assert ai_meta[\"pending\"] == summary.pending\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:279:5\n    |\n277 |     assert metadata[\"include_completed\"] is True\n278 |     ai_meta = metadata[\"ai_summary\"]\n279 |     assert ai_meta[\"pending\"] == summary.pending\n    |     ^^^^^^\n280 |     assert ai_meta[\"completed\"] == summary.completed\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:280:5\n    |\n278 |     ai_meta = metadata[\"ai_summary\"]\n279 |     assert ai_meta[\"pending\"] == summary.pending\n280 |     assert ai_meta[\"completed\"] == summary.completed\n    |     ^^^^^^\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n282 |     assert ai_meta[\"top_tags\"] == summary.top_tags\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:281:5\n    |\n279 |     assert ai_meta[\"pending\"] == summary.pending\n280 |     assert ai_meta[\"completed\"] == summary.completed\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n    |     ^^^^^^\n282 |     assert ai_meta[\"top_tags\"] == summary.top_tags\n283 |     expected_due = (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:282:5\n    |\n280 |     assert ai_meta[\"completed\"] == summary.completed\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n282 |     assert ai_meta[\"top_tags\"] == summary.top_tags\n    |     ^^^^^^\n283 |     expected_due = (\n284 |         summary.upcoming[0].due.isoformat()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:288:5\n    |\n286 |         else None\n287 |     )\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n    |     ^^^^^^\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:289:5\n    |\n287 |     )\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n    |     ^^^^^^\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:290:5\n    |\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n    |     ^^^^^^\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:290:5\n    |\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:291:5\n    |\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n    |     ^^^^^^\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:292:5\n    |\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n    |     ^^^^^^\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n294 |     assert telemetry.events[0][1][\"overdue\"] == summary.overdue\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:293:5\n    |\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n    |     ^^^^^^\n294 |     assert telemetry.events[0][1][\"overdue\"] == summary.overdue\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:294:5\n    |\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n294 |     assert telemetry.events[0][1][\"overdue\"] == summary.overdue\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:321:19\n    |\n319 |     )\n320 |\n321 |     def _ctx() -> Any:\n    |                   ^^^\n322 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:325:25\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:325:31\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:325:38\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:325:46\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:329:5\n    |\n327 |         return StubPullClient(base_url, download)\n328 |\n329 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n330 |\n331 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:347:5\n    |\n345 |     )\n346 |\n347 |     assert result.exit_code == 0\n    |     ^^^^^^\n348 |     assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n349 |     assert (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:348:5\n    |\n347 |     assert result.exit_code == 0\n348 |     assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n    |     ^^^^^^\n349 |     assert (\n350 |         service.import_calls\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:349:5\n    |\n347 |     assert result.exit_code == 0\n348 |     assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n349 |     assert (\n    |     ^^^^^^\n350 |         service.import_calls\n351 |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:349:5\n    |\n347 |       assert result.exit_code == 0\n348 |       assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n349 | /     assert (\n350 | |         service.import_calls\n351 | |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n352 | |     )\n    | |_____^\n353 |       assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |       assert service.import_calls[0][\"payload\"] == payload\n    |\nhelp: Break down assertion into multiple parts\n\nS105 Possible hardcoded password assigned to: \"passphrase\"\n   --> tests\\test_cli_collab.py:351:54\n    |\n349 |     assert (\n350 |         service.import_calls\n351 |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n    |                                                      ^^^^^^^^\n352 |     )\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:353:5\n    |\n351 |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n352 |     )\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n    |     ^^^^^^\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:354:5\n    |\n352 |     )\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |     assert service.import_calls[0][\"payload\"] == payload\n    |     ^^^^^^\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:355:5\n    |\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n    |     ^^^^^^\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:355:5\n    |\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:356:5\n    |\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n    |     ^^^^^^\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:357:5\n    |\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:392:19\n    |\n390 |     clients: list[StubHistoryClient] = []\n391 |\n392 |     def _ctx() -> Any:\n    |                   ^^^\n393 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:396:25\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:396:31\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:396:38\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:396:46\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:402:5\n    |\n400 |         return client\n401 |\n402 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n403 |\n404 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:419:5\n    |\n417 |     )\n418 |\n419 |     assert result.exit_code == 0\n    |     ^^^^^^\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n421 |     assert \"bundle-1\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:420:5\n    |\n419 |     assert result.exit_code == 0\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n    |     ^^^^^^\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:421:5\n    |\n419 |     assert result.exit_code == 0\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n421 |     assert \"bundle-1\" in result.stdout\n    |     ^^^^^^\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:422:5\n    |\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n    |     ^^^^^^\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:423:5\n    |\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n    |     ^^^^^^\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:423:5\n    |\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:424:5\n    |\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n    |     ^^^^^^\n425 |     assert clients and clients[0].limits == [1]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:425:5\n    |\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |     ^^^^^^\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:425:5\n    |\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Break down assertion into multiple parts\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:451:19\n    |\n449 |     clients: list[StubHistoryClient] = []\n450 |\n451 |     def _ctx() -> Any:\n    |                   ^^^\n452 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:455:25\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:455:31\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:455:38\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:455:46\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:466:5\n    |\n464 |         return client\n465 |\n466 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n467 |\n468 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:483:5\n    |\n481 |     )\n482 |\n483 |     assert result.exit_code == 0\n    |     ^^^^^^\n484 |     assert \"Removed 1 bundle\" in result.stdout\n485 |     assert \"bundle-9\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:484:5\n    |\n483 |     assert result.exit_code == 0\n484 |     assert \"Removed 1 bundle\" in result.stdout\n    |     ^^^^^^\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:485:5\n    |\n483 |     assert result.exit_code == 0\n484 |     assert \"Removed 1 bundle\" in result.stdout\n485 |     assert \"bundle-9\" in result.stdout\n    |     ^^^^^^\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:486:5\n    |\n484 |     assert \"Removed 1 bundle\" in result.stdout\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n    |     ^^^^^^\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:487:5\n    |\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n    |     ^^^^^^\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:487:5\n    |\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:488:5\n    |\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n    |     ^^^^^^\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n490 |     assert clients and clients[0].prune_calls == [2]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:489:5\n    |\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |     ^^^^^^\n490 |     assert clients and clients[0].prune_calls == [2]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_cli_collab.py:489:51\n    |\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |                                                   ^\n490 |     assert clients and clients[0].prune_calls == [2]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:490:5\n    |\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n490 |     assert clients and clients[0].prune_calls == [2]\n    |     ^^^^^^\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:490:5\n    |\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n490 |     assert clients and clients[0].prune_calls == [2]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Break down assertion into multiple parts\n\nINP001 File `tests\\test_collaboration_hub.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_collaboration_hub.py:1:1\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_collaboration_hub.py:5:29\n  |\n3 | import base64\n4 | import json\n5 | from collections.abc import Mapping\n  |                             ^^^^^^^\n6 | from datetime import UTC, datetime\n7 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_collaboration_hub.py:7:21\n  |\n5 | from collections.abc import Mapping\n6 | from datetime import UTC, datetime\n7 | from pathlib import Path\n  |                     ^^^^\n8 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:28:5\n   |\n27 |     latest = store.latest()\n28 |     assert latest is not None\n   |     ^^^^^^\n29 |     assert latest.bundle_id == stored.bundle_id\n30 |     assert latest.path.read_bytes() == payload\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:29:5\n   |\n27 |     latest = store.latest()\n28 |     assert latest is not None\n29 |     assert latest.bundle_id == stored.bundle_id\n   |     ^^^^^^\n30 |     assert latest.path.read_bytes() == payload\n31 |     fetched = store.get(stored.bundle_id)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:30:5\n   |\n28 |     assert latest is not None\n29 |     assert latest.bundle_id == stored.bundle_id\n30 |     assert latest.path.read_bytes() == payload\n   |     ^^^^^^\n31 |     fetched = store.get(stored.bundle_id)\n32 |     assert fetched is not None\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:32:5\n   |\n30 |     assert latest.path.read_bytes() == payload\n31 |     fetched = store.get(stored.bundle_id)\n32 |     assert fetched is not None\n   |     ^^^^^^\n33 |     assert fetched.bundle_id == stored.bundle_id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:33:5\n   |\n31 |     fetched = store.get(stored.bundle_id)\n32 |     assert fetched is not None\n33 |     assert fetched.bundle_id == stored.bundle_id\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:43:5\n   |\n41 |     bundles = store.list()\n42 |\n43 |     assert len(bundles) == 2\n   |     ^^^^^^\n44 |     assert bundles[0].bundle_id == second.bundle_id\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_collaboration_hub.py:43:28\n   |\n41 |     bundles = store.list()\n42 |\n43 |     assert len(bundles) == 2\n   |                            ^\n44 |     assert bundles[0].bundle_id == second.bundle_id\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:44:5\n   |\n43 |     assert len(bundles) == 2\n44 |     assert bundles[0].bundle_id == second.bundle_id\n   |     ^^^^^^\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:45:5\n   |\n43 |     assert len(bundles) == 2\n44 |     assert bundles[0].bundle_id == second.bundle_id\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:56:5\n   |\n54 |     removed = store.prune(keep=2)\n55 |\n56 |     assert len(removed) == 1\n   |     ^^^^^^\n57 |     assert removed[0].bundle_id == first.bundle_id\n58 |     remaining = store.list()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:57:5\n   |\n56 |     assert len(removed) == 1\n57 |     assert removed[0].bundle_id == first.bundle_id\n   |     ^^^^^^\n58 |     remaining = store.list()\n59 |     assert [bundle.bundle_id for bundle in remaining] == [\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:59:5\n   |\n57 |     assert removed[0].bundle_id == first.bundle_id\n58 |     remaining = store.list()\n59 |     assert [bundle.bundle_id for bundle in remaining] == [\n   |     ^^^^^^\n60 |         third.bundle_id,\n61 |         second.bundle_id,\n   |\n\nC901 `test_hub_client_push_and_pull` is too complex (12 > 10)\n  --> tests\\test_collaboration_hub.py:65:5\n   |\n65 | def test_hub_client_push_and_pull(tmp_path: Path) -> None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n66 |     bundle_path = tmp_path / \"payload.json\"\n67 |     bundle_bytes = b'{\"hello\": \"world\"}'\n   |\n\nPLR0915 Too many statements (64 > 50)\n  --> tests\\test_collaboration_hub.py:65:5\n   |\n65 | def test_hub_client_push_and_pull(tmp_path: Path) -> None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n66 |     bundle_path = tmp_path / \"payload.json\"\n67 |     bundle_bytes = b'{\"hello\": \"world\"}'\n   |\n\nC901 `_handler` is too complex (11 > 10)\n  --> tests\\test_collaboration_hub.py:72:9\n   |\n70 |     state: dict[str, dict[str, object]] = {}\n71 |\n72 |     def _handler(request: httpx.Request) -> httpx.Response:\n   |         ^^^^^^^^\n73 |         if (\n74 |             request.method == \"POST\"\n   |\n\nPLR0911 Too many return statements (8 > 6)\n  --> tests\\test_collaboration_hub.py:72:9\n   |\n70 |     state: dict[str, dict[str, object]] = {}\n71 |\n72 |     def _handler(request: httpx.Request) -> httpx.Response:\n   |         ^^^^^^^^\n73 |         if (\n74 |             request.method == \"POST\"\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:191:9\n    |\n189 |             bundle_path, source=\"tester\", metadata={\"note\": \"demo\"}\n190 |         )\n191 |         assert upload.bundle_id == \"bundle-1\"\n    |         ^^^^^^\n192 |         assert upload.size == len(bundle_bytes)\n193 |         assert upload.metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:192:9\n    |\n190 |         )\n191 |         assert upload.bundle_id == \"bundle-1\"\n192 |         assert upload.size == len(bundle_bytes)\n    |         ^^^^^^\n193 |         assert upload.metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:193:9\n    |\n191 |         assert upload.bundle_id == \"bundle-1\"\n192 |         assert upload.size == len(bundle_bytes)\n193 |         assert upload.metadata == {\"note\": \"demo\"}\n    |         ^^^^^^\n194 |\n195 |         history: list[BundleUploadResult] = client.list_bundles(limit=5)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:196:9\n    |\n195 |         history: list[BundleUploadResult] = client.list_bundles(limit=5)\n196 |         assert len(history) == 1\n    |         ^^^^^^\n197 |         assert history[0].bundle_id == upload.bundle_id\n198 |         assert history[0].metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:197:9\n    |\n195 |         history: list[BundleUploadResult] = client.list_bundles(limit=5)\n196 |         assert len(history) == 1\n197 |         assert history[0].bundle_id == upload.bundle_id\n    |         ^^^^^^\n198 |         assert history[0].metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:198:9\n    |\n196 |         assert len(history) == 1\n197 |         assert history[0].bundle_id == upload.bundle_id\n198 |         assert history[0].metadata == {\"note\": \"demo\"}\n    |         ^^^^^^\n199 |\n200 |         download = client.fetch_latest_bundle()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:201:9\n    |\n200 |         download = client.fetch_latest_bundle()\n201 |         assert download is not None\n    |         ^^^^^^\n202 |         assert download.bundle_id == upload.bundle_id\n203 |         assert download.payload == bundle_bytes\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:202:9\n    |\n200 |         download = client.fetch_latest_bundle()\n201 |         assert download is not None\n202 |         assert download.bundle_id == upload.bundle_id\n    |         ^^^^^^\n203 |         assert download.payload == bundle_bytes\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:203:9\n    |\n201 |         assert download is not None\n202 |         assert download.bundle_id == upload.bundle_id\n203 |         assert download.payload == bundle_bytes\n    |         ^^^^^^\n204 |\n205 |         fetched = client.fetch_bundle(upload.bundle_id)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:206:9\n    |\n205 |         fetched = client.fetch_bundle(upload.bundle_id)\n206 |         assert fetched is not None\n    |         ^^^^^^\n207 |         assert fetched.bundle_id == upload.bundle_id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:207:9\n    |\n205 |         fetched = client.fetch_bundle(upload.bundle_id)\n206 |         assert fetched is not None\n207 |         assert fetched.bundle_id == upload.bundle_id\n    |         ^^^^^^\n208 |\n209 |         removed, remaining = client.prune_bundles(keep=0)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:210:9\n    |\n209 |         removed, remaining = client.prune_bundles(keep=0)\n210 |         assert len(removed) == 1\n    |         ^^^^^^\n211 |         assert removed[0].bundle_id == upload.bundle_id\n212 |         assert remaining == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:211:9\n    |\n209 |         removed, remaining = client.prune_bundles(keep=0)\n210 |         assert len(removed) == 1\n211 |         assert removed[0].bundle_id == upload.bundle_id\n    |         ^^^^^^\n212 |         assert remaining == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:212:9\n    |\n210 |         assert len(removed) == 1\n211 |         assert removed[0].bundle_id == upload.bundle_id\n212 |         assert remaining == 0\n    |         ^^^^^^\n    |\n\nINP001 File `tests\\test_collaboration_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_collaboration_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_collaboration_service.py:4:29\n  |\n3 | import json\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_collaboration_service.py:6:21\n  |\n4 | from collections.abc import Iterable\n5 | from datetime import UTC, datetime\n6 | from pathlib import Path\n  |                     ^^^^\n7 |\n8 | import pytest\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:60:5\n   |\n58 |     )\n59 |\n60 |     assert result.count == 1\n   |     ^^^^^^\n61 |     assert result.path.exists()\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:61:5\n   |\n60 |     assert result.count == 1\n61 |     assert result.path.exists()\n   |     ^^^^^^\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n63 |     assert payload[\"tasks\"] == 1\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:63:5\n   |\n61 |     assert result.path.exists()\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n63 |     assert payload[\"tasks\"] == 1\n   |     ^^^^^^\n64 |     assert payload.get(\"ciphertext\")\n65 |     assert payload[\"ciphertext\"] != json.dumps([{\"id\": task.id}])\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:64:5\n   |\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n63 |     assert payload[\"tasks\"] == 1\n64 |     assert payload.get(\"ciphertext\")\n   |     ^^^^^^\n65 |     assert payload[\"ciphertext\"] != json.dumps([{\"id\": task.id}])\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:65:5\n   |\n63 |     assert payload[\"tasks\"] == 1\n64 |     assert payload.get(\"ciphertext\")\n65 |     assert payload[\"ciphertext\"] != json.dumps([{\"id\": task.id}])\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:89:5\n   |\n87 |     imported = target_service.import_tasks(export_path, \"secret\")\n88 |\n89 |     assert len(imported) == 1\n   |     ^^^^^^\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:91:5\n   |\n89 |     assert len(imported) == 1\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n   |     ^^^^^^\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_collaboration_service.py:91:5\n   |\n89 |     assert len(imported) == 1\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:92:5\n   |\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n92 |     assert imported[0].tags == task.tags\n   |     ^^^^^^\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:93:5\n   |\n91 |     assert restored is not None and restored.description == task.description\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_collaboration_service.py:93:5\n   |\n91 |     assert restored is not None and restored.description == task.description\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:112:5\n    |\n110 |         export_path, \"secret\", overwrite_existing=False\n111 |     )\n112 |     assert len(imported) == 0\n    |     ^^^^^^\n113 |     stored = repo_updated.get(task.id)\n114 |     assert stored is not None and stored.description == \"Different\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:114:5\n    |\n112 |     assert len(imported) == 0\n113 |     stored = repo_updated.get(task.id)\n114 |     assert stored is not None and stored.description == \"Different\"\n    |     ^^^^^^\n115 |\n116 |     imported_overwrite = target_service.import_tasks(\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_collaboration_service.py:114:5\n    |\n112 |     assert len(imported) == 0\n113 |     stored = repo_updated.get(task.id)\n114 |     assert stored is not None and stored.description == \"Different\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n115 |\n116 |     imported_overwrite = target_service.import_tasks(\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:119:5\n    |\n117 |         export_path, \"secret\", overwrite_existing=True\n118 |     )\n119 |     assert len(imported_overwrite) == 1\n    |     ^^^^^^\n120 |     stored_overwrite = repo_updated.get(task.id)\n121 |     assert (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:121:5\n    |\n119 |     assert len(imported_overwrite) == 1\n120 |     stored_overwrite = repo_updated.get(task.id)\n121 |     assert (\n    |     ^^^^^^\n122 |         stored_overwrite is not None\n123 |         and stored_overwrite.description == \"Original\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_collaboration_service.py:121:5\n    |\n119 |       assert len(imported_overwrite) == 1\n120 |       stored_overwrite = repo_updated.get(task.id)\n121 | /     assert (\n122 | |         stored_overwrite is not None\n123 | |         and stored_overwrite.description == \"Original\"\n124 | |     )\n    | |_____^\n    |\nhelp: Break down assertion into multiple parts\n\nB017 Do not assert blind exception: `Exception`\n   --> tests\\test_collaboration_service.py:136:10\n    |\n135 |     target_service, _ = _make_service(InMemoryTaskRepository())\n136 |     with pytest.raises(Exception):\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n137 |         target_service.import_tasks(export_path, \"wrong\")\n    |\n\nPT011 `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception\n   --> tests\\test_collaboration_service.py:136:24\n    |\n135 |     target_service, _ = _make_service(InMemoryTaskRepository())\n136 |     with pytest.raises(Exception):\n    |                        ^^^^^^^^^\n137 |         target_service.import_tasks(export_path, \"wrong\")\n    |\n\nINP001 File `tests\\test_plugin_ai_assistant.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_plugin_ai_assistant.py:1:1\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_plugin_ai_assistant.py:10:55\n   |\n 9 | from x_legatus_acta_schedae_x.core.domain import events\n10 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n11 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n12 | from x_legatus_acta_schedae_x.core.services.ai_service import AIService\n   |\nhelp: Move into type-checking block\n\nPT009 Use a regular `assert` instead of unittest-style `assertTrue`\n  --> tests\\test_plugin_ai_assistant.py:75:9\n   |\n73 |         self.dispatcher.publish(scan_event)\n74 |\n75 |         self.assertTrue(self.suggestions_path.exists())\n   |         ^^^^^^^^^^^^^^^\n76 |         entries = [\n77 |             json.loads(line)\n   |\nhelp: Replace `assertTrue(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:84:9\n   |\n82 |         ]\n83 |         event_types = {entry[\"event\"] for entry in entries}\n84 |         self.assertIn(\"task_created\", event_types)\n   |         ^^^^^^^^^^^^^\n85 |         self.assertIn(\"tasks_imported\", event_types)\n86 |         self.assertIn(\"card_scanned\", event_types)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:85:9\n   |\n83 |         event_types = {entry[\"event\"] for entry in entries}\n84 |         self.assertIn(\"task_created\", event_types)\n85 |         self.assertIn(\"tasks_imported\", event_types)\n   |         ^^^^^^^^^^^^^\n86 |         self.assertIn(\"card_scanned\", event_types)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:86:9\n   |\n84 |         self.assertIn(\"task_created\", event_types)\n85 |         self.assertIn(\"tasks_imported\", event_types)\n86 |         self.assertIn(\"card_scanned\", event_types)\n   |         ^^^^^^^^^^^^^\n87 |\n88 |         summary_events = [\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:93:9\n   |\n91 |             if evt.startswith(\"plugin.ai_assistant\")\n92 |         ]\n93 |         self.assertIn(\"plugin.ai_assistant.task_created\", summary_events)\n   |         ^^^^^^^^^^^^^\n94 |         self.assertIn(\"plugin.ai_assistant.import_summary\", summary_events)\n95 |         self.assertIn(\"plugin.ai_assistant.card_followups\", summary_events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:94:9\n   |\n92 |         ]\n93 |         self.assertIn(\"plugin.ai_assistant.task_created\", summary_events)\n94 |         self.assertIn(\"plugin.ai_assistant.import_summary\", summary_events)\n   |         ^^^^^^^^^^^^^\n95 |         self.assertIn(\"plugin.ai_assistant.card_followups\", summary_events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:95:9\n   |\n93 |         self.assertIn(\"plugin.ai_assistant.task_created\", summary_events)\n94 |         self.assertIn(\"plugin.ai_assistant.import_summary\", summary_events)\n95 |         self.assertIn(\"plugin.ai_assistant.card_followups\", summary_events)\n   |         ^^^^^^^^^^^^^\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nANN202 Missing return type annotation for private function `list`\n   --> tests\\test_plugin_ai_assistant.py:109:9\n    |\n107 |         return self._tasks.get(task_id)\n108 |\n109 |     def list(self, status: str | None = None):\n    |         ^^^^\n110 |         for task in self._tasks.values():\n111 |             if status and task.status != status:\n    |\nhelp: Add return type annotation\n\nINP001 File `tests\\test_plugin_calendar_sync.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_plugin_calendar_sync.py:1:1\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_calendar_sync.py:83:9\n   |\n81 |             if event.startswith(\"plugin.calendar_sync\")\n82 |         ]\n83 |         self.assertIn(\"plugin.calendar_sync.synced\", events)\n   |         ^^^^^^^^^^^^^\n84 |         self.assertIn(\"plugin.calendar_sync.reminder\", events)\n85 |         self.assertIn(\"plugin.calendar_sync.unscheduled\", events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_calendar_sync.py:84:9\n   |\n82 |         ]\n83 |         self.assertIn(\"plugin.calendar_sync.synced\", events)\n84 |         self.assertIn(\"plugin.calendar_sync.reminder\", events)\n   |         ^^^^^^^^^^^^^\n85 |         self.assertIn(\"plugin.calendar_sync.unscheduled\", events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_calendar_sync.py:85:9\n   |\n83 |         self.assertIn(\"plugin.calendar_sync.synced\", events)\n84 |         self.assertIn(\"plugin.calendar_sync.reminder\", events)\n85 |         self.assertIn(\"plugin.calendar_sync.unscheduled\", events)\n   |         ^^^^^^^^^^^^^\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nANN202 Missing return type annotation for private function `list`\n   --> tests\\test_plugin_calendar_sync.py:103:9\n    |\n101 |         return self._tasks.get(task_id)\n102 |\n103 |     def list(self, status: str | None = None):\n    |         ^^^^\n104 |         for task in self._tasks.values():\n105 |             if status and task.status != status:\n    |\nhelp: Add return type annotation\n\nINP001 File `tests\\test_review_guidance_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_review_guidance_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_review_guidance_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.review.ReviewRecord` into a type-checking block\n  --> tests\\test_review_guidance_service.py:8:57\n   |\n 6 | from x_legatus_acta_schedae_x.core.domain import events\n 7 | from x_legatus_acta_schedae_x.core.domain.events import CardScanned\n 8 | from x_legatus_acta_schedae_x.core.domain.review import ReviewRecord\n   |                                                         ^^^^^^^^^^^^\n 9 | from x_legatus_acta_schedae_x.core.domain.task import Task\n10 | from x_legatus_acta_schedae_x.core.ports.review_repo import IReviewRepository\n   |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:129:5\n    |\n127 |     recommendations = guidance.generate(now=now, limit=2)\n128 |\n129 |     assert recommendations\n    |     ^^^^^^\n130 |     assert recommendations[0].task.id == high_task.id\n131 |     assert any(\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:130:5\n    |\n129 |     assert recommendations\n130 |     assert recommendations[0].task.id == high_task.id\n    |     ^^^^^^\n131 |     assert any(\n132 |         \"priority high\" in reason for reason in recommendations[0].reasons\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:131:5\n    |\n129 |     assert recommendations\n130 |     assert recommendations[0].task.id == high_task.id\n131 |     assert any(\n    |     ^^^^^^\n132 |         \"priority high\" in reason for reason in recommendations[0].reasons\n133 |     )\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:134:5\n    |\n132 |         \"priority high\" in reason for reason in recommendations[0].reasons\n133 |     )\n134 |     assert recommendations[0].suggested_action in {\n    |     ^^^^^^\n135 |         \"review then commit\",\n136 |         \"rescue overdue review\",\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:168:5\n    |\n166 |     recommendations = guidance.generate(now=now, limit=1)\n167 |\n168 |     assert recommendations\n    |     ^^^^^^\n169 |     rec = recommendations[0]\n170 |     assert rec.task.id == task.id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:170:5\n    |\n168 |     assert recommendations\n169 |     rec = recommendations[0]\n170 |     assert rec.task.id == task.id\n    |     ^^^^^^\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n172 |     assert rec.last_source == \"card_scan\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:171:5\n    |\n169 |     rec = recommendations[0]\n170 |     assert rec.task.id == task.id\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n    |     ^^^^^^\n172 |     assert rec.last_source == \"card_scan\"\n173 |     assert rec.last_reviewed_at is not None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:172:5\n    |\n170 |     assert rec.task.id == task.id\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n172 |     assert rec.last_source == \"card_scan\"\n    |     ^^^^^^\n173 |     assert rec.last_reviewed_at is not None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:173:5\n    |\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n172 |     assert rec.last_source == \"card_scan\"\n173 |     assert rec.last_reviewed_at is not None\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:192:5\n    |\n191 |     recommendations = guidance.generate(now=now, limit=3)\n192 |     assert len(recommendations) == 3\n    |     ^^^^^^\n193 |     # Scores should be sorted descending\n194 |     scores = [item.score for item in recommendations]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> tests\\test_review_guidance_service.py:192:36\n    |\n191 |     recommendations = guidance.generate(now=now, limit=3)\n192 |     assert len(recommendations) == 3\n    |                                    ^\n193 |     # Scores should be sorted descending\n194 |     scores = [item.score for item in recommendations]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:195:5\n    |\n193 |     # Scores should be sorted descending\n194 |     scores = [item.score for item in recommendations]\n195 |     assert scores == sorted(scores, reverse=True)\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_review_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_review_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_review_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nPT013 Incorrect import of `pytest`; use `import pytest` instead\n --> tests\\test_review_service.py:6:1\n  |\n4 | from datetime import UTC, datetime, timedelta\n5 |\n6 | from pytest import approx, fixture  # type: ignore[import]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from x_legatus_acta_schedae_x.core.domain import events\n8 | from x_legatus_acta_schedae_x.core.domain.events import CardScanned\n  |\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.review.ReviewRecord` into a type-checking block\n  --> tests\\test_review_service.py:9:57\n   |\n 7 | from x_legatus_acta_schedae_x.core.domain import events\n 8 | from x_legatus_acta_schedae_x.core.domain.events import CardScanned\n 9 | from x_legatus_acta_schedae_x.core.domain.review import ReviewRecord\n   |                                                         ^^^^^^^^^^^^\n10 | from x_legatus_acta_schedae_x.core.domain.task import Task\n11 | from x_legatus_acta_schedae_x.core.ports.review_repo import IReviewRepository\n   |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_review_service.py:83:5\n   |\n82 |     record = service.get_record(task.id)\n83 |     assert record is not None\n   |     ^^^^^^\n84 |     assert record.due_at == task.created\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_review_service.py:84:5\n   |\n82 |     record = service.get_record(task.id)\n83 |     assert record is not None\n84 |     assert record.due_at == task.created\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:99:5\n    |\n 97 |         task.id, quality=5, reviewed_at=first_review_time\n 98 |     )\n 99 |     assert approx(record.interval_days, rel=1e-3) == 1.0\n    |     ^^^^^^\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:100:5\n    |\n 98 |     )\n 99 |     assert approx(record.interval_days, rel=1e-3) == 1.0\n100 |     assert record.repetitions == 1\n    |     ^^^^^^\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:101:5\n    |\n 99 |     assert approx(record.interval_days, rel=1e-3) == 1.0\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n    |     ^^^^^^\n102 |     assert record.history[-1].quality == 5\n103 |     assert record.history[-1].source == \"manual\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:102:5\n    |\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n    |     ^^^^^^\n103 |     assert record.history[-1].source == \"manual\"\n104 |     assert record.history[-1].context == {}\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> tests\\test_review_service.py:102:42\n    |\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n    |                                          ^\n103 |     assert record.history[-1].source == \"manual\"\n104 |     assert record.history[-1].context == {}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:103:5\n    |\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n103 |     assert record.history[-1].source == \"manual\"\n    |     ^^^^^^\n104 |     assert record.history[-1].context == {}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:104:5\n    |\n102 |     assert record.history[-1].quality == 5\n103 |     assert record.history[-1].source == \"manual\"\n104 |     assert record.history[-1].context == {}\n    |     ^^^^^^\n105 |\n106 |     second_time = first_review_time + timedelta(days=2)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:108:5\n    |\n106 |     second_time = first_review_time + timedelta(days=2)\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n    |     ^^^^^^\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `6.0` with a constant variable\n   --> tests\\test_review_service.py:108:54\n    |\n106 |     second_time = first_review_time + timedelta(days=2)\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n    |                                                      ^^^\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:109:5\n    |\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n109 |     assert record.repetitions == 2\n    |     ^^^^^^\n110 |     assert record.history[-1].reviewed_at == second_time\n111 |     assert record.history[-1].source == \"manual\"\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_review_service.py:109:34\n    |\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n109 |     assert record.repetitions == 2\n    |                                  ^\n110 |     assert record.history[-1].reviewed_at == second_time\n111 |     assert record.history[-1].source == \"manual\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:110:5\n    |\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n    |     ^^^^^^\n111 |     assert record.history[-1].source == \"manual\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:111:5\n    |\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n111 |     assert record.history[-1].source == \"manual\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:124:5\n    |\n123 |     due_items = service.due_reviews(now=past + timedelta(days=2))\n124 |     assert len(due_items) == 1\n    |     ^^^^^^\n125 |     assert due_items[0].task.id == task.id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:125:5\n    |\n123 |     due_items = service.due_reviews(now=past + timedelta(days=2))\n124 |     assert len(due_items) == 1\n125 |     assert due_items[0].task.id == task.id\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:137:5\n    |\n136 |     record = service.get_record(task.id)\n137 |     assert record is not None\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:151:5\n    |\n150 |     record = service.get_record(task.id)\n151 |     assert record is not None\n    |     ^^^^^^\n152 |     assert record.repetitions == 1\n153 |     last_entry = record.history[-1]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:152:5\n    |\n150 |     record = service.get_record(task.id)\n151 |     assert record is not None\n152 |     assert record.repetitions == 1\n    |     ^^^^^^\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:154:5\n    |\n152 |     assert record.repetitions == 1\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n    |     ^^^^^^\n155 |     assert last_entry.quality == 5\n156 |     assert \"description\" in last_entry.context\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:155:5\n    |\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n155 |     assert last_entry.quality == 5\n    |     ^^^^^^\n156 |     assert \"description\" in last_entry.context\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> tests\\test_review_service.py:155:34\n    |\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n155 |     assert last_entry.quality == 5\n    |                                  ^\n156 |     assert \"description\" in last_entry.context\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:156:5\n    |\n154 |     assert last_entry.source == \"task_completed\"\n155 |     assert last_entry.quality == 5\n156 |     assert \"description\" in last_entry.context\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:185:5\n    |\n184 |     record = service.get_record(task.id)\n185 |     assert record is not None\n    |     ^^^^^^\n186 |     assert record.repetitions == 1\n187 |     entry = record.history[-1]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:186:5\n    |\n184 |     record = service.get_record(task.id)\n185 |     assert record is not None\n186 |     assert record.repetitions == 1\n    |     ^^^^^^\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:188:5\n    |\n186 |     assert record.repetitions == 1\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n    |     ^^^^^^\n189 |     assert entry.quality == 4\n190 |     assert entry.reviewed_at == timestamp\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:189:5\n    |\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n189 |     assert entry.quality == 4\n    |     ^^^^^^\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> tests\\test_review_service.py:189:29\n    |\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n189 |     assert entry.quality == 4\n    |                             ^\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:190:5\n    |\n188 |     assert entry.source == \"card_scan\"\n189 |     assert entry.quality == 4\n190 |     assert entry.reviewed_at == timestamp\n    |     ^^^^^^\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n192 |     assert entry.context[\"metadata\"][\"reader\"] == \"qrbot\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:191:5\n    |\n189 |     assert entry.quality == 4\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n    |     ^^^^^^\n192 |     assert entry.context[\"metadata\"][\"reader\"] == \"qrbot\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:192:5\n    |\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n192 |     assert entry.context[\"metadata\"][\"reader\"] == \"qrbot\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:215:5\n    |\n214 |     record = service.get_record(task.id)\n215 |     assert record is not None\n    |     ^^^^^^\n216 |     entry = record.history[-1]\n217 |     assert entry.source == \"card_scan\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:217:5\n    |\n215 |     assert record is not None\n216 |     entry = record.history[-1]\n217 |     assert entry.source == \"card_scan\"\n    |     ^^^^^^\n218 |     assert entry.quality == 1\n219 |     assert entry.context[\"task_error\"] == \"task_not_found\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:218:5\n    |\n216 |     entry = record.history[-1]\n217 |     assert entry.source == \"card_scan\"\n218 |     assert entry.quality == 1\n    |     ^^^^^^\n219 |     assert entry.context[\"task_error\"] == \"task_not_found\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:219:5\n    |\n217 |     assert entry.source == \"card_scan\"\n218 |     assert entry.quality == 1\n219 |     assert entry.context[\"task_error\"] == \"task_not_found\"\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_scheduler_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_scheduler_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> tests\\test_scheduler_service.py:4:29\n  |\n3 | import unittest\n4 | from collections.abc import Callable, Iterable, Mapping\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime, timedelta\n6 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_scheduler_service.py:4:39\n  |\n3 | import unittest\n4 | from collections.abc import Callable, Iterable, Mapping\n  |                                       ^^^^^^^^\n5 | from datetime import UTC, datetime, timedelta\n6 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_scheduler_service.py:4:49\n  |\n3 | import unittest\n4 | from collections.abc import Callable, Iterable, Mapping\n  |                                                 ^^^^^^^\n5 | from datetime import UTC, datetime, timedelta\n6 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.events` into a type-checking block\n  --> tests\\test_scheduler_service.py:8:60\n   |\n 6 | from typing import Any\n 7 |\n 8 | from x_legatus_acta_schedae_x.core.domain import events as domain_events\n   |                                                            ^^^^^^^^^^^^^\n 9 | from x_legatus_acta_schedae_x.core.domain.events import (\n10 |     EventDispatcher,\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_scheduler_service.py:13:55\n   |\n11 |     TaskReminderTriggered,\n12 | )\n13 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n14 | from x_legatus_acta_schedae_x.core.ports.scheduler import IScheduler\n15 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nC408 Unnecessary `tuple()` call (rewrite as a literal)\n  --> tests\\test_scheduler_service.py:74:52\n   |\n72 |         kwargs: dict[str, Any] | None = None,\n73 |     ) -> str:\n74 |         self.jobs[job_id] = (run_at, func, args or tuple(), kwargs or {})\n   |                                                    ^^^^^^^\n75 |         return job_id\n   |\nhelp: Rewrite as a literal\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n   --> tests\\test_scheduler_service.py:114:9\n    |\n112 |         task = self.task_service.add_task(\"Prepare deck\", due=due)\n113 |         job_id = f\"task-reminder-{task.id}\"\n114 |         self.assertIn(job_id, self.scheduler.jobs)\n    |         ^^^^^^^^^^^^^\n115 |         self.assertTrue(self.scheduler.started)\n    |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertTrue`\n   --> tests\\test_scheduler_service.py:115:9\n    |\n113 |         job_id = f\"task-reminder-{task.id}\"\n114 |         self.assertIn(job_id, self.scheduler.jobs)\n115 |         self.assertTrue(self.scheduler.started)\n    |         ^^^^^^^^^^^^^^^\n116 |\n117 |     def test_cancel_on_completion(self) -> None:\n    |\nhelp: Replace `assertTrue(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertNotIn`\n   --> tests\\test_scheduler_service.py:122:9\n    |\n120 |         self.task_service.complete_task(task.id)\n121 |         job_id = f\"task-reminder-{task.id}\"\n122 |         self.assertNotIn(job_id, self.scheduler.jobs)\n    |         ^^^^^^^^^^^^^^^^\n123 |\n124 |     def test_trigger_emits_event(self) -> None:\n    |\nhelp: Replace `assertNotIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n   --> tests\\test_scheduler_service.py:136:9\n    |\n134 |         job_id = f\"task-reminder-{task.id}\"\n135 |         self.scheduler.trigger(job_id)\n136 |         self.assertEqual(1, len(captured))\n    |         ^^^^^^^^^^^^^^^^\n137 |         self.assertEqual(task.id, captured[0].task.id)\n138 |         self.assertIn(\n    |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n   --> tests\\test_scheduler_service.py:137:9\n    |\n135 |         self.scheduler.trigger(job_id)\n136 |         self.assertEqual(1, len(captured))\n137 |         self.assertEqual(task.id, captured[0].task.id)\n    |         ^^^^^^^^^^^^^^^^\n138 |         self.assertIn(\n139 |             \"task.reminder.triggered\",\n    |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n   --> tests\\test_scheduler_service.py:138:9\n    |\n136 |         self.assertEqual(1, len(captured))\n137 |         self.assertEqual(task.id, captured[0].task.id)\n138 |         self.assertIn(\n    |         ^^^^^^^^^^^^^\n139 |             \"task.reminder.triggered\",\n140 |             [name for name, _ in self.telemetry.events],\n    |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nINP001 File `tests\\test_search_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_search_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_search_service.py:4:29\n  |\n3 | import unittest\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from datetime import UTC\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_search_service.py:8:55\n   |\n 7 | from x_legatus_acta_schedae_x.core.domain.events import EventDispatcher\n 8 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n 9 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n10 | from x_legatus_acta_schedae_x.core.services.search_service import SearchService\n   |\nhelp: Move into type-checking block\n\nANN201 Missing return type annotation for public function `now`\n  --> tests\\test_search_service.py:36:9\n   |\n34 |         return task\n35 |\n36 |     def now(self):\n   |         ^^^\n37 |         from datetime import datetime\n   |\nhelp: Add return type annotation\n\nPLC0415 `import` should be at the top-level of a file\n  --> tests\\test_search_service.py:37:9\n   |\n36 |     def now(self):\n37 |         from datetime import datetime\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n38 |\n39 |         return datetime.now(UTC)\n   |\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:57:9\n   |\n56 |         matches = self.search_service.search(text=\"report\")\n57 |         self.assertEqual(1, len(matches))\n   |         ^^^^^^^^^^^^^^^^\n58 |         self.assertIn(\"report\", matches[0].description.lower())\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_search_service.py:58:9\n   |\n56 |         matches = self.search_service.search(text=\"report\")\n57 |         self.assertEqual(1, len(matches))\n58 |         self.assertIn(\"report\", matches[0].description.lower())\n   |         ^^^^^^^^^^^^^\n59 |\n60 |     def test_search_filters_status_and_tags(self) -> None:\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:70:9\n   |\n69 |         completed = self.search_service.search(status=\"completed\")\n70 |         self.assertEqual([second.id], [task.id for task in completed])\n   |         ^^^^^^^^^^^^^^^^\n71 |\n72 |         tag_filtered = self.search_service.search(tags=[\"finance\"])\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:73:9\n   |\n72 |         tag_filtered = self.search_service.search(tags=[\"finance\"])\n73 |         self.assertEqual([first.id], [task.id for task in tag_filtered])\n   |         ^^^^^^^^^^^^^^^^\n74 |\n75 |     def test_search_updates_after_edit(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:80:9\n   |\n79 |         matches = self.search_service.search(text=\"retrospective\")\n80 |         self.assertEqual([task.id], [t.id for t in matches])\n   |         ^^^^^^^^^^^^^^^^\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nINP001 File `tests\\test_task_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_task_service.py:1:1\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.events` into a type-checking block\n --> tests\\test_task_service.py:7:60\n  |\n5 | from typing import cast\n6 |\n7 | from x_legatus_acta_schedae_x.core.domain import events as domain_events\n  |                                                            ^^^^^^^^^^^^^\n8 | from x_legatus_acta_schedae_x.core.domain.events import (\n9 |     EventDispatcher,\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_task_service.py:12:55\n   |\n10 |     TaskUpdated,\n11 | )\n12 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n13 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n14 | from x_legatus_acta_schedae_x.core.services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nANN201 Missing return type annotation for public function `list`\n  --> tests\\test_task_service.py:28:9\n   |\n26 |         return self.storage.get(task_id)\n27 |\n28 |     def list(self, status: str | None = None):\n   |         ^^^^\n29 |         tasks = list(self.storage.values())\n30 |         if status:\n   |\nhelp: Add return type annotation\n\nANN201 Missing return type annotation for public function `now`\n  --> tests\\test_task_service.py:38:9\n   |\n36 |         return task\n37 |\n38 |     def now(self):\n   |         ^^^\n39 |         from datetime import datetime\n   |\nhelp: Add return type annotation\n\nPLC0415 `import` should be at the top-level of a file\n  --> tests\\test_task_service.py:39:9\n   |\n38 |     def now(self):\n39 |         from datetime import datetime\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n40 |\n41 |         return datetime.now(UTC)\n   |\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:53:9\n   |\n51 |         task = self.service.add_task(\"Original\")\n52 |         updated = self.service.edit_task(task.id, \"Rewritten\")\n53 |         self.assertEqual(\"Rewritten\", updated.description)\n   |         ^^^^^^^^^^^^^^^^\n54 |\n55 |     def test_defer_with_delta(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`\n  --> tests\\test_task_service.py:59:9\n   |\n57 |         updated = self.service.defer_task(task.id, delta=timedelta(days=2))\n58 |         due = updated.due\n59 |         self.assertIsNotNone(due)\n   |         ^^^^^^^^^^^^^^^^^^^^\n60 |         due_dt = cast(\"datetime\", due)\n61 |         self.assertGreaterEqual(due_dt, task.created)\n   |\nhelp: Replace `assertIsNotNone(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertGreaterEqual`\n  --> tests\\test_task_service.py:61:9\n   |\n59 |         self.assertIsNotNone(due)\n60 |         due_dt = cast(\"datetime\", due)\n61 |         self.assertGreaterEqual(due_dt, task.created)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n62 |\n63 |     def test_prioritize_task(self) -> None:\n   |\nhelp: Replace `assertGreaterEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:66:9\n   |\n64 |         task = self.service.add_task(\"Critical bug\")\n65 |         updated = self.service.prioritize_task(task.id, \"high\")\n66 |         self.assertEqual(\"high\", updated.priority)\n   |         ^^^^^^^^^^^^^^^^\n67 |\n68 |     def test_tag_management(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_task_service.py:71:9\n   |\n69 |         task = self.service.add_task(\"Tag me\")\n70 |         with_tags = self.service.add_tags(task.id, [\"alpha\", \"beta\"])\n71 |         self.assertIn(\"alpha\", with_tags.tags)\n   |         ^^^^^^^^^^^^^\n72 |         stripped = self.service.remove_tags(with_tags.id, [\"alpha\"])\n73 |         self.assertNotIn(\"alpha\", stripped.tags)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertNotIn`\n  --> tests\\test_task_service.py:73:9\n   |\n71 |         self.assertIn(\"alpha\", with_tags.tags)\n72 |         stripped = self.service.remove_tags(with_tags.id, [\"alpha\"])\n73 |         self.assertNotIn(\"alpha\", stripped.tags)\n   |         ^^^^^^^^^^^^^^^^\n74 |         replaced = self.service.set_tags(stripped.id, [\"gamma\"])\n75 |         self.assertEqual({\"gamma\"}, set(replaced.tags))\n   |\nhelp: Replace `assertNotIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:75:9\n   |\n73 |         self.assertNotIn(\"alpha\", stripped.tags)\n74 |         replaced = self.service.set_tags(stripped.id, [\"gamma\"])\n75 |         self.assertEqual({\"gamma\"}, set(replaced.tags))\n   |         ^^^^^^^^^^^^^^^^\n76 |\n77 |     def test_task_updated_event_publishes(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:87:9\n   |\n85 |         task = self.service.add_task(\"Event sample\")\n86 |         self.service.edit_task(task.id, \"Edited\")\n87 |         self.assertEqual(1, len(captured))\n   |         ^^^^^^^^^^^^^^^^\n88 |         self.assertEqual(\"Edited\", captured[0].description)\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:88:9\n   |\n86 |         self.service.edit_task(task.id, \"Edited\")\n87 |         self.assertEqual(1, len(captured))\n88 |         self.assertEqual(\"Edited\", captured[0].description)\n   |         ^^^^^^^^^^^^^^^^\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nINP001 File `tests\\test_tui_controller.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_tui_controller.py:1:1\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:23:5\n   |\n22 |     pending = controller.list_tasks(TaskFilters(status=\"pending\"))\n23 |     assert _find_row(pending, created.id)\n   |     ^^^^^^\n24 |\n25 |     controller.complete_task(created.id)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:27:5\n   |\n25 |     controller.complete_task(created.id)\n26 |     completed = controller.list_tasks(TaskFilters(status=\"completed\"))\n27 |     assert _find_row(completed, created.id)\n   |     ^^^^^^\n28 |\n29 |     search = controller.list_tasks(TaskFilters(text=\"demo\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:30:5\n   |\n29 |     search = controller.list_tasks(TaskFilters(text=\"demo\"))\n30 |     assert _find_row(search, created.id)\n   |     ^^^^^^\n31 |\n32 |     tags = controller.available_tags()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:33:5\n   |\n32 |     tags = controller.available_tags()\n33 |     assert \"demo\" in tags\n   |     ^^^^^^\n34 |     assert \"tui\" in tags\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:34:5\n   |\n32 |     tags = controller.available_tags()\n33 |     assert \"demo\" in tags\n34 |     assert \"tui\" in tags\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:48:5\n   |\n46 |     summary = controller.ai_summary(top_n=5)\n47 |\n48 |     assert summary.pending >= 1\n   |     ^^^^^^\n49 |     assert summary.completed >= 1\n50 |     assert summary.top_tags\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:49:5\n   |\n48 |     assert summary.pending >= 1\n49 |     assert summary.completed >= 1\n   |     ^^^^^^\n50 |     assert summary.top_tags\n51 |     assert any(item.task_id == focus.id for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:50:5\n   |\n48 |     assert summary.pending >= 1\n49 |     assert summary.completed >= 1\n50 |     assert summary.top_tags\n   |     ^^^^^^\n51 |     assert any(item.task_id == focus.id for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:51:5\n   |\n49 |     assert summary.completed >= 1\n50 |     assert summary.top_tags\n51 |     assert any(item.task_id == focus.id for item in summary.upcoming)\n   |     ^^^^^^\n   |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> tui\\__init__.py:3:1\n  |\n1 | \"\"\"Textual TUI entrypoints for Legatus Acta Schedae.\"\"\"\n2 |\n3 | from ..interface.tui.app import LegatusTuiApp, run\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"LegatusTuiApp\", \"run\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> tui\\__init__.py:3:1\n  |\n1 | \"\"\"Textual TUI entrypoints for Legatus Acta Schedae.\"\"\"\n2 |\n3 | from ..interface.tui.app import LegatusTuiApp, run\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"LegatusTuiApp\", \"run\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n  --> x_cls_legatus_acta_schedae_x.py:15:29\n   |\n13 | import tempfile\n14 | import uuid\n15 | from collections.abc import Callable, Iterable\n   |                             ^^^^^^^^\n16 | from dataclasses import asdict, dataclass, field\n17 | from typing import Any, Protocol, cast\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_legatus_acta_schedae_x.py:15:39\n   |\n13 | import tempfile\n14 | import uuid\n15 | from collections.abc import Callable, Iterable\n   |                                       ^^^^^^^^\n16 | from dataclasses import asdict, dataclass, field\n17 | from typing import Any, Protocol, cast\n   |\nhelp: Move into type-checking block\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_legatus_acta_schedae_x.py:27:8\n   |\n25 |     qrcode = importlib.import_module(\"qrcode\")\n26 |     _QR_AVAILABLE = True\n27 | except Exception:\n   |        ^^^^^^^^^\n28 |     qrcode = None\n29 |     _QR_AVAILABLE = False\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_legatus_acta_schedae_x.py:35:28\n   |\n35 | def _truthy_env(name: str, default: bool = False) -> bool:\n   |                            ^^^^^^^\n36 |     v = os.environ.get(name)\n37 |     if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_legatus_acta_schedae_x.py:35:28\n   |\n35 | def _truthy_env(name: str, default: bool = False) -> bool:\n   |                            ^^^^^^^\n36 |     v = os.environ.get(name)\n37 |     if v is None:\n   |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n  --> x_cls_legatus_acta_schedae_x.py:48:16\n   |\n46 |         return env\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n   |                ^^^^^^^^^^^^^^^\n49 |     except Exception:\n50 |         return r\"c:\\x_runner_x\"\n   |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_legatus_acta_schedae_x.py:48:32\n   |\n46 |         return env\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n   |                                ^^^^^^^^^^^^\n49 |     except Exception:\n50 |         return r\"c:\\x_runner_x\"\n   |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n  --> x_cls_legatus_acta_schedae_x.py:48:45\n   |\n46 |         return env\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n   |                                             ^^^^^^^^^^^^^^^\n49 |     except Exception:\n50 |         return r\"c:\\x_runner_x\"\n   |\nhelp: Replace with `Path(...).parent`\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_legatus_acta_schedae_x.py:49:12\n   |\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n49 |     except Exception:\n   |            ^^^^^^^^^\n50 |         return r\"c:\\x_runner_x\"\n   |\n\nARG002 Unused method argument: `html_str`\n  --> x_cls_legatus_acta_schedae_x.py:87:22\n   |\n86 |     # Dev fallback for PDF via wkhtmltopdf when enabled\n87 |     def to_pdf(self, html_str: str, out_path: str) -> None:\n   |                      ^^^^^^^^\n88 |         # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |         raise RuntimeError(\n   |\n\nARG002 Unused method argument: `out_path`\n  --> x_cls_legatus_acta_schedae_x.py:87:37\n   |\n86 |     # Dev fallback for PDF via wkhtmltopdf when enabled\n87 |     def to_pdf(self, html_str: str, out_path: str) -> None:\n   |                                     ^^^^^^^^\n88 |         # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |         raise RuntimeError(\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_legatus_acta_schedae_x.py:89:15\n   |\n87 |       def to_pdf(self, html_str: str, out_path: str) -> None:\n88 |           # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |           raise RuntimeError(\n   |  _______________^\n90 | |             \"PDF export not available (no PDF engine configured)\"\n91 | |         )\n   | |_________^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> x_cls_legatus_acta_schedae_x.py:90:13\n   |\n88 |         # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |         raise RuntimeError(\n90 |             \"PDF export not available (no PDF engine configured)\"\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n91 |         )\n   |\nhelp: Assign to variable; remove string literal\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_legatus_acta_schedae_x.py:107:20\n    |\n105 |             or (\n106 |                 _DEFAULT_WKHTMLTOPDF_PATH\n107 |                 if os.path.isfile(_DEFAULT_WKHTMLTOPDF_PATH)\n    |                    ^^^^^^^^^^^^^^\n108 |                 else None\n109 |             )\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_legatus_acta_schedae_x.py:122:33\n    |\n120 |         dpi: int = 300,\n121 |     ) -> None:\n122 |         if not self._bin or not os.path.isfile(self._bin):\n    |                                 ^^^^^^^^^^^^^^\n123 |             raise RuntimeError(\n124 |                 \"wkhtmltopdf not configured (set X_WKHTMLTOPDF_PATH or WKHTMLTOPDF_BIN)\"\n    |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:123:19\n    |\n121 |       ) -> None:\n122 |           if not self._bin or not os.path.isfile(self._bin):\n123 |               raise RuntimeError(\n    |  ___________________^\n124 | |                 \"wkhtmltopdf not configured (set X_WKHTMLTOPDF_PATH or WKHTMLTOPDF_BIN)\"\n125 | |             )\n    | |_____________^\n126 |           # Write HTML to a temp file and invoke wkhtmltopdf with explicit sizing\n127 |           with tempfile.NamedTemporaryFile(\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:124:17\n    |\n122 |         if not self._bin or not os.path.isfile(self._bin):\n123 |             raise RuntimeError(\n124 |                 \"wkhtmltopdf not configured (set X_WKHTMLTOPDF_PATH or WKHTMLTOPDF_BIN)\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n125 |             )\n126 |         # Write HTML to a temp file and invoke wkhtmltopdf with explicit sizing\n    |\nhelp: Assign to variable; remove string literal\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:133:13\n    |\n131 |             tmp_path = tmp.name\n132 |         try:\n133 |             os.makedirs(\n    |             ^^^^^^^^^^^\n134 |                 os.path.dirname(os.path.abspath(out_path)) or \".\",\n135 |                 exist_ok=True,\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:134:17\n    |\n132 |         try:\n133 |             os.makedirs(\n134 |                 os.path.dirname(os.path.abspath(out_path)) or \".\",\n    |                 ^^^^^^^^^^^^^^^\n135 |                 exist_ok=True,\n136 |             )\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_legatus_acta_schedae_x.py:134:33\n    |\n132 |         try:\n133 |             os.makedirs(\n134 |                 os.path.dirname(os.path.abspath(out_path)) or \".\",\n    |                                 ^^^^^^^^^^^^^^^\n135 |                 exist_ok=True,\n136 |             )\n    |\nhelp: Replace with `Path(...).resolve()`\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_legatus_acta_schedae_x.py:166:13\n    |\n164 |                 ]\n165 |             args += [tmp_path, out_path]\n166 |             subprocess.run(args, check=True, capture_output=True, text=True)\n    |             ^^^^^^^^^^^^^^\n167 |         finally:\n168 |             try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_legatus_acta_schedae_x.py:168:13\n    |\n166 |               subprocess.run(args, check=True, capture_output=True, text=True)\n167 |           finally:\n168 | /             try:\n169 | |                 os.remove(tmp_path)\n170 | |             except Exception:\n171 | |                 pass\n    | |____________________^\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_legatus_acta_schedae_x.py:169:17\n    |\n167 |         finally:\n168 |             try:\n169 |                 os.remove(tmp_path)\n    |                 ^^^^^^^^^\n170 |             except Exception:\n171 |                 pass\n    |\nhelp: Replace with `Path(...).unlink()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:170:13\n    |\n168 |               try:\n169 |                   os.remove(tmp_path)\n170 | /             except Exception:\n171 | |                 pass\n    | |____________________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:170:20\n    |\n168 |             try:\n169 |                 os.remove(tmp_path)\n170 |             except Exception:\n    |                    ^^^^^^^^^\n171 |                 pass\n    |\n\nC901 `_load_from_manifest` is too complex (37 > 10)\n   --> x_cls_legatus_acta_schedae_x.py:179:9\n    |\n177 |         self._inner, self._has_pdf = self._load_from_manifest(base_folder)\n178 |\n179 |     def _load_from_manifest(\n    |         ^^^^^^^^^^^^^^^^^^^\n180 |         self, base_folder: str\n181 |     ) -> tuple[MarkdownLike, bool]:\n    |\n\nPLR0912 Too many branches (19 > 12)\n   --> x_cls_legatus_acta_schedae_x.py:179:9\n    |\n177 |         self._inner, self._has_pdf = self._load_from_manifest(base_folder)\n178 |\n179 |     def _load_from_manifest(\n    |         ^^^^^^^^^^^^^^^^^^^\n180 |         self, base_folder: str\n181 |     ) -> tuple[MarkdownLike, bool]:\n    |\n\nPLR0915 Too many statements (100 > 50)\n   --> x_cls_legatus_acta_schedae_x.py:179:9\n    |\n177 |         self._inner, self._has_pdf = self._load_from_manifest(base_folder)\n178 |\n179 |     def _load_from_manifest(\n    |         ^^^^^^^^^^^^^^^^^^^\n180 |         self, base_folder: str\n181 |     ) -> tuple[MarkdownLike, bool]:\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:185:13\n    |\n183 |         env_manifest = os.environ.get(\"X_MANIFEST_PATH\")\n184 |         candidates = [\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n    |             ^^^^^^^^^^^^\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:186:13\n    |\n184 |         candidates = [\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n    |             ^^^^^^^^^^^^\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n188 |             *([env_manifest] if env_manifest else []),\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:186:26\n    |\n184 |         candidates = [\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n    |                          ^^^^^^^^^^^^^^^\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n188 |             *([env_manifest] if env_manifest else []),\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:187:13\n    |\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n    |             ^^^^^^^^^^^^\n188 |             *([env_manifest] if env_manifest else []),\n189 |         ]\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_legatus_acta_schedae_x.py:187:26\n    |\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n    |                          ^^^^^^^^^\n188 |             *([env_manifest] if env_manifest else []),\n189 |         ]\n    |\nhelp: Replace with `Path.cwd()`\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `obj`\n   --> x_cls_legatus_acta_schedae_x.py:194:26\n    |\n192 |         cls_name: str | None = None\n193 |\n194 |         def extract(obj: Any) -> tuple[str | None, str | None]:\n    |                          ^^^\n195 |             if not isinstance(obj, dict):\n196 |                 return (None, None)\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_legatus_acta_schedae_x.py:210:42\n    |\n209 |         def _dbg(msg: str) -> None:\n210 |             if _truthy_env(\"X_MD_DEBUG\", False):\n    |                                          ^^^^^\n211 |                 print(f\"[MD] {msg}\")\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_legatus_acta_schedae_x.py:215:36\n    |\n213 |         for path in candidates:\n214 |             try:\n215 |                 if not path or not os.path.isfile(path):\n    |                                    ^^^^^^^^^^^^^^\n216 |                     _dbg(f\"manifest not found: {path}\")\n217 |                     continue\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_legatus_acta_schedae_x.py:219:22\n    |\n217 |                     continue\n218 |                 _dbg(f\"reading manifest: {path}\")\n219 |                 with open(path, encoding=\"utf-8\") as fh:\n    |                      ^^^^\n220 |                     data = json.load(fh)\n221 |                 if isinstance(data, list):\n    |\nhelp: Replace with `Path.open()`\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> x_cls_legatus_acta_schedae_x.py:225:46\n    |\n223 |                         if (\n224 |                             isinstance(item, (list, tuple))\n225 |                             and len(item) == 4\n    |                                              ^\n226 |                             and isinstance(item[3], dict)\n227 |                         ):\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:240:20\n    |\n238 |                     _dbg(f\"resolved adapter {mod_name}.{cls_name}\")\n239 |                     break\n240 |             except Exception as e:\n    |                    ^^^^^^^^^\n241 |                 errs.append(f\"{path}: {e}\")\n242 |                 _dbg(f\"error reading manifest {path}: {e}\")\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_legatus_acta_schedae_x.py:249:13\n    |\n248 |         try:\n249 |             import importlib\n    |             ^^^^^^^^^^^^^^^^\n250 |\n251 |             mod = importlib.import_module(mod_name)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:255:16\n    |\n253 |             inst: Any = klass()\n254 |             _dbg(f\"loaded adapter instance: {mod_name}.{cls_name}\")\n255 |         except Exception as e:\n    |                ^^^^^^^^^\n256 |             _dbg(f\"failed to load adapter {mod_name}.{cls_name}: {e}\")\n257 |             return (_FallbackMarkdown(), False)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:275:19\n    |\n273 |               html_func = html_reset\n274 |           if html_func is None:\n275 |               raise RuntimeError(\n    |  ___________________^\n276 | |                 \"Markdown maker lacks a usable to_html()/convert() interface\"\n277 | |             )\n    | |_____________^\n278 |\n279 |           # Build typed PDF function\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:276:17\n    |\n274 |         if html_func is None:\n275 |             raise RuntimeError(\n276 |                 \"Markdown maker lacks a usable to_html()/convert() interface\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n277 |             )\n    |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:288:24\n    |\n286 |                 try:\n287 |                     tp(html_str, out_path)\n288 |                 except Exception:\n    |                        ^^^^^^^^^\n289 |                     with tempfile.NamedTemporaryFile(\n290 |                         \"w\", delete=False, suffix=\".html\", encoding=\"utf-8\"\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_legatus_acta_schedae_x.py:297:25\n    |\n295 |                           tp(tmp_path, out_path)\n296 |                       finally:\n297 | /                         try:\n298 | |                             os.remove(tmp_path)\n299 | |                         except Exception:\n300 | |                             pass\n    | |________________________________^\n301 |\n302 |               pdf_func = _call_to_pdf\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_legatus_acta_schedae_x.py:298:29\n    |\n296 |                     finally:\n297 |                         try:\n298 |                             os.remove(tmp_path)\n    |                             ^^^^^^^^^\n299 |                         except Exception:\n300 |                             pass\n    |\nhelp: Replace with `Path(...).unlink()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:299:25\n    |\n297 |                           try:\n298 |                               os.remove(tmp_path)\n299 | /                         except Exception:\n300 | |                             pass\n    | |________________________________^\n301 |\n302 |               pdf_func = _call_to_pdf\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:299:32\n    |\n297 |                         try:\n298 |                             os.remove(tmp_path)\n299 |                         except Exception:\n    |                                ^^^^^^^^^\n300 |                             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_legatus_acta_schedae_x.py:317:21\n    |\n315 |                       exp(tmp_path, out_path)\n316 |                   finally:\n317 | /                     try:\n318 | |                         os.remove(tmp_path)\n319 | |                     except Exception:\n320 | |                         pass\n    | |____________________________^\n321 |\n322 |               pdf_func = export_pdf_html\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_legatus_acta_schedae_x.py:318:25\n    |\n316 |                 finally:\n317 |                     try:\n318 |                         os.remove(tmp_path)\n    |                         ^^^^^^^^^\n319 |                     except Exception:\n320 |                         pass\n    |\nhelp: Replace with `Path(...).unlink()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:319:21\n    |\n317 |                       try:\n318 |                           os.remove(tmp_path)\n319 | /                     except Exception:\n320 | |                         pass\n    | |____________________________^\n321 |\n322 |               pdf_func = export_pdf_html\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:319:28\n    |\n317 |                     try:\n318 |                         os.remove(tmp_path)\n319 |                     except Exception:\n    |                            ^^^^^^^^^\n320 |                         pass\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:338:27\n    |\n336 |             def to_pdf(self, html_str: str, out_path: str) -> None:\n337 |                 if self._p is None:\n338 |                     raise RuntimeError(\"PDF exporter not available\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n339 |                 self._p(html_str, out_path)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:338:40\n    |\n336 |             def to_pdf(self, html_str: str, out_path: str) -> None:\n337 |                 if self._p is None:\n338 |                     raise RuntimeError(\"PDF exporter not available\")\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n339 |                 self._p(html_str, out_path)\n    |\nhelp: Assign to variable; remove string literal\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:392:9\n    |\n390 |     def __init__(self, db_path: str) -> None:\n391 |         self.db_path = db_path\n392 |         os.makedirs(os.path.dirname(db_path), exist_ok=True)\n    |         ^^^^^^^^^^^\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:392:21\n    |\n390 |     def __init__(self, db_path: str) -> None:\n391 |         self.db_path = db_path\n392 |         os.makedirs(os.path.dirname(db_path), exist_ok=True)\n    |                     ^^^^^^^^^^^^^^^\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:394:20\n    |\n392 |         os.makedirs(os.path.dirname(db_path), exist_ok=True)\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n    |                    ^^^^^^^^^^^^^^^\n395 |         self.json_cards_path = os.path.join(data_dir, \"cards.jsonl\")\n396 |         self.json_actions_path = os.path.join(data_dir, \"actions.jsonl\")\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:395:32\n    |\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n395 |         self.json_cards_path = os.path.join(data_dir, \"cards.jsonl\")\n    |                                ^^^^^^^^^^^^\n396 |         self.json_actions_path = os.path.join(data_dir, \"actions.jsonl\")\n397 |         self._ensure_schema()\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:396:34\n    |\n394 |         data_dir = os.path.dirname(self.db_path)\n395 |         self.json_cards_path = os.path.join(data_dir, \"cards.jsonl\")\n396 |         self.json_actions_path = os.path.join(data_dir, \"actions.jsonl\")\n    |                                  ^^^^^^^^^^^^\n397 |         self._ensure_schema()\n    |\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_legatus_acta_schedae_x.py:443:18\n    |\n441 |     def _append_jsonl(self, path: str, obj: dict[str, Any]) -> None:\n442 |         try:\n443 |             with open(path, \"a\", encoding=\"utf-8\") as fh:\n    |                  ^^^^\n444 |                 fh.write(json.dumps(obj, ensure_ascii=False) + \"\\n\")\n445 |         except Exception:\n    |\nhelp: Replace with `Path.open()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:445:9\n    |\n443 |               with open(path, \"a\", encoding=\"utf-8\") as fh:\n444 |                   fh.write(json.dumps(obj, ensure_ascii=False) + \"\\n\")\n445 | /         except Exception:\n446 | |             # Best-effort JSON logging; do not block DB operations\n447 | |             pass\n    | |________________^\n448 |\n449 |       def insert_card(self, card: Notecard) -> None:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:445:16\n    |\n443 |             with open(path, \"a\", encoding=\"utf-8\") as fh:\n444 |                 fh.write(json.dumps(obj, ensure_ascii=False) + \"\\n\")\n445 |         except Exception:\n    |                ^^^^^^^^^\n446 |             # Best-effort JSON logging; do not block DB operations\n447 |             pass\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_legatus_acta_schedae_x.py:607:17\n    |\n605 |           if \"cards\" in payload:\n606 |               for c in payload[\"cards\"]:\n607 | /                 result.append(\n608 | |                     {\n609 | |                         \"front_md\": c.get(\"front_md\", \"\"),\n610 | |                         \"back_md\": c.get(\"back_md\"),\n611 | |                         \"tags\": list(\n612 | |                             set([*(global_tags), *(c.get(\"tags\", []) or [])])\n613 | |                         ),\n614 | |                     }\n615 | |                 )\n    | |_________________^\n616 |               return result\n617 |           if \"qa\" in payload:\n    |\nhelp: Replace for loop with list.extend\n\nC405 Unnecessary list literal (rewrite as a set literal)\n   --> x_cls_legatus_acta_schedae_x.py:612:29\n    |\n610 |                         \"back_md\": c.get(\"back_md\"),\n611 |                         \"tags\": list(\n612 |                             set([*(global_tags), *(c.get(\"tags\", []) or [])])\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n613 |                         ),\n614 |                     }\n    |\nhelp: Rewrite as a set literal\n\nC405 Unnecessary list literal (rewrite as a set literal)\n   --> x_cls_legatus_acta_schedae_x.py:655:24\n    |\n653 |                 front = f\"# Task\\n**{t.get('title','')}**\"\n654 |                 back = t.get(\"details\", \"\")\n655 |                 tags = set([*(global_tags), *(t.get(\"tags\", []) or [])])\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n656 |                 task_id = t.get(\"task_id\")\n657 |                 if task_id:\n    |\nhelp: Rewrite as a set literal\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_legatus_acta_schedae_x.py:700:17\n    |\n698 |           if \"appointments\" in payload:\n699 |               for a in payload[\"appointments\"]:\n700 | /                 result.append(\n701 | |                     {\n702 | |                         \"front_md\": mk_front(a),\n703 | |                         \"back_md\": mk_back(a),\n704 | |                         \"tags\": list(\n705 | |                             set([*(global_tags), *(a.get(\"tags\", []) or [])])\n706 | |                         ),\n707 | |                     }\n708 | |                 )\n    | |_________________^\n709 |               return result\n710 |           result.append(\n    |\nhelp: Replace for loop with list.extend\n\nC405 Unnecessary list literal (rewrite as a set literal)\n   --> x_cls_legatus_acta_schedae_x.py:705:29\n    |\n703 |                         \"back_md\": mk_back(a),\n704 |                         \"tags\": list(\n705 |                             set([*(global_tags), *(a.get(\"tags\", []) or [])])\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n706 |                         ),\n707 |                     }\n    |\nhelp: Rewrite as a set literal\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_legatus_acta_schedae_x.py:741:24\n    |\n739 |         self.base_dir = base_dir or _base_dir_default()\n740 |         # All output under this folder to satisfy co-location requirement\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n    |                        ^^^^^^^^^^^^^^^\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:741:40\n    |\n739 |         self.base_dir = base_dir or _base_dir_default()\n740 |         # All output under this folder to satisfy co-location requirement\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n    |                                        ^^^^^^^^^^^^^^^\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:742:24\n    |\n740 |         # All output under this folder to satisfy co-location requirement\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n    |                        ^^^^^^^^^^^^\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:743:9\n    |\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:744:26\n    |\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n    |                          ^^^^^^^^^^^^\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n746 |         self.db_path = db_path or os.path.join(\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:745:9\n    |\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n746 |         self.db_path = db_path or os.path.join(\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:746:35\n    |\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n746 |         self.db_path = db_path or os.path.join(\n    |                                   ^^^^^^^^^^^^\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n748 |         )\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:749:9\n    |\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n748 |         )\n749 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n    |         ^^^^^^^^^^^\n750 |         self.storage = Storage(self.db_path)\n751 |         # Prefer base_dir for manifest lookup; still searches package/CWD/env\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:749:21\n    |\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n748 |         )\n749 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n    |                     ^^^^^^^^^^^^^^^\n750 |         self.storage = Storage(self.db_path)\n751 |         # Prefer base_dir for manifest lookup; still searches package/CWD/env\n    |\nhelp: Replace with `Path(...).parent`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:771:20\n    |\n769 |             try:\n770 |                 return _to_inches(float(val), unit)\n771 |             except Exception:\n    |                    ^^^^^^^^^\n772 |                 return 0.0\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:885:17\n    |\n883 |                   try:\n884 |                       return max(0.0, _to_inches(float(val), unit))\n885 | /                 except Exception:\n886 | |                     pass\n    | |________________________^\n887 |           return 0.25 if sheet is not None else 0.0\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:885:24\n    |\n883 |                 try:\n884 |                     return max(0.0, _to_inches(float(val), unit))\n885 |                 except Exception:\n    |                        ^^^^^^^^^\n886 |                     pass\n887 |         return 0.25 if sheet is not None else 0.0\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:912:20\n    |\n910 |             try:\n911 |                 return max(0.0, _to_inches(float(val), unit))\n912 |             except Exception:\n    |                    ^^^^^^^^^\n913 |                 return default\n    |\n\nSIM108 Use ternary operator `s = \"3x5\" if not spec else str(spec).strip().lower()` instead of `if`-`else`-block\n   --> x_cls_legatus_acta_schedae_x.py:933:9\n    |\n931 |       # --- size parsing (restored) ---\n932 |       def _parse_size_spec(self, spec: str) -> tuple[float, float]:\n933 | /         if not spec:\n934 | |             s = \"3x5\"\n935 | |         else:\n936 | |             s = str(spec).strip().lower()\n    | |_________________________________________^\n937 |\n938 |           # Parse using existing flexible logic, then hard-restrict.\n    |\nhelp: Replace `if`-`else`-block with `s = \"3x5\" if not spec else str(spec).strip().lower()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:978:15\n    |\n976 |               return (6.0, 4.0)\n977 |\n978 |           raise ValueError(\n    |  _______________^\n979 | |             f\"Only 3x5 and 4x6 sizes are supported (got: {w:.2f}x{h:.2f} in)\"\n980 | |         )\n    | |_________^\n981 |\n982 |       def make(\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:979:13\n    |\n978 |         raise ValueError(\n979 |             f\"Only 3x5 and 4x6 sizes are supported (got: {w:.2f}x{h:.2f} in)\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n980 |         )\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR0913 Too many arguments in function definition (8 > 5)\n   --> x_cls_legatus_acta_schedae_x.py:982:9\n    |\n980 |         )\n981 |\n982 |     def make(\n    |         ^^^^\n983 |         self,\n984 |         kind: str,\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_legatus_acta_schedae_x.py:1053:20\n     |\n1051 |         for c in cards:\n1052 |             html_out = self._render_card_html(c, sheet=sheet)\n1053 |             path = os.path.join(self.out_dir, self._output_filename(c, \"html\"))\n     |                    ^^^^^^^^^^^^\n1054 |             with open(path, \"w\", encoding=\"utf-8\") as f:\n1055 |                 f.write(html_out)\n     |\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_legatus_acta_schedae_x.py:1054:18\n     |\n1052 |             html_out = self._render_card_html(c, sheet=sheet)\n1053 |             path = os.path.join(self.out_dir, self._output_filename(c, \"html\"))\n1054 |             with open(path, \"w\", encoding=\"utf-8\") as f:\n     |                  ^^^^\n1055 |                 f.write(html_out)\n1056 |             paths.append(path)\n     |\nhelp: Replace with `Path.open()`\n\nC901 `export_pdf` is too complex (14 > 10)\n    --> x_cls_legatus_acta_schedae_x.py:1059:9\n     |\n1057 |         return paths\n1058 |\n1059 |     def export_pdf(self, cards: Iterable[Notecard]) -> list[str]:\n     |         ^^^^^^^^^^\n1060 |         \"\"\"\n1061 |         Export grouped duplex PDFs by size:\n     |\n\nE501 Line too long (91 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1065:89\n     |\n1063 |             * fronts PDF: all odd-indexed cards (in given order)\n1064 |             * backs  PDF: all even-indexed cards (in given order)\n1065 |         Each page contains the front content of a single card. Card back_md is not included\n     |                                                                                         ^^^\n1066 |         in duplex PDFs to support simple double-sided printing.\n1067 |         \"\"\"\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_legatus_acta_schedae_x.py:1071:36\n     |\n1069 |         sheet = self._sheet_size()\n1070 |         force_wk = sheet is not None or _truthy_env(\n1071 |             \"X_FORCE_WKHTMLTOPDF\", False\n     |                                    ^^^^^\n1072 |         )\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_legatus_acta_schedae_x.py:1133:29\n     |\n1131 | </html>\n1132 | \"\"\"\n1133 |                 html_path = os.path.join(\n     |                             ^^^^^^^^^^^^\n1134 |                     self.out_dir, f\"duplex_{size_key}_{label}.html\"\n1135 |                 )\n     |\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_legatus_acta_schedae_x.py:1136:22\n     |\n1134 |                     self.out_dir, f\"duplex_{size_key}_{label}.html\"\n1135 |                 )\n1136 |                 with open(html_path, \"w\", encoding=\"utf-8\") as fh:\n     |                      ^^^^\n1137 |                     fh.write(doc_html)\n     |\nhelp: Replace with `Path.open()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_legatus_acta_schedae_x.py:1140:28\n     |\n1139 |                 # Export to PDF\n1140 |                 pdf_path = os.path.join(\n     |                            ^^^^^^^^^^^^\n1141 |                     self.out_dir, f\"duplex_{size_key}_{label}.pdf\"\n1142 |                 )\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_legatus_acta_schedae_x.py:1151:28\n     |\n1149 |                     try:\n1150 |                         self.md.to_pdf(doc_html, pdf_path)\n1151 |                     except Exception as e_md:\n     |                            ^^^^^^^^^\n1152 |                         try:\n1153 |                             self._pdf.to_pdf(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_legatus_acta_schedae_x.py:1160:32\n     |\n1158 |                                 dpi=300,\n1159 |                             )\n1160 |                         except Exception as e_bin:\n     |                                ^^^^^^^^^\n1161 |                             raise RuntimeError(\n1162 |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n     |\n\nB904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling\n    --> x_cls_legatus_acta_schedae_x.py:1161:29\n     |\n1159 |                               )\n1160 |                           except Exception as e_bin:\n1161 | /                             raise RuntimeError(\n1162 | |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n1163 | |                             )\n     | |_____________________________^\n1164 |                   else:\n1165 |                       try:\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_legatus_acta_schedae_x.py:1161:35\n     |\n1159 |                               )\n1160 |                           except Exception as e_bin:\n1161 |                               raise RuntimeError(\n     |  ___________________________________^\n1162 | |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n1163 | |                             )\n     | |_____________________________^\n1164 |                   else:\n1165 |                       try:\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_legatus_acta_schedae_x.py:1162:33\n     |\n1160 |                         except Exception as e_bin:\n1161 |                             raise RuntimeError(\n1162 |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1163 |                             )\n1164 |                 else:\n     |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (104 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1162:89\n     |\n1160 |                         except Exception as e_bin:\n1161 |                             raise RuntimeError(\n1162 |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n     |                                                                                         ^^^^^^^^^^^^^^^^\n1163 |                             )\n1164 |                 else:\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_legatus_acta_schedae_x.py:1173:28\n     |\n1171 |                             dpi=300,\n1172 |                         )\n1173 |                     except Exception as e_bin:\n     |                            ^^^^^^^^^\n1174 |                         raise RuntimeError(\n1175 |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n     |\n\nB904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling\n    --> x_cls_legatus_acta_schedae_x.py:1174:25\n     |\n1172 |                           )\n1173 |                       except Exception as e_bin:\n1174 | /                         raise RuntimeError(\n1175 | |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n1176 | |                         )\n     | |_________________________^\n1177 |\n1178 |                   paths_local.append(pdf_path)\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_legatus_acta_schedae_x.py:1174:31\n     |\n1172 |                           )\n1173 |                       except Exception as e_bin:\n1174 |                           raise RuntimeError(\n     |  _______________________________^\n1175 | |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n1176 | |                         )\n     | |_________________________^\n1177 |\n1178 |                   paths_local.append(pdf_path)\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_legatus_acta_schedae_x.py:1175:29\n     |\n1173 |                     except Exception as e_bin:\n1174 |                         raise RuntimeError(\n1175 |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1176 |                         )\n     |\nhelp: Assign to variable; remove f-string literal\n\nFBT003 Boolean positional value in function call\n    --> x_cls_legatus_acta_schedae_x.py:1212:58\n     |\n1210 |             code_text = f\"NCX:{c.id[:8].upper()}\"\n1211 |\n1212 |         debug_frame = _truthy_env(\"X_PRINT_DEBUG_FRAME\", False)\n     |                                                          ^^^^^\n1213 |         border_css = (\n1214 |             \"5px dashed #e33\" if debug_frame else \"5px solid #000\"\n     |\n\nE501 Line too long (190 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1262:89\n     |\n1260 | \u00e2\u20ac\u00a6\n1261 | \u00e2\u20ac\u00a6\n1262 | \u00e2\u20ac\u00a6dding: 2px 6px; border-radius: 6px; font-size: 10px; background: #eef2f7; color: #334; border: 1px solid #ccd5e0; }}\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1263 | \u00e2\u20ac\u00a6\n1264 | \u00e2\u20ac\u00a6\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1273:89\n     |\n1271 |             .content {{ font-size: 14px; line-height: 1.35; }}\n1272 |             .footer-tags {{\n1273 |                 position: absolute; left: 0.25in; bottom: 0.15in; font-size: 10px; color: #666;\n     |                                                                                         ^^^^^^^\n1274 |             }}\n1275 |             .page-break {{ page-break-after: always; }}\n     |\n\nFLY002 Consider `f\"{b1}{b2}{b3}{b4}\"` instead of string join\n    --> x_cls_legatus_acta_schedae_x.py:1351:16\n     |\n1349 |         b3 = f'<span class=\"badge\">v{html.escape(ver)}</span>' if ver else \"\"\n1350 |         b4 = f'<span class=\"badge\">{html.escape(n)}</span>' if n else \"\"\n1351 |         return \"\".join([b1, b2, b3, b4])\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n1352 |\n1353 |     def _qr_data_uri(self, payload: str) -> str:\n     |\nhelp: Replace with `f\"{b1}{b2}{b3}{b4}\"`\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_legatus_acta_schedae_x.py:1356:19\n     |\n1354 |         # Guard for optional dependency; helps type-checkers and runtime safety\n1355 |         if qrcode is None:\n1356 |             raise RuntimeError(\"QR code generation not available\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1357 |         img = qrcode.make(payload)\n1358 |         buf = io.BytesIO()\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_legatus_acta_schedae_x.py:1356:32\n     |\n1354 |         # Guard for optional dependency; helps type-checkers and runtime safety\n1355 |         if qrcode is None:\n1356 |             raise RuntimeError(\"QR code generation not available\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1357 |         img = qrcode.make(payload)\n1358 |         buf = io.BytesIO()\n     |\nhelp: Assign to variable; remove string literal\n\nERA001 Found commented-out code\n    --> x_cls_legatus_acta_schedae_x.py:1373:5\n     |\n1371 |     maker.set_print_shift(y_mm=4)\n1372 |     # Example horizontal tweak (uncomment to nudge right 2mm):\n1373 |     # maker.set_print_shift(x_mm=2)\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1374 |\n1375 |     # Flashcards set with series metadata\n     |\nhelp: Remove commented-out code\n\nC901 `_ncx_set_print_shift` is too complex (12 > 10)\n    --> x_cls_legatus_acta_schedae_x.py:1451:9\n     |\n1449 | if not hasattr(x_cls_legatus_acta_schedae_x, \"set_print_shift\"):\n1450 |\n1451 |     def _ncx_set_print_shift(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1452 |         self,\n1453 |         *,\n     |\n\nPLR0913 Too many arguments in function definition (6 > 5)\n    --> x_cls_legatus_acta_schedae_x.py:1451:9\n     |\n1449 | if not hasattr(x_cls_legatus_acta_schedae_x, \"set_print_shift\"):\n1450 |\n1451 |     def _ncx_set_print_shift(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1452 |         self,\n1453 |         *,\n     |\n\nPLR0912 Too many branches (14 > 12)\n    --> x_cls_legatus_acta_schedae_x.py:1451:9\n     |\n1449 | if not hasattr(x_cls_legatus_acta_schedae_x, \"set_print_shift\"):\n1450 |\n1451 |     def _ncx_set_print_shift(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1452 |         self,\n1453 |         *,\n     |\n\nANN001 Missing type annotation for function argument `self`\n    --> x_cls_legatus_acta_schedae_x.py:1452:9\n     |\n1451 |     def _ncx_set_print_shift(\n1452 |         self,\n     |         ^^^^\n1453 |         *,\n1454 |         x_mm: float | None = None,\n     |\n\nANN001 Missing type annotation for function argument `self`\n    --> x_cls_legatus_acta_schedae_x.py:1487:30\n     |\n1485 |                 self.shift_y_in += yv  # type: ignore[attr-defined]\n1486 |\n1487 |     def _ncx_get_print_shift(self) -> tuple[float, float]:\n     |                              ^^^^\n1488 |         return (\n1489 |             getattr(self, \"shift_x_in\", 0.0),\n     |\n\nPGH003 Use specific rule codes when ignoring type issues\n    --> x_cls_legatus_acta_schedae_x.py:1493:74\n     |\n1491 |         )\n1492 |\n1493 |     x_cls_legatus_acta_schedae_x.set_print_shift = _ncx_set_print_shift  # type: ignore\n     |                                                                          ^^^^^^^^^^^^^^\n1494 |     x_cls_legatus_acta_schedae_x.get_print_shift = _ncx_get_print_shift  # type: ignore\n     |\n\nPGH003 Use specific rule codes when ignoring type issues\n    --> x_cls_legatus_acta_schedae_x.py:1494:74\n     |\n1493 |     x_cls_legatus_acta_schedae_x.set_print_shift = _ncx_set_print_shift  # type: ignore\n1494 |     x_cls_legatus_acta_schedae_x.get_print_shift = _ncx_get_print_shift  # type: ignore\n     |                                                                          ^^^^^^^^^^^^^^\n     |\n\nFound 980 errors.\nNo fixes available (391 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> adapters\\taskwarrior\\tw_repository.py:4:29\n  |\n3 | import importlib\n4 | from collections.abc import Iterable, Mapping\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> adapters\\taskwarrior\\tw_repository.py:4:39\n  |\n3 | import importlib\n4 | from collections.abc import Iterable, Mapping\n  |                                       ^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> adapters\\taskwarrior\\tw_repository.py:8:1\n  |\n6 | from typing import Any, cast\n7 |\n8 | from ...core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from ...core.ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> adapters\\taskwarrior\\tw_repository.py:9:1\n   |\n 8 | from ...core.domain.task import Task\n 9 | from ...core.ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 |\n11 | TaskWarriorClient: Any | None\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nANN204 Missing return type annotation for special method `__init__`\n  --> adapters\\taskwarrior\\tw_repository.py:23:9\n   |\n22 | class TaskwarriorRepository(ITaskRepository):\n23 |     def __init__(\n   |         ^^^^^^^^\n24 |         self,\n25 |         data_dir: str | None = None,\n   |\nhelp: Add return type annotation: `None`\n\nDTZ003 `datetime.datetime.utcnow()` used\n   --> adapters\\taskwarrior\\tw_repository.py:108:16\n    |\n107 |     def now(self) -> datetime:\n108 |         return datetime.utcnow()\n    |                ^^^^^^^^^^^^^^^^^\n109 |\n110 |     def _convert(self, tw_task: Mapping[str, Any]) -> Task:\n    |\nhelp: Use `datetime.datetime.now(tz=...)` instead\n\nTC001 Move application import `.core.services.ai_service.AIService` into a type-checking block\n --> app.py:5:39\n  |\n3 | from dataclasses import dataclass\n4 |\n5 | from .core.services.ai_service import AIService\n  |                                       ^^^^^^^^^\n6 | from .core.services.collaboration_service import CollaborationService\n7 | from .core.services.scheduler_service import SchedulerService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.collaboration_service.CollaborationService` into a type-checking block\n --> app.py:6:50\n  |\n5 | from .core.services.ai_service import AIService\n6 | from .core.services.collaboration_service import CollaborationService\n  |                                                  ^^^^^^^^^^^^^^^^^^^^\n7 | from .core.services.scheduler_service import SchedulerService\n8 | from .core.services.search_service import SearchService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.scheduler_service.SchedulerService` into a type-checking block\n --> app.py:7:46\n  |\n5 | from .core.services.ai_service import AIService\n6 | from .core.services.collaboration_service import CollaborationService\n7 | from .core.services.scheduler_service import SchedulerService\n  |                                              ^^^^^^^^^^^^^^^^\n8 | from .core.services.search_service import SearchService\n9 | from .core.services.task_service import TaskService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.search_service.SearchService` into a type-checking block\n  --> app.py:8:43\n   |\n 6 | from .core.services.collaboration_service import CollaborationService\n 7 | from .core.services.scheduler_service import SchedulerService\n 8 | from .core.services.search_service import SearchService\n   |                                           ^^^^^^^^^^^^^\n 9 | from .core.services.task_service import TaskService\n10 | from .infrastructure.config import AppConfig, load_config\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.core.services.task_service.TaskService` into a type-checking block\n  --> app.py:9:41\n   |\n 7 | from .core.services.scheduler_service import SchedulerService\n 8 | from .core.services.search_service import SearchService\n 9 | from .core.services.task_service import TaskService\n   |                                         ^^^^^^^^^^^\n10 | from .infrastructure.config import AppConfig, load_config\n11 | from .infrastructure.di import AppContext, build_context\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\domain\\events.py:4:22\n  |\n3 | from dataclasses import dataclass\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Any, Protocol\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.task.Task` into a type-checking block\n --> core\\domain\\events.py:7:19\n  |\n5 | from typing import Any, Protocol\n6 |\n7 | from .task import Task\n  |                   ^^^^\n  |\nhelp: Move into type-checking block\n\nFBT001 Boolean-typed positional argument in function definition\n   --> core\\domain\\review.py:146:30\n    |\n144 |         self.due_at = entry.next_due\n145 |\n146 |     def mark_suspended(self, suspended: bool) -> None:\n    |                              ^^^^^^^^^\n147 |         self.suspended = suspended\n    |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\domain\\task.py:4:29\n  |\n3 | import uuid\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from dataclasses import dataclass, field\n6 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\domain\\task.py:26:15\n   |\n24 |     normalized = priority.lower()\n25 |     if normalized not in VALID_PRIORITIES:\n26 |         raise ValueError(f\"Invalid priority {priority}\")\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n27 |     return normalized\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> core\\domain\\task.py:26:26\n   |\n24 |     normalized = priority.lower()\n25 |     if normalized not in VALID_PRIORITIES:\n26 |         raise ValueError(f\"Invalid priority {priority}\")\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n27 |     return normalized\n   |\nhelp: Assign to variable; remove f-string literal\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**changes`\n  --> core\\domain\\task.py:96:35\n   |\n94 |         return self.with_tags(remaining)\n95 |\n96 |     def _replace(self, **changes: Any) -> Task:\n   |                                   ^^^\n97 |         data: dict[str, Any] = dict(self.__dict__)\n98 |         data.update(changes)\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:109:19\n    |\n107 |     def validate(self) -> None:\n108 |         if not self.description:\n109 |             raise ValueError(\"Description empty\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\domain\\task.py:109:30\n    |\n107 |     def validate(self) -> None:\n108 |         if not self.description:\n109 |             raise ValueError(\"Description empty\")\n    |                              ^^^^^^^^^^^^^^^^^^^\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:111:19\n    |\n109 |             raise ValueError(\"Description empty\")\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\domain\\task.py:111:30\n    |\n109 |             raise ValueError(\"Description empty\")\n110 |         if self.status not in VALID_STATUSES:\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:113:19\n    |\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\domain\\task.py:113:30\n    |\n111 |             raise ValueError(f\"Invalid status {self.status}\")\n112 |         if self.priority and self.priority not in VALID_PRIORITIES:\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\domain\\task.py:115:19\n    |\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\domain\\task.py:115:30\n    |\n113 |             raise ValueError(f\"Invalid priority {self.priority}\")\n114 |         if self.due and self.due < self.created:\n115 |             raise ValueError(\"Due date earlier than creation\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Assign to variable; remove string literal\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\ports\\review_repo.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\ports\\review_repo.py:6:1\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.review import ReviewRecord\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.review.ReviewRecord` into a type-checking block\n --> core\\ports\\review_repo.py:6:29\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.review import ReviewRecord\n  |                             ^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> core\\ports\\scheduler.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Callable\n  |                             ^^^^^^^^\n4 | from datetime import datetime\n5 | from typing import Any, Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\ports\\scheduler.py:4:22\n  |\n3 | from collections.abc import Callable\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Any, Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\ports\\search_index.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\ports\\search_index.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\ports\\search_index.py:6:1\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n --> core\\ports\\search_index.py:6:27\n  |\n4 | from typing import Protocol\n5 |\n6 | from ..domain.task import Task\n  |                           ^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\ports\\task_repo.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import datetime\n5 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\ports\\task_repo.py:4:22\n  |\n3 | from collections.abc import Iterable\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Protocol\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\ports\\task_repo.py:7:1\n  |\n5 | from typing import Protocol\n6 |\n7 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n --> core\\ports\\task_repo.py:7:27\n  |\n5 | from typing import Protocol\n6 |\n7 | from ..domain.task import Task\n  |                           ^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\ai_briefing_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.AIService` into a type-checking block\n --> core\\services\\ai_briefing_service.py:7:25\n  |\n5 | from datetime import UTC, datetime\n6 |\n7 | from .ai_service import AIService, TaskSummary\n  |                         ^^^^^^^^^\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.TaskSummary` into a type-checking block\n --> core\\services\\ai_briefing_service.py:7:36\n  |\n5 | from datetime import UTC, datetime\n6 |\n7 | from .ai_service import AIService, TaskSummary\n  |                                    ^^^^^^^^^^^\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_guidance_service.ReviewGuidance` into a type-checking block\n --> core\\services\\ai_briefing_service.py:8:38\n  |\n7 | from .ai_service import AIService, TaskSummary\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |                                      ^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_guidance_service.ReviewGuidanceService` into a type-checking block\n --> core\\services\\ai_briefing_service.py:8:54\n  |\n7 | from .ai_service import AIService, TaskSummary\n8 | from .review_guidance_service import ReviewGuidance, ReviewGuidanceService\n  |                                                      ^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nE501 Line too long (90 > 88)\n  --> core\\services\\ai_briefing_service.py:23:89\n   |\n22 | class AIBriefingService:\n23 |     \"\"\"Produces consolidated daily briefings blending AI summaries and review guidance.\"\"\"\n   |                                                                                         ^^\n24 |\n25 |     def __init__(\n   |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\ai_service.py:4:29\n  |\n3 | from collections import Counter\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from dataclasses import dataclass\n6 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\ai_service.py:8:1\n   |\n 6 | from datetime import UTC, datetime, timedelta\n 7 |\n 8 | from ..domain.events import EventDispatcher\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n  --> core\\services\\ai_service.py:8:29\n   |\n 6 | from datetime import UTC, datetime, timedelta\n 7 |\n 8 | from ..domain.events import EventDispatcher\n   |                             ^^^^^^^^^^^^^^^\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\ai_service.py:9:1\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n  --> core\\services\\ai_service.py:9:27\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n   |                           ^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\ai_service.py:10:1\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\ai_service.py:10:31\n   |\n 8 | from ..domain.events import EventDispatcher\n 9 | from ..domain.task import Task\n10 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nPERF401 Use a list comprehension to create a transformed list\n   --> core\\services\\ai_service.py:127:13\n    |\n125 |           upcoming_rows: list[UpcomingTask] = []\n126 |           for task in candidates[:count]:\n127 | /             upcoming_rows.append(\n128 | |                 UpcomingTask(\n129 | |                     task_id=task.id,\n130 | |                     description=task.description,\n131 | |                     due=task.due,\n132 | |                     priority=task.priority,\n133 | |                 )\n134 | |             )\n    | |_____________^\n135 |           return upcoming_rows\n    |\nhelp: Replace for loop with list comprehension\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> core\\services\\automation_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Mapping\n  |                             ^^^^^^^\n4 | from datetime import UTC, datetime\n5 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\automation_service.py:7:1\n  |\n5 | from typing import Any\n6 |\n7 | from ...infrastructure.automation import AutomationWebhookClient\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ...infrastructure.telemetry import TelemetryClient\n9 | from ..domain import events\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.automation.AutomationWebhookClient` into a type-checking block\n --> core\\services\\automation_service.py:7:42\n  |\n5 | from typing import Any\n6 |\n7 | from ...infrastructure.automation import AutomationWebhookClient\n  |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ...infrastructure.telemetry import TelemetryClient\n9 | from ..domain import events\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\automation_service.py:8:1\n   |\n 7 | from ...infrastructure.automation import AutomationWebhookClient\n 8 | from ...infrastructure.telemetry import TelemetryClient\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.telemetry.TelemetryClient` into a type-checking block\n  --> core\\services\\automation_service.py:8:41\n   |\n 7 | from ...infrastructure.automation import AutomationWebhookClient\n 8 | from ...infrastructure.telemetry import TelemetryClient\n   |                                         ^^^^^^^^^^^^^^^\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\automation_service.py:9:1\n   |\n 7 | from ...infrastructure.automation import AutomationWebhookClient\n 8 | from ...infrastructure.telemetry import TelemetryClient\n 9 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n11 | from .ai_service import AIService, TaskSummary\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\automation_service.py:10:1\n   |\n 8 | from ...infrastructure.telemetry import TelemetryClient\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from .ai_service import AIService, TaskSummary\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\automation_service.py:10:31\n   |\n 8 | from ...infrastructure.telemetry import TelemetryClient\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n11 | from .ai_service import AIService, TaskSummary\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.AIService` into a type-checking block\n  --> core\\services\\automation_service.py:11:25\n   |\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n11 | from .ai_service import AIService, TaskSummary\n   |                         ^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.ai_service.TaskSummary` into a type-checking block\n  --> core\\services\\automation_service.py:11:36\n   |\n 9 | from ..domain import events\n10 | from ..ports.task_repo import ITaskRepository\n11 | from .ai_service import AIService, TaskSummary\n   |                                    ^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\card_action_service.py:7:1\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\card_action_service.py:7:1\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...x_cls_legatus_acta_schedae_x.Notecard` into a type-checking block\n --> core\\services\\card_action_service.py:7:45\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  |                                             ^^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `...x_cls_legatus_acta_schedae_x.Storage` into a type-checking block\n --> core\\services\\card_action_service.py:7:55\n  |\n5 | from urllib.parse import parse_qs, urlparse\n6 |\n7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n  |                                                       ^^^^^^^\n8 | from ..domain import events\n9 | from ..domain.events import EventDispatcher\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\card_action_service.py:8:1\n   |\n 7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n 8 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain.events import EventDispatcher\n10 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\card_action_service.py:9:1\n   |\n 7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n  --> core\\services\\card_action_service.py:9:29\n   |\n 7 | from ...x_cls_legatus_acta_schedae_x import Notecard, Storage\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n   |                             ^^^^^^^^^^^^^^^\n10 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\card_action_service.py:10:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n10 | from ..services.task_service import TaskService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..services.task_service.TaskService` into a type-checking block\n  --> core\\services\\card_action_service.py:10:37\n   |\n 8 | from ..domain import events\n 9 | from ..domain.events import EventDispatcher\n10 | from ..services.task_service import TaskService\n   |                                     ^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\card_action_service.py:123:15\n    |\n121 |             )\n122 |\n123 |         raise ValueError(f\"Unsupported task update action '{action}'\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |\n125 |     @staticmethod\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\card_action_service.py:123:26\n    |\n121 |             )\n122 |\n123 |         raise ValueError(f\"Unsupported task update action '{action}'\")\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |\n125 |     @staticmethod\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\card_action_service.py:129:19\n    |\n127 |         normalized = (task_update or \"\").strip().lower() or \"complete\"\n128 |         if normalized not in {\"complete\", \"none\"}:\n129 |             raise ValueError(\"task_update must be one of: 'complete', 'none'\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n130 |         return normalized\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\services\\card_action_service.py:129:30\n    |\n127 |         normalized = (task_update or \"\").strip().lower() or \"complete\"\n128 |         if normalized not in {\"complete\", \"none\"}:\n129 |             raise ValueError(\"task_update must be one of: 'complete', 'none'\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n130 |         return normalized\n    |\nhelp: Assign to variable; remove string literal\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> core\\services\\card_action_service.py:135:55\n    |\n133 |     def _extract_task_id(card: Notecard) -> str | None:\n134 |         for tag in card.tags:\n135 |             if tag.startswith(\"task:\") and len(tag) > 5:\n    |                                                       ^\n136 |                 return tag.split(\":\", 1)[1]\n137 |         if card.symbol_data:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> core\\services\\card_action_service.py:144:20\n    |\n142 |                 if task_param:\n143 |                     return task_param[0]\n144 |             except Exception:\n    |                    ^^^^^^^^^\n145 |                 return None\n146 |         return None\n    |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\collaboration_service.py:6:29\n  |\n4 | import json\n5 | import os\n6 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n7 | from dataclasses import asdict, dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\collaboration_service.py:6:39\n  |\n4 | import json\n5 | import os\n6 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n7 | from dataclasses import asdict, dataclass\n8 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\collaboration_service.py:16:1\n   |\n14 | from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\n15 |\n16 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 | from ..domain.task import Task\n18 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\collaboration_service.py:17:1\n   |\n16 | from ..domain import events\n17 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\collaboration_service.py:18:1\n   |\n16 | from ..domain import events\n17 | from ..domain.task import Task\n18 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\collaboration_service.py:18:31\n   |\n16 | from ..domain import events\n17 | from ..domain.task import Task\n18 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\collaboration_service.py:80:19\n   |\n78 |         src_path = Path(source)\n79 |         if not src_path.exists():\n80 |             raise FileNotFoundError(f\"Sync bundle not found: {src_path}\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |         bundle = json.loads(src_path.read_text(encoding=\"utf-8\"))\n82 |         salt_b64 = bundle.get(\"salt\")\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> core\\services\\collaboration_service.py:80:37\n   |\n78 |         src_path = Path(source)\n79 |         if not src_path.exists():\n80 |             raise FileNotFoundError(f\"Sync bundle not found: {src_path}\")\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |         bundle = json.loads(src_path.read_text(encoding=\"utf-8\"))\n82 |         salt_b64 = bundle.get(\"salt\")\n   |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n  --> core\\services\\collaboration_service.py:85:13\n   |\n83 |         ciphertext = bundle.get(\"ciphertext\")\n84 |         if not isinstance(salt_b64, str) or not isinstance(ciphertext, str):\n85 |             raise ValueError(\"Malformed sync bundle\")\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n86 |         salt = base64.b64decode(salt_b64)\n87 |         decrypted = self._decrypt(ciphertext.encode(\"utf-8\"), passphrase, salt)\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\collaboration_service.py:85:19\n   |\n83 |         ciphertext = bundle.get(\"ciphertext\")\n84 |         if not isinstance(salt_b64, str) or not isinstance(ciphertext, str):\n85 |             raise ValueError(\"Malformed sync bundle\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n86 |         salt = base64.b64decode(salt_b64)\n87 |         decrypted = self._decrypt(ciphertext.encode(\"utf-8\"), passphrase, salt)\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\collaboration_service.py:85:30\n   |\n83 |         ciphertext = bundle.get(\"ciphertext\")\n84 |         if not isinstance(salt_b64, str) or not isinstance(ciphertext, str):\n85 |             raise ValueError(\"Malformed sync bundle\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^\n86 |         salt = base64.b64decode(salt_b64)\n87 |         decrypted = self._decrypt(ciphertext.encode(\"utf-8\"), passphrase, salt)\n   |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\collaboration_service.py:93:19\n   |\n91 |             json.JSONDecodeError\n92 |         ) as exc:  # pragma: no cover - defensive guard\n93 |             raise ValueError(\"Unable to decode sync payload\") from exc\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n94 |         imported_tasks: list[Task] = []\n95 |         for record in records:\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\collaboration_service.py:93:30\n   |\n91 |             json.JSONDecodeError\n92 |         ) as exc:  # pragma: no cover - defensive guard\n93 |             raise ValueError(\"Unable to decode sync payload\") from exc\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n94 |         imported_tasks: list[Task] = []\n95 |         for record in records:\n   |\nhelp: Assign to variable; remove string literal\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\plugin_bus.py:5:29\n  |\n3 | import inspect\n4 | import logging\n5 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n6 | from dataclasses import dataclass\n7 | from importlib import import_module\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\plugin_bus.py:5:39\n  |\n3 | import inspect\n4 | import logging\n5 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n6 | from dataclasses import dataclass\n7 | from importlib import import_module\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:10:1\n   |\n 8 | from typing import Any, Protocol, cast\n 9 |\n10 | from ...infrastructure.config import AppConfig\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.config.AppConfig` into a type-checking block\n  --> core\\services\\plugin_bus.py:10:38\n   |\n 8 | from typing import Any, Protocol, cast\n 9 |\n10 | from ...infrastructure.config import AppConfig\n   |                                      ^^^^^^^^^\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:11:1\n   |\n10 | from ...infrastructure.config import AppConfig\n11 | from ...infrastructure.telemetry import TelemetryClient\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.telemetry.TelemetryClient` into a type-checking block\n  --> core\\services\\plugin_bus.py:11:41\n   |\n10 | from ...infrastructure.config import AppConfig\n11 | from ...infrastructure.telemetry import TelemetryClient\n   |                                         ^^^^^^^^^^^^^^^\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:12:1\n   |\n10 | from ...infrastructure.config import AppConfig\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:13:1\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:13:1\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n  --> core\\services\\plugin_bus.py:13:29\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |                             ^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `..domain.events.EventSubscriber` into a type-checking block\n  --> core\\services\\plugin_bus.py:13:46\n   |\n11 | from ...infrastructure.telemetry import TelemetryClient\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n   |                                              ^^^^^^^^^^^^^^^\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:14:1\n   |\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n15 | from ..services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..services.ai_service.AIService` into a type-checking block\n  --> core\\services\\plugin_bus.py:14:35\n   |\n12 | from ..domain import events\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n   |                                   ^^^^^^^^^\n15 | from ..services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\plugin_bus.py:15:1\n   |\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n16 |\n17 | DomainEventType = (\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..services.task_service.TaskService` into a type-checking block\n  --> core\\services\\plugin_bus.py:15:37\n   |\n13 | from ..domain.events import EventDispatcher, EventSubscriber\n14 | from ..services.ai_service import AIService\n15 | from ..services.task_service import TaskService\n   |                                     ^^^^^^^^^^^\n16 |\n17 | DomainEventType = (\n   |\nhelp: Move into type-checking block\n\nPLR0913 Too many arguments in function definition (6 > 5)\n  --> core\\services\\plugin_bus.py:43:9\n   |\n42 | class PluginContext:\n43 |     def __init__(\n   |         ^^^^^^^^\n44 |         self,\n45 |         plugin_name: str,\n   |\n\nSIM108 Use ternary operator `plugin_instance = plugin_obj() if inspect.isclass(plugin_obj) else plugin_obj` instead of `if`-`else`-block\n   --> core\\services\\plugin_bus.py:171:9\n    |\n169 |               plugin_obj = module.plugin\n170 |\n171 | /         if inspect.isclass(plugin_obj):\n172 | |             plugin_instance = plugin_obj()\n173 | |         else:\n174 | |             plugin_instance = plugin_obj\n    | |________________________________________^\n175 |\n176 |           if not hasattr(plugin_instance, \"setup\"):\n    |\nhelp: Replace `if`-`else`-block with `plugin_instance = plugin_obj() if inspect.isclass(plugin_obj) else plugin_obj`\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\review_guidance_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\services\\review_guidance_service.py:5:22\n  |\n3 | from collections.abc import Sequence\n4 | from dataclasses import dataclass\n5 | from datetime import datetime, timedelta\n  |                      ^^^^^^^^\n6 |\n7 | from ..domain.review import ReviewRecord\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.timedelta` into a type-checking block\n --> core\\services\\review_guidance_service.py:5:32\n  |\n3 | from collections.abc import Sequence\n4 | from dataclasses import dataclass\n5 | from datetime import datetime, timedelta\n  |                                ^^^^^^^^^\n6 |\n7 | from ..domain.review import ReviewRecord\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\review_guidance_service.py:7:1\n  |\n5 | from datetime import datetime, timedelta\n6 |\n7 | from ..domain.review import ReviewRecord\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.review.ReviewRecord` into a type-checking block\n --> core\\services\\review_guidance_service.py:7:29\n  |\n5 | from datetime import datetime, timedelta\n6 |\n7 | from ..domain.review import ReviewRecord\n  |                             ^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\review_guidance_service.py:8:1\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n --> core\\services\\review_guidance_service.py:8:27\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n  |                           ^^^^\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_service.ReviewPlanItem` into a type-checking block\n --> core\\services\\review_guidance_service.py:9:29\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |                             ^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC001 Move application import `.review_service.ReviewService` into a type-checking block\n --> core\\services\\review_guidance_service.py:9:45\n  |\n7 | from ..domain.review import ReviewRecord\n8 | from ..domain.task import Task\n9 | from .review_service import ReviewPlanItem, ReviewService\n  |                                             ^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> core\\services\\review_guidance_service.py:75:31\n   |\n73 |                 score += 1.25\n74 |                 reasons.append(\"task due\")\n75 |             elif delta_days < 2:\n   |                               ^\n76 |                 score += 0.75\n77 |                 reasons.append(\"task due soon\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n  --> core\\services\\review_guidance_service.py:88:33\n   |\n86 |             reasons.append(\"recent card scan\")\n87 |\n88 |         if record.repetitions < 3:\n   |                                 ^\n89 |             score += 0.3\n90 |             reasons.append(f\"{record.repetitions} reps\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable\n  --> core\\services\\review_guidance_service.py:92:33\n   |\n90 |             reasons.append(f\"{record.repetitions} reps\")\n91 |\n92 |         if record.ease_factor < 2.0:\n   |                                 ^^^\n93 |             score += 0.4\n94 |             reasons.append(\"low ease\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> core\\services\\review_guidance_service.py:113:27\n    |\n111 |         if task.status == \"completed\":\n112 |             return \"confirm archive\"\n113 |         if overdue_days > 2:\n    |                           ^\n114 |             return \"rescue overdue review\"\n115 |         if task.priority == \"high\":\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable\n   --> core\\services\\review_guidance_service.py:117:27\n    |\n115 |         if task.priority == \"high\":\n116 |             return \"review then commit\"\n117 |         if overdue_days > 0.5:\n    |                           ^^^\n118 |             return \"refresh context\"\n119 |         return \"review next\"\n    |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:8:1\n   |\n 6 | from typing import Any, cast\n 7 |\n 8 | from ..domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:9:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:9:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:10:1\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n  --> core\\services\\review_service.py:10:27\n   |\n 8 | from ..domain import events\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n   |                           ^^^^\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:11:1\n   |\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.review_repo.IReviewRepository` into a type-checking block\n  --> core\\services\\review_service.py:11:33\n   |\n 9 | from ..domain.review import ReviewHistoryEntry, ReviewRecord\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n   |                                 ^^^^^^^^^^^^^^^^^\n12 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\review_service.py:12:1\n   |\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\review_service.py:12:31\n   |\n10 | from ..domain.task import Task\n11 | from ..ports.review_repo import IReviewRepository\n12 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> core\\services\\review_service.py:35:9\n   |\n34 | class ReviewService:\n35 |     def __init__(\n   |         ^^^^^^^^\n36 |         self,\n37 |         repository: IReviewRepository,\n   |\nhelp: Add return type annotation: `None`\n\nC401 Unnecessary generator (rewrite as a set comprehension)\n   --> core\\services\\review_service.py:133:22\n    |\n131 |         moment = now or _now()\n132 |         results: list[ReviewPlanItem] = []\n133 |         tag_filter = set(t.lower() for t in tags) if tags else None\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n134 |         for record in self._repository.list():\n135 |             if record.suspended:\n    |\nhelp: Rewrite as a set comprehension\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> core\\services\\review_service.py:166:37\n    |\n164 |         context: Mapping[str, Any] | None = None,\n165 |     ) -> ReviewRecord:\n166 |         if quality < 0 or quality > 5:\n    |                                     ^\n167 |             raise ValueError(\"quality must be between 0 and 5\")\n168 |         reviewed_time = reviewed_at or _now()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\review_service.py:167:19\n    |\n165 |     ) -> ReviewRecord:\n166 |         if quality < 0 or quality > 5:\n167 |             raise ValueError(\"quality must be between 0 and 5\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n168 |         reviewed_time = reviewed_at or _now()\n169 |         if reviewed_time.tzinfo is None:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> core\\services\\review_service.py:167:30\n    |\n165 |     ) -> ReviewRecord:\n166 |         if quality < 0 or quality > 5:\n167 |             raise ValueError(\"quality must be between 0 and 5\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n168 |         reviewed_time = reviewed_at or _now()\n169 |         if reviewed_time.tzinfo is None:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\review_service.py:173:19\n    |\n171 |         task = self._task_repository.get(task_id)\n172 |         if task is None:\n173 |             raise KeyError(f\"Task {task_id} not found\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n174 |         record = self._repository.get(task_id)\n175 |         if record is None:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\review_service.py:173:28\n    |\n171 |         task = self._task_repository.get(task_id)\n172 |         if task is None:\n173 |             raise KeyError(f\"Task {task_id} not found\")\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n174 |         record = self._repository.get(task_id)\n175 |         if record is None:\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> core\\services\\review_service.py:181:22\n    |\n179 |         )\n180 |         ease = max(1.3, ease)\n181 |         if quality < 3:\n    |                      ^\n182 |             repetitions = 0\n183 |             interval_days = 1.0\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> core\\services\\review_service.py:188:33\n    |\n186 |             if repetitions == 1:\n187 |                 interval_days = 1.0\n188 |             elif repetitions == 2:\n    |                                 ^\n189 |                 interval_days = 6.0\n190 |             else:\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> core\\services\\review_service.py:207:37\n    |\n205 |         return self._repository.save(record)\n206 |\n207 |     def suspend(self, task_id: str, suspended: bool) -> ReviewRecord:\n    |                                     ^^^^^^^^^\n208 |         task = self._task_repository.get(task_id)\n209 |         if task is None:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\review_service.py:210:19\n    |\n208 |         task = self._task_repository.get(task_id)\n209 |         if task is None:\n210 |             raise KeyError(f\"Task {task_id} not found\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n211 |         record = self._repository.get(task_id)\n212 |         if record is None:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\review_service.py:210:28\n    |\n208 |         task = self._task_repository.get(task_id)\n209 |         if task is None:\n210 |             raise KeyError(f\"Task {task_id} not found\")\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n211 |         record = self._repository.get(task_id)\n212 |         if record is None:\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR0911 Too many return statements (7 > 6)\n   --> core\\services\\review_service.py:238:9\n    |\n237 |     @staticmethod\n238 |     def _infer_quality_from_scan(event: events.CardScanned) -> int:\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n239 |         metadata = event.metadata or {}\n240 |         if event.task_error:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`\n   --> core\\services\\review_service.py:266:28\n    |\n265 |     @staticmethod\n266 |     def _coerce_int(value: Any) -> int | None:\n    |                            ^^^\n267 |         if isinstance(value, bool):\n268 |             return 1 if value else 0\n    |\n\nRUF046 Value being cast to `int` is already an integer\n   --> core\\services\\review_service.py:270:20\n    |\n268 |             return 1 if value else 0\n269 |         if isinstance(value, (int, float)):\n270 |             return int(round(value))\n    |                    ^^^^^^^^^^^^^^^^^\n271 |         if isinstance(value, str):\n272 |             try:\n    |\nhelp: Remove unnecessary `int` call\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`\n   --> core\\services\\review_service.py:285:29\n    |\n283 |             return {}\n284 |\n285 |         def _convert(value: Any) -> Any:\n    |                             ^^^\n286 |             if isinstance(value, (str, int, float, bool)) or value is None:\n287 |                 return value\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_convert`\n   --> core\\services\\review_service.py:285:37\n    |\n283 |             return {}\n284 |\n285 |         def _convert(value: Any) -> Any:\n    |                                     ^^^\n286 |             if isinstance(value, (str, int, float, bool)) or value is None:\n287 |                 return value\n    |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:5:1\n  |\n3 | from datetime import UTC, datetime\n4 |\n5 | from ...infrastructure.telemetry import TelemetryClient\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...infrastructure.telemetry.TelemetryClient` into a type-checking block\n --> core\\services\\scheduler_service.py:5:41\n  |\n3 | from datetime import UTC, datetime\n4 |\n5 | from ...infrastructure.telemetry import TelemetryClient\n  |                                         ^^^^^^^^^^^^^^^\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:6:1\n  |\n5 | from ...infrastructure.telemetry import TelemetryClient\n6 | from ..domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:7:1\n  |\n5 | from ...infrastructure.telemetry import TelemetryClient\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n --> core\\services\\scheduler_service.py:7:29\n  |\n5 | from ...infrastructure.telemetry import TelemetryClient\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |                             ^^^^^^^^^^^^^^^\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:8:1\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.scheduler.IScheduler` into a type-checking block\n --> core\\services\\scheduler_service.py:8:31\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n  |                               ^^^^^^^^^^\n9 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\scheduler_service.py:9:1\n  |\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n --> core\\services\\scheduler_service.py:9:31\n  |\n7 | from ..domain.events import EventDispatcher\n8 | from ..ports.scheduler import IScheduler\n9 | from ..ports.task_repo import ITaskRepository\n  |                               ^^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\search_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\search_service.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from dataclasses import dataclass\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\search_service.py:6:1\n  |\n4 | from dataclasses import dataclass\n5 |\n6 | from ..domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..domain.events import EventDispatcher\n8 | from ..domain.task import Task\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\search_service.py:7:1\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from ..ports.search_index import ISearchIndex\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.events.EventDispatcher` into a type-checking block\n --> core\\services\\search_service.py:7:29\n  |\n6 | from ..domain import events\n7 | from ..domain.events import EventDispatcher\n  |                             ^^^^^^^^^^^^^^^\n8 | from ..domain.task import Task\n9 | from ..ports.search_index import ISearchIndex\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\search_service.py:8:1\n   |\n 6 | from ..domain import events\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..domain.task.Task` into a type-checking block\n  --> core\\services\\search_service.py:8:27\n   |\n 6 | from ..domain import events\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n   |                           ^^^^\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\search_service.py:9:1\n   |\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.search_index.ISearchIndex` into a type-checking block\n  --> core\\services\\search_service.py:9:34\n   |\n 7 | from ..domain.events import EventDispatcher\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n   |                                  ^^^^^^^^^^^^\n10 | from ..ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> core\\services\\search_service.py:10:1\n   |\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n  --> core\\services\\search_service.py:10:31\n   |\n 8 | from ..domain.task import Task\n 9 | from ..ports.search_index import ISearchIndex\n10 | from ..ports.task_repo import ITaskRepository\n   |                               ^^^^^^^^^^^^^^^\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> core\\services\\task_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from datetime import datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> core\\services\\task_service.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from datetime import datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> core\\services\\task_service.py:4:22\n  |\n3 | from collections.abc import Iterable, Sequence\n4 | from datetime import datetime, timedelta\n  |                      ^^^^^^^^\n5 |\n6 | from ..domain import events\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.timedelta` into a type-checking block\n --> core\\services\\task_service.py:4:32\n  |\n3 | from collections.abc import Iterable, Sequence\n4 | from datetime import datetime, timedelta\n  |                                ^^^^^^^^^\n5 |\n6 | from ..domain import events\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\task_service.py:6:1\n  |\n4 | from datetime import datetime, timedelta\n5 |\n6 | from ..domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..domain.task import Task\n8 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\task_service.py:7:1\n  |\n6 | from ..domain import events\n7 | from ..domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..ports.task_repo import ITaskRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> core\\services\\task_service.py:8:1\n  |\n6 | from ..domain import events\n7 | from ..domain.task import Task\n8 | from ..ports.task_repo import ITaskRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..ports.task_repo.ITaskRepository` into a type-checking block\n --> core\\services\\task_service.py:8:31\n  |\n6 | from ..domain import events\n7 | from ..domain.task import Task\n8 | from ..ports.task_repo import ITaskRepository\n  |                               ^^^^^^^^^^^^^^^\n  |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> core\\services\\task_service.py:12:9\n   |\n11 | class TaskService:\n12 |     def __init__(\n   |         ^^^^^^^^\n13 |         self, repo: ITaskRepository, dispatcher: events.EventDispatcher\n14 |     ):\n   |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\task_service.py:61:19\n   |\n59 |     ) -> Task:\n60 |         if until is None and delta is None:\n61 |             raise ValueError(\"Provide either until or delta\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n62 |         task = self._get_task(task_id)\n63 |         if until is not None:\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\task_service.py:61:30\n   |\n59 |     ) -> Task:\n60 |         if until is None and delta is None:\n61 |             raise ValueError(\"Provide either until or delta\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n62 |         task = self._get_task(task_id)\n63 |         if until is not None:\n   |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> core\\services\\task_service.py:67:23\n   |\n65 |         else:\n66 |             if delta is None:\n67 |                 raise ValueError(\"Delta required when until is not provided\")\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |             updated = task.deferred(delta)\n69 |         updated.validate()\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> core\\services\\task_service.py:67:34\n   |\n65 |         else:\n66 |             if delta is None:\n67 |                 raise ValueError(\"Delta required when until is not provided\")\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n68 |             updated = task.deferred(delta)\n69 |         updated.validate()\n   |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> core\\services\\task_service.py:99:19\n    |\n 97 |         task = self._repo.get(task_id)\n 98 |         if not task:\n 99 |             raise KeyError(f\"Task {task_id} not found\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n100 |         return task\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> core\\services\\task_service.py:99:28\n    |\n 97 |         task = self._repo.get(task_id)\n 98 |         if not task:\n 99 |             raise KeyError(f\"Task {task_id} not found\")\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n100 |         return task\n    |\nhelp: Assign to variable; remove f-string literal\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> infrastructure\\automation\\webhook_client.py:4:29\n  |\n3 | import logging\n4 | from collections.abc import Mapping, Sequence\n  |                             ^^^^^^^\n5 | from dataclasses import dataclass\n6 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> infrastructure\\automation\\webhook_client.py:4:38\n  |\n3 | import logging\n4 | from collections.abc import Mapping, Sequence\n  |                                      ^^^^^^^^\n5 | from dataclasses import dataclass\n6 | from datetime import UTC, datetime\n  |\nhelp: Move into type-checking block\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n  --> infrastructure\\automation\\webhook_client.py:70:18\n   |\n68 |                 )\n69 |                 continue\n70 |             ok = 200 <= response.status_code < 300\n   |                  ^^^\n71 |             if not ok:\n72 |                 logger.warning(\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `300` with a constant variable\n  --> infrastructure\\automation\\webhook_client.py:70:48\n   |\n68 |                 )\n69 |                 continue\n70 |             ok = 200 <= response.status_code < 300\n   |                                                ^^^\n71 |             if not ok:\n72 |                 logger.warning(\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> infrastructure\\automation\\webhook_client.py:91:9\n   |\n90 |       def __del__(self) -> None:  # pragma: no cover - defensive cleanup\n91 | /         try:\n92 | |             self.close()\n93 | |         except Exception:  # pragma: no cover - best effort cleanup\n94 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> infrastructure\\automation\\webhook_client.py:93:9\n   |\n91 |           try:\n92 |               self.close()\n93 | /         except Exception:  # pragma: no cover - best effort cleanup\n94 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> infrastructure\\automation\\webhook_client.py:93:16\n   |\n91 |         try:\n92 |             self.close()\n93 |         except Exception:  # pragma: no cover - best effort cleanup\n   |                ^^^^^^^^^\n94 |             pass\n   |\n\nINP001 File `infrastructure\\collaboration\\hub_client.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> infrastructure\\collaboration\\hub_client.py:1:1\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n  --> infrastructure\\collaboration\\hub_client.py:8:21\n   |\n 6 | from dataclasses import dataclass\n 7 | from datetime import datetime\n 8 | from pathlib import Path\n   |                     ^^^^\n 9 | from types import TracebackType\n10 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `types.TracebackType` into a type-checking block\n  --> infrastructure\\collaboration\\hub_client.py:9:19\n   |\n 7 | from datetime import datetime\n 8 | from pathlib import Path\n 9 | from types import TracebackType\n   |                   ^^^^^^^^^^^^^\n10 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `transport`\n  --> infrastructure\\collaboration\\hub_client.py:37:20\n   |\n35 |         *,\n36 |         timeout: float = 10.0,\n37 |         transport: Any | None = None,\n   |                    ^^^^^^^^^^\n38 |     ) -> None:\n39 |         self._client = httpx.Client(\n   |\n\nPYI034 `__enter__` methods in classes like `CollaborationHubClient` usually return `self` at runtime\n  --> infrastructure\\collaboration\\hub_client.py:46:9\n   |\n44 |         self._client.close()\n45 |\n46 |     def __enter__(self) -> CollaborationHubClient:\n   |         ^^^^^^^^^\n47 |         return self\n   |\nhelp: Use `Self` as return type\n\nPLR2004 Magic value used in comparison, consider replacing `404` with a constant variable\n  --> infrastructure\\collaboration\\hub_client.py:78:36\n   |\n76 |     def fetch_latest_bundle(self) -> BundleDownloadResult | None:\n77 |         response = self._client.get(\"/api/collab/bundles/latest\")\n78 |         if response.status_code == 404:\n   |                                    ^^^\n79 |             return None\n80 |         response.raise_for_status()\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `404` with a constant variable\n  --> infrastructure\\collaboration\\hub_client.py:85:36\n   |\n83 |     def fetch_bundle(self, bundle_id: str) -> BundleDownloadResult | None:\n84 |         response = self._client.get(f\"/api/collab/bundles/{bundle_id}\")\n85 |         if response.status_code == 404:\n   |                                    ^^^\n86 |             return None\n87 |         response.raise_for_status()\n   |\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:104:21\n    |\n102 |             for item in payload_list:\n103 |                 if not isinstance(item, Mapping):\n104 |                     raise ValueError(\"Unexpected bundle list entry\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:104:27\n    |\n102 |             for item in payload_list:\n103 |                 if not isinstance(item, Mapping):\n104 |                     raise ValueError(\"Unexpected bundle list entry\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:104:38\n    |\n102 |             for item in payload_list:\n103 |                 if not isinstance(item, Mapping):\n104 |                     raise ValueError(\"Unexpected bundle list entry\")\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:107:15\n    |\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n107 |         raise ValueError(\"Unexpected bundle list payload\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n108 |\n109 |     def prune_bundles(\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:107:26\n    |\n105 |                 results.append(self._parse_upload(self._to_str_dict(item)))\n106 |             return results\n107 |         raise ValueError(\"Unexpected bundle list payload\")\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n108 |\n109 |     def prune_bundles(\n    |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:118:13\n    |\n116 |         payload = response.json()\n117 |         if not isinstance(payload, Mapping):\n118 |             raise ValueError(\"Unexpected prune payload\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n119 |         payload_mapping = cast(\"Mapping[str, Any]\", payload)\n120 |         removed_raw = payload_mapping.get(\"removed\", [])\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:118:19\n    |\n116 |         payload = response.json()\n117 |         if not isinstance(payload, Mapping):\n118 |             raise ValueError(\"Unexpected prune payload\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n119 |         payload_mapping = cast(\"Mapping[str, Any]\", payload)\n120 |         removed_raw = payload_mapping.get(\"removed\", [])\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:118:30\n    |\n116 |         payload = response.json()\n117 |         if not isinstance(payload, Mapping):\n118 |             raise ValueError(\"Unexpected prune payload\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n119 |         payload_mapping = cast(\"Mapping[str, Any]\", payload)\n120 |         removed_raw = payload_mapping.get(\"removed\", [])\n    |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:123:13\n    |\n121 |         remaining_raw = payload_mapping.get(\"remaining\", 0)\n122 |         if not isinstance(removed_raw, list):\n123 |             raise ValueError(\"Unexpected removed bundles payload\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |         removed_items: list[Any] = list(removed_raw)\n125 |         removed: list[BundleUploadResult] = []\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:123:19\n    |\n121 |         remaining_raw = payload_mapping.get(\"remaining\", 0)\n122 |         if not isinstance(removed_raw, list):\n123 |             raise ValueError(\"Unexpected removed bundles payload\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |         removed_items: list[Any] = list(removed_raw)\n125 |         removed: list[BundleUploadResult] = []\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:123:30\n    |\n121 |         remaining_raw = payload_mapping.get(\"remaining\", 0)\n122 |         if not isinstance(removed_raw, list):\n123 |             raise ValueError(\"Unexpected removed bundles payload\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n124 |         removed_items: list[Any] = list(removed_raw)\n125 |         removed: list[BundleUploadResult] = []\n    |\nhelp: Assign to variable; remove string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> infrastructure\\collaboration\\hub_client.py:128:17\n    |\n126 |         for item in removed_items:\n127 |             if not isinstance(item, Mapping):\n128 |                 raise ValueError(\"Unexpected prune entry\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n129 |             removed.append(self._parse_upload(self._to_str_dict(item)))\n130 |         remaining = int(remaining_raw)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> infrastructure\\collaboration\\hub_client.py:128:23\n    |\n126 |         for item in removed_items:\n127 |             if not isinstance(item, Mapping):\n128 |                 raise ValueError(\"Unexpected prune entry\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n129 |             removed.append(self._parse_upload(self._to_str_dict(item)))\n130 |         remaining = int(remaining_raw)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> infrastructure\\collaboration\\hub_client.py:128:34\n    |\n126 |         for item in removed_items:\n127 |             if not isinstance(item, Mapping):\n128 |                 raise ValueError(\"Unexpected prune entry\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n129 |             removed.append(self._parse_upload(self._to_str_dict(item)))\n130 |         remaining = int(remaining_raw)\n    |\nhelp: Assign to variable; remove string literal\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`\n   --> infrastructure\\collaboration\\hub_client.py:166:32\n    |\n165 |     @staticmethod\n166 |     def _parse_datetime(value: Any) -> datetime:\n    |                                ^^^\n167 |         if isinstance(value, datetime):\n168 |             return value\n    |\n\nDTZ901 Use of `datetime.datetime.min` without timezone information\n   --> infrastructure\\collaboration\\hub_client.py:178:16\n    |\n176 |                     return parsed\n177 |                 return parsed\n178 |         return datetime.min\n    |                ^^^^^^^^^^^^\n179 |\n180 |     @staticmethod\n    |\nhelp: Replace with `datetime.datetime.min.replace(tzinfo=...)`\n\nINP001 File `infrastructure\\collaboration\\store.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> infrastructure\\collaboration\\store.py:1:1\n\nTC003 Move standard library import `builtins` into a type-checking block\n --> infrastructure\\collaboration\\store.py:3:8\n  |\n1 | from __future__ import annotations\n2 |\n3 | import builtins\n  |        ^^^^^^^^\n4 | import json\n5 | from collections.abc import Iterable, Mapping, Sequence\n  |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> infrastructure\\collaboration\\store.py:26:9\n   |\n24 |     \"\"\"Persist encrypted collaboration bundles for later retrieval.\"\"\"\n25 |\n26 |     def __init__(self, directory: str | Path):\n   |         ^^^^^^^^\n27 |         self._directory = Path(directory)\n28 |         self._directory.mkdir(parents=True, exist_ok=True)\n   |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> infrastructure\\collaboration\\store.py:87:19\n   |\n85 |     def prune(self, keep: int) -> builtins.list[StoredBundle]:\n86 |         if keep < 0:\n87 |             raise ValueError(\"keep must be non-negative\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n88 |         entries = list(self._iter_entries())\n89 |         if not entries:\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> infrastructure\\collaboration\\store.py:87:30\n   |\n85 |     def prune(self, keep: int) -> builtins.list[StoredBundle]:\n86 |         if keep < 0:\n87 |             raise ValueError(\"keep must be non-negative\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n88 |         entries = list(self._iter_entries())\n89 |         if not entries:\n   |\nhelp: Assign to variable; remove string literal\n\nSIM105 Use `contextlib.suppress(FileNotFoundError)` instead of `try`-`except`-`pass`\n   --> infrastructure\\collaboration\\store.py:105:13\n    |\n103 |           ]\n104 |           for bundle in removed_bundles:\n105 | /             try:\n106 | |                 bundle.path.unlink()\n107 | |             except FileNotFoundError:\n108 | |                 pass\n    | |____________________^\n109 |           self._write_entries(keep_entries)\n110 |           return removed_bundles\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(FileNotFoundError): ...`\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> infrastructure\\config.py:4:29\n  |\n3 | import os\n4 | from collections.abc import Mapping\n  |                             ^^^^^^^\n5 | from dataclasses import dataclass, field\n6 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nFBT001 Boolean-typed positional argument in function definition\n  --> infrastructure\\config.py:13:35\n   |\n13 | def _read_bool(value: str | None, default: bool = False) -> bool:\n   |                                   ^^^^^^^\n14 |     if value is None:\n15 |         return default\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> infrastructure\\config.py:13:35\n   |\n13 | def _read_bool(value: str | None, default: bool = False) -> bool:\n   |                                   ^^^^^^^\n14 |     if value is None:\n15 |         return default\n   |\n\nC901 `load_config` is too complex (19 > 10)\n  --> infrastructure\\config.py:87:5\n   |\n87 | def load_config(env: Mapping[str, str] | None = None) -> AppConfig:\n   |     ^^^^^^^^^^^\n88 |     source_env: Mapping[str, str] = env if env is not None else os.environ\n89 |     overrides: dict[str, str] = {}\n   |\n\nPLR0912 Too many branches (18 > 12)\n  --> infrastructure\\config.py:87:5\n   |\n87 | def load_config(env: Mapping[str, str] | None = None) -> AppConfig:\n   |     ^^^^^^^^^^^\n88 |     source_env: Mapping[str, str] = env if env is not None else os.environ\n89 |     overrides: dict[str, str] = {}\n   |\n\nPLR0915 Too many statements (59 > 50)\n  --> infrastructure\\config.py:87:5\n   |\n87 | def load_config(env: Mapping[str, str] | None = None) -> AppConfig:\n   |     ^^^^^^^^^^^\n88 |     source_env: Mapping[str, str] = env if env is not None else os.environ\n89 |     overrides: dict[str, str] = {}\n   |\n\nFBT003 Boolean positional value in function call\n   --> infrastructure\\config.py:115:63\n    |\n113 |         )\n114 |\n115 |     log_json = _read_bool(source_env.get(\"LEGATUS_LOG_JSON\"), True)\n    |                                                               ^^^^\n116 |     if \"LEGATUS_LOG_JSON\" in source_env:\n117 |         overrides[\"LEGATUS_LOG_JSON\"] = source_env[\"LEGATUS_LOG_JSON\"]\n    |\n\nRET504 Unnecessary assignment to `cfg` before `return` statement\n   --> infrastructure\\config.py:196:12\n    |\n194 |         automation_webhooks=automation_webhooks,\n195 |     )\n196 |     return cfg\n    |            ^^^\n    |\nhelp: Remove unnecessary assignment\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> infrastructure\\di.py:4:29\n  |\n3 | import logging\n4 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n5 | from dataclasses import dataclass\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\di.py:7:1\n  |\n5 | from dataclasses import dataclass\n6 |\n7 | from ..adapters.taskwarrior.tw_repository import TaskwarriorRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..core.domain.events import EventDispatcher\n9 | from ..core.services.ai_briefing_service import AIBriefingService\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:8:1\n   |\n 7 | from ..adapters.taskwarrior.tw_repository import TaskwarriorRepository\n 8 | from ..core.domain.events import EventDispatcher\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n10 | from ..core.services.ai_service import AIService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:9:1\n   |\n 7 | from ..adapters.taskwarrior.tw_repository import TaskwarriorRepository\n 8 | from ..core.domain.events import EventDispatcher\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..core.services.ai_service import AIService\n11 | from ..core.services.automation_service import AutomationService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:10:1\n   |\n 8 | from ..core.domain.events import EventDispatcher\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n10 | from ..core.services.ai_service import AIService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:11:1\n   |\n 9 | from ..core.services.ai_briefing_service import AIBriefingService\n10 | from ..core.services.ai_service import AIService\n11 | from ..core.services.automation_service import AutomationService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:12:1\n   |\n10 | from ..core.services.ai_service import AIService\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:13:1\n   |\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:13:1\n   |\n11 | from ..core.services.automation_service import AutomationService\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:14:1\n   |\n12 | from ..core.services.collaboration_service import CollaborationService\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n15 | from ..core.services.review_service import ReviewService\n16 | from ..core.services.scheduler_service import SchedulerService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:15:1\n   |\n13 | from ..core.services.plugin_bus import LoadedPlugin, PluginBus\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n16 | from ..core.services.scheduler_service import SchedulerService\n17 | from ..core.services.search_service import SearchService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:16:1\n   |\n14 | from ..core.services.review_guidance_service import ReviewGuidanceService\n15 | from ..core.services.review_service import ReviewService\n16 | from ..core.services.scheduler_service import SchedulerService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 | from ..core.services.search_service import SearchService\n18 | from ..core.services.task_service import TaskService\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:17:1\n   |\n15 | from ..core.services.review_service import ReviewService\n16 | from ..core.services.scheduler_service import SchedulerService\n17 | from ..core.services.search_service import SearchService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ..core.services.task_service import TaskService\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:18:1\n   |\n16 | from ..core.services.scheduler_service import SchedulerService\n17 | from ..core.services.search_service import SearchService\n18 | from ..core.services.task_service import TaskService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n20 | from .automation import AutomationWebhookClient\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\di.py:19:1\n   |\n17 | from ..core.services.search_service import SearchService\n18 | from ..core.services.task_service import TaskService\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n20 | from .automation import AutomationWebhookClient\n21 | from .config import AppConfig\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `.config.AppConfig` into a type-checking block\n  --> infrastructure\\di.py:21:21\n   |\n19 | from ..x_cls_legatus_acta_schedae_x import Storage\n20 | from .automation import AutomationWebhookClient\n21 | from .config import AppConfig\n   |                     ^^^^^^^^^\n22 | from .review.json_repository import JsonReviewRepository\n23 | from .scheduler import ApschedulerScheduler\n   |\nhelp: Move into type-checking block\n\nTC001 Move application import `.config.AppConfig` into a type-checking block\n  --> infrastructure\\logging.py:8:21\n   |\n 6 | from typing import Any\n 7 |\n 8 | from .config import AppConfig\n   |                     ^^^^^^^^^\n 9 |\n10 | STRUCTURED_EXCLUDE = {\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\review\\json_repository.py:8:1\n  |\n6 | from typing import Any, cast\n7 |\n8 | from ...core.domain.review import ReviewRecord\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n9 | from ...core.ports.review_repo import IReviewRepository\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\review\\json_repository.py:9:1\n  |\n8 | from ...core.domain.review import ReviewRecord\n9 | from ...core.ports.review_repo import IReviewRepository\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nANN204 Missing return type annotation for special method `__init__`\n  --> infrastructure\\review\\json_repository.py:13:9\n   |\n12 | class JsonReviewRepository(IReviewRepository):\n13 |     def __init__(self, path: str | Path):\n   |         ^^^^^^^^\n14 |         self._path = Path(path)\n15 |         self._path.parent.mkdir(parents=True, exist_ok=True)\n   |\nhelp: Add return type annotation: `None`\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> infrastructure\\scheduler\\apscheduler_adapter.py:5:29\n  |\n3 | import importlib\n4 | import logging\n5 | from collections.abc import Callable\n  |                             ^^^^^^^^\n6 | from datetime import datetime\n7 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> infrastructure\\scheduler\\apscheduler_adapter.py:6:22\n  |\n4 | import logging\n5 | from collections.abc import Callable\n6 | from datetime import datetime\n  |                      ^^^^^^^^\n7 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:9:1\n   |\n 7 | from typing import Any\n 8 |\n 9 | from ...core.ports.scheduler import IScheduler\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 |\n11 | BackgroundScheduler: Any | None\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nBLE001 Do not catch blind exception: `Exception`\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:16:8\n   |\n14 |         \"apscheduler.schedulers.background\"\n15 |     )\n16 | except Exception:  # pragma: no cover\n   |        ^^^^^^^^^\n17 |     BackgroundScheduler = None\n18 | else:\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:31:19\n   |\n29 |               BackgroundScheduler\n30 |           ):  # pragma: no cover - runtime guard\n31 |               raise RuntimeError(\n   |  ___________________^\n32 | |                 \"APScheduler is not installed; install apscheduler to enable scheduling\"\n33 | |             )\n   | |_____________^\n34 |           self._scheduler: Any = BackgroundScheduler(timezone=timezone)\n35 |           self._started = False\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:32:17\n   |\n30 |         ):  # pragma: no cover - runtime guard\n31 |             raise RuntimeError(\n32 |                 \"APScheduler is not installed; install apscheduler to enable scheduling\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n33 |             )\n34 |         self._scheduler: Any = BackgroundScheduler(timezone=timezone)\n   |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n  --> infrastructure\\scheduler\\apscheduler_adapter.py:73:13\n   |\n71 |             self._scheduler.remove_job(job_id)\n72 |         except (\n73 |             Exception\n   |             ^^^^^^^^^\n74 |         ) as exc:  # pragma: no cover - APScheduler raises when job missing\n75 |             logger.debug(\"Failed to cancel job %s: %s\", job_id, exc)\n   |\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> infrastructure\\scheduler\\null_scheduler.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Callable\n  |                             ^^^^^^^^\n4 | from datetime import datetime\n5 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> infrastructure\\scheduler\\null_scheduler.py:4:22\n  |\n3 | from collections.abc import Callable\n4 | from datetime import datetime\n  |                      ^^^^^^^^\n5 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\scheduler\\null_scheduler.py:7:1\n  |\n5 | from typing import Any\n6 |\n7 | from ...core.ports.scheduler import IScheduler\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nARG002 Unused method argument: `func`\n  --> infrastructure\\scheduler\\null_scheduler.py:25:9\n   |\n23 |         job_id: str,\n24 |         run_at: datetime,\n25 |         func: Callable[..., Any],\n   |         ^^^^\n26 |         args: tuple[Any, ...] | None = None,\n27 |         kwargs: dict[str, Any] | None = None,\n   |\n\nARG002 Unused method argument: `args`\n  --> infrastructure\\scheduler\\null_scheduler.py:26:9\n   |\n24 |         run_at: datetime,\n25 |         func: Callable[..., Any],\n26 |         args: tuple[Any, ...] | None = None,\n   |         ^^^^\n27 |         kwargs: dict[str, Any] | None = None,\n28 |     ) -> str:\n   |\n\nARG002 Unused method argument: `kwargs`\n  --> infrastructure\\scheduler\\null_scheduler.py:27:9\n   |\n25 |         func: Callable[..., Any],\n26 |         args: tuple[Any, ...] | None = None,\n27 |         kwargs: dict[str, Any] | None = None,\n   |         ^^^^^^\n28 |     ) -> str:\n29 |         self._jobs[job_id] = run_at\n   |\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> infrastructure\\search\\memory_index.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass, field\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> infrastructure\\search\\memory_index.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from dataclasses import dataclass, field\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\search\\memory_index.py:6:1\n  |\n4 | from dataclasses import dataclass, field\n5 |\n6 | from ...core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ...core.ports.search_index import ISearchIndex\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.domain.task.Task` into a type-checking block\n --> infrastructure\\search\\memory_index.py:6:33\n  |\n4 | from dataclasses import dataclass, field\n5 |\n6 | from ...core.domain.task import Task\n  |                                 ^^^^\n7 | from ...core.ports.search_index import ISearchIndex\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> infrastructure\\search\\memory_index.py:7:1\n  |\n6 | from ...core.domain.task import Task\n7 | from ...core.ports.search_index import ISearchIndex\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> infrastructure\\telemetry.py:4:29\n  |\n3 | import json\n4 | from collections.abc import Mapping\n  |                             ^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nANN204 Missing return type annotation for special method `__init__`\n  --> infrastructure\\telemetry.py:11:9\n   |\n10 | class TelemetryClient:\n11 |     def __init__(\n   |         ^^^^^^^^\n12 |         self, enabled: bool, path: str | None, flush_seconds: int = 5\n13 |     ):\n   |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n  --> infrastructure\\telemetry.py:12:15\n   |\n10 | class TelemetryClient:\n11 |     def __init__(\n12 |         self, enabled: bool, path: str | None, flush_seconds: int = 5\n   |               ^^^^^^^\n13 |     ):\n14 |         self._enabled = enabled and bool(path)\n   |\n\nTC003 Move standard library import `datetime.datetime` into a type-checking block\n --> interface\\api\\server.py:7:22\n  |\n5 | import binascii\n6 | from dataclasses import asdict\n7 | from datetime import datetime\n  |                      ^^^^^^^^\n8 | from typing import Any, Literal, cast\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:13:1\n   |\n11 | from pydantic import BaseModel, Field\n12 |\n13 | from ...core.services.ai_service import AIService\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ...core.services.card_action_service import (\n15 |     CardActionService,\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.AIService` into a type-checking block\n  --> interface\\api\\server.py:13:41\n   |\n11 | from pydantic import BaseModel, Field\n12 |\n13 | from ...core.services.ai_service import AIService\n   |                                         ^^^^^^^^^\n14 | from ...core.services.card_action_service import (\n15 |     CardActionService,\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:14:1\n   |\n13 |   from ...core.services.ai_service import AIService\n14 | / from ...core.services.card_action_service import (\n15 | |     CardActionService,\n16 | |     CardNotFoundError,\n17 | | )\n   | |_^\n18 |   from ...infrastructure.collaboration.store import (\n19 |       CollaborationBundleStore,\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:14:1\n   |\n13 |   from ...core.services.ai_service import AIService\n14 | / from ...core.services.card_action_service import (\n15 | |     CardActionService,\n16 | |     CardNotFoundError,\n17 | | )\n   | |_^\n18 |   from ...infrastructure.collaboration.store import (\n19 |       CollaborationBundleStore,\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:18:1\n   |\n16 |       CardNotFoundError,\n17 |   )\n18 | / from ...infrastructure.collaboration.store import (\n19 | |     CollaborationBundleStore,\n20 | |     StoredBundle,\n21 | | )\n   | |_^\n22 |   from ...infrastructure.config import AppConfig, load_config\n23 |   from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:18:1\n   |\n16 |       CardNotFoundError,\n17 |   )\n18 | / from ...infrastructure.collaboration.store import (\n19 | |     CollaborationBundleStore,\n20 | |     StoredBundle,\n21 | | )\n   | |_^\n22 |   from ...infrastructure.config import AppConfig, load_config\n23 |   from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:22:1\n   |\n20 |     StoredBundle,\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n23 | from ...infrastructure.di import AppContext, build_context\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:22:1\n   |\n20 |     StoredBundle,\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n23 | from ...infrastructure.di import AppContext, build_context\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:23:1\n   |\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n23 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:23:1\n   |\n21 | )\n22 | from ...infrastructure.config import AppConfig, load_config\n23 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\api\\server.py:24:1\n   |\n22 | from ...infrastructure.config import AppConfig, load_config\n23 | from ...infrastructure.di import AppContext, build_context\n24 | from ...infrastructure.logging import setup_logging\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nC901 `create_api_app` is too complex (14 > 10)\n   --> interface\\api\\server.py:118:5\n    |\n118 | def create_api_app(\n    |     ^^^^^^^^^^^^^^\n119 |     ctx: AppContext | None = None,\n120 |     cfg: AppConfig | None = None,\n    |\n\nB904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling\n   --> interface\\api\\server.py:155:13\n    |\n153 |             )\n154 |         except CardNotFoundError:\n155 |             raise HTTPException(status_code=404, detail=\"Card not found\")\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n156 |         except ValueError as exc:\n157 |             raise HTTPException(status_code=400, detail=str(exc)) from exc\n    |\n\nFAST002 FastAPI dependency without `Annotated`\n   --> interface\\api\\server.py:187:9\n    |\n185 |     @app.get(\"/api/collab/bundles\", response_model=list[BundleInfo])\n186 |     async def list_bundles(\n187 |         limit: int = Query(10, ge=0, le=100)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n188 |     ) -> list[BundleUploadResponse]:\n189 |         stored = bundle_store.list(limit=limit)\n    |\nhelp: Replace with `typing.Annotated`\n\nFAST002 FastAPI dependency without `Annotated`\n   --> interface\\api\\server.py:194:9\n    |\n192 |     @app.delete(\"/api/collab/bundles\", response_model=BundlePruneResponse)\n193 |     async def prune_bundles(\n194 |         keep: int = Query(10, ge=0, le=100)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n195 |     ) -> BundlePruneResponse:\n196 |         removed = bundle_store.prune(keep)\n    |\nhelp: Replace with `typing.Annotated`\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\cli\\main.py:6:29\n  |\n4 | import logging\n5 | import tempfile\n6 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n7 | from datetime import UTC, datetime, timedelta\n8 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:11:1\n   |\n 9 | from typing import Any, cast\n10 |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:12:1\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.domain.task.Task` into a type-checking block\n  --> interface\\cli\\main.py:12:33\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n   |                                 ^^^^\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:13:1\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_briefing_service.AIBriefing` into a type-checking block\n  --> interface\\cli\\main.py:13:50\n   |\n11 | from ...adapters.taskwarrior.tw_repository import HAVE_TASKLIB\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n   |                                                  ^^^^^^^^^^\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:14:1\n   |\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.TaskSummary` into a type-checking block\n  --> interface\\cli\\main.py:14:41\n   |\n12 | from ...core.domain.task import Task\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n   |                                         ^^^^^^^^^^^\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:15:1\n   |\n13 | from ...core.services.ai_briefing_service import AIBriefing\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:16:1\n   |\n14 | from ...core.services.ai_service import TaskSummary\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 | from ...infrastructure.di import AppContext, build_context\n18 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:17:1\n   |\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:17:1\n   |\n15 | from ...infrastructure.collaboration.hub_client import CollaborationHubClient\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n18 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\cli\\main.py:18:1\n   |\n16 | from ...infrastructure.config import load_config\n17 | from ...infrastructure.di import AppContext, build_context\n18 | from ...infrastructure.logging import setup_logging\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n19 |\n20 | try:  # pragma: no cover - import guard\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> interface\\cli\\main.py:23:11\n   |\n21 |     import typer as _typer_mod  # type: ignore[import]\n22 | except ImportError as exc:  # pragma: no cover\n23 |     raise RuntimeError(\"The 'typer' package is required for the CLI\") from exc\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 |\n25 | typer: Any = cast(\"Any\", _typer_mod)\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> interface\\cli\\main.py:23:24\n   |\n21 |     import typer as _typer_mod  # type: ignore[import]\n22 | except ImportError as exc:  # pragma: no cover\n23 |     raise RuntimeError(\"The 'typer' package is required for the CLI\") from exc\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n24 |\n25 | typer: Any = cast(\"Any\", _typer_mod)\n   |\nhelp: Assign to variable; remove string literal\n\nANN202 Missing return type annotation for private function `_ctx`\n  --> interface\\cli\\main.py:45:5\n   |\n45 | def _ctx():\n   |     ^^^^\n46 |     cfg = load_config()\n47 |     setup_logging(cfg)\n   |\nhelp: Add return type annotation\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**properties`\n  --> interface\\cli\\main.py:51:56\n   |\n51 | def _record(ctx: AppContext, event: str, **properties: Any) -> None:\n   |                                                        ^^^\n52 |     payload: dict[str, Any] = dict(properties)\n53 |     ctx.telemetry.track(event, payload)\n   |\n\nE501 Line too long (95 > 88)\n   --> interface\\cli\\main.py:111:89\n    |\n109 |             priority = item.priority or \"-\"\n110 |             lines.append(\n111 |                 f\"- {item.description} (id={item.task_id[:8]}, due={due}, priority={priority})\"\n    |                                                                                         ^^^^^^^\n112 |             )\n113 |     return \"\\n\".join(lines)\n    |\n\nE501 Line too long (91 > 88)\n   --> interface\\cli\\main.py:122:89\n    |\n120 |     lines.append(\"=================\")\n121 |     lines.append(\n122 |         f\"Generated: {briefing.generated_at.astimezone(UTC).strftime('%Y-%m-%d %H:%M %Z')}\"\n    |                                                                                         ^^^\n123 |     )\n124 |     lines.append(\"\")\n    |\n\nE501 Line too long (95 > 88)\n   --> interface\\cli\\main.py:145:89\n    |\n143 |             priority = item.priority or \"-\"\n144 |             lines.append(\n145 |                 f\"- {item.description} (id={item.task_id[:8]}, due={due}, priority={priority})\"\n    |                                                                                         ^^^^^^^\n146 |             )\n147 |     guidance = briefing.guidance\n    |\n\nE501 Line too long (109 > 88)\n   --> interface\\cli\\main.py:160:89\n    |\n158 |             )\n159 |             lines.append(\n160 |                 f\"- {insight.task.description} (score={score}, due={due}, action={insight.suggested_action})\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n161 |             )\n162 |             for reason in insight.reasons:\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> interface\\cli\\main.py:163:17\n    |\n161 |             )\n162 |             for reason in insight.reasons:\n163 |                 lines.append(f\"  \u00c2\u00b7 {reason}\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n164 |     return \"\\n\".join(lines)\n    |\nhelp: Replace for loop with list.extend\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:179:15\n    |\n177 |     )\n178 |     if not secret:\n179 |         raise typer.BadParameter(\"Passphrase is required\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n180 |     return secret\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:179:34\n    |\n177 |     )\n178 |     if not secret:\n179 |         raise typer.BadParameter(\"Passphrase is required\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n180 |     return secret\n    |\nhelp: Assign to variable; remove string literal\n\nANN201 Missing return type annotation for public function `ai_summarize`\n   --> interface\\cli\\main.py:184:5\n    |\n183 | @ai_app.command(\"summarize\")\n184 | def ai_summarize(\n    |     ^^^^^^^^^^^^\n185 |     limit: int = typer.Option(\n186 |         3, help=\"Number of top tags and upcoming tasks to include\"\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `ai_draft`\n   --> interface\\cli\\main.py:204:5\n    |\n203 | @ai_app.command(\"draft\")\n204 | def ai_draft(task_id: str):\n    |     ^^^^^^^^\n205 |     ctx = _ctx()\n206 |     task = ctx.task_service.get_task(task_id)\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `ai_brainstorm`\n   --> interface\\cli\\main.py:218:5\n    |\n217 | @ai_app.command(\"brainstorm\")\n218 | def ai_brainstorm(\n    |     ^^^^^^^^^^^^^\n219 |     topic: str = typer.Argument(..., help=\"Focus topic for brainstorming\"),\n220 |     variants: int = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `ai_briefing`\n   --> interface\\cli\\main.py:233:5\n    |\n232 | @ai_app.command(\"briefing\")\n233 | def ai_briefing(\n    |     ^^^^^^^^^^^\n234 |     limit: int = typer.Option(\n235 |         5, help=\"Maximum number of review guidance entries to include\"\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:237:22\n    |\n235 |           5, help=\"Maximum number of review guidance entries to include\"\n236 |       ),\n237 |       tag: list[str] = typer.Option(\n    |  ______________________^\n238 | |         [], \"--tag\", \"-t\", help=\"Filter review guidance by tag; repeatable\"\n239 | |     ),\n    | |_____^\n240 |       include_completed: bool = typer.Option(\n241 |           False, help=\"Include completed tasks in guidance\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:240:5\n    |\n238 |         [], \"--tag\", \"-t\", help=\"Filter review guidance by tag; repeatable\"\n239 |     ),\n240 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n241 |         False, help=\"Include completed tasks in guidance\"\n242 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:241:9\n    |\n239 |     ),\n240 |     include_completed: bool = typer.Option(\n241 |         False, help=\"Include completed tasks in guidance\"\n    |         ^^^^^\n242 |     ),\n243 |     output: Path | None = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:243:27\n    |\n241 |           False, help=\"Include completed tasks in guidance\"\n242 |       ),\n243 |       output: Path | None = typer.Option(\n    |  ___________________________^\n244 | |         None, help=\"Optional path to write the briefing as Markdown\"\n245 | |     ),\n    | |_____^\n246 |   ):\n247 |       ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `add`\n   --> interface\\cli\\main.py:270:5\n    |\n269 | @app.command()\n270 | def add(\n    |     ^^^\n271 |     description: str,\n272 |     due: str = typer.Option(None, help=\"ISO datetime\"),\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `list_tasks`\n   --> interface\\cli\\main.py:296:5\n    |\n295 | @app.command(\"list\")\n296 | def list_tasks(\n    |     ^^^^^^^^^^\n297 |     status: str = typer.Option(None, help=\"Filter by status\"),\n298 |     tag: str = typer.Option(None, help=\"Filter by tag\"),\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `search`\n   --> interface\\cli\\main.py:317:5\n    |\n316 | @app.command()\n317 | def search(\n    |     ^^^^^^\n318 |     text: str = typer.Option(\n319 |         \"\", help=\"Substring match against task description\"\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:322:22\n    |\n320 |       ),\n321 |       status: str | None = typer.Option(None, help=\"Filter by status\"),\n322 |       tag: list[str] = typer.Option(\n    |  ______________________^\n323 | |         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n324 | |     ),\n    | |_____^\n325 |       limit: int = typer.Option(20, help=\"Maximum number of results\"),\n326 |   ):\n    |\n\nANN201 Missing return type annotation for public function `complete`\n   --> interface\\cli\\main.py:354:5\n    |\n353 | @app.command()\n354 | def complete(task_id: str):\n    |     ^^^^^^^^\n355 |     ctx = _ctx()\n356 |     task = ctx.task_service.complete_task(task_id)\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `edit`\n   --> interface\\cli\\main.py:362:5\n    |\n361 | @app.command()\n362 | def edit(task_id: str, description: str):\n    |     ^^^^\n363 |     ctx = _ctx()\n364 |     task = ctx.task_service.edit_task(task_id, description)\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `defer`\n   --> interface\\cli\\main.py:370:5\n    |\n369 | @app.command()\n370 | def defer(\n    |     ^^^^^\n371 |     task_id: str,\n372 |     until: str = typer.Option(None, help=\"ISO datetime to defer until\"),\n    |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:380:15\n    |\n378 |     due = _parse_due(until)\n379 |     if due and days is not None:\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:380:34\n    |\n378 |     due = _parse_due(until)\n379 |     if due and days is not None:\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:382:15\n    |\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n383 |     delta = timedelta(days=days) if days is not None else None\n384 |     task = ctx.task_service.defer_task(task_id, until=due, delta=delta)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:382:34\n    |\n380 |         raise typer.BadParameter(\"Provide either --until or --days, not both\")\n381 |     if not due and days is None:\n382 |         raise typer.BadParameter(\"Provide either --until or --days\")\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n383 |     delta = timedelta(days=days) if days is not None else None\n384 |     task = ctx.task_service.defer_task(task_id, until=due, delta=delta)\n    |\nhelp: Assign to variable; remove string literal\n\nANN201 Missing return type annotation for public function `prioritize`\n   --> interface\\cli\\main.py:396:5\n    |\n395 | @app.command()\n396 | def prioritize(\n    |     ^^^^^^^^^^\n397 |     task_id: str, priority: str = typer.Argument(..., help=\"low|medium|high\")\n398 | ):\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `review_queue`\n   --> interface\\cli\\main.py:406:5\n    |\n405 | @review_app.command(\"queue\")\n406 | def review_queue(\n    |     ^^^^^^^^^^^^\n407 |     limit: int = typer.Option(10, help=\"Maximum number of items to display\"),\n408 |     include_completed: bool = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:408:5\n    |\n406 | def review_queue(\n407 |     limit: int = typer.Option(10, help=\"Maximum number of items to display\"),\n408 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n409 |         False, help=\"Include completed tasks in the queue\"\n410 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:409:9\n    |\n407 |     limit: int = typer.Option(10, help=\"Maximum number of items to display\"),\n408 |     include_completed: bool = typer.Option(\n409 |         False, help=\"Include completed tasks in the queue\"\n    |         ^^^^^\n410 |     ),\n411 |     tag: list[str] = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:411:22\n    |\n409 |           False, help=\"Include completed tasks in the queue\"\n410 |       ),\n411 |       tag: list[str] = typer.Option(\n    |  ______________________^\n412 | |         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n413 | |     ),\n    | |_____^\n414 |   ):\n415 |       ctx = _ctx()\n    |\n\nE501 Line too long (93 > 88)\n   --> interface\\cli\\main.py:425:89\n    |\n423 |         typer.echo(\"No reviews due\")\n424 |     else:\n425 |         header = \"ID       Due (UTC)        Overdue  Interval  Reps Last Source  Description\"\n    |                                                                                         ^^^^^\n426 |         lines = [header, \"-\" * len(header)]\n427 |         for item in items:\n    |\n\nE501 Line too long (127 > 88)\n   --> interface\\cli\\main.py:443:89\n    |\n441 |             source_display = last_source[:11].ljust(11)\n442 |             lines.append(\n443 |                 f\"{tid} {due_str} {overdue_display} {interval_display} {reps_display} {source_display} {item.task.description}\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n444 |             )\n445 |         typer.echo(\"\\n\".join(lines))\n    |\n\nANN201 Missing return type annotation for public function `review_focus`\n   --> interface\\cli\\main.py:457:5\n    |\n456 | @review_app.command(\"focus\")\n457 | def review_focus(\n    |     ^^^^^^^^^^^^\n458 |     limit: int = typer.Option(\n459 |         5, help=\"Maximum number of guidance entries to display\"\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:461:5\n    |\n459 |         5, help=\"Maximum number of guidance entries to display\"\n460 |     ),\n461 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n462 |         False, help=\"Include completed tasks when computing guidance\"\n463 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:462:9\n    |\n460 |     ),\n461 |     include_completed: bool = typer.Option(\n462 |         False, help=\"Include completed tasks when computing guidance\"\n    |         ^^^^^\n463 |     ),\n464 |     tag: list[str] = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:464:22\n    |\n462 |           False, help=\"Include completed tasks when computing guidance\"\n463 |       ),\n464 |       tag: list[str] = typer.Option(\n    |  ______________________^\n465 | |         [], \"--tag\", \"-t\", help=\"Filter by tag; repeat for multiple\"\n466 | |     ),\n    | |_____^\n467 |   ):\n468 |       ctx = _ctx()\n    |\n\nE501 Line too long (92 > 88)\n   --> interface\\cli\\main.py:487:89\n    |\n485 |         return\n486 |\n487 |     header = \"ID       Score  Review Due        Overdue  Priority Last Review        Action\"\n    |                                                                                         ^^^^\n488 |     lines = [header, \"-\" * len(header)]\n489 |     for insight in insights:\n    |\n\nE501 Line too long (115 > 88)\n   --> interface\\cli\\main.py:512:89\n    |\n510 |         action_display = insight.suggested_action[:18].ljust(18)\n511 |         lines.append(\n512 |             f\"{tid} {score_display} {due_str} {overdue_display} {priority_display} {last_str:>16} {action_display}\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n513 |         )\n    |\n\nANN201 Missing return type annotation for public function `review_log`\n   --> interface\\cli\\main.py:539:5\n    |\n538 | @review_app.command(\"log\")\n539 | def review_log(\n    |     ^^^^^^^^^^\n540 |     task_id: str,\n541 |     quality: int = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nE501 Line too long (103 > 88)\n   --> interface\\cli\\main.py:555:89\n    |\n553 |     due_str = record.due_at.astimezone(UTC).strftime(\"%Y-%m-%d %H:%M\")\n554 |     typer.echo(\n555 |         f\"Logged review for {task_id[:8]} :: next due {due_str} (interval {record.interval_days:.2f}d)\"\n    |                                                                                         ^^^^^^^^^^^^^^^\n556 |     )\n557 |     _record(\n    |\n\nANN201 Missing return type annotation for public function `review_suspend`\n   --> interface\\cli\\main.py:568:5\n    |\n567 | @review_app.command(\"suspend\")\n568 | def review_suspend(\n    |     ^^^^^^^^^^^^^^\n569 |     task_id: str,\n570 |     suspend: bool = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:570:5\n    |\n568 | def review_suspend(\n569 |     task_id: str,\n570 |     suspend: bool = typer.Option(\n    |     ^^^^^^^\n571 |         True,\n572 |         \"--suspend/--resume\",\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:571:9\n    |\n569 |     task_id: str,\n570 |     suspend: bool = typer.Option(\n571 |         True,\n    |         ^^^^\n572 |         \"--suspend/--resume\",\n573 |         help=\"Temporarily pause reviews for the task\",\n    |\n\nANN201 Missing return type annotation for public function `tag_add`\n   --> interface\\cli\\main.py:587:5\n    |\n586 | @tags_app.command(\"add\")\n587 | def tag_add(\n    |     ^^^^^^^\n588 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to add\")\n589 | ):\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:588:37\n    |\n586 | @tags_app.command(\"add\")\n587 | def tag_add(\n588 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to add\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n589 | ):\n590 |     ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `tag_remove`\n   --> interface\\cli\\main.py:597:5\n    |\n596 | @tags_app.command(\"remove\")\n597 | def tag_remove(\n    |     ^^^^^^^^^^\n598 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to remove\")\n599 | ):\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:598:37\n    |\n596 | @tags_app.command(\"remove\")\n597 | def tag_remove(\n598 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Tags to remove\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n599 | ):\n600 |     ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `tag_set`\n   --> interface\\cli\\main.py:607:5\n    |\n606 | @tags_app.command(\"set\")\n607 | def tag_set(\n    |     ^^^^^^^\n608 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Replace tags\")\n609 | ):\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:608:37\n    |\n606 | @tags_app.command(\"set\")\n607 | def tag_set(\n608 |     task_id: str, tags: list[str] = typer.Argument(..., help=\"Replace tags\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n609 | ):\n610 |     ctx = _ctx()\n    |\n\nANN201 Missing return type annotation for public function `config_show`\n   --> interface\\cli\\main.py:617:5\n    |\n616 | @config_app.command(\"show\")\n617 | def config_show():\n    |     ^^^^^^^^^^^\n618 |     ctx = _ctx()\n619 |     cfg = ctx.config\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `config_doctor`\n   --> interface\\cli\\main.py:644:5\n    |\n643 | @config_app.command(\"doctor\")\n644 | def config_doctor():\n    |     ^^^^^^^^^^^^^\n645 |     ctx = _ctx()\n646 |     cfg = ctx.config\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `automation_endpoints`\n   --> interface\\cli\\main.py:683:5\n    |\n682 | @automation_app.command(\"endpoints\")\n683 | def automation_endpoints():\n    |     ^^^^^^^^^^^^^^^^^^^^\n684 |     ctx = _ctx()\n685 |     endpoints = ctx.config.automation_webhooks\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `collab_export`\n   --> interface\\cli\\main.py:703:5\n    |\n702 | @collab_app.command(\"export\")\n703 | def collab_export(\n    |     ^^^^^^^^^^^^^\n704 |     output: Path = typer.Option(\n705 |         None, \"--output\", \"-o\", help=\"Destination bundle path\"\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:704:20\n    |\n702 |   @collab_app.command(\"export\")\n703 |   def collab_export(\n704 |       output: Path = typer.Option(\n    |  ____________________^\n705 | |         None, \"--output\", \"-o\", help=\"Destination bundle path\"\n706 | |     ),\n    | |_____^\n707 |       passphrase: str | None = typer.Option(\n708 |           None, help=\"Passphrase used to encrypt the bundle\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:710:5\n    |\n708 |         None, help=\"Passphrase used to encrypt the bundle\"\n709 |     ),\n710 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n711 |         True, help=\"Include completed tasks\"\n712 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:711:9\n    |\n709 |     ),\n710 |     include_completed: bool = typer.Option(\n711 |         True, help=\"Include completed tasks\"\n    |         ^^^^\n712 |     ),\n713 |     limit: int | None = typer.Option(\n    |\n\nANN201 Missing return type annotation for public function `collab_import`\n   --> interface\\cli\\main.py:738:5\n    |\n737 | @collab_app.command(\"import\")\n738 | def collab_import(\n    |     ^^^^^^^^^^^^^\n739 |     bundle: Path = typer.Argument(..., help=\"Encrypted bundle to import\"),\n740 |     passphrase: str | None = typer.Option(\n    |\nhelp: Add return type annotation: `None`\n\nB008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:739:20\n    |\n737 | @collab_app.command(\"import\")\n738 | def collab_import(\n739 |     bundle: Path = typer.Argument(..., help=\"Encrypted bundle to import\"),\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n740 |     passphrase: str | None = typer.Option(\n741 |         None, help=\"Passphrase used to decrypt the bundle\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:743:5\n    |\n741 |         None, help=\"Passphrase used to decrypt the bundle\"\n742 |     ),\n743 |     overwrite_existing: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^^\n744 |         False,\n745 |         help=\"Replace tasks with matching IDs if they already exist\",\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:744:9\n    |\n742 |     ),\n743 |     overwrite_existing: bool = typer.Option(\n744 |         False,\n    |         ^^^^^\n745 |         help=\"Replace tasks with matching IDs if they already exist\",\n746 |     ),\n    |\n\nANN201 Missing return type annotation for public function `collab_push`\n   --> interface\\cli\\main.py:766:5\n    |\n765 | @collab_app.command(\"push\")\n766 | def collab_push(\n    |     ^^^^^^^^^^^\n767 |     endpoint: str | None = typer.Option(\n768 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:773:5\n    |\n771 |         None, help=\"Passphrase used to encrypt the bundle\"\n772 |     ),\n773 |     include_completed: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^\n774 |         True, help=\"Include completed tasks in the export\"\n775 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:774:9\n    |\n772 |     ),\n773 |     include_completed: bool = typer.Option(\n774 |         True, help=\"Include completed tasks in the export\"\n    |         ^^^^\n775 |     ),\n776 |     limit: int | None = typer.Option(\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:786:15\n    |\n784 |       base_url = endpoint or ctx.config.collaboration_endpoint\n785 |       if not base_url:\n786 |           raise typer.BadParameter(\n    |  _______________^\n787 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n788 | |         )\n    | |_________^\n789 |       secret = _prompt_passphrase(passphrase, confirm=True)\n790 |       summary = ctx.ai_service.summarize()\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:787:13\n    |\n785 |     if not base_url:\n786 |         raise typer.BadParameter(\n787 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n788 |         )\n789 |     secret = _prompt_passphrase(passphrase, confirm=True)\n    |\nhelp: Assign to variable; remove string literal\n\nPERF401 Use a list comprehension to create a transformed list\n   --> interface\\cli\\main.py:799:9\n    |\n797 |       upcoming_items: list[dict[str, Any]] = []\n798 |       for item in summary.upcoming[:3]:\n799 | /         upcoming_items.append(\n800 | |             {\n801 | |                 \"task_id\": item.task_id,\n802 | |                 \"description\": item.description,\n803 | |                 \"due\": item.due.isoformat() if item.due else None,\n804 | |                 \"priority\": item.priority,\n805 | |             }\n806 | |         )\n    | |_________^\n807 |       if upcoming_items:\n808 |           summary_payload[\"upcoming\"] = upcoming_items\n    |\nhelp: Replace for loop with list comprehension\n\nSIM115 Use a context manager for opening files\n   --> interface\\cli\\main.py:809:17\n    |\n807 |     if upcoming_items:\n808 |         summary_payload[\"upcoming\"] = upcoming_items\n809 |     temp_file = tempfile.NamedTemporaryFile(\"w\", delete=False, suffix=\".json\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n810 |     temp_path = Path(temp_file.name)\n811 |     temp_file.close()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:831:19\n    |\n829 |                   )\n830 |           except Exception as exc:\n831 |               raise typer.BadParameter(\n    |  ___________________^\n832 | |                 f\"Failed to push bundle to {base_url}: {exc}\"\n833 | |             ) from exc\n    | |_____________^\n834 |       finally:\n835 |           try:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:832:17\n    |\n830 |         except Exception as exc:\n831 |             raise typer.BadParameter(\n832 |                 f\"Failed to push bundle to {base_url}: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n833 |             ) from exc\n834 |     finally:\n    |\nhelp: Assign to variable; remove f-string literal\n\nSIM105 Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`\n   --> interface\\cli\\main.py:835:9\n    |\n833 |               ) from exc\n834 |       finally:\n835 | /         try:\n836 | |             temp_path.unlink()\n837 | |         except OSError:\n838 | |             pass\n    | |________________^\n839 |\n840 |       typer.echo(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(OSError): ...`\n\nANN201 Missing return type annotation for public function `collab_history`\n   --> interface\\cli\\main.py:859:5\n    |\n858 | @collab_app.command(\"history\")\n859 | def collab_history(\n    |     ^^^^^^^^^^^^^^\n860 |     endpoint: str | None = typer.Option(\n861 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:870:15\n    |\n868 |       base_url = endpoint or ctx.config.collaboration_endpoint\n869 |       if not base_url:\n870 |           raise typer.BadParameter(\n    |  _______________^\n871 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n872 | |         )\n    | |_________^\n873 |       try:\n874 |           with CollaborationHubClient(base_url) as client:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:871:13\n    |\n869 |     if not base_url:\n870 |         raise typer.BadParameter(\n871 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n872 |         )\n873 |     try:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:877:15\n    |\n875 |               bundles = client.list_bundles(limit=limit)\n876 |       except Exception as exc:\n877 |           raise typer.BadParameter(\n    |  _______________^\n878 | |             f\"Failed to fetch bundle history from {base_url}: {exc}\"\n879 | |         ) from exc\n    | |_________^\n880 |\n881 |       if not bundles:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:878:13\n    |\n876 |     except Exception as exc:\n877 |         raise typer.BadParameter(\n878 |             f\"Failed to fetch bundle history from {base_url}: {exc}\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n879 |         ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (97 > 88)\n   --> interface\\cli\\main.py:900:89\n    |\n898 |         )\n899 |         lines.append(\n900 |             f\"{bundle.bundle_id[:8]} {stored} {size_display} {source_display} {metadata_display}\"\n    |                                                                                         ^^^^^^^^^\n901 |         )\n902 |     typer.echo(\"\\n\".join(lines))\n    |\n\nANN201 Missing return type annotation for public function `collab_pull`\n   --> interface\\cli\\main.py:913:5\n    |\n912 | @collab_app.command(\"pull\")\n913 | def collab_pull(\n    |     ^^^^^^^^^^^\n914 |     endpoint: str | None = typer.Option(\n915 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n   --> interface\\cli\\main.py:920:5\n    |\n918 |         None, help=\"Passphrase used to decrypt the bundle\"\n919 |     ),\n920 |     overwrite_existing: bool = typer.Option(\n    |     ^^^^^^^^^^^^^^^^^^\n921 |         False, help=\"Replace tasks with matching IDs\"\n922 |     ),\n    |\n\nFBT003 Boolean positional value in function call\n   --> interface\\cli\\main.py:921:9\n    |\n919 |     ),\n920 |     overwrite_existing: bool = typer.Option(\n921 |         False, help=\"Replace tasks with matching IDs\"\n    |         ^^^^^\n922 |     ),\n923 |     bundle_id: str | None = typer.Option(\n    |\n\nB008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n   --> interface\\cli\\main.py:926:27\n    |\n924 |           None, help=\"Fetch a specific bundle identifier\"\n925 |       ),\n926 |       output: Path | None = typer.Option(\n    |  ___________________________^\n927 | |         None, help=\"Save the downloaded bundle to this path\"\n928 | |     ),\n    | |_____^\n929 |   ):\n930 |       ctx = _ctx()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:933:15\n    |\n931 |       base_url = endpoint or ctx.config.collaboration_endpoint\n932 |       if not base_url:\n933 |           raise typer.BadParameter(\n    |  _______________^\n934 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n935 | |         )\n    | |_________^\n936 |\n937 |       try:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:934:13\n    |\n932 |     if not base_url:\n933 |         raise typer.BadParameter(\n934 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n935 |         )\n    |\nhelp: Assign to variable; remove string literal\n\nTRY301 Abstract `raise` to an inner function\n   --> interface\\cli\\main.py:942:21\n    |\n940 |                   download = client.fetch_bundle(bundle_id)\n941 |                   if download is None:\n942 | /                     raise typer.BadParameter(\n943 | |                         f\"Bundle {bundle_id} not found on {base_url}\"\n944 | |                     )\n    | |_____________________^\n945 |               else:\n946 |                   download = client.fetch_latest_bundle()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:942:27\n    |\n940 |                   download = client.fetch_bundle(bundle_id)\n941 |                   if download is None:\n942 |                       raise typer.BadParameter(\n    |  ___________________________^\n943 | |                         f\"Bundle {bundle_id} not found on {base_url}\"\n944 | |                     )\n    | |_____________________^\n945 |               else:\n946 |                   download = client.fetch_latest_bundle()\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:943:25\n    |\n941 |                 if download is None:\n942 |                     raise typer.BadParameter(\n943 |                         f\"Bundle {bundle_id} not found on {base_url}\"\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n944 |                     )\n945 |             else:\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:952:15\n    |\n950 |                       return\n951 |       except Exception as exc:\n952 |           raise typer.BadParameter(\n    |  _______________^\n953 | |             f\"Failed to fetch bundle from {base_url}: {exc}\"\n954 | |         ) from exc\n    | |_________^\n955 |\n956 |       destination = output or Path(ctx.config.collaboration_bundle_path)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\cli\\main.py:953:13\n    |\n951 |     except Exception as exc:\n952 |         raise typer.BadParameter(\n953 |             f\"Failed to fetch bundle from {base_url}: {exc}\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n954 |         ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nANN201 Missing return type annotation for public function `collab_prune`\n   --> interface\\cli\\main.py:980:5\n    |\n979 | @collab_app.command(\"prune\")\n980 | def collab_prune(\n    |     ^^^^^^^^^^^^\n981 |     endpoint: str | None = typer.Option(\n982 |         None, help=\"Collaboration hub base URL\"\n    |\nhelp: Add return type annotation: `None`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\cli\\main.py:991:15\n    |\n989 |       base_url = endpoint or ctx.config.collaboration_endpoint\n990 |       if not base_url:\n991 |           raise typer.BadParameter(\n    |  _______________^\n992 | |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n993 | |         )\n    | |_________^\n994 |       try:\n995 |           with CollaborationHubClient(base_url) as client:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\cli\\main.py:992:13\n    |\n990 |     if not base_url:\n991 |         raise typer.BadParameter(\n992 |             \"Provide --endpoint or set LEGATUS_COLLAB_ENDPOINT.\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n993 |         )\n994 |     try:\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> interface\\cli\\main.py:998:15\n     |\n 996 |               removed, remaining = client.prune_bundles(keep=keep)\n 997 |       except Exception as exc:\n 998 |           raise typer.BadParameter(\n     |  _______________^\n 999 | |             f\"Failed to prune bundles on {base_url}: {exc}\"\n1000 | |         ) from exc\n     | |_________^\n1001 |\n1002 |       if not removed:\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> interface\\cli\\main.py:999:13\n     |\n 997 |     except Exception as exc:\n 998 |         raise typer.BadParameter(\n 999 |             f\"Failed to prune bundles on {base_url}: {exc}\"\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1000 |         ) from exc\n     |\nhelp: Assign to variable; remove f-string literal\n\nANN201 Missing return type annotation for public function `run_webhook_server`\n    --> interface\\cli\\main.py:1025:5\n     |\n1024 | @app.command(\"webhook\")\n1025 | def run_webhook_server(\n     |     ^^^^^^^^^^^^^^^^^^\n1026 |     host: str = typer.Option(\"127.0.0.1\", help=\"Host interface to bind\"),\n1027 |     port: int = typer.Option(8080, help=\"Port to bind\"),\n     |\nhelp: Add return type annotation: `None`\n\nFBT001 Boolean-typed positional argument in function definition\n    --> interface\\cli\\main.py:1028:5\n     |\n1026 |     host: str = typer.Option(\"127.0.0.1\", help=\"Host interface to bind\"),\n1027 |     port: int = typer.Option(8080, help=\"Port to bind\"),\n1028 |     reload: bool = typer.Option(\n     |     ^^^^^^\n1029 |         False, help=\"Enable auto-reload (development only)\"\n1030 |     ),\n     |\n\nFBT003 Boolean positional value in function call\n    --> interface\\cli\\main.py:1029:9\n     |\n1027 |     port: int = typer.Option(8080, help=\"Port to bind\"),\n1028 |     reload: bool = typer.Option(\n1029 |         False, help=\"Enable auto-reload (development only)\"\n     |         ^^^^^\n1030 |     ),\n1031 | ):\n     |\n\nPLC0415 `import` should be at the top-level of a file\n    --> interface\\cli\\main.py:1033:5\n     |\n1031 | ):\n1032 |     ctx = _ctx()\n1033 |     from ...interface.api.server import create_api_app\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1034 |\n1035 |     try:\n     |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n    --> interface\\cli\\main.py:1033:5\n     |\n1031 | ):\n1032 |     ctx = _ctx()\n1033 |     from ...interface.api.server import create_api_app\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1034 |\n1035 |     try:\n     |\nhelp: Replace relative imports from parent modules with absolute imports\n\nPLC0415 `import` should be at the top-level of a file\n    --> interface\\cli\\main.py:1036:9\n     |\n1035 |     try:\n1036 |         import uvicorn\n     |         ^^^^^^^^^^^^^^\n1037 |     except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |         raise typer.BadParameter(\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> interface\\cli\\main.py:1038:15\n     |\n1036 |           import uvicorn\n1037 |       except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |           raise typer.BadParameter(\n     |  _______________^\n1039 | |             \"uvicorn is required to run the webhook server; install with 'pip install uvicorn[standard]'\"\n1040 | |         ) from exc\n     | |_________^\n1041 |\n1042 |       api_app = create_api_app(ctx=ctx)\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> interface\\cli\\main.py:1039:13\n     |\n1037 |     except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |         raise typer.BadParameter(\n1039 |             \"uvicorn is required to run the webhook server; install with 'pip install uvicorn[standard]'\"\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1040 |         ) from exc\n     |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (105 > 88)\n    --> interface\\cli\\main.py:1039:89\n     |\n1037 |     except ImportError as exc:  # pragma: no cover - handled at runtime\n1038 |         raise typer.BadParameter(\n1039 |             \"uvicorn is required to run the webhook server; install with 'pip install uvicorn[standard]'\"\n     |                                                                                         ^^^^^^^^^^^^^^^^^\n1040 |         ) from exc\n     |\n\nANN201 Missing return type annotation for public function `run`\n    --> interface\\cli\\main.py:1054:5\n     |\n1054 | def run():\n     |     ^^^\n1055 |     app()\n     |\nhelp: Add return type annotation: `None`\n\nINP001 File `interface\\tui\\app.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> interface\\tui\\app.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\tui\\app.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC\n5 | from importlib import import_module\n  |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:11:35\n   |\n10 |     class App:  # type: ignore[too-many-ancestors]\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:11:50\n   |\n10 |     class App:  # type: ignore[too-many-ancestors]\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:13:30\n   |\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |                              ^^^\n14 |\n15 |     class ComposeResult: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:13:45\n   |\n11 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n12 |\n13 |         def run(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                             ^^^\n14 |\n15 |     class ComposeResult: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:18:35\n   |\n17 |     class Binding:  # pragma: no cover - placeholder\n18 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n19 |\n20 |     class Footer:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:18:50\n   |\n17 |     class Binding:  # pragma: no cover - placeholder\n18 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n19 |\n20 |     class Footer:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:21:35\n   |\n20 |     class Footer:  # pragma: no cover\n21 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n22 |\n23 |     class Header:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:21:50\n   |\n20 |     class Footer:  # pragma: no cover\n21 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n22 |\n23 |     class Header:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:24:35\n   |\n23 |     class Header:  # pragma: no cover\n24 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n25 |\n26 |     class Input:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:24:50\n   |\n23 |     class Header:  # pragma: no cover\n24 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n25 |\n26 |     class Input:  # pragma: no cover\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:27:35\n   |\n26 |     class Input:  # pragma: no cover\n27 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n28 |\n29 |         def focus(self) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:27:50\n   |\n26 |     class Input:  # pragma: no cover\n27 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n28 |\n29 |         def focus(self) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> interface\\tui\\app.py:32:35\n   |\n31 |     class Static:  # pragma: no cover\n32 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                   ^^^\n33 |\n34 |         def update(self, value: str) -> None: ...\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> interface\\tui\\app.py:32:50\n   |\n31 |     class Static:  # pragma: no cover\n32 |         def __init__(self, *args: Any, **kwargs: Any) -> None: ...\n   |                                                  ^^^\n33 |\n34 |         def update(self, value: str) -> None: ...\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> interface\\tui\\app.py:51:15\n   |\n49 |           Static = cast(\"type[Any]\", _widgets.Static)\n50 |       except ModuleNotFoundError as exc:  # pragma: no cover\n51 |           raise RuntimeError(\n   |  _______________^\n52 | |             \"The 'textual' package is required for the TUI. Install it via 'pip install textual'.\"\n53 | |         ) from exc\n   | |_________^\n54 |\n55 |   from ...core.services.ai_service import TaskSummary\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> interface\\tui\\app.py:52:13\n   |\n50 |     except ModuleNotFoundError as exc:  # pragma: no cover\n51 |         raise RuntimeError(\n52 |             \"The 'textual' package is required for the TUI. Install it via 'pip install textual'.\"\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n53 |         ) from exc\n   |\nhelp: Assign to variable; remove string literal\n\nE501 Line too long (98 > 88)\n  --> interface\\tui\\app.py:52:89\n   |\n50 |     except ModuleNotFoundError as exc:  # pragma: no cover\n51 |         raise RuntimeError(\n52 |             \"The 'textual' package is required for the TUI. Install it via 'pip install textual'.\"\n   |                                                                                         ^^^^^^^^^^\n53 |         ) from exc\n   |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\app.py:55:1\n   |\n53 |         ) from exc\n54 |\n55 | from ...core.services.ai_service import TaskSummary\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n56 | from .controller import TaskController, TaskFilters, TaskRow\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.TaskSummary` into a type-checking block\n  --> interface\\tui\\app.py:55:41\n   |\n53 |         ) from exc\n54 |\n55 | from ...core.services.ai_service import TaskSummary\n   |                                         ^^^^^^^^^^^\n56 | from .controller import TaskController, TaskFilters, TaskRow\n   |\nhelp: Move into type-checking block\n\nE501 Line too long (99 > 88)\n  --> interface\\tui\\app.py:63:89\n   |\n62 |     def update_rows(self, rows: Iterable[TaskRow]) -> None:\n63 |         header = \"ID       Status     Due                Priority Tags                 Description\"\n   |                                                                                         ^^^^^^^^^^^\n64 |         lines = [header, \"-\" * len(header)]\n65 |         for row in rows:\n   |\n\nPERF401 Use `list.extend` to create a transformed list\n  --> interface\\tui\\app.py:66:13\n   |\n64 |           lines = [header, \"-\" * len(header)]\n65 |           for row in rows:\n66 | /             lines.append(\n67 | |                 f\"{row.id[:8]} {row.status.ljust(9)} \"\n68 | |                 f\"{row.due_display.ljust(18)} {row.priority_display.ljust(8)} \"\n69 | |                 f\"{row.tags_display[:18].ljust(18)} {row.description}\"\n70 | |             )\n   | |_____________^\n71 |           if len(lines) == 2:\n72 |               lines.append(\"(no tasks found)\")\n   |\nhelp: Replace for loop with list.extend\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> interface\\tui\\app.py:71:26\n   |\n69 |                 f\"{row.tags_display[:18].ljust(18)} {row.description}\"\n70 |             )\n71 |         if len(lines) == 2:\n   |                          ^\n72 |             lines.append(\"(no tasks found)\")\n73 |         self.update(\"\\n\".join(lines))\n   |\n\nRUF012 Mutable class attributes should be annotated with `typing.ClassVar`\n  --> interface\\tui\\app.py:80:16\n   |\n79 |       TITLE = \"Legatus Acta Schedae \u00e2\u20ac\u201d TUI\"\n80 |       BINDINGS = [\n   |  ________________^\n81 | |         Binding(\"q\", \"quit\", \"Quit\"),\n82 | |         Binding(\"r\", \"refresh\", \"Refresh\"),\n83 | |         Binding(\"/\", \"focus_search\", \"Search\"),\n84 | |     ]\n   | |_____^\n85 |\n86 |       def __init__(self, controller: TaskController | None = None) -> None:\n   |\n\nANN201 Missing return type annotation for public function `compose`\n  --> interface\\tui\\app.py:95:9\n   |\n93 |         self._summary: Any | None = None\n94 |\n95 |     def compose(self):  # type: ignore[override]\n   |         ^^^^^^^\n96 |         yield Header(show_clock=True)\n97 |         summary: Any = Static(\"AI summary unavailable\", id=\"summary\")\n   |\nhelp: Add return type annotation\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `event`\n   --> interface\\tui\\app.py:125:41\n    |\n123 |             self._search.focus()\n124 |\n125 |     def on_input_submitted(self, event: Any) -> None:\n    |                                         ^^^\n126 |         if getattr(event, \"input\", None) is None:\n127 |             return\n    |\n\nE501 Line too long (104 > 88)\n   --> interface\\tui\\app.py:146:89\n    |\n144 |         top_tags = \", \".join(summary.top_tags) if summary.top_tags else \"-\"\n145 |         lines = [\n146 |             f\"Pending: {summary.pending} | Completed: {summary.completed} | Overdue: {summary.overdue}\",\n    |                                                                                         ^^^^^^^^^^^^^^^^\n147 |             f\"Top tags: {top_tags}\",\n148 |         ]\n    |\n\nE501 Line too long (109 > 88)\n   --> interface\\tui\\app.py:161:89\n    |\n159 |                 priority: str = item.priority or \"-\"\n160 |                 lines.append(\n161 |                     f\"  \u00e2\u20ac\u00a2 {item.description} (id={item.task_id[:8]}, due={due_display}, priority={priority})\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n162 |                 )\n163 |         else:\n    |\n\nINP001 File `interface\\tui\\controller.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> interface\\tui\\controller.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> interface\\tui\\controller.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                             ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> interface\\tui\\controller.py:3:39\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable, Sequence\n  |                                       ^^^^^^^^\n4 | from dataclasses import dataclass\n5 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> interface\\tui\\controller.py:7:1\n  |\n5 | from datetime import UTC, datetime, timedelta\n6 |\n7 | from ...core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ...core.services.ai_service import TaskSummary\n9 | from ...infrastructure.config import AppConfig, load_config\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.domain.task.Task` into a type-checking block\n --> interface\\tui\\controller.py:7:33\n  |\n5 | from datetime import UTC, datetime, timedelta\n6 |\n7 | from ...core.domain.task import Task\n  |                                 ^^^^\n8 | from ...core.services.ai_service import TaskSummary\n9 | from ...infrastructure.config import AppConfig, load_config\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:8:1\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `...core.services.ai_service.TaskSummary` into a type-checking block\n  --> interface\\tui\\controller.py:8:41\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n   |                                         ^^^^^^^^^^^\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:9:1\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ...infrastructure.di import AppContext, build_context\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:9:1\n   |\n 7 | from ...core.domain.task import Task\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ...infrastructure.di import AppContext, build_context\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:10:1\n   |\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:10:1\n   |\n 8 | from ...core.services.ai_service import TaskSummary\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ...infrastructure.logging import setup_logging\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> interface\\tui\\controller.py:11:1\n   |\n 9 | from ...infrastructure.config import AppConfig, load_config\n10 | from ...infrastructure.di import AppContext, build_context\n11 | from ...infrastructure.logging import setup_logging\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nANN202 Missing return type annotation for private function `sort_key`\n   --> interface\\tui\\controller.py:100:13\n    |\n 98 |             ]\n 99 |\n100 |         def sort_key(task: Task):\n    |             ^^^^^^^^\n101 |             due = task.due or datetime.max.replace(tzinfo=UTC)\n102 |             return (task.status != \"pending\", due, task.created)\n    |\nhelp: Add return type annotation\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\tui\\controller.py:141:19\n    |\n139 |     ) -> TaskRow:\n140 |         if days is None and not until:\n141 |             raise ValueError(\"Provide at least one defer option\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n142 |         delta = timedelta(days=days) if days is not None else None\n143 |         until_dt = _parse_due(until) if until else None\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> interface\\tui\\controller.py:141:30\n    |\n139 |     ) -> TaskRow:\n140 |         if days is None and not until:\n141 |             raise ValueError(\"Provide at least one defer option\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n142 |         delta = timedelta(days=days) if days is not None else None\n143 |         until_dt = _parse_due(until) if until else None\n    |\nhelp: Assign to variable; remove string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> interface\\tui\\controller.py:163:15\n    |\n161 |             if task.id == task_id:\n162 |                 return TaskRow.from_task(task)\n163 |         raise KeyError(f\"Task {task_id} not found\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n164 |\n165 |     def ai_summary(self, top_n: int = 3) -> TaskSummary:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> interface\\tui\\controller.py:163:24\n    |\n161 |             if task.id == task_id:\n162 |                 return TaskRow.from_task(task)\n163 |         raise KeyError(f\"Task {task_id} not found\")\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n164 |\n165 |     def ai_summary(self, top_n: int = 3) -> TaskSummary:\n    |\nhelp: Assign to variable; remove f-string literal\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:9:1\n   |\n 7 | from typing import Any\n 8 |\n 9 | from ..core.domain import events\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n10 | from ..core.domain.task import Task\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:10:1\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..core.domain.task.Task` into a type-checking block\n  --> plugins\\ai_assistant.py:10:32\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n   |                                ^^^^\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:11:1\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n  --> plugins\\ai_assistant.py:11:1\n   |\n 9 | from ..core.domain import events\n10 | from ..core.domain.task import Task\n11 | from ..core.services.plugin_bus import Plugin, PluginContext\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\calendar_sync.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain import events\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\calendar_sync.py:7:1\n  |\n6 | from ..core.domain import events\n7 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\calendar_sync.py:7:1\n  |\n6 | from ..core.domain import events\n7 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:6:1\n  |\n4 | from datetime import UTC, datetime\n5 |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:7:1\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC001 Move application import `..core.domain.task.Task` into a type-checking block\n --> plugins\\task_scoring.py:7:32\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n  |                                ^^^^\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  |\nhelp: Move into type-checking block\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:8:1\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> plugins\\task_scoring.py:8:1\n  |\n6 | from ..core.domain.events import DomainEvent, TaskCreated, TaskUpdated\n7 | from ..core.domain.task import Task\n8 | from ..core.services.plugin_bus import Plugin, PluginContext\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nINP001 File `tests\\test_ai_briefing_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_ai_briefing_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n --> tests\\test_ai_briefing_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Sequence\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nARG002 Unused method argument: `now`\n  --> tests\\test_ai_briefing_service.py:25:18\n   |\n24 |     def summarize(\n25 |         self, *, now: datetime | None = None, top_n: int = 3\n   |                  ^^^\n26 |     ) -> TaskSummary:\n27 |         return self._summary\n   |\n\nARG002 Unused method argument: `top_n`\n  --> tests\\test_ai_briefing_service.py:25:47\n   |\n24 |     def summarize(\n25 |         self, *, now: datetime | None = None, top_n: int = 3\n   |                                               ^^^^^\n26 |     ) -> TaskSummary:\n27 |         return self._summary\n   |\n\nANN201 Missing return type annotation for public function `generate`\n  --> tests\\test_ai_briefing_service.py:34:9\n   |\n32 |         self._guidance = guidance\n33 |\n34 |     def generate(\n   |         ^^^^^^^^\n35 |         self,\n36 |         *,\n   |\nhelp: Add return type annotation\n\nARG002 Unused method argument: `now`\n  --> tests\\test_ai_briefing_service.py:37:9\n   |\n35 |         self,\n36 |         *,\n37 |         now: datetime | None = None,\n   |         ^^^\n38 |         limit: int | None = None,\n39 |         include_completed: bool = False,\n   |\n\nARG002 Unused method argument: `limit`\n  --> tests\\test_ai_briefing_service.py:38:9\n   |\n36 |         *,\n37 |         now: datetime | None = None,\n38 |         limit: int | None = None,\n   |         ^^^^^\n39 |         include_completed: bool = False,\n40 |         tags: Sequence[str] | None = None,\n   |\n\nARG002 Unused method argument: `include_completed`\n  --> tests\\test_ai_briefing_service.py:39:9\n   |\n37 |         now: datetime | None = None,\n38 |         limit: int | None = None,\n39 |         include_completed: bool = False,\n   |         ^^^^^^^^^^^^^^^^^\n40 |         tags: Sequence[str] | None = None,\n41 |     ):\n   |\n\nARG002 Unused method argument: `tags`\n  --> tests\\test_ai_briefing_service.py:40:9\n   |\n38 |         limit: int | None = None,\n39 |         include_completed: bool = False,\n40 |         tags: Sequence[str] | None = None,\n   |         ^^^^\n41 |     ):\n42 |         return list(self._guidance)\n   |\n\nE501 Line too long (100 > 88)\n  --> tests\\test_ai_briefing_service.py:78:89\n   |\n76 |     )\n77 |\n78 |     service = AIBriefingService(StubAIService(summary), StubReviewGuidanceService([guidance_entry]))  # type: ignore[arg-type]\n   |                                                                                         ^^^^^^^^^^^^\n79 |\n80 |     briefing = service.generate(now=now, limit=3)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_briefing_service.py:82:5\n   |\n80 |     briefing = service.generate(now=now, limit=3)\n81 |\n82 |     assert briefing.summary is summary\n   |     ^^^^^^\n83 |     assert briefing.guidance == [guidance_entry]\n84 |     assert briefing.generated_at == now\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_briefing_service.py:83:5\n   |\n82 |     assert briefing.summary is summary\n83 |     assert briefing.guidance == [guidance_entry]\n   |     ^^^^^^\n84 |     assert briefing.generated_at == now\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_briefing_service.py:84:5\n   |\n82 |     assert briefing.summary is summary\n83 |     assert briefing.guidance == [guidance_entry]\n84 |     assert briefing.generated_at == now\n   |     ^^^^^^\n   |\n\nINP001 File `tests\\test_ai_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_ai_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_ai_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:67:5\n   |\n65 |     summary = service.summarize(now=moment, top_n=2)\n66 |\n67 |     assert summary.pending == 2\n   |     ^^^^^^\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_ai_service.py:67:31\n   |\n65 |     summary = service.summarize(now=moment, top_n=2)\n66 |\n67 |     assert summary.pending == 2\n   |                               ^\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:68:5\n   |\n67 |     assert summary.pending == 2\n68 |     assert summary.completed == 1\n   |     ^^^^^^\n69 |     assert summary.overdue == 1\n70 |     assert summary.top_tags[0] == \"work\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:69:5\n   |\n67 |     assert summary.pending == 2\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n   |     ^^^^^^\n70 |     assert summary.top_tags[0] == \"work\"\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:70:5\n   |\n68 |     assert summary.completed == 1\n69 |     assert summary.overdue == 1\n70 |     assert summary.top_tags[0] == \"work\"\n   |     ^^^^^^\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n72 |     assert all(item.due and item.due >= moment for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:71:5\n   |\n69 |     assert summary.overdue == 1\n70 |     assert summary.top_tags[0] == \"work\"\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n   |     ^^^^^^\n72 |     assert all(item.due and item.due >= moment for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:72:5\n   |\n70 |     assert summary.top_tags[0] == \"work\"\n71 |     assert any(item.task_id == upcoming.id for item in summary.upcoming)\n72 |     assert all(item.due and item.due >= moment for item in summary.upcoming)\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:82:5\n   |\n80 |     prompts = service.draft_followups(task)\n81 |\n82 |     assert any(\"follow-up\" in prompt.lower() for prompt in prompts)\n   |     ^^^^^^\n83 |     assert any(\"meeting\" in prompt.lower() for prompt in prompts)\n84 |     assert \"account\" in prompts[0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:83:5\n   |\n82 |     assert any(\"follow-up\" in prompt.lower() for prompt in prompts)\n83 |     assert any(\"meeting\" in prompt.lower() for prompt in prompts)\n   |     ^^^^^^\n84 |     assert \"account\" in prompts[0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:84:5\n   |\n82 |     assert any(\"follow-up\" in prompt.lower() for prompt in prompts)\n83 |     assert any(\"meeting\" in prompt.lower() for prompt in prompts)\n84 |     assert \"account\" in prompts[0]\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:93:5\n   |\n91 |     ideas = service.brainstorm(\"quarterly planning\", variants=4)\n92 |\n93 |     assert len(ideas) == 4\n   |     ^^^^^^\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n  --> tests\\test_ai_service.py:93:26\n   |\n91 |     ideas = service.brainstorm(\"quarterly planning\", variants=4)\n92 |\n93 |     assert len(ideas) == 4\n   |                          ^\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:94:5\n   |\n93 |     assert len(ideas) == 4\n94 |     assert ideas[0].startswith(\"Plan:\")\n   |     ^^^^^^\n95 |     assert ideas[-1].startswith(\"Share:\")\n96 |     assert all(\"quarterly planning\" in idea for idea in ideas)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:95:5\n   |\n93 |     assert len(ideas) == 4\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n   |     ^^^^^^\n96 |     assert all(\"quarterly planning\" in idea for idea in ideas)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_ai_service.py:96:5\n   |\n94 |     assert ideas[0].startswith(\"Plan:\")\n95 |     assert ideas[-1].startswith(\"Share:\")\n96 |     assert all(\"quarterly planning\" in idea for idea in ideas)\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_ai_service.py:106:5\n    |\n104 |     ideas = service.brainstorm(\"ops review\", variants=variants)\n105 |\n106 |     assert len(ideas) == variants\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_api.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_api.py:1:1\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_api.py:6:21\n  |\n5 | import base64\n6 | from pathlib import Path\n  |                     ^^^^\n7 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:25:35\n   |\n24 | @pytest.fixture\n25 | def api_client(tmp_path: Path) -> Any:\n   |                                   ^^^\n26 |     cfg = load_config(\n27 |         {\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:47:38\n   |\n47 | def test_health_endpoint(api_client: Any) -> None:\n   |                                      ^^^\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:49:5\n   |\n47 | def test_health_endpoint(api_client: Any) -> None:\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n   |     ^^^^^^\n50 |     assert response.json()[\"status\"] == \"ok\"\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n  --> tests\\test_api.py:49:36\n   |\n47 | def test_health_endpoint(api_client: Any) -> None:\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n   |                                    ^^^\n50 |     assert response.json()[\"status\"] == \"ok\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:50:5\n   |\n48 |     response = api_client.get(\"/health\")\n49 |     assert response.status_code == 200\n50 |     assert response.json()[\"status\"] == \"ok\"\n   |     ^^^^^^\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:53:55\n   |\n53 | def test_scan_endpoint_returns_ai_summary(api_client: Any) -> None:\n   |                                                       ^^^\n54 |     ctx = api_client.app.state.ctx  # type: ignore[attr-defined]\n55 |     task = ctx.task_service.add_task(\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:71:5\n   |\n69 |     )\n70 |\n71 |     assert response.status_code == 200\n   |     ^^^^^^\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n  --> tests\\test_api.py:71:36\n   |\n69 |     )\n70 |\n71 |     assert response.status_code == 200\n   |                                    ^^^\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:73:5\n   |\n71 |     assert response.status_code == 200\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n   |     ^^^^^^\n74 |     assert payload[\"task\"][\"updated\"] is True\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:74:5\n   |\n72 |     payload: dict[str, Any] = response.json()\n73 |     assert payload[\"card_id\"] == \"card-123\"\n74 |     assert payload[\"task\"][\"updated\"] is True\n   |     ^^^^^^\n75 |\n76 |     summary = payload[\"ai_summary\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:77:5\n   |\n76 |     summary = payload[\"ai_summary\"]\n77 |     assert summary[\"pending\"] >= 0\n   |     ^^^^^^\n78 |     assert summary[\"completed\"] >= 0\n79 |     assert summary[\"top_tags\"]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:78:5\n   |\n76 |     summary = payload[\"ai_summary\"]\n77 |     assert summary[\"pending\"] >= 0\n78 |     assert summary[\"completed\"] >= 0\n   |     ^^^^^^\n79 |     assert summary[\"top_tags\"]\n80 |     assert isinstance(summary[\"upcoming\"], list)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:79:5\n   |\n77 |     assert summary[\"pending\"] >= 0\n78 |     assert summary[\"completed\"] >= 0\n79 |     assert summary[\"top_tags\"]\n   |     ^^^^^^\n80 |     assert isinstance(summary[\"upcoming\"], list)\n81 |     if summary[\"upcoming\"]:\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:80:5\n   |\n78 |     assert summary[\"completed\"] >= 0\n79 |     assert summary[\"top_tags\"]\n80 |     assert isinstance(summary[\"upcoming\"], list)\n   |     ^^^^^^\n81 |     if summary[\"upcoming\"]:\n82 |         first = summary[\"upcoming\"][0]\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_api.py:83:9\n   |\n81 |     if summary[\"upcoming\"]:\n82 |         first = summary[\"upcoming\"][0]\n83 |         assert \"task_id\" in first and \"description\" in first\n   |         ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_api.py:83:9\n   |\n81 |     if summary[\"upcoming\"]:\n82 |         first = summary[\"upcoming\"][0]\n83 |         assert \"task_id\" in first and \"description\" in first\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`\n  --> tests\\test_api.py:86:53\n   |\n86 | def test_collaboration_bundle_endpoints(api_client: Any) -> None:\n   |                                                     ^^^\n87 |     payload = base64.b64encode(b'{\"hello\": \"world\"}').decode(\"utf-8\")\n88 |     metadata = {\"label\": \"demo\"}\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:98:5\n    |\n 96 |         },\n 97 |     )\n 98 |     assert response.status_code == 201\n    |     ^^^^^^\n 99 |     created = response.json()\n100 |     bundle_id = created[\"bundle_id\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `201` with a constant variable\n   --> tests\\test_api.py:98:36\n    |\n 96 |         },\n 97 |     )\n 98 |     assert response.status_code == 201\n    |                                    ^^^\n 99 |     created = response.json()\n100 |     bundle_id = created[\"bundle_id\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:101:5\n    |\n 99 |     created = response.json()\n100 |     bundle_id = created[\"bundle_id\"]\n101 |     assert created[\"metadata\"] == metadata\n    |     ^^^^^^\n102 |\n103 |     payload_two = base64.b64encode(b'{\"hello\": \"second\"}').decode(\"utf-8\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:112:5\n    |\n110 |         },\n111 |     )\n112 |     assert response_two.status_code == 201\n    |     ^^^^^^\n113 |     created_two = response_two.json()\n114 |     bundle_id_two = created_two[\"bundle_id\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `201` with a constant variable\n   --> tests\\test_api.py:112:40\n    |\n110 |         },\n111 |     )\n112 |     assert response_two.status_code == 201\n    |                                        ^^^\n113 |     created_two = response_two.json()\n114 |     bundle_id_two = created_two[\"bundle_id\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:117:5\n    |\n116 |     latest = api_client.get(\"/api/collab/bundles/latest\")\n117 |     assert latest.status_code == 200\n    |     ^^^^^^\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:117:34\n    |\n116 |     latest = api_client.get(\"/api/collab/bundles/latest\")\n117 |     assert latest.status_code == 200\n    |                                  ^^^\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:119:5\n    |\n117 |     assert latest.status_code == 200\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n    |     ^^^^^^\n120 |     assert (\n121 |         base64.b64decode(latest_payload[\"payload\"]) == b'{\"hello\": \"second\"}'\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:120:5\n    |\n118 |     latest_payload = latest.json()\n119 |     assert latest_payload[\"bundle_id\"] == bundle_id_two\n120 |     assert (\n    |     ^^^^^^\n121 |         base64.b64decode(latest_payload[\"payload\"]) == b'{\"hello\": \"second\"}'\n122 |     )\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:125:5\n    |\n124 |     specific = api_client.get(f\"/api/collab/bundles/{bundle_id}\")\n125 |     assert specific.status_code == 200\n    |     ^^^^^^\n126 |     assert specific.json()[\"bundle_id\"] == bundle_id\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:125:36\n    |\n124 |     specific = api_client.get(f\"/api/collab/bundles/{bundle_id}\")\n125 |     assert specific.status_code == 200\n    |                                    ^^^\n126 |     assert specific.json()[\"bundle_id\"] == bundle_id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:126:5\n    |\n124 |     specific = api_client.get(f\"/api/collab/bundles/{bundle_id}\")\n125 |     assert specific.status_code == 200\n126 |     assert specific.json()[\"bundle_id\"] == bundle_id\n    |     ^^^^^^\n127 |\n128 |     listing = api_client.get(\"/api/collab/bundles?limit=5\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:129:5\n    |\n128 |     listing = api_client.get(\"/api/collab/bundles?limit=5\")\n129 |     assert listing.status_code == 200\n    |     ^^^^^^\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:129:35\n    |\n128 |     listing = api_client.get(\"/api/collab/bundles?limit=5\")\n129 |     assert listing.status_code == 200\n    |                                   ^^^\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:131:5\n    |\n129 |     assert listing.status_code == 200\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n    |     ^^^^^^\n132 |     assert len(listing_payload) >= 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:132:5\n    |\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n132 |     assert len(listing_payload) >= 2\n    |     ^^^^^^\n133 |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_api.py:132:36\n    |\n130 |     listing_payload = cast(\"list[dict[str, Any]]\", listing.json())\n131 |     assert isinstance(listing_payload, list)\n132 |     assert len(listing_payload) >= 2\n    |                                    ^\n133 |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:135:5\n    |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n135 |     assert prune.status_code == 200\n    |     ^^^^^^\n136 |     pruned_payload = cast(\"dict[str, Any]\", prune.json())\n137 |     assert pruned_payload[\"remaining\"] == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   --> tests\\test_api.py:135:33\n    |\n134 |     prune = api_client.delete(\"/api/collab/bundles?keep=1\")\n135 |     assert prune.status_code == 200\n    |                                 ^^^\n136 |     pruned_payload = cast(\"dict[str, Any]\", prune.json())\n137 |     assert pruned_payload[\"remaining\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:137:5\n    |\n135 |     assert prune.status_code == 200\n136 |     pruned_payload = cast(\"dict[str, Any]\", prune.json())\n137 |     assert pruned_payload[\"remaining\"] == 1\n    |     ^^^^^^\n138 |     expected_removed = max(len(listing_payload) - 1, 0)\n139 |     assert len(pruned_payload[\"removed\"]) == expected_removed\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_api.py:139:5\n    |\n137 |     assert pruned_payload[\"remaining\"] == 1\n138 |     expected_removed = max(len(listing_payload) - 1, 0)\n139 |     assert len(pruned_payload[\"removed\"]) == expected_removed\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_automation_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_automation_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_automation_service.py:4:29\n  |\n3 | import json\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from typing import cast\n  |\nhelp: Move into type-checking block\n\nE501 Line too long (89 > 88)\n  --> tests\\test_automation_service.py:73:89\n   |\n71 |             self.events: list[tuple[str, dict[str, object]]] = []\n72 |\n73 |         def track(self, event: str, properties: dict[str, object] | None = None) -> None:  # type: ignore[override]\n   |                                                                                         ^\n74 |             self.events.append((event, properties or {}))\n   |\n\nARG002 Unused method argument: `now`\n  --> tests\\test_automation_service.py:94:22\n   |\n92 |     class StubAIService:\n93 |         def summarize(\n94 |             self, *, now: datetime | None = None, top_n: int = 3\n   |                      ^^^\n95 |         ) -> TaskSummary:\n96 |             return summary\n   |\n\nARG002 Unused method argument: `top_n`\n  --> tests\\test_automation_service.py:94:51\n   |\n92 |     class StubAIService:\n93 |         def summarize(\n94 |             self, *, now: datetime | None = None, top_n: int = 3\n   |                                                   ^^^^^\n95 |         ) -> TaskSummary:\n96 |             return summary\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:112:5\n    |\n110 |     )\n111 |\n112 |     assert len(captured) == 1\n    |     ^^^^^^\n113 |     request = captured[0]\n114 |     assert request.url == httpx.URL(\"https://example.com/automation\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:114:5\n    |\n112 |     assert len(captured) == 1\n113 |     request = captured[0]\n114 |     assert request.url == httpx.URL(\"https://example.com/automation\")\n    |     ^^^^^^\n115 |     payload = json.loads(request.content.decode(\"utf-8\"))\n116 |     assert payload[\"event\"] == \"card_scanned\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:116:5\n    |\n114 |     assert request.url == httpx.URL(\"https://example.com/automation\")\n115 |     payload = json.loads(request.content.decode(\"utf-8\"))\n116 |     assert payload[\"event\"] == \"card_scanned\"\n    |     ^^^^^^\n117 |     inner = payload[\"payload\"]\n118 |     assert inner[\"task\"][\"id\"] == task.id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:118:5\n    |\n116 |     assert payload[\"event\"] == \"card_scanned\"\n117 |     inner = payload[\"payload\"]\n118 |     assert inner[\"task\"][\"id\"] == task.id\n    |     ^^^^^^\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:119:5\n    |\n117 |     inner = payload[\"payload\"]\n118 |     assert inner[\"task\"][\"id\"] == task.id\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n    |     ^^^^^^\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:120:5\n    |\n118 |     assert inner[\"task\"][\"id\"] == task.id\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n    |     ^^^^^^\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:121:5\n    |\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n    |     ^^^^^^\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n123 |     assert telemetry.events == [\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> tests\\test_automation_service.py:121:46\n    |\n119 |     assert inner[\"task\"][\"priority\"] == \"high\"\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n    |                                              ^\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n123 |     assert telemetry.events == [\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:122:5\n    |\n120 |     assert inner[\"metadata\"][\"reader\"] == \"qrbot\"\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n    |     ^^^^^^\n123 |     assert telemetry.events == [\n124 |         (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:123:5\n    |\n121 |     assert inner[\"ai_summary\"][\"pending\"] == 5\n122 |     assert inner[\"ai_summary\"][\"top_tags\"] == [\"alpha\"]\n123 |     assert telemetry.events == [\n    |     ^^^^^^\n124 |         (\n125 |             \"automation.dispatch\",\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_automation_service.py:141:5\n    |\n139 |     service = AutomationService(dispatcher, repo, None)\n140 |\n141 |     assert service.enabled is False\n    |     ^^^^^^\n142 |     # Publishing should not raise\n143 |     dispatcher.publish(\n    |\n\nC408 Unnecessary `tuple()` call (rewrite as a literal)\n   --> tests\\test_automation_service.py:148:18\n    |\n146 |             task_id=None,\n147 |             action=\"scan\",\n148 |             tags=tuple(),\n    |                  ^^^^^^^\n149 |             metadata={},\n150 |             task_error=None,\n    |\nhelp: Rewrite as a literal\n\nINP001 File `tests\\test_card_action_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_card_action_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_card_action_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime\n5 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_card_action_service.py:5:21\n  |\n3 | from collections.abc import Iterable\n4 | from datetime import UTC, datetime\n5 | from pathlib import Path\n  |                     ^^^^\n6 |\n7 | import pytest\n  |\nhelp: Move into type-checking block\n\nANN202 Missing return type annotation for private function `_make_service`\n  --> tests\\test_card_action_service.py:47:5\n   |\n47 | def _make_service(tmp_path: Path):\n   |     ^^^^^^^^^^^^^\n48 |     storage = Storage(str(tmp_path / \"cards.db\"))\n49 |     dispatcher = events.EventDispatcher()\n   |\nhelp: Add return type annotation\n\nANN201 Missing return type annotation for public function `test_scan_completes_linked_task`\n  --> tests\\test_card_action_service.py:59:5\n   |\n59 | def test_scan_completes_linked_task(tmp_path: Path):\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n60 |     storage, repo, dispatcher, service = _make_service(tmp_path)\n61 |     task = Task.create(\"Demo task\")\n   |\nhelp: Add return type annotation: `None`\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:83:5\n   |\n82 |     saved = repo.get(task.id)\n83 |     assert saved is not None\n   |     ^^^^^^\n84 |     assert saved.status == \"completed\"\n85 |     assert result.card_status == \"completed\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:84:5\n   |\n82 |     saved = repo.get(task.id)\n83 |     assert saved is not None\n84 |     assert saved.status == \"completed\"\n   |     ^^^^^^\n85 |     assert result.card_status == \"completed\"\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:85:5\n   |\n83 |     assert saved is not None\n84 |     assert saved.status == \"completed\"\n85 |     assert result.card_status == \"completed\"\n   |     ^^^^^^\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:86:5\n   |\n84 |     assert saved.status == \"completed\"\n85 |     assert result.card_status == \"completed\"\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n   |     ^^^^^^\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:87:5\n   |\n85 |     assert result.card_status == \"completed\"\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n   |     ^^^^^^\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_card_action_service.py:88:5\n   |\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_card_action_service.py:88:5\n   |\n86 |     assert result.metadata[\"source\"] == \"qr_reader\"\n87 |     assert result.metadata[\"task_update\"] == \"complete\"\n88 |     assert dispatcher_events and dispatcher_events[0].card_id == card.id\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nANN201 Missing return type annotation for public function `test_scan_without_task_tag_marks_card`\n  --> tests\\test_card_action_service.py:91:5\n   |\n91 | def test_scan_without_task_tag_marks_card(tmp_path: Path):\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n92 |     storage, _, _, service = _make_service(tmp_path)\n93 |     card = Notecard(\n   |\nhelp: Add return type annotation: `None`\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:104:5\n    |\n102 |     result = service.handle_scan(card.id, task_update=\"none\")\n103 |\n104 |     assert result.card_status == \"acted\"\n    |     ^^^^^^\n105 |     assert result.task.updated is False\n106 |     stored = storage.get_card(card.id)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:105:5\n    |\n104 |     assert result.card_status == \"acted\"\n105 |     assert result.task.updated is False\n    |     ^^^^^^\n106 |     stored = storage.get_card(card.id)\n107 |     assert stored is not None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:107:5\n    |\n105 |     assert result.task.updated is False\n106 |     stored = storage.get_card(card.id)\n107 |     assert stored is not None\n    |     ^^^^^^\n108 |     assert stored.status == \"acted\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:108:5\n    |\n106 |     stored = storage.get_card(card.id)\n107 |     assert stored is not None\n108 |     assert stored.status == \"acted\"\n    |     ^^^^^^\n    |\n\nANN201 Missing return type annotation for public function `test_scan_missing_card_raises`\n   --> tests\\test_card_action_service.py:111:5\n    |\n111 | def test_scan_missing_card_raises(tmp_path: Path):\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |     _, _, _, service = _make_service(tmp_path)\n113 |     with pytest.raises(CardNotFoundError):\n    |\nhelp: Add return type annotation: `None`\n\nANN201 Missing return type annotation for public function `test_scan_with_missing_task_records_error`\n   --> tests\\test_card_action_service.py:117:5\n    |\n117 | def test_scan_with_missing_task_records_error(tmp_path: Path):\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n118 |     storage, _, _, service = _make_service(tmp_path)\n119 |     card = Notecard(\n    |\nhelp: Add return type annotation: `None`\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:130:5\n    |\n128 |     result = service.handle_scan(card.id)\n129 |\n130 |     assert result.task.error == \"task_not_found\"\n    |     ^^^^^^\n131 |     assert result.card_status == \"acted\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_card_action_service.py:131:5\n    |\n130 |     assert result.task.error == \"task_not_found\"\n131 |     assert result.card_status == \"acted\"\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_cli_ai_briefing.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_cli_ai_briefing.py:1:1\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_cli_ai_briefing.py:4:21\n  |\n3 | from datetime import UTC, datetime, timedelta\n4 | from pathlib import Path\n  |                     ^^^^\n5 | from typing import Any, Protocol, cast\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `pytest` into a type-checking block\n --> tests\\test_cli_ai_briefing.py:7:8\n  |\n5 | from typing import Any, Protocol, cast\n6 |\n7 | import pytest\n  |        ^^^^^^\n8 | from typer.testing import CliRunner  # type: ignore[import-not-found]\n9 | from x_legatus_acta_schedae_x.core.domain.review import ReviewRecord\n  |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `app`\n  --> tests\\test_cli_ai_briefing.py:40:27\n   |\n39 | class _CliRunner(Protocol):\n40 |     def invoke(self, app: Any, args: list[str]) -> _CliResult: ...\n   |                           ^^^\n   |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_ai_briefing.py:100:5\n    |\n 98 |     ctx = StubContext(briefing)\n 99 |\n100 |     from x_legatus_acta_schedae_x import interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n101 |\n102 |     interface.cli.main  # type: ignore[attr-defined]\n    |\n\nB018 Found useless expression. Either assign it to a variable or remove it.\n   --> tests\\test_cli_ai_briefing.py:102:5\n    |\n100 |     from x_legatus_acta_schedae_x import interface\n101 |\n102 |     interface.cli.main  # type: ignore[attr-defined]\n    |     ^^^^^^^^^^^^^^^^^^\n103 |\n104 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_ai_briefing.py:104:5\n    |\n102 |     interface.cli.main  # type: ignore[attr-defined]\n103 |\n104 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n105 |\n106 |     monkeypatch.setattr(cli_main, \"_ctx\", lambda: ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:114:5\n    |\n112 |     )\n113 |\n114 |     assert result.exit_code == 0\n    |     ^^^^^^\n115 |     assert \"AI Daily Briefing\" in result.stdout\n116 |     assert \"Pending:   4\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:115:5\n    |\n114 |     assert result.exit_code == 0\n115 |     assert \"AI Daily Briefing\" in result.stdout\n    |     ^^^^^^\n116 |     assert \"Pending:   4\" in result.stdout\n117 |     assert \"delegate follow-up\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:116:5\n    |\n114 |     assert result.exit_code == 0\n115 |     assert \"AI Daily Briefing\" in result.stdout\n116 |     assert \"Pending:   4\" in result.stdout\n    |     ^^^^^^\n117 |     assert \"delegate follow-up\" in result.stdout\n118 |     assert output_path.exists()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:117:5\n    |\n115 |     assert \"AI Daily Briefing\" in result.stdout\n116 |     assert \"Pending:   4\" in result.stdout\n117 |     assert \"delegate follow-up\" in result.stdout\n    |     ^^^^^^\n118 |     assert output_path.exists()\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:118:5\n    |\n116 |     assert \"Pending:   4\" in result.stdout\n117 |     assert \"delegate follow-up\" in result.stdout\n118 |     assert output_path.exists()\n    |     ^^^^^^\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:120:5\n    |\n118 |     assert output_path.exists()\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n    |     ^^^^^^\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:121:5\n    |\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n    |     ^^^^^^\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> tests\\test_cli_ai_briefing.py:121:57\n    |\n119 |     written = output_path.read_text(encoding=\"utf-8\")\n120 |     assert \"AI Daily Briefing\" in written\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n    |                                                         ^\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:122:5\n    |\n120 |     assert \"AI Daily Briefing\" in written\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n    |     ^^^^^^\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_ai_briefing.py:123:5\n    |\n121 |     assert ctx.ai_briefing_service.calls[0][\"limit\"] == 3\n122 |     assert ctx.telemetry.events[0][0] == \"ai.briefing\"\n123 |     assert ctx.telemetry.events[0][1][\"guidance\"] == 1\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_cli_collab.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_cli_collab.py:1:1\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `app`\n  --> tests\\test_cli_collab.py:94:27\n   |\n93 | class _CliRunner(Protocol):\n94 |     def invoke(self, app: Any, args: list[str]) -> _CliResult: ...\n   |                           ^^^\n   |\n\nPYI034 `__enter__` methods in classes like `StubPushClient` usually return `self` at runtime\n   --> tests\\test_cli_collab.py:102:9\n    |\n100 |         self.uploads = uploads\n101 |\n102 |     def __enter__(self) -> StubPushClient:\n    |         ^^^^^^^^^\n103 |         return self\n    |\nhelp: Use `Self` as return type\n\nANN001 Missing type annotation for function argument `exc_type`\n   --> tests\\test_cli_collab.py:105:24\n    |\n103 |         return self\n104 |\n105 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                        ^^^^^^^^\n106 |         return None\n    |\n\nANN001 Missing type annotation for function argument `exc`\n   --> tests\\test_cli_collab.py:105:34\n    |\n103 |         return self\n104 |\n105 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                  ^^^\n106 |         return None\n    |\n\nANN001 Missing type annotation for function argument `tb`\n   --> tests\\test_cli_collab.py:105:39\n    |\n103 |         return self\n104 |\n105 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                       ^^\n106 |         return None\n    |\n\nPYI034 `__enter__` methods in classes like `StubPullClient` usually return `self` at runtime\n   --> tests\\test_cli_collab.py:139:9\n    |\n137 |         self.fetch_specific: list[str] = []\n138 |\n139 |     def __enter__(self) -> StubPullClient:\n    |         ^^^^^^^^^\n140 |         return self\n    |\nhelp: Use `Self` as return type\n\nANN001 Missing type annotation for function argument `exc_type`\n   --> tests\\test_cli_collab.py:142:24\n    |\n140 |         return self\n141 |\n142 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                        ^^^^^^^^\n143 |         return None\n    |\n\nANN001 Missing type annotation for function argument `exc`\n   --> tests\\test_cli_collab.py:142:34\n    |\n140 |         return self\n141 |\n142 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                  ^^^\n143 |         return None\n    |\n\nANN001 Missing type annotation for function argument `tb`\n   --> tests\\test_cli_collab.py:142:39\n    |\n140 |         return self\n141 |\n142 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                       ^^\n143 |         return None\n    |\n\nARG002 Unused method argument: `args`\n   --> tests\\test_cli_collab.py:145:28\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                            ^^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:145:34\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                                  ^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nARG002 Unused method argument: `kwargs`\n   --> tests\\test_cli_collab.py:145:41\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                                         ^^^^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:145:49\n    |\n143 |         return None\n144 |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n    |                                                 ^^^\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> tests\\test_cli_collab.py:146:15\n    |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n147 |\n148 |     def fetch_latest_bundle(self) -> BundleDownloadResult | None:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> tests\\test_cli_collab.py:146:30\n    |\n145 |     def push_bundle(self, *args: Any, **kwargs: Any) -> None:\n146 |         raise AssertionError(\"push_bundle should not be called in pull test\")\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n147 |\n148 |     def fetch_latest_bundle(self) -> BundleDownloadResult | None:\n    |\nhelp: Assign to variable; remove string literal\n\nPYI034 `__enter__` methods in classes like `StubHistoryClient` usually return `self` at runtime\n   --> tests\\test_cli_collab.py:175:9\n    |\n173 |         self._prune_remaining = prune_remaining\n174 |\n175 |     def __enter__(self) -> StubHistoryClient:\n    |         ^^^^^^^^^\n176 |         return self\n    |\nhelp: Use `Self` as return type\n\nANN001 Missing type annotation for function argument `exc_type`\n   --> tests\\test_cli_collab.py:178:24\n    |\n176 |         return self\n177 |\n178 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                        ^^^^^^^^\n179 |         return None\n    |\n\nANN001 Missing type annotation for function argument `exc`\n   --> tests\\test_cli_collab.py:178:34\n    |\n176 |         return self\n177 |\n178 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                  ^^^\n179 |         return None\n    |\n\nANN001 Missing type annotation for function argument `tb`\n   --> tests\\test_cli_collab.py:178:39\n    |\n176 |         return self\n177 |\n178 |     def __exit__(self, exc_type, exc, tb) -> None:  # type: ignore[override]\n    |                                       ^^\n179 |         return None\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:241:19\n    |\n239 |     uploads: list[dict[str, Any]] = []\n240 |\n241 |     def _ctx() -> Any:\n    |                   ^^^\n242 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:245:25\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:245:31\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:245:38\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:245:46\n    |\n244 |     def _client_factory(\n245 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n246 |     ) -> StubPushClient:\n247 |         return StubPushClient(base_url, uploads)\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:249:5\n    |\n247 |         return StubPushClient(base_url, uploads)\n248 |\n249 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n250 |\n251 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:270:5\n    |\n268 |     )\n269 |\n270 |     assert result.exit_code == 0\n    |     ^^^^^^\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:271:5\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n    |     ^^^^^^\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:272:5\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |     ^^^^^^\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:272:5\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |\nhelp: Break down assertion into multiple parts\n\nS105 Possible hardcoded password assigned to: \"passphrase\"\n   --> tests\\test_cli_collab.py:272:68\n    |\n270 |     assert result.exit_code == 0\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n    |                                                                    ^^^^^^^^\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:273:5\n    |\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n    |     ^^^^^^\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> tests\\test_cli_collab.py:273:43\n    |\n271 |     assert \"Uploaded bundle bundle-123\" in result.stdout\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n    |                                           ^\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:274:5\n    |\n272 |     assert service.exports and service.exports[0][\"passphrase\"] == \"secret\"\n273 |     assert service.exports[0][\"limit\"] == 3\n274 |     assert uploads\n    |     ^^^^^^\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:276:5\n    |\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n    |     ^^^^^^\n277 |     assert metadata[\"include_completed\"] is True\n278 |     ai_meta = metadata[\"ai_summary\"]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_cli_collab.py:276:33\n    |\n274 |     assert uploads\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n    |                                 ^\n277 |     assert metadata[\"include_completed\"] is True\n278 |     ai_meta = metadata[\"ai_summary\"]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:277:5\n    |\n275 |     metadata = uploads[0][\"metadata\"]\n276 |     assert metadata[\"tasks\"] == 2\n277 |     assert metadata[\"include_completed\"] is True\n    |     ^^^^^^\n278 |     ai_meta = metadata[\"ai_summary\"]\n279 |     assert ai_meta[\"pending\"] == summary.pending\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:279:5\n    |\n277 |     assert metadata[\"include_completed\"] is True\n278 |     ai_meta = metadata[\"ai_summary\"]\n279 |     assert ai_meta[\"pending\"] == summary.pending\n    |     ^^^^^^\n280 |     assert ai_meta[\"completed\"] == summary.completed\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:280:5\n    |\n278 |     ai_meta = metadata[\"ai_summary\"]\n279 |     assert ai_meta[\"pending\"] == summary.pending\n280 |     assert ai_meta[\"completed\"] == summary.completed\n    |     ^^^^^^\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n282 |     assert ai_meta[\"top_tags\"] == summary.top_tags\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:281:5\n    |\n279 |     assert ai_meta[\"pending\"] == summary.pending\n280 |     assert ai_meta[\"completed\"] == summary.completed\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n    |     ^^^^^^\n282 |     assert ai_meta[\"top_tags\"] == summary.top_tags\n283 |     expected_due = (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:282:5\n    |\n280 |     assert ai_meta[\"completed\"] == summary.completed\n281 |     assert ai_meta[\"overdue\"] == summary.overdue\n282 |     assert ai_meta[\"top_tags\"] == summary.top_tags\n    |     ^^^^^^\n283 |     expected_due = (\n284 |         summary.upcoming[0].due.isoformat()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:288:5\n    |\n286 |         else None\n287 |     )\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n    |     ^^^^^^\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:289:5\n    |\n287 |     )\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n    |     ^^^^^^\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:290:5\n    |\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n    |     ^^^^^^\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:290:5\n    |\n288 |     assert ai_meta[\"upcoming\"][0][\"due\"] == expected_due\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:291:5\n    |\n289 |     assert uploads[0][\"source\"] == \"unit-test\"\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n    |     ^^^^^^\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:292:5\n    |\n290 |     assert telemetry.events and telemetry.events[0][0] == \"collab.push\"\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n    |     ^^^^^^\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n294 |     assert telemetry.events[0][1][\"overdue\"] == summary.overdue\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:293:5\n    |\n291 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-123\"\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n    |     ^^^^^^\n294 |     assert telemetry.events[0][1][\"overdue\"] == summary.overdue\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:294:5\n    |\n292 |     assert telemetry.events[0][1][\"pending\"] == summary.pending\n293 |     assert telemetry.events[0][1][\"completed\"] == summary.completed\n294 |     assert telemetry.events[0][1][\"overdue\"] == summary.overdue\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:321:19\n    |\n319 |     )\n320 |\n321 |     def _ctx() -> Any:\n    |                   ^^^\n322 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:325:25\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:325:31\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:325:38\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:325:46\n    |\n324 |     def _client_factory(\n325 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n326 |     ) -> StubPullClient:\n327 |         return StubPullClient(base_url, download)\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:329:5\n    |\n327 |         return StubPullClient(base_url, download)\n328 |\n329 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n330 |\n331 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:347:5\n    |\n345 |     )\n346 |\n347 |     assert result.exit_code == 0\n    |     ^^^^^^\n348 |     assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n349 |     assert (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:348:5\n    |\n347 |     assert result.exit_code == 0\n348 |     assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n    |     ^^^^^^\n349 |     assert (\n350 |         service.import_calls\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:349:5\n    |\n347 |     assert result.exit_code == 0\n348 |     assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n349 |     assert (\n    |     ^^^^^^\n350 |         service.import_calls\n351 |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:349:5\n    |\n347 |       assert result.exit_code == 0\n348 |       assert \"Imported 1 task(s) from bundle bundle-55\" in result.stdout\n349 | /     assert (\n350 | |         service.import_calls\n351 | |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n352 | |     )\n    | |_____^\n353 |       assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |       assert service.import_calls[0][\"payload\"] == payload\n    |\nhelp: Break down assertion into multiple parts\n\nS105 Possible hardcoded password assigned to: \"passphrase\"\n   --> tests\\test_cli_collab.py:351:54\n    |\n349 |     assert (\n350 |         service.import_calls\n351 |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n    |                                                      ^^^^^^^^\n352 |     )\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:353:5\n    |\n351 |         and service.import_calls[0][\"passphrase\"] == \"secret\"\n352 |     )\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n    |     ^^^^^^\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:354:5\n    |\n352 |     )\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |     assert service.import_calls[0][\"payload\"] == payload\n    |     ^^^^^^\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:355:5\n    |\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n    |     ^^^^^^\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:355:5\n    |\n353 |     assert service.import_calls[0][\"overwrite_existing\"] is True\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:356:5\n    |\n354 |     assert service.import_calls[0][\"payload\"] == payload\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n    |     ^^^^^^\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:357:5\n    |\n355 |     assert telemetry.events and telemetry.events[0][0] == \"collab.pull\"\n356 |     assert telemetry.events[0][1][\"bundle_id\"] == \"bundle-55\"\n357 |     assert telemetry.events[0][1][\"from_latest\"] is True\n    |     ^^^^^^\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:392:19\n    |\n390 |     clients: list[StubHistoryClient] = []\n391 |\n392 |     def _ctx() -> Any:\n    |                   ^^^\n393 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:396:25\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:396:31\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:396:38\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:396:46\n    |\n395 |     def _client_factory(\n396 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n397 |     ) -> StubHistoryClient:\n398 |         client = StubHistoryClient(base_url, bundles)\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:402:5\n    |\n400 |         return client\n401 |\n402 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n403 |\n404 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:419:5\n    |\n417 |     )\n418 |\n419 |     assert result.exit_code == 0\n    |     ^^^^^^\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n421 |     assert \"bundle-1\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:420:5\n    |\n419 |     assert result.exit_code == 0\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n    |     ^^^^^^\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:421:5\n    |\n419 |     assert result.exit_code == 0\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n421 |     assert \"bundle-1\" in result.stdout\n    |     ^^^^^^\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:422:5\n    |\n420 |     assert \"AI Daily Briefing\" not in result.stdout\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n    |     ^^^^^^\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:423:5\n    |\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n    |     ^^^^^^\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:423:5\n    |\n421 |     assert \"bundle-1\" in result.stdout\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:424:5\n    |\n422 |     assert '\"note\": \"demo\"' in result.stdout\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n    |     ^^^^^^\n425 |     assert clients and clients[0].limits == [1]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:425:5\n    |\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |     ^^^^^^\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:425:5\n    |\n423 |     assert telemetry.events and telemetry.events[0][0] == \"collab.history\"\n424 |     assert telemetry.events[0][1][\"count\"] == 1\n425 |     assert clients and clients[0].limits == [1]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Break down assertion into multiple parts\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `_ctx`\n   --> tests\\test_cli_collab.py:451:19\n    |\n449 |     clients: list[StubHistoryClient] = []\n450 |\n451 |     def _ctx() -> Any:\n    |                   ^^^\n452 |         return ctx\n    |\n\nARG001 Unused function argument: `args`\n   --> tests\\test_cli_collab.py:455:25\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                         ^^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n   --> tests\\test_cli_collab.py:455:31\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                               ^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nARG001 Unused function argument: `kwargs`\n   --> tests\\test_cli_collab.py:455:38\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                                      ^^^^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> tests\\test_cli_collab.py:455:46\n    |\n454 |     def _client_factory(\n455 |         base_url: str, *args: Any, **kwargs: Any\n    |                                              ^^^\n456 |     ) -> StubHistoryClient:\n457 |         client = StubHistoryClient(\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> tests\\test_cli_collab.py:466:5\n    |\n464 |         return client\n465 |\n466 |     import x_legatus_acta_schedae_x.interface.cli.main as cli_main\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n467 |\n468 |     monkeypatch.setattr(cli_main, \"_ctx\", _ctx)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:483:5\n    |\n481 |     )\n482 |\n483 |     assert result.exit_code == 0\n    |     ^^^^^^\n484 |     assert \"Removed 1 bundle\" in result.stdout\n485 |     assert \"bundle-9\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:484:5\n    |\n483 |     assert result.exit_code == 0\n484 |     assert \"Removed 1 bundle\" in result.stdout\n    |     ^^^^^^\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:485:5\n    |\n483 |     assert result.exit_code == 0\n484 |     assert \"Removed 1 bundle\" in result.stdout\n485 |     assert \"bundle-9\" in result.stdout\n    |     ^^^^^^\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:486:5\n    |\n484 |     assert \"Removed 1 bundle\" in result.stdout\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n    |     ^^^^^^\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:487:5\n    |\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n    |     ^^^^^^\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:487:5\n    |\n485 |     assert \"bundle-9\" in result.stdout\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:488:5\n    |\n486 |     assert \"Remaining bundles\" in result.stdout\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n    |     ^^^^^^\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n490 |     assert clients and clients[0].prune_calls == [2]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:489:5\n    |\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |     ^^^^^^\n490 |     assert clients and clients[0].prune_calls == [2]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_cli_collab.py:489:51\n    |\n487 |     assert telemetry.events and telemetry.events[0][0] == \"collab.prune\"\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n    |                                                   ^\n490 |     assert clients and clients[0].prune_calls == [2]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_cli_collab.py:490:5\n    |\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n490 |     assert clients and clients[0].prune_calls == [2]\n    |     ^^^^^^\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_cli_collab.py:490:5\n    |\n488 |     assert telemetry.events[0][1][\"removed\"] == 1\n489 |     assert telemetry.events[0][1][\"remaining\"] == 2\n490 |     assert clients and clients[0].prune_calls == [2]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Break down assertion into multiple parts\n\nINP001 File `tests\\test_collaboration_hub.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_collaboration_hub.py:1:1\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_collaboration_hub.py:5:29\n  |\n3 | import base64\n4 | import json\n5 | from collections.abc import Mapping\n  |                             ^^^^^^^\n6 | from datetime import UTC, datetime\n7 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_collaboration_hub.py:7:21\n  |\n5 | from collections.abc import Mapping\n6 | from datetime import UTC, datetime\n7 | from pathlib import Path\n  |                     ^^^^\n8 | from typing import Any, cast\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:28:5\n   |\n27 |     latest = store.latest()\n28 |     assert latest is not None\n   |     ^^^^^^\n29 |     assert latest.bundle_id == stored.bundle_id\n30 |     assert latest.path.read_bytes() == payload\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:29:5\n   |\n27 |     latest = store.latest()\n28 |     assert latest is not None\n29 |     assert latest.bundle_id == stored.bundle_id\n   |     ^^^^^^\n30 |     assert latest.path.read_bytes() == payload\n31 |     fetched = store.get(stored.bundle_id)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:30:5\n   |\n28 |     assert latest is not None\n29 |     assert latest.bundle_id == stored.bundle_id\n30 |     assert latest.path.read_bytes() == payload\n   |     ^^^^^^\n31 |     fetched = store.get(stored.bundle_id)\n32 |     assert fetched is not None\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:32:5\n   |\n30 |     assert latest.path.read_bytes() == payload\n31 |     fetched = store.get(stored.bundle_id)\n32 |     assert fetched is not None\n   |     ^^^^^^\n33 |     assert fetched.bundle_id == stored.bundle_id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:33:5\n   |\n31 |     fetched = store.get(stored.bundle_id)\n32 |     assert fetched is not None\n33 |     assert fetched.bundle_id == stored.bundle_id\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:43:5\n   |\n41 |     bundles = store.list()\n42 |\n43 |     assert len(bundles) == 2\n   |     ^^^^^^\n44 |     assert bundles[0].bundle_id == second.bundle_id\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n  --> tests\\test_collaboration_hub.py:43:28\n   |\n41 |     bundles = store.list()\n42 |\n43 |     assert len(bundles) == 2\n   |                            ^\n44 |     assert bundles[0].bundle_id == second.bundle_id\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:44:5\n   |\n43 |     assert len(bundles) == 2\n44 |     assert bundles[0].bundle_id == second.bundle_id\n   |     ^^^^^^\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:45:5\n   |\n43 |     assert len(bundles) == 2\n44 |     assert bundles[0].bundle_id == second.bundle_id\n45 |     assert bundles[0].stored_at >= bundles[1].stored_at\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:56:5\n   |\n54 |     removed = store.prune(keep=2)\n55 |\n56 |     assert len(removed) == 1\n   |     ^^^^^^\n57 |     assert removed[0].bundle_id == first.bundle_id\n58 |     remaining = store.list()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:57:5\n   |\n56 |     assert len(removed) == 1\n57 |     assert removed[0].bundle_id == first.bundle_id\n   |     ^^^^^^\n58 |     remaining = store.list()\n59 |     assert [bundle.bundle_id for bundle in remaining] == [\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_hub.py:59:5\n   |\n57 |     assert removed[0].bundle_id == first.bundle_id\n58 |     remaining = store.list()\n59 |     assert [bundle.bundle_id for bundle in remaining] == [\n   |     ^^^^^^\n60 |         third.bundle_id,\n61 |         second.bundle_id,\n   |\n\nC901 `test_hub_client_push_and_pull` is too complex (12 > 10)\n  --> tests\\test_collaboration_hub.py:65:5\n   |\n65 | def test_hub_client_push_and_pull(tmp_path: Path) -> None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n66 |     bundle_path = tmp_path / \"payload.json\"\n67 |     bundle_bytes = b'{\"hello\": \"world\"}'\n   |\n\nPLR0915 Too many statements (64 > 50)\n  --> tests\\test_collaboration_hub.py:65:5\n   |\n65 | def test_hub_client_push_and_pull(tmp_path: Path) -> None:\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n66 |     bundle_path = tmp_path / \"payload.json\"\n67 |     bundle_bytes = b'{\"hello\": \"world\"}'\n   |\n\nC901 `_handler` is too complex (11 > 10)\n  --> tests\\test_collaboration_hub.py:72:9\n   |\n70 |     state: dict[str, dict[str, object]] = {}\n71 |\n72 |     def _handler(request: httpx.Request) -> httpx.Response:\n   |         ^^^^^^^^\n73 |         if (\n74 |             request.method == \"POST\"\n   |\n\nPLR0911 Too many return statements (8 > 6)\n  --> tests\\test_collaboration_hub.py:72:9\n   |\n70 |     state: dict[str, dict[str, object]] = {}\n71 |\n72 |     def _handler(request: httpx.Request) -> httpx.Response:\n   |         ^^^^^^^^\n73 |         if (\n74 |             request.method == \"POST\"\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:191:9\n    |\n189 |             bundle_path, source=\"tester\", metadata={\"note\": \"demo\"}\n190 |         )\n191 |         assert upload.bundle_id == \"bundle-1\"\n    |         ^^^^^^\n192 |         assert upload.size == len(bundle_bytes)\n193 |         assert upload.metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:192:9\n    |\n190 |         )\n191 |         assert upload.bundle_id == \"bundle-1\"\n192 |         assert upload.size == len(bundle_bytes)\n    |         ^^^^^^\n193 |         assert upload.metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:193:9\n    |\n191 |         assert upload.bundle_id == \"bundle-1\"\n192 |         assert upload.size == len(bundle_bytes)\n193 |         assert upload.metadata == {\"note\": \"demo\"}\n    |         ^^^^^^\n194 |\n195 |         history: list[BundleUploadResult] = client.list_bundles(limit=5)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:196:9\n    |\n195 |         history: list[BundleUploadResult] = client.list_bundles(limit=5)\n196 |         assert len(history) == 1\n    |         ^^^^^^\n197 |         assert history[0].bundle_id == upload.bundle_id\n198 |         assert history[0].metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:197:9\n    |\n195 |         history: list[BundleUploadResult] = client.list_bundles(limit=5)\n196 |         assert len(history) == 1\n197 |         assert history[0].bundle_id == upload.bundle_id\n    |         ^^^^^^\n198 |         assert history[0].metadata == {\"note\": \"demo\"}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:198:9\n    |\n196 |         assert len(history) == 1\n197 |         assert history[0].bundle_id == upload.bundle_id\n198 |         assert history[0].metadata == {\"note\": \"demo\"}\n    |         ^^^^^^\n199 |\n200 |         download = client.fetch_latest_bundle()\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:201:9\n    |\n200 |         download = client.fetch_latest_bundle()\n201 |         assert download is not None\n    |         ^^^^^^\n202 |         assert download.bundle_id == upload.bundle_id\n203 |         assert download.payload == bundle_bytes\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:202:9\n    |\n200 |         download = client.fetch_latest_bundle()\n201 |         assert download is not None\n202 |         assert download.bundle_id == upload.bundle_id\n    |         ^^^^^^\n203 |         assert download.payload == bundle_bytes\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:203:9\n    |\n201 |         assert download is not None\n202 |         assert download.bundle_id == upload.bundle_id\n203 |         assert download.payload == bundle_bytes\n    |         ^^^^^^\n204 |\n205 |         fetched = client.fetch_bundle(upload.bundle_id)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:206:9\n    |\n205 |         fetched = client.fetch_bundle(upload.bundle_id)\n206 |         assert fetched is not None\n    |         ^^^^^^\n207 |         assert fetched.bundle_id == upload.bundle_id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:207:9\n    |\n205 |         fetched = client.fetch_bundle(upload.bundle_id)\n206 |         assert fetched is not None\n207 |         assert fetched.bundle_id == upload.bundle_id\n    |         ^^^^^^\n208 |\n209 |         removed, remaining = client.prune_bundles(keep=0)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:210:9\n    |\n209 |         removed, remaining = client.prune_bundles(keep=0)\n210 |         assert len(removed) == 1\n    |         ^^^^^^\n211 |         assert removed[0].bundle_id == upload.bundle_id\n212 |         assert remaining == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:211:9\n    |\n209 |         removed, remaining = client.prune_bundles(keep=0)\n210 |         assert len(removed) == 1\n211 |         assert removed[0].bundle_id == upload.bundle_id\n    |         ^^^^^^\n212 |         assert remaining == 0\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_hub.py:212:9\n    |\n210 |         assert len(removed) == 1\n211 |         assert removed[0].bundle_id == upload.bundle_id\n212 |         assert remaining == 0\n    |         ^^^^^^\n    |\n\nINP001 File `tests\\test_collaboration_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_collaboration_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_collaboration_service.py:4:29\n  |\n3 | import json\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime\n6 | from pathlib import Path\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `pathlib.Path` into a type-checking block\n --> tests\\test_collaboration_service.py:6:21\n  |\n4 | from collections.abc import Iterable\n5 | from datetime import UTC, datetime\n6 | from pathlib import Path\n  |                     ^^^^\n7 |\n8 | import pytest\n  |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:60:5\n   |\n58 |     )\n59 |\n60 |     assert result.count == 1\n   |     ^^^^^^\n61 |     assert result.path.exists()\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:61:5\n   |\n60 |     assert result.count == 1\n61 |     assert result.path.exists()\n   |     ^^^^^^\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n63 |     assert payload[\"tasks\"] == 1\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:63:5\n   |\n61 |     assert result.path.exists()\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n63 |     assert payload[\"tasks\"] == 1\n   |     ^^^^^^\n64 |     assert payload.get(\"ciphertext\")\n65 |     assert payload[\"ciphertext\"] != json.dumps([{\"id\": task.id}])\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:64:5\n   |\n62 |     payload = json.loads(result.path.read_text(encoding=\"utf-8\"))\n63 |     assert payload[\"tasks\"] == 1\n64 |     assert payload.get(\"ciphertext\")\n   |     ^^^^^^\n65 |     assert payload[\"ciphertext\"] != json.dumps([{\"id\": task.id}])\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:65:5\n   |\n63 |     assert payload[\"tasks\"] == 1\n64 |     assert payload.get(\"ciphertext\")\n65 |     assert payload[\"ciphertext\"] != json.dumps([{\"id\": task.id}])\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:89:5\n   |\n87 |     imported = target_service.import_tasks(export_path, \"secret\")\n88 |\n89 |     assert len(imported) == 1\n   |     ^^^^^^\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:91:5\n   |\n89 |     assert len(imported) == 1\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n   |     ^^^^^^\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_collaboration_service.py:91:5\n   |\n89 |     assert len(imported) == 1\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:92:5\n   |\n90 |     restored = target_repo.get(task.id)\n91 |     assert restored is not None and restored.description == task.description\n92 |     assert imported[0].tags == task.tags\n   |     ^^^^^^\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_collaboration_service.py:93:5\n   |\n91 |     assert restored is not None and restored.description == task.description\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |     ^^^^^^\n   |\n\nPT018 Assertion should be broken down into multiple parts\n  --> tests\\test_collaboration_service.py:93:5\n   |\n91 |     assert restored is not None and restored.description == task.description\n92 |     assert imported[0].tags == task.tags\n93 |     assert captured_events and captured_events[0].tasks[0].id == task.id\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:112:5\n    |\n110 |         export_path, \"secret\", overwrite_existing=False\n111 |     )\n112 |     assert len(imported) == 0\n    |     ^^^^^^\n113 |     stored = repo_updated.get(task.id)\n114 |     assert stored is not None and stored.description == \"Different\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:114:5\n    |\n112 |     assert len(imported) == 0\n113 |     stored = repo_updated.get(task.id)\n114 |     assert stored is not None and stored.description == \"Different\"\n    |     ^^^^^^\n115 |\n116 |     imported_overwrite = target_service.import_tasks(\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_collaboration_service.py:114:5\n    |\n112 |     assert len(imported) == 0\n113 |     stored = repo_updated.get(task.id)\n114 |     assert stored is not None and stored.description == \"Different\"\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n115 |\n116 |     imported_overwrite = target_service.import_tasks(\n    |\nhelp: Break down assertion into multiple parts\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:119:5\n    |\n117 |         export_path, \"secret\", overwrite_existing=True\n118 |     )\n119 |     assert len(imported_overwrite) == 1\n    |     ^^^^^^\n120 |     stored_overwrite = repo_updated.get(task.id)\n121 |     assert (\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_collaboration_service.py:121:5\n    |\n119 |     assert len(imported_overwrite) == 1\n120 |     stored_overwrite = repo_updated.get(task.id)\n121 |     assert (\n    |     ^^^^^^\n122 |         stored_overwrite is not None\n123 |         and stored_overwrite.description == \"Original\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> tests\\test_collaboration_service.py:121:5\n    |\n119 |       assert len(imported_overwrite) == 1\n120 |       stored_overwrite = repo_updated.get(task.id)\n121 | /     assert (\n122 | |         stored_overwrite is not None\n123 | |         and stored_overwrite.description == \"Original\"\n124 | |     )\n    | |_____^\n    |\nhelp: Break down assertion into multiple parts\n\nB017 Do not assert blind exception: `Exception`\n   --> tests\\test_collaboration_service.py:136:10\n    |\n135 |     target_service, _ = _make_service(InMemoryTaskRepository())\n136 |     with pytest.raises(Exception):\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n137 |         target_service.import_tasks(export_path, \"wrong\")\n    |\n\nPT011 `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception\n   --> tests\\test_collaboration_service.py:136:24\n    |\n135 |     target_service, _ = _make_service(InMemoryTaskRepository())\n136 |     with pytest.raises(Exception):\n    |                        ^^^^^^^^^\n137 |         target_service.import_tasks(export_path, \"wrong\")\n    |\n\nINP001 File `tests\\test_plugin_ai_assistant.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_plugin_ai_assistant.py:1:1\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_plugin_ai_assistant.py:10:55\n   |\n 9 | from x_legatus_acta_schedae_x.core.domain import events\n10 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n11 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n12 | from x_legatus_acta_schedae_x.core.services.ai_service import AIService\n   |\nhelp: Move into type-checking block\n\nPT009 Use a regular `assert` instead of unittest-style `assertTrue`\n  --> tests\\test_plugin_ai_assistant.py:75:9\n   |\n73 |         self.dispatcher.publish(scan_event)\n74 |\n75 |         self.assertTrue(self.suggestions_path.exists())\n   |         ^^^^^^^^^^^^^^^\n76 |         entries = [\n77 |             json.loads(line)\n   |\nhelp: Replace `assertTrue(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:84:9\n   |\n82 |         ]\n83 |         event_types = {entry[\"event\"] for entry in entries}\n84 |         self.assertIn(\"task_created\", event_types)\n   |         ^^^^^^^^^^^^^\n85 |         self.assertIn(\"tasks_imported\", event_types)\n86 |         self.assertIn(\"card_scanned\", event_types)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:85:9\n   |\n83 |         event_types = {entry[\"event\"] for entry in entries}\n84 |         self.assertIn(\"task_created\", event_types)\n85 |         self.assertIn(\"tasks_imported\", event_types)\n   |         ^^^^^^^^^^^^^\n86 |         self.assertIn(\"card_scanned\", event_types)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:86:9\n   |\n84 |         self.assertIn(\"task_created\", event_types)\n85 |         self.assertIn(\"tasks_imported\", event_types)\n86 |         self.assertIn(\"card_scanned\", event_types)\n   |         ^^^^^^^^^^^^^\n87 |\n88 |         summary_events = [\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:93:9\n   |\n91 |             if evt.startswith(\"plugin.ai_assistant\")\n92 |         ]\n93 |         self.assertIn(\"plugin.ai_assistant.task_created\", summary_events)\n   |         ^^^^^^^^^^^^^\n94 |         self.assertIn(\"plugin.ai_assistant.import_summary\", summary_events)\n95 |         self.assertIn(\"plugin.ai_assistant.card_followups\", summary_events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:94:9\n   |\n92 |         ]\n93 |         self.assertIn(\"plugin.ai_assistant.task_created\", summary_events)\n94 |         self.assertIn(\"plugin.ai_assistant.import_summary\", summary_events)\n   |         ^^^^^^^^^^^^^\n95 |         self.assertIn(\"plugin.ai_assistant.card_followups\", summary_events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_ai_assistant.py:95:9\n   |\n93 |         self.assertIn(\"plugin.ai_assistant.task_created\", summary_events)\n94 |         self.assertIn(\"plugin.ai_assistant.import_summary\", summary_events)\n95 |         self.assertIn(\"plugin.ai_assistant.card_followups\", summary_events)\n   |         ^^^^^^^^^^^^^\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nANN202 Missing return type annotation for private function `list`\n   --> tests\\test_plugin_ai_assistant.py:109:9\n    |\n107 |         return self._tasks.get(task_id)\n108 |\n109 |     def list(self, status: str | None = None):\n    |         ^^^^\n110 |         for task in self._tasks.values():\n111 |             if status and task.status != status:\n    |\nhelp: Add return type annotation\n\nINP001 File `tests\\test_plugin_calendar_sync.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_plugin_calendar_sync.py:1:1\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_calendar_sync.py:83:9\n   |\n81 |             if event.startswith(\"plugin.calendar_sync\")\n82 |         ]\n83 |         self.assertIn(\"plugin.calendar_sync.synced\", events)\n   |         ^^^^^^^^^^^^^\n84 |         self.assertIn(\"plugin.calendar_sync.reminder\", events)\n85 |         self.assertIn(\"plugin.calendar_sync.unscheduled\", events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_calendar_sync.py:84:9\n   |\n82 |         ]\n83 |         self.assertIn(\"plugin.calendar_sync.synced\", events)\n84 |         self.assertIn(\"plugin.calendar_sync.reminder\", events)\n   |         ^^^^^^^^^^^^^\n85 |         self.assertIn(\"plugin.calendar_sync.unscheduled\", events)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_plugin_calendar_sync.py:85:9\n   |\n83 |         self.assertIn(\"plugin.calendar_sync.synced\", events)\n84 |         self.assertIn(\"plugin.calendar_sync.reminder\", events)\n85 |         self.assertIn(\"plugin.calendar_sync.unscheduled\", events)\n   |         ^^^^^^^^^^^^^\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nANN202 Missing return type annotation for private function `list`\n   --> tests\\test_plugin_calendar_sync.py:103:9\n    |\n101 |         return self._tasks.get(task_id)\n102 |\n103 |     def list(self, status: str | None = None):\n    |         ^^^^\n104 |         for task in self._tasks.values():\n105 |             if status and task.status != status:\n    |\nhelp: Add return type annotation\n\nINP001 File `tests\\test_review_guidance_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_review_guidance_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_review_guidance_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.review.ReviewRecord` into a type-checking block\n  --> tests\\test_review_guidance_service.py:8:57\n   |\n 6 | from x_legatus_acta_schedae_x.core.domain import events\n 7 | from x_legatus_acta_schedae_x.core.domain.events import CardScanned\n 8 | from x_legatus_acta_schedae_x.core.domain.review import ReviewRecord\n   |                                                         ^^^^^^^^^^^^\n 9 | from x_legatus_acta_schedae_x.core.domain.task import Task\n10 | from x_legatus_acta_schedae_x.core.ports.review_repo import IReviewRepository\n   |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:129:5\n    |\n127 |     recommendations = guidance.generate(now=now, limit=2)\n128 |\n129 |     assert recommendations\n    |     ^^^^^^\n130 |     assert recommendations[0].task.id == high_task.id\n131 |     assert any(\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:130:5\n    |\n129 |     assert recommendations\n130 |     assert recommendations[0].task.id == high_task.id\n    |     ^^^^^^\n131 |     assert any(\n132 |         \"priority high\" in reason for reason in recommendations[0].reasons\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:131:5\n    |\n129 |     assert recommendations\n130 |     assert recommendations[0].task.id == high_task.id\n131 |     assert any(\n    |     ^^^^^^\n132 |         \"priority high\" in reason for reason in recommendations[0].reasons\n133 |     )\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:134:5\n    |\n132 |         \"priority high\" in reason for reason in recommendations[0].reasons\n133 |     )\n134 |     assert recommendations[0].suggested_action in {\n    |     ^^^^^^\n135 |         \"review then commit\",\n136 |         \"rescue overdue review\",\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:168:5\n    |\n166 |     recommendations = guidance.generate(now=now, limit=1)\n167 |\n168 |     assert recommendations\n    |     ^^^^^^\n169 |     rec = recommendations[0]\n170 |     assert rec.task.id == task.id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:170:5\n    |\n168 |     assert recommendations\n169 |     rec = recommendations[0]\n170 |     assert rec.task.id == task.id\n    |     ^^^^^^\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n172 |     assert rec.last_source == \"card_scan\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:171:5\n    |\n169 |     rec = recommendations[0]\n170 |     assert rec.task.id == task.id\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n    |     ^^^^^^\n172 |     assert rec.last_source == \"card_scan\"\n173 |     assert rec.last_reviewed_at is not None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:172:5\n    |\n170 |     assert rec.task.id == task.id\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n172 |     assert rec.last_source == \"card_scan\"\n    |     ^^^^^^\n173 |     assert rec.last_reviewed_at is not None\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:173:5\n    |\n171 |     assert any(\"recent card scan\" in reason for reason in rec.reasons)\n172 |     assert rec.last_source == \"card_scan\"\n173 |     assert rec.last_reviewed_at is not None\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:192:5\n    |\n191 |     recommendations = guidance.generate(now=now, limit=3)\n192 |     assert len(recommendations) == 3\n    |     ^^^^^^\n193 |     # Scores should be sorted descending\n194 |     scores = [item.score for item in recommendations]\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n   --> tests\\test_review_guidance_service.py:192:36\n    |\n191 |     recommendations = guidance.generate(now=now, limit=3)\n192 |     assert len(recommendations) == 3\n    |                                    ^\n193 |     # Scores should be sorted descending\n194 |     scores = [item.score for item in recommendations]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_guidance_service.py:195:5\n    |\n193 |     # Scores should be sorted descending\n194 |     scores = [item.score for item in recommendations]\n195 |     assert scores == sorted(scores, reverse=True)\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_review_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_review_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_review_service.py:3:29\n  |\n1 | from __future__ import annotations\n2 |\n3 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n4 | from datetime import UTC, datetime, timedelta\n  |\nhelp: Move into type-checking block\n\nPT013 Incorrect import of `pytest`; use `import pytest` instead\n --> tests\\test_review_service.py:6:1\n  |\n4 | from datetime import UTC, datetime, timedelta\n5 |\n6 | from pytest import approx, fixture  # type: ignore[import]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n7 | from x_legatus_acta_schedae_x.core.domain import events\n8 | from x_legatus_acta_schedae_x.core.domain.events import CardScanned\n  |\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.review.ReviewRecord` into a type-checking block\n  --> tests\\test_review_service.py:9:57\n   |\n 7 | from x_legatus_acta_schedae_x.core.domain import events\n 8 | from x_legatus_acta_schedae_x.core.domain.events import CardScanned\n 9 | from x_legatus_acta_schedae_x.core.domain.review import ReviewRecord\n   |                                                         ^^^^^^^^^^^^\n10 | from x_legatus_acta_schedae_x.core.domain.task import Task\n11 | from x_legatus_acta_schedae_x.core.ports.review_repo import IReviewRepository\n   |\nhelp: Move into type-checking block\n\nS101 Use of `assert` detected\n  --> tests\\test_review_service.py:83:5\n   |\n82 |     record = service.get_record(task.id)\n83 |     assert record is not None\n   |     ^^^^^^\n84 |     assert record.due_at == task.created\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_review_service.py:84:5\n   |\n82 |     record = service.get_record(task.id)\n83 |     assert record is not None\n84 |     assert record.due_at == task.created\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:99:5\n    |\n 97 |         task.id, quality=5, reviewed_at=first_review_time\n 98 |     )\n 99 |     assert approx(record.interval_days, rel=1e-3) == 1.0\n    |     ^^^^^^\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:100:5\n    |\n 98 |     )\n 99 |     assert approx(record.interval_days, rel=1e-3) == 1.0\n100 |     assert record.repetitions == 1\n    |     ^^^^^^\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:101:5\n    |\n 99 |     assert approx(record.interval_days, rel=1e-3) == 1.0\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n    |     ^^^^^^\n102 |     assert record.history[-1].quality == 5\n103 |     assert record.history[-1].source == \"manual\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:102:5\n    |\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n    |     ^^^^^^\n103 |     assert record.history[-1].source == \"manual\"\n104 |     assert record.history[-1].context == {}\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> tests\\test_review_service.py:102:42\n    |\n100 |     assert record.repetitions == 1\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n    |                                          ^\n103 |     assert record.history[-1].source == \"manual\"\n104 |     assert record.history[-1].context == {}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:103:5\n    |\n101 |     assert record.last_reviewed_at == first_review_time\n102 |     assert record.history[-1].quality == 5\n103 |     assert record.history[-1].source == \"manual\"\n    |     ^^^^^^\n104 |     assert record.history[-1].context == {}\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:104:5\n    |\n102 |     assert record.history[-1].quality == 5\n103 |     assert record.history[-1].source == \"manual\"\n104 |     assert record.history[-1].context == {}\n    |     ^^^^^^\n105 |\n106 |     second_time = first_review_time + timedelta(days=2)\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:108:5\n    |\n106 |     second_time = first_review_time + timedelta(days=2)\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n    |     ^^^^^^\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `6.0` with a constant variable\n   --> tests\\test_review_service.py:108:54\n    |\n106 |     second_time = first_review_time + timedelta(days=2)\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n    |                                                      ^^^\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:109:5\n    |\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n109 |     assert record.repetitions == 2\n    |     ^^^^^^\n110 |     assert record.history[-1].reviewed_at == second_time\n111 |     assert record.history[-1].source == \"manual\"\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   --> tests\\test_review_service.py:109:34\n    |\n107 |     record = service.record_review(task.id, quality=5, reviewed_at=second_time)\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n109 |     assert record.repetitions == 2\n    |                                  ^\n110 |     assert record.history[-1].reviewed_at == second_time\n111 |     assert record.history[-1].source == \"manual\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:110:5\n    |\n108 |     assert approx(record.interval_days, rel=1e-3) == 6.0\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n    |     ^^^^^^\n111 |     assert record.history[-1].source == \"manual\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:111:5\n    |\n109 |     assert record.repetitions == 2\n110 |     assert record.history[-1].reviewed_at == second_time\n111 |     assert record.history[-1].source == \"manual\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:124:5\n    |\n123 |     due_items = service.due_reviews(now=past + timedelta(days=2))\n124 |     assert len(due_items) == 1\n    |     ^^^^^^\n125 |     assert due_items[0].task.id == task.id\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:125:5\n    |\n123 |     due_items = service.due_reviews(now=past + timedelta(days=2))\n124 |     assert len(due_items) == 1\n125 |     assert due_items[0].task.id == task.id\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:137:5\n    |\n136 |     record = service.get_record(task.id)\n137 |     assert record is not None\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:151:5\n    |\n150 |     record = service.get_record(task.id)\n151 |     assert record is not None\n    |     ^^^^^^\n152 |     assert record.repetitions == 1\n153 |     last_entry = record.history[-1]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:152:5\n    |\n150 |     record = service.get_record(task.id)\n151 |     assert record is not None\n152 |     assert record.repetitions == 1\n    |     ^^^^^^\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:154:5\n    |\n152 |     assert record.repetitions == 1\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n    |     ^^^^^^\n155 |     assert last_entry.quality == 5\n156 |     assert \"description\" in last_entry.context\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:155:5\n    |\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n155 |     assert last_entry.quality == 5\n    |     ^^^^^^\n156 |     assert \"description\" in last_entry.context\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> tests\\test_review_service.py:155:34\n    |\n153 |     last_entry = record.history[-1]\n154 |     assert last_entry.source == \"task_completed\"\n155 |     assert last_entry.quality == 5\n    |                                  ^\n156 |     assert \"description\" in last_entry.context\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:156:5\n    |\n154 |     assert last_entry.source == \"task_completed\"\n155 |     assert last_entry.quality == 5\n156 |     assert \"description\" in last_entry.context\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:185:5\n    |\n184 |     record = service.get_record(task.id)\n185 |     assert record is not None\n    |     ^^^^^^\n186 |     assert record.repetitions == 1\n187 |     entry = record.history[-1]\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:186:5\n    |\n184 |     record = service.get_record(task.id)\n185 |     assert record is not None\n186 |     assert record.repetitions == 1\n    |     ^^^^^^\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:188:5\n    |\n186 |     assert record.repetitions == 1\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n    |     ^^^^^^\n189 |     assert entry.quality == 4\n190 |     assert entry.reviewed_at == timestamp\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:189:5\n    |\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n189 |     assert entry.quality == 4\n    |     ^^^^^^\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> tests\\test_review_service.py:189:29\n    |\n187 |     entry = record.history[-1]\n188 |     assert entry.source == \"card_scan\"\n189 |     assert entry.quality == 4\n    |                             ^\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:190:5\n    |\n188 |     assert entry.source == \"card_scan\"\n189 |     assert entry.quality == 4\n190 |     assert entry.reviewed_at == timestamp\n    |     ^^^^^^\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n192 |     assert entry.context[\"metadata\"][\"reader\"] == \"qrbot\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:191:5\n    |\n189 |     assert entry.quality == 4\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n    |     ^^^^^^\n192 |     assert entry.context[\"metadata\"][\"reader\"] == \"qrbot\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:192:5\n    |\n190 |     assert entry.reviewed_at == timestamp\n191 |     assert entry.context[\"card_id\"] == \"card-1\"\n192 |     assert entry.context[\"metadata\"][\"reader\"] == \"qrbot\"\n    |     ^^^^^^\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:215:5\n    |\n214 |     record = service.get_record(task.id)\n215 |     assert record is not None\n    |     ^^^^^^\n216 |     entry = record.history[-1]\n217 |     assert entry.source == \"card_scan\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:217:5\n    |\n215 |     assert record is not None\n216 |     entry = record.history[-1]\n217 |     assert entry.source == \"card_scan\"\n    |     ^^^^^^\n218 |     assert entry.quality == 1\n219 |     assert entry.context[\"task_error\"] == \"task_not_found\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:218:5\n    |\n216 |     entry = record.history[-1]\n217 |     assert entry.source == \"card_scan\"\n218 |     assert entry.quality == 1\n    |     ^^^^^^\n219 |     assert entry.context[\"task_error\"] == \"task_not_found\"\n    |\n\nS101 Use of `assert` detected\n   --> tests\\test_review_service.py:219:5\n    |\n217 |     assert entry.source == \"card_scan\"\n218 |     assert entry.quality == 1\n219 |     assert entry.context[\"task_error\"] == \"task_not_found\"\n    |     ^^^^^^\n    |\n\nINP001 File `tests\\test_scheduler_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_scheduler_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n --> tests\\test_scheduler_service.py:4:29\n  |\n3 | import unittest\n4 | from collections.abc import Callable, Iterable, Mapping\n  |                             ^^^^^^^^\n5 | from datetime import UTC, datetime, timedelta\n6 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_scheduler_service.py:4:39\n  |\n3 | import unittest\n4 | from collections.abc import Callable, Iterable, Mapping\n  |                                       ^^^^^^^^\n5 | from datetime import UTC, datetime, timedelta\n6 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Mapping` into a type-checking block\n --> tests\\test_scheduler_service.py:4:49\n  |\n3 | import unittest\n4 | from collections.abc import Callable, Iterable, Mapping\n  |                                                 ^^^^^^^\n5 | from datetime import UTC, datetime, timedelta\n6 | from typing import Any\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.events` into a type-checking block\n  --> tests\\test_scheduler_service.py:8:60\n   |\n 6 | from typing import Any\n 7 |\n 8 | from x_legatus_acta_schedae_x.core.domain import events as domain_events\n   |                                                            ^^^^^^^^^^^^^\n 9 | from x_legatus_acta_schedae_x.core.domain.events import (\n10 |     EventDispatcher,\n   |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_scheduler_service.py:13:55\n   |\n11 |     TaskReminderTriggered,\n12 | )\n13 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n14 | from x_legatus_acta_schedae_x.core.ports.scheduler import IScheduler\n15 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n   |\nhelp: Move into type-checking block\n\nC408 Unnecessary `tuple()` call (rewrite as a literal)\n  --> tests\\test_scheduler_service.py:74:52\n   |\n72 |         kwargs: dict[str, Any] | None = None,\n73 |     ) -> str:\n74 |         self.jobs[job_id] = (run_at, func, args or tuple(), kwargs or {})\n   |                                                    ^^^^^^^\n75 |         return job_id\n   |\nhelp: Rewrite as a literal\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n   --> tests\\test_scheduler_service.py:114:9\n    |\n112 |         task = self.task_service.add_task(\"Prepare deck\", due=due)\n113 |         job_id = f\"task-reminder-{task.id}\"\n114 |         self.assertIn(job_id, self.scheduler.jobs)\n    |         ^^^^^^^^^^^^^\n115 |         self.assertTrue(self.scheduler.started)\n    |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertTrue`\n   --> tests\\test_scheduler_service.py:115:9\n    |\n113 |         job_id = f\"task-reminder-{task.id}\"\n114 |         self.assertIn(job_id, self.scheduler.jobs)\n115 |         self.assertTrue(self.scheduler.started)\n    |         ^^^^^^^^^^^^^^^\n116 |\n117 |     def test_cancel_on_completion(self) -> None:\n    |\nhelp: Replace `assertTrue(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertNotIn`\n   --> tests\\test_scheduler_service.py:122:9\n    |\n120 |         self.task_service.complete_task(task.id)\n121 |         job_id = f\"task-reminder-{task.id}\"\n122 |         self.assertNotIn(job_id, self.scheduler.jobs)\n    |         ^^^^^^^^^^^^^^^^\n123 |\n124 |     def test_trigger_emits_event(self) -> None:\n    |\nhelp: Replace `assertNotIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n   --> tests\\test_scheduler_service.py:136:9\n    |\n134 |         job_id = f\"task-reminder-{task.id}\"\n135 |         self.scheduler.trigger(job_id)\n136 |         self.assertEqual(1, len(captured))\n    |         ^^^^^^^^^^^^^^^^\n137 |         self.assertEqual(task.id, captured[0].task.id)\n138 |         self.assertIn(\n    |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n   --> tests\\test_scheduler_service.py:137:9\n    |\n135 |         self.scheduler.trigger(job_id)\n136 |         self.assertEqual(1, len(captured))\n137 |         self.assertEqual(task.id, captured[0].task.id)\n    |         ^^^^^^^^^^^^^^^^\n138 |         self.assertIn(\n139 |             \"task.reminder.triggered\",\n    |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n   --> tests\\test_scheduler_service.py:138:9\n    |\n136 |         self.assertEqual(1, len(captured))\n137 |         self.assertEqual(task.id, captured[0].task.id)\n138 |         self.assertIn(\n    |         ^^^^^^^^^^^^^\n139 |             \"task.reminder.triggered\",\n140 |             [name for name, _ in self.telemetry.events],\n    |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nINP001 File `tests\\test_search_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_search_service.py:1:1\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n --> tests\\test_search_service.py:4:29\n  |\n3 | import unittest\n4 | from collections.abc import Iterable\n  |                             ^^^^^^^^\n5 | from datetime import UTC\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_search_service.py:8:55\n   |\n 7 | from x_legatus_acta_schedae_x.core.domain.events import EventDispatcher\n 8 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n 9 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n10 | from x_legatus_acta_schedae_x.core.services.search_service import SearchService\n   |\nhelp: Move into type-checking block\n\nANN201 Missing return type annotation for public function `now`\n  --> tests\\test_search_service.py:36:9\n   |\n34 |         return task\n35 |\n36 |     def now(self):\n   |         ^^^\n37 |         from datetime import datetime\n   |\nhelp: Add return type annotation\n\nPLC0415 `import` should be at the top-level of a file\n  --> tests\\test_search_service.py:37:9\n   |\n36 |     def now(self):\n37 |         from datetime import datetime\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n38 |\n39 |         return datetime.now(UTC)\n   |\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:57:9\n   |\n56 |         matches = self.search_service.search(text=\"report\")\n57 |         self.assertEqual(1, len(matches))\n   |         ^^^^^^^^^^^^^^^^\n58 |         self.assertIn(\"report\", matches[0].description.lower())\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_search_service.py:58:9\n   |\n56 |         matches = self.search_service.search(text=\"report\")\n57 |         self.assertEqual(1, len(matches))\n58 |         self.assertIn(\"report\", matches[0].description.lower())\n   |         ^^^^^^^^^^^^^\n59 |\n60 |     def test_search_filters_status_and_tags(self) -> None:\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:70:9\n   |\n69 |         completed = self.search_service.search(status=\"completed\")\n70 |         self.assertEqual([second.id], [task.id for task in completed])\n   |         ^^^^^^^^^^^^^^^^\n71 |\n72 |         tag_filtered = self.search_service.search(tags=[\"finance\"])\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:73:9\n   |\n72 |         tag_filtered = self.search_service.search(tags=[\"finance\"])\n73 |         self.assertEqual([first.id], [task.id for task in tag_filtered])\n   |         ^^^^^^^^^^^^^^^^\n74 |\n75 |     def test_search_updates_after_edit(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_search_service.py:80:9\n   |\n79 |         matches = self.search_service.search(text=\"retrospective\")\n80 |         self.assertEqual([task.id], [t.id for t in matches])\n   |         ^^^^^^^^^^^^^^^^\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nINP001 File `tests\\test_task_service.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_task_service.py:1:1\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.events` into a type-checking block\n --> tests\\test_task_service.py:7:60\n  |\n5 | from typing import cast\n6 |\n7 | from x_legatus_acta_schedae_x.core.domain import events as domain_events\n  |                                                            ^^^^^^^^^^^^^\n8 | from x_legatus_acta_schedae_x.core.domain.events import (\n9 |     EventDispatcher,\n  |\nhelp: Move into type-checking block\n\nTC002 Move third-party import `x_legatus_acta_schedae_x.core.domain.task.Task` into a type-checking block\n  --> tests\\test_task_service.py:12:55\n   |\n10 |     TaskUpdated,\n11 | )\n12 | from x_legatus_acta_schedae_x.core.domain.task import Task\n   |                                                       ^^^^\n13 | from x_legatus_acta_schedae_x.core.ports.task_repo import ITaskRepository\n14 | from x_legatus_acta_schedae_x.core.services.task_service import TaskService\n   |\nhelp: Move into type-checking block\n\nANN201 Missing return type annotation for public function `list`\n  --> tests\\test_task_service.py:28:9\n   |\n26 |         return self.storage.get(task_id)\n27 |\n28 |     def list(self, status: str | None = None):\n   |         ^^^^\n29 |         tasks = list(self.storage.values())\n30 |         if status:\n   |\nhelp: Add return type annotation\n\nANN201 Missing return type annotation for public function `now`\n  --> tests\\test_task_service.py:38:9\n   |\n36 |         return task\n37 |\n38 |     def now(self):\n   |         ^^^\n39 |         from datetime import datetime\n   |\nhelp: Add return type annotation\n\nPLC0415 `import` should be at the top-level of a file\n  --> tests\\test_task_service.py:39:9\n   |\n38 |     def now(self):\n39 |         from datetime import datetime\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n40 |\n41 |         return datetime.now(UTC)\n   |\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:53:9\n   |\n51 |         task = self.service.add_task(\"Original\")\n52 |         updated = self.service.edit_task(task.id, \"Rewritten\")\n53 |         self.assertEqual(\"Rewritten\", updated.description)\n   |         ^^^^^^^^^^^^^^^^\n54 |\n55 |     def test_defer_with_delta(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`\n  --> tests\\test_task_service.py:59:9\n   |\n57 |         updated = self.service.defer_task(task.id, delta=timedelta(days=2))\n58 |         due = updated.due\n59 |         self.assertIsNotNone(due)\n   |         ^^^^^^^^^^^^^^^^^^^^\n60 |         due_dt = cast(\"datetime\", due)\n61 |         self.assertGreaterEqual(due_dt, task.created)\n   |\nhelp: Replace `assertIsNotNone(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertGreaterEqual`\n  --> tests\\test_task_service.py:61:9\n   |\n59 |         self.assertIsNotNone(due)\n60 |         due_dt = cast(\"datetime\", due)\n61 |         self.assertGreaterEqual(due_dt, task.created)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n62 |\n63 |     def test_prioritize_task(self) -> None:\n   |\nhelp: Replace `assertGreaterEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:66:9\n   |\n64 |         task = self.service.add_task(\"Critical bug\")\n65 |         updated = self.service.prioritize_task(task.id, \"high\")\n66 |         self.assertEqual(\"high\", updated.priority)\n   |         ^^^^^^^^^^^^^^^^\n67 |\n68 |     def test_tag_management(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertIn`\n  --> tests\\test_task_service.py:71:9\n   |\n69 |         task = self.service.add_task(\"Tag me\")\n70 |         with_tags = self.service.add_tags(task.id, [\"alpha\", \"beta\"])\n71 |         self.assertIn(\"alpha\", with_tags.tags)\n   |         ^^^^^^^^^^^^^\n72 |         stripped = self.service.remove_tags(with_tags.id, [\"alpha\"])\n73 |         self.assertNotIn(\"alpha\", stripped.tags)\n   |\nhelp: Replace `assertIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertNotIn`\n  --> tests\\test_task_service.py:73:9\n   |\n71 |         self.assertIn(\"alpha\", with_tags.tags)\n72 |         stripped = self.service.remove_tags(with_tags.id, [\"alpha\"])\n73 |         self.assertNotIn(\"alpha\", stripped.tags)\n   |         ^^^^^^^^^^^^^^^^\n74 |         replaced = self.service.set_tags(stripped.id, [\"gamma\"])\n75 |         self.assertEqual({\"gamma\"}, set(replaced.tags))\n   |\nhelp: Replace `assertNotIn(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:75:9\n   |\n73 |         self.assertNotIn(\"alpha\", stripped.tags)\n74 |         replaced = self.service.set_tags(stripped.id, [\"gamma\"])\n75 |         self.assertEqual({\"gamma\"}, set(replaced.tags))\n   |         ^^^^^^^^^^^^^^^^\n76 |\n77 |     def test_task_updated_event_publishes(self) -> None:\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:87:9\n   |\n85 |         task = self.service.add_task(\"Event sample\")\n86 |         self.service.edit_task(task.id, \"Edited\")\n87 |         self.assertEqual(1, len(captured))\n   |         ^^^^^^^^^^^^^^^^\n88 |         self.assertEqual(\"Edited\", captured[0].description)\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nPT009 Use a regular `assert` instead of unittest-style `assertEqual`\n  --> tests\\test_task_service.py:88:9\n   |\n86 |         self.service.edit_task(task.id, \"Edited\")\n87 |         self.assertEqual(1, len(captured))\n88 |         self.assertEqual(\"Edited\", captured[0].description)\n   |         ^^^^^^^^^^^^^^^^\n   |\nhelp: Replace `assertEqual(...)` with `assert ...`\n\nINP001 File `tests\\test_tui_controller.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_tui_controller.py:1:1\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:23:5\n   |\n22 |     pending = controller.list_tasks(TaskFilters(status=\"pending\"))\n23 |     assert _find_row(pending, created.id)\n   |     ^^^^^^\n24 |\n25 |     controller.complete_task(created.id)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:27:5\n   |\n25 |     controller.complete_task(created.id)\n26 |     completed = controller.list_tasks(TaskFilters(status=\"completed\"))\n27 |     assert _find_row(completed, created.id)\n   |     ^^^^^^\n28 |\n29 |     search = controller.list_tasks(TaskFilters(text=\"demo\"))\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:30:5\n   |\n29 |     search = controller.list_tasks(TaskFilters(text=\"demo\"))\n30 |     assert _find_row(search, created.id)\n   |     ^^^^^^\n31 |\n32 |     tags = controller.available_tags()\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:33:5\n   |\n32 |     tags = controller.available_tags()\n33 |     assert \"demo\" in tags\n   |     ^^^^^^\n34 |     assert \"tui\" in tags\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:34:5\n   |\n32 |     tags = controller.available_tags()\n33 |     assert \"demo\" in tags\n34 |     assert \"tui\" in tags\n   |     ^^^^^^\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:48:5\n   |\n46 |     summary = controller.ai_summary(top_n=5)\n47 |\n48 |     assert summary.pending >= 1\n   |     ^^^^^^\n49 |     assert summary.completed >= 1\n50 |     assert summary.top_tags\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:49:5\n   |\n48 |     assert summary.pending >= 1\n49 |     assert summary.completed >= 1\n   |     ^^^^^^\n50 |     assert summary.top_tags\n51 |     assert any(item.task_id == focus.id for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:50:5\n   |\n48 |     assert summary.pending >= 1\n49 |     assert summary.completed >= 1\n50 |     assert summary.top_tags\n   |     ^^^^^^\n51 |     assert any(item.task_id == focus.id for item in summary.upcoming)\n   |\n\nS101 Use of `assert` detected\n  --> tests\\test_tui_controller.py:51:5\n   |\n49 |     assert summary.completed >= 1\n50 |     assert summary.top_tags\n51 |     assert any(item.task_id == focus.id for item in summary.upcoming)\n   |     ^^^^^^\n   |\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> tui\\__init__.py:3:1\n  |\n1 | \"\"\"Textual TUI entrypoints for Legatus Acta Schedae.\"\"\"\n2 |\n3 | from ..interface.tui.app import LegatusTuiApp, run\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"LegatusTuiApp\", \"run\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTID252 Prefer absolute imports over relative imports from parent modules\n --> tui\\__init__.py:3:1\n  |\n1 | \"\"\"Textual TUI entrypoints for Legatus Acta Schedae.\"\"\"\n2 |\n3 | from ..interface.tui.app import LegatusTuiApp, run\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n4 |\n5 | __all__ = [\"LegatusTuiApp\", \"run\"]\n  |\nhelp: Replace relative imports from parent modules with absolute imports\n\nTC003 Move standard library import `collections.abc.Callable` into a type-checking block\n  --> x_cls_legatus_acta_schedae_x.py:15:29\n   |\n13 | import tempfile\n14 | import uuid\n15 | from collections.abc import Callable, Iterable\n   |                             ^^^^^^^^\n16 | from dataclasses import asdict, dataclass, field\n17 | from typing import Any, Protocol, cast\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_legatus_acta_schedae_x.py:15:39\n   |\n13 | import tempfile\n14 | import uuid\n15 | from collections.abc import Callable, Iterable\n   |                                       ^^^^^^^^\n16 | from dataclasses import asdict, dataclass, field\n17 | from typing import Any, Protocol, cast\n   |\nhelp: Move into type-checking block\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_legatus_acta_schedae_x.py:27:8\n   |\n25 |     qrcode = importlib.import_module(\"qrcode\")\n26 |     _QR_AVAILABLE = True\n27 | except Exception:\n   |        ^^^^^^^^^\n28 |     qrcode = None\n29 |     _QR_AVAILABLE = False\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_legatus_acta_schedae_x.py:35:28\n   |\n35 | def _truthy_env(name: str, default: bool = False) -> bool:\n   |                            ^^^^^^^\n36 |     v = os.environ.get(name)\n37 |     if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_legatus_acta_schedae_x.py:35:28\n   |\n35 | def _truthy_env(name: str, default: bool = False) -> bool:\n   |                            ^^^^^^^\n36 |     v = os.environ.get(name)\n37 |     if v is None:\n   |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n  --> x_cls_legatus_acta_schedae_x.py:48:16\n   |\n46 |         return env\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n   |                ^^^^^^^^^^^^^^^\n49 |     except Exception:\n50 |         return r\"c:\\x_runner_x\"\n   |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_legatus_acta_schedae_x.py:48:32\n   |\n46 |         return env\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n   |                                ^^^^^^^^^^^^\n49 |     except Exception:\n50 |         return r\"c:\\x_runner_x\"\n   |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n  --> x_cls_legatus_acta_schedae_x.py:48:45\n   |\n46 |         return env\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n   |                                             ^^^^^^^^^^^^^^^\n49 |     except Exception:\n50 |         return r\"c:\\x_runner_x\"\n   |\nhelp: Replace with `Path(...).parent`\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_legatus_acta_schedae_x.py:49:12\n   |\n47 |     try:\n48 |         return os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n49 |     except Exception:\n   |            ^^^^^^^^^\n50 |         return r\"c:\\x_runner_x\"\n   |\n\nARG002 Unused method argument: `html_str`\n  --> x_cls_legatus_acta_schedae_x.py:87:22\n   |\n86 |     # Dev fallback for PDF via wkhtmltopdf when enabled\n87 |     def to_pdf(self, html_str: str, out_path: str) -> None:\n   |                      ^^^^^^^^\n88 |         # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |         raise RuntimeError(\n   |\n\nARG002 Unused method argument: `out_path`\n  --> x_cls_legatus_acta_schedae_x.py:87:37\n   |\n86 |     # Dev fallback for PDF via wkhtmltopdf when enabled\n87 |     def to_pdf(self, html_str: str, out_path: str) -> None:\n   |                                     ^^^^^^^^\n88 |         # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |         raise RuntimeError(\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_legatus_acta_schedae_x.py:89:15\n   |\n87 |       def to_pdf(self, html_str: str, out_path: str) -> None:\n88 |           # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |           raise RuntimeError(\n   |  _______________^\n90 | |             \"PDF export not available (no PDF engine configured)\"\n91 | |         )\n   | |_________^\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> x_cls_legatus_acta_schedae_x.py:90:13\n   |\n88 |         # Fail fast: no implicit PDF fallback; require a real adapter to provide PDF\n89 |         raise RuntimeError(\n90 |             \"PDF export not available (no PDF engine configured)\"\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n91 |         )\n   |\nhelp: Assign to variable; remove string literal\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_legatus_acta_schedae_x.py:107:20\n    |\n105 |             or (\n106 |                 _DEFAULT_WKHTMLTOPDF_PATH\n107 |                 if os.path.isfile(_DEFAULT_WKHTMLTOPDF_PATH)\n    |                    ^^^^^^^^^^^^^^\n108 |                 else None\n109 |             )\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_legatus_acta_schedae_x.py:122:33\n    |\n120 |         dpi: int = 300,\n121 |     ) -> None:\n122 |         if not self._bin or not os.path.isfile(self._bin):\n    |                                 ^^^^^^^^^^^^^^\n123 |             raise RuntimeError(\n124 |                 \"wkhtmltopdf not configured (set X_WKHTMLTOPDF_PATH or WKHTMLTOPDF_BIN)\"\n    |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:123:19\n    |\n121 |       ) -> None:\n122 |           if not self._bin or not os.path.isfile(self._bin):\n123 |               raise RuntimeError(\n    |  ___________________^\n124 | |                 \"wkhtmltopdf not configured (set X_WKHTMLTOPDF_PATH or WKHTMLTOPDF_BIN)\"\n125 | |             )\n    | |_____________^\n126 |           # Write HTML to a temp file and invoke wkhtmltopdf with explicit sizing\n127 |           with tempfile.NamedTemporaryFile(\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:124:17\n    |\n122 |         if not self._bin or not os.path.isfile(self._bin):\n123 |             raise RuntimeError(\n124 |                 \"wkhtmltopdf not configured (set X_WKHTMLTOPDF_PATH or WKHTMLTOPDF_BIN)\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n125 |             )\n126 |         # Write HTML to a temp file and invoke wkhtmltopdf with explicit sizing\n    |\nhelp: Assign to variable; remove string literal\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:133:13\n    |\n131 |             tmp_path = tmp.name\n132 |         try:\n133 |             os.makedirs(\n    |             ^^^^^^^^^^^\n134 |                 os.path.dirname(os.path.abspath(out_path)) or \".\",\n135 |                 exist_ok=True,\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:134:17\n    |\n132 |         try:\n133 |             os.makedirs(\n134 |                 os.path.dirname(os.path.abspath(out_path)) or \".\",\n    |                 ^^^^^^^^^^^^^^^\n135 |                 exist_ok=True,\n136 |             )\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_legatus_acta_schedae_x.py:134:33\n    |\n132 |         try:\n133 |             os.makedirs(\n134 |                 os.path.dirname(os.path.abspath(out_path)) or \".\",\n    |                                 ^^^^^^^^^^^^^^^\n135 |                 exist_ok=True,\n136 |             )\n    |\nhelp: Replace with `Path(...).resolve()`\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_legatus_acta_schedae_x.py:166:13\n    |\n164 |                 ]\n165 |             args += [tmp_path, out_path]\n166 |             subprocess.run(args, check=True, capture_output=True, text=True)\n    |             ^^^^^^^^^^^^^^\n167 |         finally:\n168 |             try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_legatus_acta_schedae_x.py:168:13\n    |\n166 |               subprocess.run(args, check=True, capture_output=True, text=True)\n167 |           finally:\n168 | /             try:\n169 | |                 os.remove(tmp_path)\n170 | |             except Exception:\n171 | |                 pass\n    | |____________________^\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_legatus_acta_schedae_x.py:169:17\n    |\n167 |         finally:\n168 |             try:\n169 |                 os.remove(tmp_path)\n    |                 ^^^^^^^^^\n170 |             except Exception:\n171 |                 pass\n    |\nhelp: Replace with `Path(...).unlink()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:170:13\n    |\n168 |               try:\n169 |                   os.remove(tmp_path)\n170 | /             except Exception:\n171 | |                 pass\n    | |____________________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:170:20\n    |\n168 |             try:\n169 |                 os.remove(tmp_path)\n170 |             except Exception:\n    |                    ^^^^^^^^^\n171 |                 pass\n    |\n\nC901 `_load_from_manifest` is too complex (37 > 10)\n   --> x_cls_legatus_acta_schedae_x.py:179:9\n    |\n177 |         self._inner, self._has_pdf = self._load_from_manifest(base_folder)\n178 |\n179 |     def _load_from_manifest(\n    |         ^^^^^^^^^^^^^^^^^^^\n180 |         self, base_folder: str\n181 |     ) -> tuple[MarkdownLike, bool]:\n    |\n\nPLR0912 Too many branches (19 > 12)\n   --> x_cls_legatus_acta_schedae_x.py:179:9\n    |\n177 |         self._inner, self._has_pdf = self._load_from_manifest(base_folder)\n178 |\n179 |     def _load_from_manifest(\n    |         ^^^^^^^^^^^^^^^^^^^\n180 |         self, base_folder: str\n181 |     ) -> tuple[MarkdownLike, bool]:\n    |\n\nPLR0915 Too many statements (100 > 50)\n   --> x_cls_legatus_acta_schedae_x.py:179:9\n    |\n177 |         self._inner, self._has_pdf = self._load_from_manifest(base_folder)\n178 |\n179 |     def _load_from_manifest(\n    |         ^^^^^^^^^^^^^^^^^^^\n180 |         self, base_folder: str\n181 |     ) -> tuple[MarkdownLike, bool]:\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:185:13\n    |\n183 |         env_manifest = os.environ.get(\"X_MANIFEST_PATH\")\n184 |         candidates = [\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n    |             ^^^^^^^^^^^^\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:186:13\n    |\n184 |         candidates = [\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n    |             ^^^^^^^^^^^^\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n188 |             *([env_manifest] if env_manifest else []),\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:186:26\n    |\n184 |         candidates = [\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n    |                          ^^^^^^^^^^^^^^^\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n188 |             *([env_manifest] if env_manifest else []),\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:187:13\n    |\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n    |             ^^^^^^^^^^^^\n188 |             *([env_manifest] if env_manifest else []),\n189 |         ]\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_legatus_acta_schedae_x.py:187:26\n    |\n185 |             os.path.join(base_folder, \"publish_manifest.json\"),\n186 |             os.path.join(os.path.dirname(__file__), \"publish_manifest.json\"),\n187 |             os.path.join(os.getcwd(), \"publish_manifest.json\"),\n    |                          ^^^^^^^^^\n188 |             *([env_manifest] if env_manifest else []),\n189 |         ]\n    |\nhelp: Replace with `Path.cwd()`\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `obj`\n   --> x_cls_legatus_acta_schedae_x.py:194:26\n    |\n192 |         cls_name: str | None = None\n193 |\n194 |         def extract(obj: Any) -> tuple[str | None, str | None]:\n    |                          ^^^\n195 |             if not isinstance(obj, dict):\n196 |                 return (None, None)\n    |\n\nFBT003 Boolean positional value in function call\n   --> x_cls_legatus_acta_schedae_x.py:210:42\n    |\n209 |         def _dbg(msg: str) -> None:\n210 |             if _truthy_env(\"X_MD_DEBUG\", False):\n    |                                          ^^^^^\n211 |                 print(f\"[MD] {msg}\")\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_legatus_acta_schedae_x.py:215:36\n    |\n213 |         for path in candidates:\n214 |             try:\n215 |                 if not path or not os.path.isfile(path):\n    |                                    ^^^^^^^^^^^^^^\n216 |                     _dbg(f\"manifest not found: {path}\")\n217 |                     continue\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_legatus_acta_schedae_x.py:219:22\n    |\n217 |                     continue\n218 |                 _dbg(f\"reading manifest: {path}\")\n219 |                 with open(path, encoding=\"utf-8\") as fh:\n    |                      ^^^^\n220 |                     data = json.load(fh)\n221 |                 if isinstance(data, list):\n    |\nhelp: Replace with `Path.open()`\n\nPLR2004 Magic value used in comparison, consider replacing `4` with a constant variable\n   --> x_cls_legatus_acta_schedae_x.py:225:46\n    |\n223 |                         if (\n224 |                             isinstance(item, (list, tuple))\n225 |                             and len(item) == 4\n    |                                              ^\n226 |                             and isinstance(item[3], dict)\n227 |                         ):\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:240:20\n    |\n238 |                     _dbg(f\"resolved adapter {mod_name}.{cls_name}\")\n239 |                     break\n240 |             except Exception as e:\n    |                    ^^^^^^^^^\n241 |                 errs.append(f\"{path}: {e}\")\n242 |                 _dbg(f\"error reading manifest {path}: {e}\")\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_legatus_acta_schedae_x.py:249:13\n    |\n248 |         try:\n249 |             import importlib\n    |             ^^^^^^^^^^^^^^^^\n250 |\n251 |             mod = importlib.import_module(mod_name)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:255:16\n    |\n253 |             inst: Any = klass()\n254 |             _dbg(f\"loaded adapter instance: {mod_name}.{cls_name}\")\n255 |         except Exception as e:\n    |                ^^^^^^^^^\n256 |             _dbg(f\"failed to load adapter {mod_name}.{cls_name}: {e}\")\n257 |             return (_FallbackMarkdown(), False)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:275:19\n    |\n273 |               html_func = html_reset\n274 |           if html_func is None:\n275 |               raise RuntimeError(\n    |  ___________________^\n276 | |                 \"Markdown maker lacks a usable to_html()/convert() interface\"\n277 | |             )\n    | |_____________^\n278 |\n279 |           # Build typed PDF function\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:276:17\n    |\n274 |         if html_func is None:\n275 |             raise RuntimeError(\n276 |                 \"Markdown maker lacks a usable to_html()/convert() interface\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n277 |             )\n    |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:288:24\n    |\n286 |                 try:\n287 |                     tp(html_str, out_path)\n288 |                 except Exception:\n    |                        ^^^^^^^^^\n289 |                     with tempfile.NamedTemporaryFile(\n290 |                         \"w\", delete=False, suffix=\".html\", encoding=\"utf-8\"\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_legatus_acta_schedae_x.py:297:25\n    |\n295 |                           tp(tmp_path, out_path)\n296 |                       finally:\n297 | /                         try:\n298 | |                             os.remove(tmp_path)\n299 | |                         except Exception:\n300 | |                             pass\n    | |________________________________^\n301 |\n302 |               pdf_func = _call_to_pdf\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_legatus_acta_schedae_x.py:298:29\n    |\n296 |                     finally:\n297 |                         try:\n298 |                             os.remove(tmp_path)\n    |                             ^^^^^^^^^\n299 |                         except Exception:\n300 |                             pass\n    |\nhelp: Replace with `Path(...).unlink()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:299:25\n    |\n297 |                           try:\n298 |                               os.remove(tmp_path)\n299 | /                         except Exception:\n300 | |                             pass\n    | |________________________________^\n301 |\n302 |               pdf_func = _call_to_pdf\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:299:32\n    |\n297 |                         try:\n298 |                             os.remove(tmp_path)\n299 |                         except Exception:\n    |                                ^^^^^^^^^\n300 |                             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_legatus_acta_schedae_x.py:317:21\n    |\n315 |                       exp(tmp_path, out_path)\n316 |                   finally:\n317 | /                     try:\n318 | |                         os.remove(tmp_path)\n319 | |                     except Exception:\n320 | |                         pass\n    | |____________________________^\n321 |\n322 |               pdf_func = export_pdf_html\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_legatus_acta_schedae_x.py:318:25\n    |\n316 |                 finally:\n317 |                     try:\n318 |                         os.remove(tmp_path)\n    |                         ^^^^^^^^^\n319 |                     except Exception:\n320 |                         pass\n    |\nhelp: Replace with `Path(...).unlink()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:319:21\n    |\n317 |                       try:\n318 |                           os.remove(tmp_path)\n319 | /                     except Exception:\n320 | |                         pass\n    | |____________________________^\n321 |\n322 |               pdf_func = export_pdf_html\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:319:28\n    |\n317 |                     try:\n318 |                         os.remove(tmp_path)\n319 |                     except Exception:\n    |                            ^^^^^^^^^\n320 |                         pass\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:338:27\n    |\n336 |             def to_pdf(self, html_str: str, out_path: str) -> None:\n337 |                 if self._p is None:\n338 |                     raise RuntimeError(\"PDF exporter not available\")\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n339 |                 self._p(html_str, out_path)\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:338:40\n    |\n336 |             def to_pdf(self, html_str: str, out_path: str) -> None:\n337 |                 if self._p is None:\n338 |                     raise RuntimeError(\"PDF exporter not available\")\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n339 |                 self._p(html_str, out_path)\n    |\nhelp: Assign to variable; remove string literal\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:392:9\n    |\n390 |     def __init__(self, db_path: str) -> None:\n391 |         self.db_path = db_path\n392 |         os.makedirs(os.path.dirname(db_path), exist_ok=True)\n    |         ^^^^^^^^^^^\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:392:21\n    |\n390 |     def __init__(self, db_path: str) -> None:\n391 |         self.db_path = db_path\n392 |         os.makedirs(os.path.dirname(db_path), exist_ok=True)\n    |                     ^^^^^^^^^^^^^^^\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:394:20\n    |\n392 |         os.makedirs(os.path.dirname(db_path), exist_ok=True)\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n    |                    ^^^^^^^^^^^^^^^\n395 |         self.json_cards_path = os.path.join(data_dir, \"cards.jsonl\")\n396 |         self.json_actions_path = os.path.join(data_dir, \"actions.jsonl\")\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:395:32\n    |\n393 |         # JSONL paths (append-only for easy inspection)\n394 |         data_dir = os.path.dirname(self.db_path)\n395 |         self.json_cards_path = os.path.join(data_dir, \"cards.jsonl\")\n    |                                ^^^^^^^^^^^^\n396 |         self.json_actions_path = os.path.join(data_dir, \"actions.jsonl\")\n397 |         self._ensure_schema()\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:396:34\n    |\n394 |         data_dir = os.path.dirname(self.db_path)\n395 |         self.json_cards_path = os.path.join(data_dir, \"cards.jsonl\")\n396 |         self.json_actions_path = os.path.join(data_dir, \"actions.jsonl\")\n    |                                  ^^^^^^^^^^^^\n397 |         self._ensure_schema()\n    |\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_legatus_acta_schedae_x.py:443:18\n    |\n441 |     def _append_jsonl(self, path: str, obj: dict[str, Any]) -> None:\n442 |         try:\n443 |             with open(path, \"a\", encoding=\"utf-8\") as fh:\n    |                  ^^^^\n444 |                 fh.write(json.dumps(obj, ensure_ascii=False) + \"\\n\")\n445 |         except Exception:\n    |\nhelp: Replace with `Path.open()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:445:9\n    |\n443 |               with open(path, \"a\", encoding=\"utf-8\") as fh:\n444 |                   fh.write(json.dumps(obj, ensure_ascii=False) + \"\\n\")\n445 | /         except Exception:\n446 | |             # Best-effort JSON logging; do not block DB operations\n447 | |             pass\n    | |________________^\n448 |\n449 |       def insert_card(self, card: Notecard) -> None:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:445:16\n    |\n443 |             with open(path, \"a\", encoding=\"utf-8\") as fh:\n444 |                 fh.write(json.dumps(obj, ensure_ascii=False) + \"\\n\")\n445 |         except Exception:\n    |                ^^^^^^^^^\n446 |             # Best-effort JSON logging; do not block DB operations\n447 |             pass\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_legatus_acta_schedae_x.py:607:17\n    |\n605 |           if \"cards\" in payload:\n606 |               for c in payload[\"cards\"]:\n607 | /                 result.append(\n608 | |                     {\n609 | |                         \"front_md\": c.get(\"front_md\", \"\"),\n610 | |                         \"back_md\": c.get(\"back_md\"),\n611 | |                         \"tags\": list(\n612 | |                             set([*(global_tags), *(c.get(\"tags\", []) or [])])\n613 | |                         ),\n614 | |                     }\n615 | |                 )\n    | |_________________^\n616 |               return result\n617 |           if \"qa\" in payload:\n    |\nhelp: Replace for loop with list.extend\n\nC405 Unnecessary list literal (rewrite as a set literal)\n   --> x_cls_legatus_acta_schedae_x.py:612:29\n    |\n610 |                         \"back_md\": c.get(\"back_md\"),\n611 |                         \"tags\": list(\n612 |                             set([*(global_tags), *(c.get(\"tags\", []) or [])])\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n613 |                         ),\n614 |                     }\n    |\nhelp: Rewrite as a set literal\n\nC405 Unnecessary list literal (rewrite as a set literal)\n   --> x_cls_legatus_acta_schedae_x.py:655:24\n    |\n653 |                 front = f\"# Task\\n**{t.get('title','')}**\"\n654 |                 back = t.get(\"details\", \"\")\n655 |                 tags = set([*(global_tags), *(t.get(\"tags\", []) or [])])\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n656 |                 task_id = t.get(\"task_id\")\n657 |                 if task_id:\n    |\nhelp: Rewrite as a set literal\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_legatus_acta_schedae_x.py:700:17\n    |\n698 |           if \"appointments\" in payload:\n699 |               for a in payload[\"appointments\"]:\n700 | /                 result.append(\n701 | |                     {\n702 | |                         \"front_md\": mk_front(a),\n703 | |                         \"back_md\": mk_back(a),\n704 | |                         \"tags\": list(\n705 | |                             set([*(global_tags), *(a.get(\"tags\", []) or [])])\n706 | |                         ),\n707 | |                     }\n708 | |                 )\n    | |_________________^\n709 |               return result\n710 |           result.append(\n    |\nhelp: Replace for loop with list.extend\n\nC405 Unnecessary list literal (rewrite as a set literal)\n   --> x_cls_legatus_acta_schedae_x.py:705:29\n    |\n703 |                         \"back_md\": mk_back(a),\n704 |                         \"tags\": list(\n705 |                             set([*(global_tags), *(a.get(\"tags\", []) or [])])\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n706 |                         ),\n707 |                     }\n    |\nhelp: Rewrite as a set literal\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_legatus_acta_schedae_x.py:741:24\n    |\n739 |         self.base_dir = base_dir or _base_dir_default()\n740 |         # All output under this folder to satisfy co-location requirement\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n    |                        ^^^^^^^^^^^^^^^\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:741:40\n    |\n739 |         self.base_dir = base_dir or _base_dir_default()\n740 |         # All output under this folder to satisfy co-location requirement\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n    |                                        ^^^^^^^^^^^^^^^\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:742:24\n    |\n740 |         # All output under this folder to satisfy co-location requirement\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n    |                        ^^^^^^^^^^^^\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:743:9\n    |\n741 |         self.pkg_dir = os.path.abspath(os.path.dirname(__file__))\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:744:26\n    |\n742 |         self.out_dir = os.path.join(self.pkg_dir, \"out\")\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n    |                          ^^^^^^^^^^^^\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n746 |         self.db_path = db_path or os.path.join(\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:745:9\n    |\n743 |         os.makedirs(self.out_dir, exist_ok=True)\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n746 |         self.db_path = db_path or os.path.join(\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_legatus_acta_schedae_x.py:746:35\n    |\n744 |         self.media_dir = os.path.join(self.out_dir, \"media\")\n745 |         os.makedirs(self.media_dir, exist_ok=True)\n746 |         self.db_path = db_path or os.path.join(\n    |                                   ^^^^^^^^^^^^\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n748 |         )\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_legatus_acta_schedae_x.py:749:9\n    |\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n748 |         )\n749 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n    |         ^^^^^^^^^^^\n750 |         self.storage = Storage(self.db_path)\n751 |         # Prefer base_dir for manifest lookup; still searches package/CWD/env\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_legatus_acta_schedae_x.py:749:21\n    |\n747 |             self.pkg_dir, \"data\", \"cards.db\"\n748 |         )\n749 |         os.makedirs(os.path.dirname(self.db_path), exist_ok=True)\n    |                     ^^^^^^^^^^^^^^^\n750 |         self.storage = Storage(self.db_path)\n751 |         # Prefer base_dir for manifest lookup; still searches package/CWD/env\n    |\nhelp: Replace with `Path(...).parent`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:771:20\n    |\n769 |             try:\n770 |                 return _to_inches(float(val), unit)\n771 |             except Exception:\n    |                    ^^^^^^^^^\n772 |                 return 0.0\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_legatus_acta_schedae_x.py:885:17\n    |\n883 |                   try:\n884 |                       return max(0.0, _to_inches(float(val), unit))\n885 | /                 except Exception:\n886 | |                     pass\n    | |________________________^\n887 |           return 0.25 if sheet is not None else 0.0\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:885:24\n    |\n883 |                 try:\n884 |                     return max(0.0, _to_inches(float(val), unit))\n885 |                 except Exception:\n    |                        ^^^^^^^^^\n886 |                     pass\n887 |         return 0.25 if sheet is not None else 0.0\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_legatus_acta_schedae_x.py:912:20\n    |\n910 |             try:\n911 |                 return max(0.0, _to_inches(float(val), unit))\n912 |             except Exception:\n    |                    ^^^^^^^^^\n913 |                 return default\n    |\n\nSIM108 Use ternary operator `s = \"3x5\" if not spec else str(spec).strip().lower()` instead of `if`-`else`-block\n   --> x_cls_legatus_acta_schedae_x.py:933:9\n    |\n931 |       # --- size parsing (restored) ---\n932 |       def _parse_size_spec(self, spec: str) -> tuple[float, float]:\n933 | /         if not spec:\n934 | |             s = \"3x5\"\n935 | |         else:\n936 | |             s = str(spec).strip().lower()\n    | |_________________________________________^\n937 |\n938 |           # Parse using existing flexible logic, then hard-restrict.\n    |\nhelp: Replace `if`-`else`-block with `s = \"3x5\" if not spec else str(spec).strip().lower()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_legatus_acta_schedae_x.py:978:15\n    |\n976 |               return (6.0, 4.0)\n977 |\n978 |           raise ValueError(\n    |  _______________^\n979 | |             f\"Only 3x5 and 4x6 sizes are supported (got: {w:.2f}x{h:.2f} in)\"\n980 | |         )\n    | |_________^\n981 |\n982 |       def make(\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_legatus_acta_schedae_x.py:979:13\n    |\n978 |         raise ValueError(\n979 |             f\"Only 3x5 and 4x6 sizes are supported (got: {w:.2f}x{h:.2f} in)\"\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n980 |         )\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR0913 Too many arguments in function definition (8 > 5)\n   --> x_cls_legatus_acta_schedae_x.py:982:9\n    |\n980 |         )\n981 |\n982 |     def make(\n    |         ^^^^\n983 |         self,\n984 |         kind: str,\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_legatus_acta_schedae_x.py:1053:20\n     |\n1051 |         for c in cards:\n1052 |             html_out = self._render_card_html(c, sheet=sheet)\n1053 |             path = os.path.join(self.out_dir, self._output_filename(c, \"html\"))\n     |                    ^^^^^^^^^^^^\n1054 |             with open(path, \"w\", encoding=\"utf-8\") as f:\n1055 |                 f.write(html_out)\n     |\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_legatus_acta_schedae_x.py:1054:18\n     |\n1052 |             html_out = self._render_card_html(c, sheet=sheet)\n1053 |             path = os.path.join(self.out_dir, self._output_filename(c, \"html\"))\n1054 |             with open(path, \"w\", encoding=\"utf-8\") as f:\n     |                  ^^^^\n1055 |                 f.write(html_out)\n1056 |             paths.append(path)\n     |\nhelp: Replace with `Path.open()`\n\nC901 `export_pdf` is too complex (14 > 10)\n    --> x_cls_legatus_acta_schedae_x.py:1059:9\n     |\n1057 |         return paths\n1058 |\n1059 |     def export_pdf(self, cards: Iterable[Notecard]) -> list[str]:\n     |         ^^^^^^^^^^\n1060 |         \"\"\"\n1061 |         Export grouped duplex PDFs by size:\n     |\n\nE501 Line too long (91 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1065:89\n     |\n1063 |             * fronts PDF: all odd-indexed cards (in given order)\n1064 |             * backs  PDF: all even-indexed cards (in given order)\n1065 |         Each page contains the front content of a single card. Card back_md is not included\n     |                                                                                         ^^^\n1066 |         in duplex PDFs to support simple double-sided printing.\n1067 |         \"\"\"\n     |\n\nFBT003 Boolean positional value in function call\n    --> x_cls_legatus_acta_schedae_x.py:1071:36\n     |\n1069 |         sheet = self._sheet_size()\n1070 |         force_wk = sheet is not None or _truthy_env(\n1071 |             \"X_FORCE_WKHTMLTOPDF\", False\n     |                                    ^^^^^\n1072 |         )\n     |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_legatus_acta_schedae_x.py:1133:29\n     |\n1131 | </html>\n1132 | \"\"\"\n1133 |                 html_path = os.path.join(\n     |                             ^^^^^^^^^^^^\n1134 |                     self.out_dir, f\"duplex_{size_key}_{label}.html\"\n1135 |                 )\n     |\n\nPTH123 `open()` should be replaced by `Path.open()`\n    --> x_cls_legatus_acta_schedae_x.py:1136:22\n     |\n1134 |                     self.out_dir, f\"duplex_{size_key}_{label}.html\"\n1135 |                 )\n1136 |                 with open(html_path, \"w\", encoding=\"utf-8\") as fh:\n     |                      ^^^^\n1137 |                     fh.write(doc_html)\n     |\nhelp: Replace with `Path.open()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n    --> x_cls_legatus_acta_schedae_x.py:1140:28\n     |\n1139 |                 # Export to PDF\n1140 |                 pdf_path = os.path.join(\n     |                            ^^^^^^^^^^^^\n1141 |                     self.out_dir, f\"duplex_{size_key}_{label}.pdf\"\n1142 |                 )\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_legatus_acta_schedae_x.py:1151:28\n     |\n1149 |                     try:\n1150 |                         self.md.to_pdf(doc_html, pdf_path)\n1151 |                     except Exception as e_md:\n     |                            ^^^^^^^^^\n1152 |                         try:\n1153 |                             self._pdf.to_pdf(\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_legatus_acta_schedae_x.py:1160:32\n     |\n1158 |                                 dpi=300,\n1159 |                             )\n1160 |                         except Exception as e_bin:\n     |                                ^^^^^^^^^\n1161 |                             raise RuntimeError(\n1162 |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n     |\n\nB904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling\n    --> x_cls_legatus_acta_schedae_x.py:1161:29\n     |\n1159 |                               )\n1160 |                           except Exception as e_bin:\n1161 | /                             raise RuntimeError(\n1162 | |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n1163 | |                             )\n     | |_____________________________^\n1164 |                   else:\n1165 |                       try:\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_legatus_acta_schedae_x.py:1161:35\n     |\n1159 |                               )\n1160 |                           except Exception as e_bin:\n1161 |                               raise RuntimeError(\n     |  ___________________________________^\n1162 | |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n1163 | |                             )\n     | |_____________________________^\n1164 |                   else:\n1165 |                       try:\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_legatus_acta_schedae_x.py:1162:33\n     |\n1160 |                         except Exception as e_bin:\n1161 |                             raise RuntimeError(\n1162 |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1163 |                             )\n1164 |                 else:\n     |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (104 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1162:89\n     |\n1160 |                         except Exception as e_bin:\n1161 |                             raise RuntimeError(\n1162 |                                 f\"PDF export failed (adapter error: {e_md}; wkhtmltopdf error: {e_bin})\"\n     |                                                                                         ^^^^^^^^^^^^^^^^\n1163 |                             )\n1164 |                 else:\n     |\n\nBLE001 Do not catch blind exception: `Exception`\n    --> x_cls_legatus_acta_schedae_x.py:1173:28\n     |\n1171 |                             dpi=300,\n1172 |                         )\n1173 |                     except Exception as e_bin:\n     |                            ^^^^^^^^^\n1174 |                         raise RuntimeError(\n1175 |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n     |\n\nB904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling\n    --> x_cls_legatus_acta_schedae_x.py:1174:25\n     |\n1172 |                           )\n1173 |                       except Exception as e_bin:\n1174 | /                         raise RuntimeError(\n1175 | |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n1176 | |                         )\n     | |_________________________^\n1177 |\n1178 |                   paths_local.append(pdf_path)\n     |\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_legatus_acta_schedae_x.py:1174:31\n     |\n1172 |                           )\n1173 |                       except Exception as e_bin:\n1174 |                           raise RuntimeError(\n     |  _______________________________^\n1175 | |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n1176 | |                         )\n     | |_________________________^\n1177 |\n1178 |                   paths_local.append(pdf_path)\n     |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n    --> x_cls_legatus_acta_schedae_x.py:1175:29\n     |\n1173 |                     except Exception as e_bin:\n1174 |                         raise RuntimeError(\n1175 |                             f\"PDF export failed (wkhtmltopdf error: {e_bin})\"\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1176 |                         )\n     |\nhelp: Assign to variable; remove f-string literal\n\nFBT003 Boolean positional value in function call\n    --> x_cls_legatus_acta_schedae_x.py:1212:58\n     |\n1210 |             code_text = f\"NCX:{c.id[:8].upper()}\"\n1211 |\n1212 |         debug_frame = _truthy_env(\"X_PRINT_DEBUG_FRAME\", False)\n     |                                                          ^^^^^\n1213 |         border_css = (\n1214 |             \"5px dashed #e33\" if debug_frame else \"5px solid #000\"\n     |\n\nE501 Line too long (190 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1262:89\n     |\n1260 | \u00e2\u20ac\u00a6\n1261 | \u00e2\u20ac\u00a6\n1262 | \u00e2\u20ac\u00a6dding: 2px 6px; border-radius: 6px; font-size: 10px; background: #eef2f7; color: #334; border: 1px solid #ccd5e0; }}\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1263 | \u00e2\u20ac\u00a6\n1264 | \u00e2\u20ac\u00a6\n     |\n\nE501 Line too long (95 > 88)\n    --> x_cls_legatus_acta_schedae_x.py:1273:89\n     |\n1271 |             .content {{ font-size: 14px; line-height: 1.35; }}\n1272 |             .footer-tags {{\n1273 |                 position: absolute; left: 0.25in; bottom: 0.15in; font-size: 10px; color: #666;\n     |                                                                                         ^^^^^^^\n1274 |             }}\n1275 |             .page-break {{ page-break-after: always; }}\n     |\n\nFLY002 Consider `f\"{b1}{b2}{b3}{b4}\"` instead of string join\n    --> x_cls_legatus_acta_schedae_x.py:1351:16\n     |\n1349 |         b3 = f'<span class=\"badge\">v{html.escape(ver)}</span>' if ver else \"\"\n1350 |         b4 = f'<span class=\"badge\">{html.escape(n)}</span>' if n else \"\"\n1351 |         return \"\".join([b1, b2, b3, b4])\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n1352 |\n1353 |     def _qr_data_uri(self, payload: str) -> str:\n     |\nhelp: Replace with `f\"{b1}{b2}{b3}{b4}\"`\n\nTRY003 Avoid specifying long messages outside the exception class\n    --> x_cls_legatus_acta_schedae_x.py:1356:19\n     |\n1354 |         # Guard for optional dependency; helps type-checkers and runtime safety\n1355 |         if qrcode is None:\n1356 |             raise RuntimeError(\"QR code generation not available\")\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1357 |         img = qrcode.make(payload)\n1358 |         buf = io.BytesIO()\n     |\n\nEM101 Exception must not use a string literal, assign to variable first\n    --> x_cls_legatus_acta_schedae_x.py:1356:32\n     |\n1354 |         # Guard for optional dependency; helps type-checkers and runtime safety\n1355 |         if qrcode is None:\n1356 |             raise RuntimeError(\"QR code generation not available\")\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1357 |         img = qrcode.make(payload)\n1358 |         buf = io.BytesIO()\n     |\nhelp: Assign to variable; remove string literal\n\nERA001 Found commented-out code\n    --> x_cls_legatus_acta_schedae_x.py:1373:5\n     |\n1371 |     maker.set_print_shift(y_mm=4)\n1372 |     # Example horizontal tweak (uncomment to nudge right 2mm):\n1373 |     # maker.set_print_shift(x_mm=2)\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n1374 |\n1375 |     # Flashcards set with series metadata\n     |\nhelp: Remove commented-out code\n\nC901 `_ncx_set_print_shift` is too complex (12 > 10)\n    --> x_cls_legatus_acta_schedae_x.py:1451:9\n     |\n1449 | if not hasattr(x_cls_legatus_acta_schedae_x, \"set_print_shift\"):\n1450 |\n1451 |     def _ncx_set_print_shift(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1452 |         self,\n1453 |         *,\n     |\n\nPLR0913 Too many arguments in function definition (6 > 5)\n    --> x_cls_legatus_acta_schedae_x.py:1451:9\n     |\n1449 | if not hasattr(x_cls_legatus_acta_schedae_x, \"set_print_shift\"):\n1450 |\n1451 |     def _ncx_set_print_shift(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1452 |         self,\n1453 |         *,\n     |\n\nPLR0912 Too many branches (14 > 12)\n    --> x_cls_legatus_acta_schedae_x.py:1451:9\n     |\n1449 | if not hasattr(x_cls_legatus_acta_schedae_x, \"set_print_shift\"):\n1450 |\n1451 |     def _ncx_set_print_shift(\n     |         ^^^^^^^^^^^^^^^^^^^^\n1452 |         self,\n1453 |         *,\n     |\n\nANN001 Missing type annotation for function argument `self`\n    --> x_cls_legatus_acta_schedae_x.py:1452:9\n     |\n1451 |     def _ncx_set_print_shift(\n1452 |         self,\n     |         ^^^^\n1453 |         *,\n1454 |         x_mm: float | None = None,\n     |\n\nANN001 Missing type annotation for function argument `self`\n    --> x_cls_legatus_acta_schedae_x.py:1487:30\n     |\n1485 |                 self.shift_y_in += yv  # type: ignore[attr-defined]\n1486 |\n1487 |     def _ncx_get_print_shift(self) -> tuple[float, float]:\n     |                              ^^^^\n1488 |         return (\n1489 |             getattr(self, \"shift_x_in\", 0.0),\n     |\n\nPGH003 Use specific rule codes when ignoring type issues\n    --> x_cls_legatus_acta_schedae_x.py:1493:74\n     |\n1491 |         )\n1492 |\n1493 |     x_cls_legatus_acta_schedae_x.set_print_shift = _ncx_set_print_shift  # type: ignore\n     |                                                                          ^^^^^^^^^^^^^^\n1494 |     x_cls_legatus_acta_schedae_x.get_print_shift = _ncx_get_print_shift  # type: ignore\n     |\n\nPGH003 Use specific rule codes when ignoring type issues\n    --> x_cls_legatus_acta_schedae_x.py:1494:74\n     |\n1493 |     x_cls_legatus_acta_schedae_x.set_print_shift = _ncx_set_print_shift  # type: ignore\n1494 |     x_cls_legatus_acta_schedae_x.get_print_shift = _ncx_get_print_shift  # type: ignore\n     |                                                                          ^^^^^^^^^^^^^^\n     |\n\nFound 980 errors.\nNo fixes available (391 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_legatus_tactica_impetus_x": {
        "files": [],
        "files_index": [],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 0,
                "stderr": "skipped - no Python source (.py/.pyi) found",
                "stdout": ""
            },
            "mypy": {
                "cached": false,
                "exit": 0,
                "stderr": "skipped - no Python source (.py/.pyi) found",
                "stdout": ""
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "skipped - no Python source (.py/.pyi) found",
                "stdout": ""
            },
            "ruff_check": {
                "cached": false,
                "exit": 0,
                "stderr": "warning: No Python files found under the given path(s)\n",
                "stdout": "All checks passed!\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 0,
                "stderr": "warning: No Python files found under the given path(s)\n",
                "stdout": "All checks passed!\n"
            }
        }
    },
    "x_make_github_clones_x": {
        "files": [
            "x_cls_make_github_clones_x.py"
        ],
        "files_index": [
            "x_cls_make_github_clones_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-07 16:24:10.749572+00:00\n+++ C:\\x_runner_x\\x_make_github_clones_x\\x_cls_make_github_clones_x.py\t2025-10-07 17:45:49.828014+00:00\n@@ -187,13 +187,11 @@\n         if self.names is not None:\n             name_set = set(self.names)\n             repos = [\n                 r\n                 for r in repos\n-                if (\n-                    r.get(\"name\") in name_set or r.get(\"full_name\") in name_set\n-                )\n+                if (r.get(\"name\") in name_set or r.get(\"full_name\") in name_set)\n             ]\n         return repos\n \n     def _clone_or_update_repo(self, repo_dir: str, git_url: str) -> bool:\n         # If the repo is missing, clone it\n@@ -217,13 +215,11 @@\n         # - pop stash if we stashed\n         _info(f\"Updating {repo_dir}\")\n         stashed = False  # ensure defined for finally block\n         try:\n             # Fetch remote refs first\n-            self.run_cmd(\n-                [self.GIT_BIN, \"-C\", repo_dir, \"fetch\", \"--all\", \"--prune\"]\n-            )\n+            self.run_cmd([self.GIT_BIN, \"-C\", repo_dir, \"fetch\", \"--all\", \"--prune\"])\n \n             status = self.run_cmd(\n                 [self.GIT_BIN, \"-C\", repo_dir, \"status\", \"--porcelain\"],\n                 check=False,\n             )\n@@ -273,13 +269,11 @@\n             _error(\"pull failed:\", pull.stderr or pull.stdout)\n             return False\n         finally:\n             try:\n                 if stashed:\n-                    pop = self.run_cmd(\n-                        [self.GIT_BIN, \"-C\", repo_dir, \"stash\", \"pop\"]\n-                    )\n+                    pop = self.run_cmd([self.GIT_BIN, \"-C\", repo_dir, \"stash\", \"pop\"])\n                     if pop.returncode != 0:\n                         _error(\"stash pop failed:\", pop.stderr or pop.stdout)\n             except Exception as e:\n                 _error(\"failed to pop stash:\", e)\n \n@@ -320,13 +314,11 @@\n         if not os.path.exists(repo_dir):\n             return self._clone_or_update_repo(repo_dir, git_url)\n \n         try:\n             # Fetch first\n-            self.run_cmd(\n-                [self.GIT_BIN, \"-C\", repo_dir, \"fetch\", \"--all\", \"--prune\"]\n-            )\n+            self.run_cmd([self.GIT_BIN, \"-C\", repo_dir, \"fetch\", \"--all\", \"--prune\"])\n \n             status = self.run_cmd(\n                 [self.GIT_BIN, \"-C\", repo_dir, \"status\", \"--porcelain\"],\n                 check=False,\n             )\n@@ -394,13 +386,11 @@\n                         reset.stderr or reset.stdout,\n                     )\n \n             # Restore stashed changes if any\n             if stashed:\n-                pop = self.run_cmd(\n-                    [self.GIT_BIN, \"-C\", repo_dir, \"stash\", \"pop\"]\n-                )\n+                pop = self.run_cmd([self.GIT_BIN, \"-C\", repo_dir, \"stash\", \"pop\"])\n                 if pop.returncode != 0:\n                     _error(\"stash pop failed:\", pop.stderr or pop.stdout)\n \n             return ok\n         except Exception as e:\n@@ -471,13 +461,11 @@\n             try:\n                 shutil.move(tmp_dir, repo_dir)\n             except Exception:\n                 # try to restore from backup\n                 try:\n-                    if os.path.exists(bak_dir) and not os.path.exists(\n-                        repo_dir\n-                    ):\n+                    if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n                         shutil.move(bak_dir, repo_dir)\n                 except Exception:\n                     pass\n                 try:\n                     if os.path.exists(tmp_dir):\n@@ -509,21 +497,15 @@\n                 pass\n             return False\n \n     def _repo_clone_url(self, repo: dict[str, Any]) -> str:\n         clone_url = repo.get(\"clone_url\") or repo.get(\"ssh_url\") or \"\"\n-        if (\n-            self.token\n-            and self.allow_token_clone\n-            and clone_url.startswith(\"https://\")\n-        ):\n+        if self.token and self.allow_token_clone and clone_url.startswith(\"https://\"):\n             return clone_url.replace(\"https://\", f\"https://{self.token}@\")\n         return clone_url\n \n-    def sync(\n-        self, username: str | None = None, dest: str | None = None\n-    ) -> int:\n+    def sync(self, username: str | None = None, dest: str | None = None) -> int:\n         username = username or self.username\n         dest = dest or self.target_dir or self.DEFAULT_TARGET_DIR\n         if not dest:\n             dest = _repo_parent_root()\n         os.makedirs(dest, exist_ok=True)\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_github_clones_x.py:22: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:24: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:24: error: Expression type contains \"Any\" (has type \"tuple[Any, ...]\")  [misc]\nx_cls_make_github_clones_x.py:27: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:27: error: Expression type contains \"Any\" (has type \"tuple[Any, ...]\")  [misc]\nx_cls_make_github_clones_x.py:32: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:34: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:34: error: Expression type contains \"Any\" (has type \"tuple[Any, ...]\")  [misc]\nx_cls_make_github_clones_x.py:37: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:37: error: Expression type contains \"Any\" (has type \"tuple[Any, ...]\")  [misc]\nx_cls_make_github_clones_x.py:54: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:55: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:64: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:70: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:70: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:72: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:72: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:90: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:123: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:129: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:130: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:130: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:131: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:132: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:133: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:133: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:133: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:134: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:137: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:137: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:137: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:138: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:140: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:153: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:161: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:164: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:166: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:166: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:167: error: Expression type contains \"Any\" (has type \"Literal[False] | Any | None\")  [misc]\nx_cls_make_github_clones_x.py:167: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:167: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:169: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:169: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:170: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:172: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:172: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:173: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:186: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:186: error: Expression type contains \"Any\" (has type \"dict[str, dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:186: error: Expression type contains \"Any\" (has type \"dict_values[str, dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:189: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:190: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:191: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:193: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:193: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:193: error: Unsupported operand types for in (\"Any | None\" and \"set[str]\")  [operator]\nx_cls_make_github_clones_x.py:196: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:512: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_clones_x.py:513: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:513: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:513: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_github_clones_x.py:515: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_github_clones_x.py:515: error: Expression type contains \"Any\" (has type \"Literal[''] | Any | bool | None\")  [misc]\nx_cls_make_github_clones_x.py:517: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_github_clones_x.py:517: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_github_clones_x.py:519: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_github_clones_x.py:520: error: Expression type contains \"Any\" (has type \"Any | str\")  [misc]\nx_cls_make_github_clones_x.py:531: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:538: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:538: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:538: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:538: error: Unsupported operand types for in (\"Any | None\" and \"set[str]\")  [operator]\nx_cls_make_github_clones_x.py:541: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:541: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_clones_x.py:542: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:542: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:543: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nx_cls_make_github_clones_x.py:545: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_clones_x.py:546: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_clones_x.py:578: error: Expression type contains \"Any\" (has type \"Any | None\")  [misc]\nFound 80 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_github_clones_x.py:17:29\n   |\n15 | import sys\n16 | import time\n17 | from collections.abc import Iterable\n   |                             ^^^^^^^^\n18 | from pathlib import Path\n19 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_github_clones_x.py:22:18\n   |\n22 | def _info(*args: Any) -> None:\n   |                  ^^^\n23 |     try:\n24 |         print(\" \".join(str(a) for a in args))\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:25:12\n   |\n23 |     try:\n24 |         print(\" \".join(str(a) for a in args))\n25 |     except Exception:\n   |            ^^^^^^^^^\n26 |         try:\n27 |             sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_clones_x.py:26:9\n   |\n24 |           print(\" \".join(str(a) for a in args))\n25 |       except Exception:\n26 | /         try:\n27 | |             sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n28 | |         except Exception:\n29 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_clones_x.py:28:9\n   |\n26 |           try:\n27 |               sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n28 | /         except Exception:\n29 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:28:16\n   |\n26 |         try:\n27 |             sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n28 |         except Exception:\n   |                ^^^^^^^^^\n29 |             pass\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_github_clones_x.py:32:19\n   |\n32 | def _error(*args: Any) -> None:\n   |                   ^^^\n33 |     try:\n34 |         print(\" \".join(str(a) for a in args), file=sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:35:12\n   |\n33 |     try:\n34 |         print(\" \".join(str(a) for a in args), file=sys.stderr)\n35 |     except Exception:\n   |            ^^^^^^^^^\n36 |         try:\n37 |             sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_clones_x.py:36:9\n   |\n34 |           print(\" \".join(str(a) for a in args), file=sys.stderr)\n35 |       except Exception:\n36 | /         try:\n37 | |             sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n38 | |         except Exception:\n39 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_clones_x.py:38:9\n   |\n36 |           try:\n37 |               sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n38 | /         except Exception:\n39 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:38:16\n   |\n36 |         try:\n37 |             sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n38 |         except Exception:\n   |                ^^^^^^^^^\n39 |             pass\n   |\n\nS105 Possible hardcoded password assigned to: \"TOKEN_ENV_VAR\"\n  --> x_cls_make_github_clones_x.py:45:26\n   |\n43 |     DEFAULT_TARGET_DIR: str | None = None  # dynamic; set after helper defined\n44 |     GIT_BIN: str = \"git\"\n45 |     TOKEN_ENV_VAR: str = \"GITHUB_TOKEN\"\n   |                          ^^^^^^^^^^^^^^\n46 |     ALLOW_TOKEN_CLONE_ENV: str = \"X_ALLOW_TOKEN_CLONE\"\n47 |     RECLONE_ON_CORRUPT: bool = True\n   |\n\nS105 Possible hardcoded password assigned to: \"ALLOW_TOKEN_CLONE_ENV\"\n  --> x_cls_make_github_clones_x.py:46:34\n   |\n44 |     GIT_BIN: str = \"git\"\n45 |     TOKEN_ENV_VAR: str = \"GITHUB_TOKEN\"\n46 |     ALLOW_TOKEN_CLONE_ENV: str = \"X_ALLOW_TOKEN_CLONE\"\n   |                                  ^^^^^^^^^^^^^^^^^^^^^\n47 |     RECLONE_ON_CORRUPT: bool = True\n48 |     # Auto-reclone/repair is enabled by default. The implementation performs a\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`\n  --> x_cls_make_github_clones_x.py:54:42\n   |\n53 |     @classmethod\n54 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                          ^^^\n55 |         return os.environ.get(name, default)\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `get_env`\n  --> x_cls_make_github_clones_x.py:54:57\n   |\n53 |     @classmethod\n54 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                                         ^^^\n55 |         return os.environ.get(name, default)\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:58:38\n   |\n57 |     @classmethod\n58 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n59 |         v = os.environ.get(name, None)\n60 |         if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:58:38\n   |\n57 |     @classmethod\n58 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n59 |         v = os.environ.get(name, None)\n60 |         if v is None:\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> x_cls_make_github_clones_x.py:65:46\n   |\n64 |     def run_cmd(\n65 |         self, args: Iterable[str], **kwargs: Any\n   |                                              ^^^\n66 |     ) -> subprocess.CompletedProcess[str]:\n67 |         # Ensure we don't pass duplicate 'check' keyword to subprocess.run\n   |\n\nS603 `subprocess` call: check for execution of untrusted input\n  --> x_cls_make_github_clones_x.py:71:16\n   |\n69 |         # supply it explicitly.\n70 |         check = kwargs.pop(\"check\", False)\n71 |         return subprocess.run(\n   |                ^^^^^^^^^^^^^^\n72 |             list(args), check=check, capture_output=True, text=True, **kwargs\n73 |         )\n   |\n\nFBT003 Boolean positional value in function call\n  --> x_cls_make_github_clones_x.py:80:62\n   |\n78 |     @property\n79 |     def allow_token_clone(self) -> bool:\n80 |         return self.get_env_bool(self.ALLOW_TOKEN_CLONE_ENV, False)\n   |                                                              ^^^^^\n81 |\n82 |     def __init__(self, ctx: object | None = None) -> None:\n   |\n\nN801 Class name `x_cls_make_github_clones_x` should use CapWords convention\n  --> x_cls_make_github_clones_x.py:86:7\n   |\n86 | class x_cls_make_github_clones_x(BaseMake):\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |     PER_PAGE = 100\n88 |     USER_AGENT = \"clone-script\"\n   |\n\nPLR0913 Too many arguments in function definition (8 > 5)\n  --> x_cls_make_github_clones_x.py:90:9\n   |\n88 |     USER_AGENT = \"clone-script\"\n89 |\n90 |     def __init__(\n   |         ^^^^^^^^\n91 |         self,\n92 |         username: str | None = None,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:94:9\n   |\n92 |         username: str | None = None,\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n   |         ^^^^^^^\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:94:9\n   |\n92 |         username: str | None = None,\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n   |         ^^^^^^^\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:95:9\n   |\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n   |         ^^^^^^^^^^^^^\n96 |         force_reclone: bool = False,\n97 |         names: list[str] | str | None = None,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:95:9\n   |\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n   |         ^^^^^^^^^^^^^\n96 |         force_reclone: bool = False,\n97 |         names: list[str] | str | None = None,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:96:9\n   |\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |         ^^^^^^^^^^^^^\n97 |         names: list[str] | str | None = None,\n98 |         token: str | None = None,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:96:9\n   |\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |         ^^^^^^^^^^^^^\n97 |         names: list[str] | str | None = None,\n98 |         token: str | None = None,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:99:9\n    |\n 97 |         names: list[str] | str | None = None,\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n    |         ^^^^^^^^^^^^^^^\n100 |         **kwargs: Any,\n101 |     ) -> None:\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_github_clones_x.py:99:9\n    |\n 97 |         names: list[str] | str | None = None,\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n    |         ^^^^^^^^^^^^^^^\n100 |         **kwargs: Any,\n101 |     ) -> None:\n    |\n\nARG002 Unused method argument: `kwargs`\n   --> x_cls_make_github_clones_x.py:100:11\n    |\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n100 |         **kwargs: Any,\n    |           ^^^^^^\n101 |     ) -> None:\n102 |         self.username = username\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> x_cls_make_github_clones_x.py:100:19\n    |\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n100 |         **kwargs: Any,\n    |                   ^^^\n101 |     ) -> None:\n102 |         self.username = username\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_make_github_clones_x.py:126:9\n    |\n124 |         self, url: str, headers: dict[str, str] | None = None\n125 |     ) -> list[dict[str, Any]]:\n126 |         import urllib.request\n    |         ^^^^^^^^^^^^^^^^^^^^^\n127 |\n128 |         req = urllib.request.Request(url, headers=headers or {})\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_github_clones_x.py:128:15\n    |\n126 |         import urllib.request\n127 |\n128 |         req = urllib.request.Request(url, headers=headers or {})\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n129 |         with urllib.request.urlopen(req) as resp:\n130 |             raw: Any = json.load(resp)\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_github_clones_x.py:129:14\n    |\n128 |         req = urllib.request.Request(url, headers=headers or {})\n129 |         with urllib.request.urlopen(req) as resp:\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n130 |             raw: Any = json.load(resp)\n131 |         result: list[dict[str, Any]] = []\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_github_clones_x.py:137:21\n    |\n135 |             for entry in cast(\"list[object]\", raw):\n136 |                 if isinstance(entry, dict):\n137 |                     result.append(cast(\"dict[str, Any]\", entry))\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n138 |         return result\n    |\nhelp: Replace for loop with list.extend\n\nC901 `fetch_repos` is too complex (14 > 10)\n   --> x_cls_make_github_clones_x.py:140:9\n    |\n138 |         return result\n139 |\n140 |     def fetch_repos(\n    |         ^^^^^^^^^^^\n141 |         self, username: str | None = None, include_forks: bool | None = None\n142 |     ) -> list[dict[str, Any]]:\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:141:44\n    |\n140 |     def fetch_repos(\n141 |         self, username: str | None = None, include_forks: bool | None = None\n    |                                            ^^^^^^^^^^^^^\n142 |     ) -> list[dict[str, Any]]:\n143 |         username = username or self.username\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_clones_x.py:148:19\n    |\n146 |         )\n147 |         if not username and not self.token:\n148 |             raise RuntimeError(\"username or token required\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n149 |         per_page = self.PER_PAGE\n150 |         headers: dict[str, str] = {\"User-Agent\": self.USER_AGENT}\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_github_clones_x.py:148:32\n    |\n146 |         )\n147 |         if not username and not self.token:\n148 |             raise RuntimeError(\"username or token required\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n149 |         per_page = self.PER_PAGE\n150 |         headers: dict[str, str] = {\"User-Agent\": self.USER_AGENT}\n    |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:162:24\n    |\n160 |                 try:\n161 |                     data_list = self._request_json(url, headers=headers)\n162 |                 except Exception:\n    |                        ^^^^^^^^^\n163 |                     break\n164 |                 if not data_list:\n    |\n\nC901 `_clone_or_update_repo` is too complex (11 > 10)\n   --> x_cls_make_github_clones_x.py:198:9\n    |\n196 |         return repos\n197 |\n198 |     def _clone_or_update_repo(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^^^\n199 |         # If the repo is missing, clone it\n200 |         if not os.path.exists(repo_dir):\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:200:16\n    |\n198 |     def _clone_or_update_repo(self, repo_dir: str, git_url: str) -> bool:\n199 |         # If the repo is missing, clone it\n200 |         if not os.path.exists(repo_dir):\n    |                ^^^^^^^^^^^^^^\n201 |             _info(f\"Cloning {git_url} into {repo_dir}\")\n202 |             args = [self.GIT_BIN, \"clone\", git_url, repo_dir]\n    |\nhelp: Replace with `Path(...).exists()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:283:20\n    |\n281 |                     if pop.returncode != 0:\n282 |                         _error(\"stash pop failed:\", pop.stderr or pop.stdout)\n283 |             except Exception as e:\n    |                    ^^^^^^^^^\n284 |                 _error(\"failed to pop stash:\", e)\n    |\n\nSIM103 Return the condition `bool(self._clone_to_temp_swap(repo_dir, git_url))` directly\n   --> x_cls_make_github_clones_x.py:300:13\n    |\n299 |               # Fallback: clone-to-temp and atomic swap. Fail fast if this fails.\n300 | /             if self._clone_to_temp_swap(repo_dir, git_url):\n301 | |                 return True\n302 | |\n303 | |             return False\n    | |________________________^\n304 |           except Exception as exc:\n305 |               _error(\"exception while updating:\", exc)\n    |\nhelp: Replace with `return bool(self._clone_to_temp_swap(repo_dir, git_url))`\n\nTRY300 Consider moving this statement to an `else` block\n   --> x_cls_make_github_clones_x.py:303:13\n    |\n301 |                 return True\n302 |\n303 |             return False\n    |             ^^^^^^^^^^^^\n304 |         except Exception as exc:\n305 |             _error(\"exception while updating:\", exc)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:304:16\n    |\n303 |             return False\n304 |         except Exception as exc:\n    |                ^^^^^^^^^\n305 |             _error(\"exception while updating:\", exc)\n306 |             return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:320:16\n    |\n318 |         \"\"\"\n319 |         # If missing, just clone\n320 |         if not os.path.exists(repo_dir):\n    |                ^^^^^^^^^^^^^^\n321 |             return self._clone_or_update_repo(repo_dir, git_url)\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY300 Consider moving this statement to an `else` block\n   --> x_cls_make_github_clones_x.py:405:13\n    |\n403 |                     _error(\"stash pop failed:\", pop.stderr or pop.stdout)\n404 |\n405 |             return ok\n    |             ^^^^^^^^^\n406 |         except Exception as e:\n407 |             _error(\"force refresh exception:\", e)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:406:16\n    |\n405 |             return ok\n406 |         except Exception as e:\n    |                ^^^^^^^^^\n407 |             _error(\"force refresh exception:\", e)\n408 |             return False\n    |\n\nC901 `_clone_to_temp_swap` is too complex (24 > 10)\n   --> x_cls_make_github_clones_x.py:410:9\n    |\n408 |             return False\n409 |\n410 |     def _clone_to_temp_swap(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^\n411 |         \"\"\"Clone into a temporary directory and atomically swap with the\n412 |         existing repo dir. Returns True on success, False on failure.\n    |\n\nPLR0912 Too many branches (24 > 12)\n   --> x_cls_make_github_clones_x.py:410:9\n    |\n408 |             return False\n409 |\n410 |     def _clone_to_temp_swap(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^\n411 |         \"\"\"Clone into a temporary directory and atomically swap with the\n412 |         existing repo dir. Returns True on success, False on failure.\n    |\n\nPLR0915 Too many statements (63 > 50)\n   --> x_cls_make_github_clones_x.py:410:9\n    |\n408 |             return False\n409 |\n410 |     def _clone_to_temp_swap(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^\n411 |         \"\"\"Clone into a temporary directory and atomically swap with the\n412 |         existing repo dir. Returns True on success, False on failure.\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_github_clones_x.py:421:18\n    |\n419 |         - on any failure attempt to restore original state and return False\n420 |         \"\"\"\n421 |         parent = os.path.dirname(repo_dir)\n    |                  ^^^^^^^^^^^^^^^\n422 |         base = os.path.basename(repo_dir)\n423 |         ts = int(time.time())\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_github_clones_x.py:422:16\n    |\n420 |         \"\"\"\n421 |         parent = os.path.dirname(repo_dir)\n422 |         base = os.path.basename(repo_dir)\n    |                ^^^^^^^^^^^^^^^^\n423 |         ts = int(time.time())\n424 |         tmp_dir = os.path.join(parent, f\".{base}.tmp.{ts}\")\n    |\nhelp: Replace with `Path(...).name`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_github_clones_x.py:424:19\n    |\n422 |         base = os.path.basename(repo_dir)\n423 |         ts = int(time.time())\n424 |         tmp_dir = os.path.join(parent, f\".{base}.tmp.{ts}\")\n    |                   ^^^^^^^^^^^^\n425 |         bak_dir = os.path.join(parent, f\".{base}.bak.{ts}\")\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_github_clones_x.py:425:19\n    |\n423 |         ts = int(time.time())\n424 |         tmp_dir = os.path.join(parent, f\".{base}.tmp.{ts}\")\n425 |         bak_dir = os.path.join(parent, f\".{base}.bak.{ts}\")\n    |                   ^^^^^^^^^^^^\n426 |\n427 |         # Ensure parent exists\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_github_clones_x.py:429:13\n    |\n427 |         # Ensure parent exists\n428 |         try:\n429 |             os.makedirs(parent, exist_ok=True)\n    |             ^^^^^^^^^^^\n430 |         except Exception:\n431 |             return False\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:430:16\n    |\n428 |         try:\n429 |             os.makedirs(parent, exist_ok=True)\n430 |         except Exception:\n    |                ^^^^^^^^^\n431 |             return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:443:20\n    |\n441 |             # clone failed; retry per CLONE_RETRIES\n442 |             try:\n443 |                 if os.path.exists(tmp_dir):\n    |                    ^^^^^^^^^^^^^^\n444 |                     shutil.rmtree(tmp_dir)\n445 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:445:13\n    |\n443 |                   if os.path.exists(tmp_dir):\n444 |                       shutil.rmtree(tmp_dir)\n445 | /             except Exception:\n446 | |                 pass\n    | |____________________^\n447 |           else:\n448 |               # All clone attempts failed\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:445:20\n    |\n443 |                 if os.path.exists(tmp_dir):\n444 |                     shutil.rmtree(tmp_dir)\n445 |             except Exception:\n    |                    ^^^^^^^^^\n446 |                 pass\n447 |         else:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:450:20\n    |\n448 |             # All clone attempts failed\n449 |             try:\n450 |                 if os.path.exists(tmp_dir):\n    |                    ^^^^^^^^^^^^^^\n451 |                     shutil.rmtree(tmp_dir)\n452 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:452:13\n    |\n450 |                   if os.path.exists(tmp_dir):\n451 |                       shutil.rmtree(tmp_dir)\n452 | /             except Exception:\n453 | |                 pass\n    | |____________________^\n454 |               return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:452:20\n    |\n450 |                 if os.path.exists(tmp_dir):\n451 |                     shutil.rmtree(tmp_dir)\n452 |             except Exception:\n    |                    ^^^^^^^^^\n453 |                 pass\n454 |             return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:458:16\n    |\n456 |         # At this point tmp_dir exists and contains a fresh clone. Swap it in.\n457 |         try:\n458 |             if os.path.exists(repo_dir):\n    |                ^^^^^^^^^^^^^^\n459 |                 # Move current repo to backup\n460 |                 try:\n    |\nhelp: Replace with `Path(...).exists()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:462:24\n    |\n460 |                 try:\n461 |                     shutil.move(repo_dir, bak_dir)\n462 |                 except Exception:\n    |                        ^^^^^^^^^\n463 |                     # If move fails, clean tmp and fail\n464 |                     try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:464:21\n    |\n462 |                   except Exception:\n463 |                       # If move fails, clean tmp and fail\n464 | /                     try:\n465 | |                         shutil.rmtree(tmp_dir)\n466 | |                     except Exception:\n467 | |                         pass\n    | |____________________________^\n468 |                       return False\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:466:21\n    |\n464 |                       try:\n465 |                           shutil.rmtree(tmp_dir)\n466 | /                     except Exception:\n467 | |                         pass\n    | |____________________________^\n468 |                       return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:466:28\n    |\n464 |                     try:\n465 |                         shutil.rmtree(tmp_dir)\n466 |                     except Exception:\n    |                            ^^^^^^^^^\n467 |                         pass\n468 |                     return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:473:20\n    |\n471 |             try:\n472 |                 shutil.move(tmp_dir, repo_dir)\n473 |             except Exception:\n    |                    ^^^^^^^^^\n474 |                 # try to restore from backup\n475 |                 try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:476:24\n    |\n474 |                 # try to restore from backup\n475 |                 try:\n476 |                     if os.path.exists(bak_dir) and not os.path.exists(\n    |                        ^^^^^^^^^^^^^^\n477 |                         repo_dir\n478 |                     ):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:476:56\n    |\n474 |                 # try to restore from backup\n475 |                 try:\n476 |                     if os.path.exists(bak_dir) and not os.path.exists(\n    |                                                        ^^^^^^^^^^^^^^\n477 |                         repo_dir\n478 |                     ):\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:480:17\n    |\n478 |                       ):\n479 |                           shutil.move(bak_dir, repo_dir)\n480 | /                 except Exception:\n481 | |                     pass\n    | |________________________^\n482 |                   try:\n483 |                       if os.path.exists(tmp_dir):\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:480:24\n    |\n478 |                     ):\n479 |                         shutil.move(bak_dir, repo_dir)\n480 |                 except Exception:\n    |                        ^^^^^^^^^\n481 |                     pass\n482 |                 try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:483:24\n    |\n481 |                     pass\n482 |                 try:\n483 |                     if os.path.exists(tmp_dir):\n    |                        ^^^^^^^^^^^^^^\n484 |                         shutil.rmtree(tmp_dir)\n485 |                 except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:485:17\n    |\n483 |                       if os.path.exists(tmp_dir):\n484 |                           shutil.rmtree(tmp_dir)\n485 | /                 except Exception:\n486 | |                     pass\n    | |________________________^\n487 |                   return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:485:24\n    |\n483 |                     if os.path.exists(tmp_dir):\n484 |                         shutil.rmtree(tmp_dir)\n485 |                 except Exception:\n    |                        ^^^^^^^^^\n486 |                     pass\n487 |                 return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:491:20\n    |\n489 |             # Success: attempt to remove backup (best-effort)\n490 |             try:\n491 |                 if os.path.exists(bak_dir):\n    |                    ^^^^^^^^^^^^^^\n492 |                     shutil.rmtree(bak_dir)\n493 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:493:13\n    |\n491 |                   if os.path.exists(bak_dir):\n492 |                       shutil.rmtree(bak_dir)\n493 | /             except Exception:\n494 | |                 # ignore cleanup failures; leave backup for manual inspection\n495 | |                 pass\n    | |____________________^\n496 |\n497 |               return True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:493:20\n    |\n491 |                 if os.path.exists(bak_dir):\n492 |                     shutil.rmtree(bak_dir)\n493 |             except Exception:\n    |                    ^^^^^^^^^\n494 |                 # ignore cleanup failures; leave backup for manual inspection\n495 |                 pass\n    |\n\nTRY300 Consider moving this statement to an `else` block\n   --> x_cls_make_github_clones_x.py:497:13\n    |\n495 |                 pass\n496 |\n497 |             return True\n    |             ^^^^^^^^^^^\n498 |         except Exception:\n499 |             # Unexpected failure: try to clean tmp and restore backup\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:498:16\n    |\n497 |             return True\n498 |         except Exception:\n    |                ^^^^^^^^^\n499 |             # Unexpected failure: try to clean tmp and restore backup\n500 |             try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:501:20\n    |\n499 |             # Unexpected failure: try to clean tmp and restore backup\n500 |             try:\n501 |                 if os.path.exists(tmp_dir):\n    |                    ^^^^^^^^^^^^^^\n502 |                     shutil.rmtree(tmp_dir)\n503 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:503:13\n    |\n501 |                   if os.path.exists(tmp_dir):\n502 |                       shutil.rmtree(tmp_dir)\n503 | /             except Exception:\n504 | |                 pass\n    | |____________________^\n505 |               try:\n506 |                   if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:503:20\n    |\n501 |                 if os.path.exists(tmp_dir):\n502 |                     shutil.rmtree(tmp_dir)\n503 |             except Exception:\n    |                    ^^^^^^^^^\n504 |                 pass\n505 |             try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:506:20\n    |\n504 |                 pass\n505 |             try:\n506 |                 if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n    |                    ^^^^^^^^^^^^^^\n507 |                     shutil.move(bak_dir, repo_dir)\n508 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:506:52\n    |\n504 |                 pass\n505 |             try:\n506 |                 if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n    |                                                    ^^^^^^^^^^^^^^\n507 |                     shutil.move(bak_dir, repo_dir)\n508 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:508:13\n    |\n506 |                   if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n507 |                       shutil.move(bak_dir, repo_dir)\n508 | /             except Exception:\n509 | |                 pass\n    | |____________________^\n510 |               return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:508:20\n    |\n506 |                 if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n507 |                     shutil.move(bak_dir, repo_dir)\n508 |             except Exception:\n    |                    ^^^^^^^^^\n509 |                 pass\n510 |             return False\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_github_clones_x.py:529:9\n    |\n527 |         if not dest:\n528 |             dest = _repo_parent_root()\n529 |         os.makedirs(dest, exist_ok=True)\n    |         ^^^^^^^^^^^\n530 |         try:\n531 |             repos = self.fetch_repos(username=username)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:532:16\n    |\n530 |         try:\n531 |             repos = self.fetch_repos(username=username)\n532 |         except Exception as exc:\n    |                ^^^^^^^^^\n533 |             _error(\"failed to fetch repo list:\", exc)\n534 |             return 2\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_github_clones_x.py:545:24\n    |\n543 |             if not name:\n544 |                 continue\n545 |             repo_dir = os.path.join(dest, name)\n    |                        ^^^^^^^^^^^^\n546 |             git_url = self._repo_clone_url(r)\n547 |             ok = self._attempt_update(repo_dir, git_url)\n    |\n\nPLW0603 Using the global statement to update `_parent_root_cache` is discouraged\n   --> x_cls_make_github_clones_x.py:559:12\n    |\n558 | def _repo_parent_root() -> str:\n559 |     global _parent_root_cache\n    |            ^^^^^^^^^^^^^^^^^^\n560 |     if _parent_root_cache is not None:\n561 |         return _parent_root_cache\n    |\n\nPLW0603 Using the global statement to update `_parent_root_cache` is discouraged\n   --> x_cls_make_github_clones_x.py:559:12\n    |\n558 | def _repo_parent_root() -> str:\n559 |     global _parent_root_cache\n    |            ^^^^^^^^^^^^^^^^^^\n560 |     if _parent_root_cache is not None:\n561 |         return _parent_root_cache\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_github_clones_x.py:571:89\n    |\n571 | # Helper to normalize legacy hard-coded target_dir values (remove explicit legacy path checks)\n    |                                                                                         ^^^^^^\n572 | def _normalize_target_dir(val: str | None) -> str:\n573 |     return val or _repo_parent_root()\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:580:1\n    |\n578 |       if not getattr(BaseMake, \"DEFAULT_TARGET_DIR\", None):\n579 |           BaseMake.DEFAULT_TARGET_DIR = _repo_parent_root()\n580 | / except Exception:\n581 | |     pass\n    | |________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:580:8\n    |\n578 |     if not getattr(BaseMake, \"DEFAULT_TARGET_DIR\", None):\n579 |         BaseMake.DEFAULT_TARGET_DIR = _repo_parent_root()\n580 | except Exception:\n    |        ^^^^^^^^^\n581 |     pass\n    |\n\nFound 98 errors.\nNo fixes available (6 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_github_clones_x.py:17:29\n   |\n15 | import sys\n16 | import time\n17 | from collections.abc import Iterable\n   |                             ^^^^^^^^\n18 | from pathlib import Path\n19 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_github_clones_x.py:22:18\n   |\n22 | def _info(*args: Any) -> None:\n   |                  ^^^\n23 |     try:\n24 |         print(\" \".join(str(a) for a in args))\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:25:12\n   |\n23 |     try:\n24 |         print(\" \".join(str(a) for a in args))\n25 |     except Exception:\n   |            ^^^^^^^^^\n26 |         try:\n27 |             sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_clones_x.py:26:9\n   |\n24 |           print(\" \".join(str(a) for a in args))\n25 |       except Exception:\n26 | /         try:\n27 | |             sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n28 | |         except Exception:\n29 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_clones_x.py:28:9\n   |\n26 |           try:\n27 |               sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n28 | /         except Exception:\n29 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:28:16\n   |\n26 |         try:\n27 |             sys.stdout.write(\" \".join(str(a) for a in args) + \"\\n\")\n28 |         except Exception:\n   |                ^^^^^^^^^\n29 |             pass\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_github_clones_x.py:32:19\n   |\n32 | def _error(*args: Any) -> None:\n   |                   ^^^\n33 |     try:\n34 |         print(\" \".join(str(a) for a in args), file=sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:35:12\n   |\n33 |     try:\n34 |         print(\" \".join(str(a) for a in args), file=sys.stderr)\n35 |     except Exception:\n   |            ^^^^^^^^^\n36 |         try:\n37 |             sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_clones_x.py:36:9\n   |\n34 |           print(\" \".join(str(a) for a in args), file=sys.stderr)\n35 |       except Exception:\n36 | /         try:\n37 | |             sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n38 | |         except Exception:\n39 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_clones_x.py:38:9\n   |\n36 |           try:\n37 |               sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n38 | /         except Exception:\n39 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_clones_x.py:38:16\n   |\n36 |         try:\n37 |             sys.stderr.write(\" \".join(str(a) for a in args) + \"\\n\")\n38 |         except Exception:\n   |                ^^^^^^^^^\n39 |             pass\n   |\n\nS105 Possible hardcoded password assigned to: \"TOKEN_ENV_VAR\"\n  --> x_cls_make_github_clones_x.py:45:26\n   |\n43 |     DEFAULT_TARGET_DIR: str | None = None  # dynamic; set after helper defined\n44 |     GIT_BIN: str = \"git\"\n45 |     TOKEN_ENV_VAR: str = \"GITHUB_TOKEN\"\n   |                          ^^^^^^^^^^^^^^\n46 |     ALLOW_TOKEN_CLONE_ENV: str = \"X_ALLOW_TOKEN_CLONE\"\n47 |     RECLONE_ON_CORRUPT: bool = True\n   |\n\nS105 Possible hardcoded password assigned to: \"ALLOW_TOKEN_CLONE_ENV\"\n  --> x_cls_make_github_clones_x.py:46:34\n   |\n44 |     GIT_BIN: str = \"git\"\n45 |     TOKEN_ENV_VAR: str = \"GITHUB_TOKEN\"\n46 |     ALLOW_TOKEN_CLONE_ENV: str = \"X_ALLOW_TOKEN_CLONE\"\n   |                                  ^^^^^^^^^^^^^^^^^^^^^\n47 |     RECLONE_ON_CORRUPT: bool = True\n48 |     # Auto-reclone/repair is enabled by default. The implementation performs a\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`\n  --> x_cls_make_github_clones_x.py:54:42\n   |\n53 |     @classmethod\n54 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                          ^^^\n55 |         return os.environ.get(name, default)\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `get_env`\n  --> x_cls_make_github_clones_x.py:54:57\n   |\n53 |     @classmethod\n54 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                                         ^^^\n55 |         return os.environ.get(name, default)\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:58:38\n   |\n57 |     @classmethod\n58 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n59 |         v = os.environ.get(name, None)\n60 |         if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:58:38\n   |\n57 |     @classmethod\n58 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n59 |         v = os.environ.get(name, None)\n60 |         if v is None:\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> x_cls_make_github_clones_x.py:65:46\n   |\n64 |     def run_cmd(\n65 |         self, args: Iterable[str], **kwargs: Any\n   |                                              ^^^\n66 |     ) -> subprocess.CompletedProcess[str]:\n67 |         # Ensure we don't pass duplicate 'check' keyword to subprocess.run\n   |\n\nS603 `subprocess` call: check for execution of untrusted input\n  --> x_cls_make_github_clones_x.py:71:16\n   |\n69 |         # supply it explicitly.\n70 |         check = kwargs.pop(\"check\", False)\n71 |         return subprocess.run(\n   |                ^^^^^^^^^^^^^^\n72 |             list(args), check=check, capture_output=True, text=True, **kwargs\n73 |         )\n   |\n\nFBT003 Boolean positional value in function call\n  --> x_cls_make_github_clones_x.py:80:62\n   |\n78 |     @property\n79 |     def allow_token_clone(self) -> bool:\n80 |         return self.get_env_bool(self.ALLOW_TOKEN_CLONE_ENV, False)\n   |                                                              ^^^^^\n81 |\n82 |     def __init__(self, ctx: object | None = None) -> None:\n   |\n\nN801 Class name `x_cls_make_github_clones_x` should use CapWords convention\n  --> x_cls_make_github_clones_x.py:86:7\n   |\n86 | class x_cls_make_github_clones_x(BaseMake):\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |     PER_PAGE = 100\n88 |     USER_AGENT = \"clone-script\"\n   |\n\nPLR0913 Too many arguments in function definition (8 > 5)\n  --> x_cls_make_github_clones_x.py:90:9\n   |\n88 |     USER_AGENT = \"clone-script\"\n89 |\n90 |     def __init__(\n   |         ^^^^^^^^\n91 |         self,\n92 |         username: str | None = None,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:94:9\n   |\n92 |         username: str | None = None,\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n   |         ^^^^^^^\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:94:9\n   |\n92 |         username: str | None = None,\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n   |         ^^^^^^^\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:95:9\n   |\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n   |         ^^^^^^^^^^^^^\n96 |         force_reclone: bool = False,\n97 |         names: list[str] | str | None = None,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:95:9\n   |\n93 |         target_dir: str | None = None,\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n   |         ^^^^^^^^^^^^^\n96 |         force_reclone: bool = False,\n97 |         names: list[str] | str | None = None,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_github_clones_x.py:96:9\n   |\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |         ^^^^^^^^^^^^^\n97 |         names: list[str] | str | None = None,\n98 |         token: str | None = None,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_github_clones_x.py:96:9\n   |\n94 |         shallow: bool = False,\n95 |         include_forks: bool = False,\n96 |         force_reclone: bool = False,\n   |         ^^^^^^^^^^^^^\n97 |         names: list[str] | str | None = None,\n98 |         token: str | None = None,\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:99:9\n    |\n 97 |         names: list[str] | str | None = None,\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n    |         ^^^^^^^^^^^^^^^\n100 |         **kwargs: Any,\n101 |     ) -> None:\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_github_clones_x.py:99:9\n    |\n 97 |         names: list[str] | str | None = None,\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n    |         ^^^^^^^^^^^^^^^\n100 |         **kwargs: Any,\n101 |     ) -> None:\n    |\n\nARG002 Unused method argument: `kwargs`\n   --> x_cls_make_github_clones_x.py:100:11\n    |\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n100 |         **kwargs: Any,\n    |           ^^^^^^\n101 |     ) -> None:\n102 |         self.username = username\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> x_cls_make_github_clones_x.py:100:19\n    |\n 98 |         token: str | None = None,\n 99 |         include_private: bool = True,\n100 |         **kwargs: Any,\n    |                   ^^^\n101 |     ) -> None:\n102 |         self.username = username\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_make_github_clones_x.py:126:9\n    |\n124 |         self, url: str, headers: dict[str, str] | None = None\n125 |     ) -> list[dict[str, Any]]:\n126 |         import urllib.request\n    |         ^^^^^^^^^^^^^^^^^^^^^\n127 |\n128 |         req = urllib.request.Request(url, headers=headers or {})\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_github_clones_x.py:128:15\n    |\n126 |         import urllib.request\n127 |\n128 |         req = urllib.request.Request(url, headers=headers or {})\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n129 |         with urllib.request.urlopen(req) as resp:\n130 |             raw: Any = json.load(resp)\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> x_cls_make_github_clones_x.py:129:14\n    |\n128 |         req = urllib.request.Request(url, headers=headers or {})\n129 |         with urllib.request.urlopen(req) as resp:\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n130 |             raw: Any = json.load(resp)\n131 |         result: list[dict[str, Any]] = []\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_github_clones_x.py:137:21\n    |\n135 |             for entry in cast(\"list[object]\", raw):\n136 |                 if isinstance(entry, dict):\n137 |                     result.append(cast(\"dict[str, Any]\", entry))\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n138 |         return result\n    |\nhelp: Replace for loop with list.extend\n\nC901 `fetch_repos` is too complex (14 > 10)\n   --> x_cls_make_github_clones_x.py:140:9\n    |\n138 |         return result\n139 |\n140 |     def fetch_repos(\n    |         ^^^^^^^^^^^\n141 |         self, username: str | None = None, include_forks: bool | None = None\n142 |     ) -> list[dict[str, Any]]:\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_github_clones_x.py:141:44\n    |\n140 |     def fetch_repos(\n141 |         self, username: str | None = None, include_forks: bool | None = None\n    |                                            ^^^^^^^^^^^^^\n142 |     ) -> list[dict[str, Any]]:\n143 |         username = username or self.username\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_clones_x.py:148:19\n    |\n146 |         )\n147 |         if not username and not self.token:\n148 |             raise RuntimeError(\"username or token required\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n149 |         per_page = self.PER_PAGE\n150 |         headers: dict[str, str] = {\"User-Agent\": self.USER_AGENT}\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_github_clones_x.py:148:32\n    |\n146 |         )\n147 |         if not username and not self.token:\n148 |             raise RuntimeError(\"username or token required\")\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n149 |         per_page = self.PER_PAGE\n150 |         headers: dict[str, str] = {\"User-Agent\": self.USER_AGENT}\n    |\nhelp: Assign to variable; remove string literal\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:162:24\n    |\n160 |                 try:\n161 |                     data_list = self._request_json(url, headers=headers)\n162 |                 except Exception:\n    |                        ^^^^^^^^^\n163 |                     break\n164 |                 if not data_list:\n    |\n\nC901 `_clone_or_update_repo` is too complex (11 > 10)\n   --> x_cls_make_github_clones_x.py:198:9\n    |\n196 |         return repos\n197 |\n198 |     def _clone_or_update_repo(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^^^\n199 |         # If the repo is missing, clone it\n200 |         if not os.path.exists(repo_dir):\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:200:16\n    |\n198 |     def _clone_or_update_repo(self, repo_dir: str, git_url: str) -> bool:\n199 |         # If the repo is missing, clone it\n200 |         if not os.path.exists(repo_dir):\n    |                ^^^^^^^^^^^^^^\n201 |             _info(f\"Cloning {git_url} into {repo_dir}\")\n202 |             args = [self.GIT_BIN, \"clone\", git_url, repo_dir]\n    |\nhelp: Replace with `Path(...).exists()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:283:20\n    |\n281 |                     if pop.returncode != 0:\n282 |                         _error(\"stash pop failed:\", pop.stderr or pop.stdout)\n283 |             except Exception as e:\n    |                    ^^^^^^^^^\n284 |                 _error(\"failed to pop stash:\", e)\n    |\n\nSIM103 Return the condition `bool(self._clone_to_temp_swap(repo_dir, git_url))` directly\n   --> x_cls_make_github_clones_x.py:300:13\n    |\n299 |               # Fallback: clone-to-temp and atomic swap. Fail fast if this fails.\n300 | /             if self._clone_to_temp_swap(repo_dir, git_url):\n301 | |                 return True\n302 | |\n303 | |             return False\n    | |________________________^\n304 |           except Exception as exc:\n305 |               _error(\"exception while updating:\", exc)\n    |\nhelp: Replace with `return bool(self._clone_to_temp_swap(repo_dir, git_url))`\n\nTRY300 Consider moving this statement to an `else` block\n   --> x_cls_make_github_clones_x.py:303:13\n    |\n301 |                 return True\n302 |\n303 |             return False\n    |             ^^^^^^^^^^^^\n304 |         except Exception as exc:\n305 |             _error(\"exception while updating:\", exc)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:304:16\n    |\n303 |             return False\n304 |         except Exception as exc:\n    |                ^^^^^^^^^\n305 |             _error(\"exception while updating:\", exc)\n306 |             return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:320:16\n    |\n318 |         \"\"\"\n319 |         # If missing, just clone\n320 |         if not os.path.exists(repo_dir):\n    |                ^^^^^^^^^^^^^^\n321 |             return self._clone_or_update_repo(repo_dir, git_url)\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY300 Consider moving this statement to an `else` block\n   --> x_cls_make_github_clones_x.py:405:13\n    |\n403 |                     _error(\"stash pop failed:\", pop.stderr or pop.stdout)\n404 |\n405 |             return ok\n    |             ^^^^^^^^^\n406 |         except Exception as e:\n407 |             _error(\"force refresh exception:\", e)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:406:16\n    |\n405 |             return ok\n406 |         except Exception as e:\n    |                ^^^^^^^^^\n407 |             _error(\"force refresh exception:\", e)\n408 |             return False\n    |\n\nC901 `_clone_to_temp_swap` is too complex (24 > 10)\n   --> x_cls_make_github_clones_x.py:410:9\n    |\n408 |             return False\n409 |\n410 |     def _clone_to_temp_swap(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^\n411 |         \"\"\"Clone into a temporary directory and atomically swap with the\n412 |         existing repo dir. Returns True on success, False on failure.\n    |\n\nPLR0912 Too many branches (24 > 12)\n   --> x_cls_make_github_clones_x.py:410:9\n    |\n408 |             return False\n409 |\n410 |     def _clone_to_temp_swap(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^\n411 |         \"\"\"Clone into a temporary directory and atomically swap with the\n412 |         existing repo dir. Returns True on success, False on failure.\n    |\n\nPLR0915 Too many statements (63 > 50)\n   --> x_cls_make_github_clones_x.py:410:9\n    |\n408 |             return False\n409 |\n410 |     def _clone_to_temp_swap(self, repo_dir: str, git_url: str) -> bool:\n    |         ^^^^^^^^^^^^^^^^^^^\n411 |         \"\"\"Clone into a temporary directory and atomically swap with the\n412 |         existing repo dir. Returns True on success, False on failure.\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_github_clones_x.py:421:18\n    |\n419 |         - on any failure attempt to restore original state and return False\n420 |         \"\"\"\n421 |         parent = os.path.dirname(repo_dir)\n    |                  ^^^^^^^^^^^^^^^\n422 |         base = os.path.basename(repo_dir)\n423 |         ts = int(time.time())\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_github_clones_x.py:422:16\n    |\n420 |         \"\"\"\n421 |         parent = os.path.dirname(repo_dir)\n422 |         base = os.path.basename(repo_dir)\n    |                ^^^^^^^^^^^^^^^^\n423 |         ts = int(time.time())\n424 |         tmp_dir = os.path.join(parent, f\".{base}.tmp.{ts}\")\n    |\nhelp: Replace with `Path(...).name`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_github_clones_x.py:424:19\n    |\n422 |         base = os.path.basename(repo_dir)\n423 |         ts = int(time.time())\n424 |         tmp_dir = os.path.join(parent, f\".{base}.tmp.{ts}\")\n    |                   ^^^^^^^^^^^^\n425 |         bak_dir = os.path.join(parent, f\".{base}.bak.{ts}\")\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_github_clones_x.py:425:19\n    |\n423 |         ts = int(time.time())\n424 |         tmp_dir = os.path.join(parent, f\".{base}.tmp.{ts}\")\n425 |         bak_dir = os.path.join(parent, f\".{base}.bak.{ts}\")\n    |                   ^^^^^^^^^^^^\n426 |\n427 |         # Ensure parent exists\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_github_clones_x.py:429:13\n    |\n427 |         # Ensure parent exists\n428 |         try:\n429 |             os.makedirs(parent, exist_ok=True)\n    |             ^^^^^^^^^^^\n430 |         except Exception:\n431 |             return False\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:430:16\n    |\n428 |         try:\n429 |             os.makedirs(parent, exist_ok=True)\n430 |         except Exception:\n    |                ^^^^^^^^^\n431 |             return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:443:20\n    |\n441 |             # clone failed; retry per CLONE_RETRIES\n442 |             try:\n443 |                 if os.path.exists(tmp_dir):\n    |                    ^^^^^^^^^^^^^^\n444 |                     shutil.rmtree(tmp_dir)\n445 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:445:13\n    |\n443 |                   if os.path.exists(tmp_dir):\n444 |                       shutil.rmtree(tmp_dir)\n445 | /             except Exception:\n446 | |                 pass\n    | |____________________^\n447 |           else:\n448 |               # All clone attempts failed\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:445:20\n    |\n443 |                 if os.path.exists(tmp_dir):\n444 |                     shutil.rmtree(tmp_dir)\n445 |             except Exception:\n    |                    ^^^^^^^^^\n446 |                 pass\n447 |         else:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:450:20\n    |\n448 |             # All clone attempts failed\n449 |             try:\n450 |                 if os.path.exists(tmp_dir):\n    |                    ^^^^^^^^^^^^^^\n451 |                     shutil.rmtree(tmp_dir)\n452 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:452:13\n    |\n450 |                   if os.path.exists(tmp_dir):\n451 |                       shutil.rmtree(tmp_dir)\n452 | /             except Exception:\n453 | |                 pass\n    | |____________________^\n454 |               return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:452:20\n    |\n450 |                 if os.path.exists(tmp_dir):\n451 |                     shutil.rmtree(tmp_dir)\n452 |             except Exception:\n    |                    ^^^^^^^^^\n453 |                 pass\n454 |             return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:458:16\n    |\n456 |         # At this point tmp_dir exists and contains a fresh clone. Swap it in.\n457 |         try:\n458 |             if os.path.exists(repo_dir):\n    |                ^^^^^^^^^^^^^^\n459 |                 # Move current repo to backup\n460 |                 try:\n    |\nhelp: Replace with `Path(...).exists()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:462:24\n    |\n460 |                 try:\n461 |                     shutil.move(repo_dir, bak_dir)\n462 |                 except Exception:\n    |                        ^^^^^^^^^\n463 |                     # If move fails, clean tmp and fail\n464 |                     try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_clones_x.py:464:21\n    |\n462 |                   except Exception:\n463 |                       # If move fails, clean tmp and fail\n464 | /                     try:\n465 | |                         shutil.rmtree(tmp_dir)\n466 | |                     except Exception:\n467 | |                         pass\n    | |____________________________^\n468 |                       return False\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:466:21\n    |\n464 |                       try:\n465 |                           shutil.rmtree(tmp_dir)\n466 | /                     except Exception:\n467 | |                         pass\n    | |____________________________^\n468 |                       return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:466:28\n    |\n464 |                     try:\n465 |                         shutil.rmtree(tmp_dir)\n466 |                     except Exception:\n    |                            ^^^^^^^^^\n467 |                         pass\n468 |                     return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:473:20\n    |\n471 |             try:\n472 |                 shutil.move(tmp_dir, repo_dir)\n473 |             except Exception:\n    |                    ^^^^^^^^^\n474 |                 # try to restore from backup\n475 |                 try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:476:24\n    |\n474 |                 # try to restore from backup\n475 |                 try:\n476 |                     if os.path.exists(bak_dir) and not os.path.exists(\n    |                        ^^^^^^^^^^^^^^\n477 |                         repo_dir\n478 |                     ):\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:476:56\n    |\n474 |                 # try to restore from backup\n475 |                 try:\n476 |                     if os.path.exists(bak_dir) and not os.path.exists(\n    |                                                        ^^^^^^^^^^^^^^\n477 |                         repo_dir\n478 |                     ):\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:480:17\n    |\n478 |                       ):\n479 |                           shutil.move(bak_dir, repo_dir)\n480 | /                 except Exception:\n481 | |                     pass\n    | |________________________^\n482 |                   try:\n483 |                       if os.path.exists(tmp_dir):\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:480:24\n    |\n478 |                     ):\n479 |                         shutil.move(bak_dir, repo_dir)\n480 |                 except Exception:\n    |                        ^^^^^^^^^\n481 |                     pass\n482 |                 try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:483:24\n    |\n481 |                     pass\n482 |                 try:\n483 |                     if os.path.exists(tmp_dir):\n    |                        ^^^^^^^^^^^^^^\n484 |                         shutil.rmtree(tmp_dir)\n485 |                 except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:485:17\n    |\n483 |                       if os.path.exists(tmp_dir):\n484 |                           shutil.rmtree(tmp_dir)\n485 | /                 except Exception:\n486 | |                     pass\n    | |________________________^\n487 |                   return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:485:24\n    |\n483 |                     if os.path.exists(tmp_dir):\n484 |                         shutil.rmtree(tmp_dir)\n485 |                 except Exception:\n    |                        ^^^^^^^^^\n486 |                     pass\n487 |                 return False\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:491:20\n    |\n489 |             # Success: attempt to remove backup (best-effort)\n490 |             try:\n491 |                 if os.path.exists(bak_dir):\n    |                    ^^^^^^^^^^^^^^\n492 |                     shutil.rmtree(bak_dir)\n493 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:493:13\n    |\n491 |                   if os.path.exists(bak_dir):\n492 |                       shutil.rmtree(bak_dir)\n493 | /             except Exception:\n494 | |                 # ignore cleanup failures; leave backup for manual inspection\n495 | |                 pass\n    | |____________________^\n496 |\n497 |               return True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:493:20\n    |\n491 |                 if os.path.exists(bak_dir):\n492 |                     shutil.rmtree(bak_dir)\n493 |             except Exception:\n    |                    ^^^^^^^^^\n494 |                 # ignore cleanup failures; leave backup for manual inspection\n495 |                 pass\n    |\n\nTRY300 Consider moving this statement to an `else` block\n   --> x_cls_make_github_clones_x.py:497:13\n    |\n495 |                 pass\n496 |\n497 |             return True\n    |             ^^^^^^^^^^^\n498 |         except Exception:\n499 |             # Unexpected failure: try to clean tmp and restore backup\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:498:16\n    |\n497 |             return True\n498 |         except Exception:\n    |                ^^^^^^^^^\n499 |             # Unexpected failure: try to clean tmp and restore backup\n500 |             try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:501:20\n    |\n499 |             # Unexpected failure: try to clean tmp and restore backup\n500 |             try:\n501 |                 if os.path.exists(tmp_dir):\n    |                    ^^^^^^^^^^^^^^\n502 |                     shutil.rmtree(tmp_dir)\n503 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:503:13\n    |\n501 |                   if os.path.exists(tmp_dir):\n502 |                       shutil.rmtree(tmp_dir)\n503 | /             except Exception:\n504 | |                 pass\n    | |____________________^\n505 |               try:\n506 |                   if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:503:20\n    |\n501 |                 if os.path.exists(tmp_dir):\n502 |                     shutil.rmtree(tmp_dir)\n503 |             except Exception:\n    |                    ^^^^^^^^^\n504 |                 pass\n505 |             try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:506:20\n    |\n504 |                 pass\n505 |             try:\n506 |                 if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n    |                    ^^^^^^^^^^^^^^\n507 |                     shutil.move(bak_dir, repo_dir)\n508 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_github_clones_x.py:506:52\n    |\n504 |                 pass\n505 |             try:\n506 |                 if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n    |                                                    ^^^^^^^^^^^^^^\n507 |                     shutil.move(bak_dir, repo_dir)\n508 |             except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:508:13\n    |\n506 |                   if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n507 |                       shutil.move(bak_dir, repo_dir)\n508 | /             except Exception:\n509 | |                 pass\n    | |____________________^\n510 |               return False\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:508:20\n    |\n506 |                 if os.path.exists(bak_dir) and not os.path.exists(repo_dir):\n507 |                     shutil.move(bak_dir, repo_dir)\n508 |             except Exception:\n    |                    ^^^^^^^^^\n509 |                 pass\n510 |             return False\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_github_clones_x.py:529:9\n    |\n527 |         if not dest:\n528 |             dest = _repo_parent_root()\n529 |         os.makedirs(dest, exist_ok=True)\n    |         ^^^^^^^^^^^\n530 |         try:\n531 |             repos = self.fetch_repos(username=username)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:532:16\n    |\n530 |         try:\n531 |             repos = self.fetch_repos(username=username)\n532 |         except Exception as exc:\n    |                ^^^^^^^^^\n533 |             _error(\"failed to fetch repo list:\", exc)\n534 |             return 2\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_github_clones_x.py:545:24\n    |\n543 |             if not name:\n544 |                 continue\n545 |             repo_dir = os.path.join(dest, name)\n    |                        ^^^^^^^^^^^^\n546 |             git_url = self._repo_clone_url(r)\n547 |             ok = self._attempt_update(repo_dir, git_url)\n    |\n\nPLW0603 Using the global statement to update `_parent_root_cache` is discouraged\n   --> x_cls_make_github_clones_x.py:559:12\n    |\n558 | def _repo_parent_root() -> str:\n559 |     global _parent_root_cache\n    |            ^^^^^^^^^^^^^^^^^^\n560 |     if _parent_root_cache is not None:\n561 |         return _parent_root_cache\n    |\n\nPLW0603 Using the global statement to update `_parent_root_cache` is discouraged\n   --> x_cls_make_github_clones_x.py:559:12\n    |\n558 | def _repo_parent_root() -> str:\n559 |     global _parent_root_cache\n    |            ^^^^^^^^^^^^^^^^^^\n560 |     if _parent_root_cache is not None:\n561 |         return _parent_root_cache\n    |\n\nE501 Line too long (94 > 88)\n   --> x_cls_make_github_clones_x.py:571:89\n    |\n571 | # Helper to normalize legacy hard-coded target_dir values (remove explicit legacy path checks)\n    |                                                                                         ^^^^^^\n572 | def _normalize_target_dir(val: str | None) -> str:\n573 |     return val or _repo_parent_root()\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_clones_x.py:580:1\n    |\n578 |       if not getattr(BaseMake, \"DEFAULT_TARGET_DIR\", None):\n579 |           BaseMake.DEFAULT_TARGET_DIR = _repo_parent_root()\n580 | / except Exception:\n581 | |     pass\n    | |________^\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_clones_x.py:580:8\n    |\n578 |     if not getattr(BaseMake, \"DEFAULT_TARGET_DIR\", None):\n579 |         BaseMake.DEFAULT_TARGET_DIR = _repo_parent_root()\n580 | except Exception:\n    |        ^^^^^^^^^\n581 |     pass\n    |\n\nFound 98 errors.\nNo fixes available (6 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_github_visitor_x": {
        "files": [
            "tests/test_github_visitor.py",
            "x_cls_make_github_visitor_x.py"
        ],
        "files_index": [
            "tests/test_github_visitor.py",
            "x_cls_make_github_visitor_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted, 1 file would be left unchanged.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-07 17:44:13.196008+00:00\n+++ C:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\t2025-10-07 17:45:52.580901+00:00\n@@ -74,13 +74,11 @@\n \n         # The workspace root must not itself be a git repository (we operate\n         # on immediate child clones).\n \n         if (self.root / \".git\").exists():\n-            raise AssertionError(\n-                f\"root path must not be a git repository: {self.root}\"\n-            )\n+            raise AssertionError(f\"root path must not be a git repository: {self.root}\")\n \n         self.output_filename = output_filename\n         self._tool_reports: dict[str, Any] = {}\n         self._ctx = ctx\n         self.enable_cache = enable_cache\n@@ -217,11 +215,13 @@\n \n     def _prune_cache(self, keep: int = 500) -> None:\n         if not self.enable_cache or not self.cache_dir.exists():\n             return\n         try:\n-            cache_files = sorted(self.cache_dir.glob(\"*.json\"), key=lambda p: p.stat().st_mtime)\n+            cache_files = sorted(\n+                self.cache_dir.glob(\"*.json\"), key=lambda p: p.stat().st_mtime\n+            )\n         except Exception:\n             return\n         overflow = len(cache_files) - keep\n         if overflow <= 0:\n             return\n@@ -237,13 +237,11 @@\n         Returns the list of repository names (relative paths) that were indexed.\n         \"\"\"\n         children = self._child_dirs()\n         if not children:\n             try:\n-                entries = sorted(\n-                    p.name for p in self.root.iterdir() if p.is_dir()\n-                )\n+                entries = sorted(p.name for p in self.root.iterdir() if p.is_dir())\n             except Exception:\n                 entries = []\n             preview = \", \".join(entries[:10])\n             suffix = \"\" if len(entries) <= 10 else \" \u00e2\u20ac\u00a6\"\n             raise AssertionError(\n@@ -542,13 +540,11 @@\n         # re-read and normalize apriori\n         try:\n             with p1.open(\"r\", encoding=\"utf-8\") as fh:\n                 raw_apriori = json.load(fh)\n         except Exception as exc:\n-            raise AssertionError(\n-                f\"failed to read a-priori index: {exc}\"\n-            ) from exc\n+            raise AssertionError(f\"failed to read a-priori index: {exc}\") from exc\n \n         if not isinstance(raw_apriori, dict):\n             raise AssertionError(\n                 f\"a-priori index must be a JSON object mapping repo->files: {p1}\"\n             )\n@@ -565,13 +561,11 @@\n                 apriori[key_str] = normalized\n             else:\n                 apriori[key_str] = []\n \n         # ensure the apriori keys match visible child dirs (use _child_dirs to ignore caches)\n-        current_children = [\n-            str(p.relative_to(self.root)) for p in self._child_dirs()\n-        ]\n+        current_children = [str(p.relative_to(self.root)) for p in self._child_dirs()]\n         apriori_keys = sorted(apriori.keys())\n         if apriori_keys != sorted(current_children):\n             raise AssertionError(\n                 f\"a-priori index contents do not match immediate children.\\n  expected: {sorted(current_children)}\\n  found: {apriori_keys}\"\n             )\n@@ -591,13 +585,11 @@\n \n         try:\n             with p2.open(\"r\", encoding=\"utf-8\") as fh:\n                 raw_data = json.load(fh)\n         except Exception as exc:\n-            raise AssertionError(\n-                f\"failed to read a-posteriori index: {exc}\"\n-            ) from exc\n+            raise AssertionError(f\"failed to read a-posteriori index: {exc}\") from exc\n \n         if not isinstance(raw_data, dict):\n             raise AssertionError(\n                 f\"a-posteriori index must be a JSON object mapping repo->files: {p2}\"\n             )\n@@ -694,11 +686,9 @@\n     summary = inst.generate_summary_report()\n     overall = summary.get(\"overall_stats\", {})\n     hits = int(overall.get(\"cache_hits\", 0))\n     total = int(overall.get(\"total_tools_run\", 0))\n     ratio = (hits / total * 100.0) if total else 0.0\n-    _info(\n-        f\"wrote a-priori, a-posteriori, and summary files to: {inst.package_root}\"\n-    )\n+    _info(f\"wrote a-priori, a-posteriori, and summary files to: {inst.package_root}\")\n     _info(\n         f\"processed {summary.get('total_repos', 0)} repositories | cache hits: {hits}/{total} ({ratio:.1f}%)\"\n     )\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_github_visitor_x.py:84: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:89: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:123: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:126: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:158: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:171: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:171: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:180: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:180: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:186: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:188: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:199: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:222: error: Expression type contains \"Any\" (has type \"Callable[[Any], Any]\")  [misc]\nx_cls_make_github_visitor_x.py:222: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:293: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:295: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:299: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:302: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\nx_cls_make_github_visitor_x.py:302: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:400: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:400: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:408: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_github_visitor_x.py:409: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_github_visitor_x.py:410: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:411: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:411: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:423: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:429: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:429: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:445: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_visitor_x.py:446: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:459: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:470: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:470: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_github_visitor_x.py:472: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:483: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:485: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:487: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:488: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\nx_cls_make_github_visitor_x.py:488: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:495: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\nx_cls_make_github_visitor_x.py:495: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:497: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:497: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:498: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:498: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:498: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:498: error: Expression type contains \"Any\" (has type \"dict_items[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:499: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:500: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:500: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:501: error: Expression type contains \"Any\" (has type \"tuple[str, dict[Any, Any]]\")  [misc]\nx_cls_make_github_visitor_x.py:501: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:505: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:506: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:507: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:508: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:509: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:509: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:513: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:515: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:515: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:516: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:518: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:520: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:520: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:521: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:522: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:522: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:523: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:545: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:551: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:556: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:556: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:558: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:558: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:558: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:558: error: Expression type contains \"Any\" (has type \"dict_items[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:560: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:562: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:562: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:562: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_github_visitor_x.py:562: error: Redundant cast to \"list[Any]\"  [redundant-cast]\nx_cls_make_github_visitor_x.py:563: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:594: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:600: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:605: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:605: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:606: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:606: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:606: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:606: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:606: error: Expression type contains \"Any\" (has type \"dict_items[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:609: error: Expression type contains \"Any\" (has type \"Any | tuple[Never, Never]\")  [misc]\nx_cls_make_github_visitor_x.py:609: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:609: error: Expression type contains \"Any\" (has type \"Any | dict[Never, Never]\")  [misc]\nx_cls_make_github_visitor_x.py:609: error: Expression type contains \"Any\" (has type \"Any | dict_items[Never, Never]\")  [misc]\nx_cls_make_github_visitor_x.py:610: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:610: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:611: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:611: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:611: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:612: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:612: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:612: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:612: error: Expression type contains \"Any\" (has type \"list[Any]\")  [misc]\nx_cls_make_github_visitor_x.py:613: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:613: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:614: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:614: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:617: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:617: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:617: error: Expression type contains \"Any\" (has type \"dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:618: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:618: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:619: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:619: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:622: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:624: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:626: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:629: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_github_visitor_x.py:633: error: Expression type contains \"Any\" (has type \"tuple[str, list[dict[str, Any]]]\")  [misc]\nx_cls_make_github_visitor_x.py:633: error: Expression type contains \"Any\" (has type \"list[dict[str, Any]]\")  [misc]\nx_cls_make_github_visitor_x.py:635: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:694: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:695: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:695: error: Expression type contains \"Any\" (has type \"Any | dict[Never, Never]\")  [misc]\nx_cls_make_github_visitor_x.py:695: error: Need type annotation for \"overall\"  [var-annotated]\nx_cls_make_github_visitor_x.py:696: error: Expression type contains \"Any\" (has type \"Any | dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:696: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:697: error: Expression type contains \"Any\" (has type \"Any | dict[Any, Any]\")  [misc]\nx_cls_make_github_visitor_x.py:697: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:703: error: Expression has type \"Any\"  [misc]\nx_cls_make_github_visitor_x.py:703: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nFound 134 errors in 1 file (checked 2 source files)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "c:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py\n  c:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py:250:17 - error: Implicit string concatenation not allowed (reportImplicitStringConcatenation)\n  c:\\x_runner_x\\x_make_github_visitor_x\\x_cls_make_github_visitor_x.py:441:25 - error: Implicit string concatenation not allowed (reportImplicitStringConcatenation)\n2 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "warning: The top-level linter settings are deprecated in favour of their counterparts in the `lint` section. Please update the following options in `pyproject.toml`:\n  - 'ignore' -> 'lint.ignore'\n  - 'select' -> 'lint.select'\n",
                "stdout": "INP001 File `tests\\test_github_visitor.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_github_visitor.py:1:1\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_visitor_x.py:18:5\n   |\n16 |   def _info(*args: object) -> None:\n17 |       msg = \" \".join(str(a) for a in args)\n18 | /     try:\n19 | |         _LOGGER.info(\"%s\", msg)\n20 | |     except Exception:\n21 | |         pass\n   | |____________^\n22 |       try:\n23 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_visitor_x.py:20:5\n   |\n18 |       try:\n19 |           _LOGGER.info(\"%s\", msg)\n20 | /     except Exception:\n21 | |         pass\n   | |____________^\n22 |       try:\n23 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_visitor_x.py:20:12\n   |\n18 |     try:\n19 |         _LOGGER.info(\"%s\", msg)\n20 |     except Exception:\n   |            ^^^^^^^^^\n21 |         pass\n22 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_visitor_x.py:24:12\n   |\n22 |     try:\n23 |         print(msg)\n24 |     except Exception:\n   |            ^^^^^^^^^\n25 |         try:\n26 |             sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_visitor_x.py:25:9\n   |\n23 |           print(msg)\n24 |       except Exception:\n25 | /         try:\n26 | |             sys.stdout.write(msg + \"\\n\")\n27 | |         except Exception:\n28 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_visitor_x.py:27:9\n   |\n25 |           try:\n26 |               sys.stdout.write(msg + \"\\n\")\n27 | /         except Exception:\n28 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_visitor_x.py:27:16\n   |\n25 |         try:\n26 |             sys.stdout.write(msg + \"\\n\")\n27 |         except Exception:\n   |                ^^^^^^^^^\n28 |             pass\n   |\n\nN801 Class name `x_cls_make_github_visitor_x` should use CapWords convention\n  --> x_cls_make_github_visitor_x.py:52:7\n   |\n52 | class x_cls_make_github_visitor_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n53 |     def __init__(\n54 |         self,\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_github_visitor_x.py:71:19\n   |\n69 |           self.root = Path(root_dir)\n70 |           if not self.root.exists() or not self.root.is_dir():\n71 |               raise AssertionError(\n   |  ___________________^\n72 | |                 f\"root path must exist and be a directory: {self.root}\"\n73 | |             )\n   | |_____________^\n74 |\n75 |           # The workspace root must not itself be a git repository (we operate\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_github_visitor_x.py:72:17\n   |\n70 |         if not self.root.exists() or not self.root.is_dir():\n71 |             raise AssertionError(\n72 |                 f\"root path must exist and be a directory: {self.root}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n73 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_github_visitor_x.py:79:19\n   |\n78 |           if (self.root / \".git\").exists():\n79 |               raise AssertionError(\n   |  ___________________^\n80 | |                 f\"root path must not be a git repository: {self.root}\"\n81 | |             )\n   | |_____________^\n82 |\n83 |           self.output_filename = output_filename\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_github_visitor_x.py:80:17\n   |\n78 |         if (self.root / \".git\").exists():\n79 |             raise AssertionError(\n80 |                 f\"root path must not be a git repository: {self.root}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nPIE810 Call `startswith` once with a `tuple`\n   --> x_cls_make_github_visitor_x.py:111:16\n    |\n109 |                 continue\n110 |             name = p.name\n111 |             if name.startswith(\".\") or name.startswith(\"__\"):\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |                 # hidden or dunder directories (including caches)\n113 |                 continue\n    |\nhelp: Merge into a single `startswith` call\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `data`\n   --> x_cls_make_github_visitor_x.py:123:52\n    |\n121 |         return sorted(out)\n122 |\n123 |     def _atomic_write_json(self, path: Path, data: Any) -> None:\n    |                                                    ^^^\n124 |         tmp = path.with_name(path.name + \".tmp\")\n125 |         with tmp.open(\"w\", encoding=\"utf-8\") as fh:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:128:13\n    |\n126 |               json.dump(data, fh, indent=4, sort_keys=True)\n127 |               fh.flush()\n128 | /             try:\n129 | |                 os.fsync(fh.fileno())\n130 | |             except Exception:\n131 | |                 # best-effort fsync; ignore if unsupported\n132 | |                 pass\n    | |____________________^\n133 |           os.replace(str(tmp), str(path))\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:130:13\n    |\n128 |               try:\n129 |                   os.fsync(fh.fileno())\n130 | /             except Exception:\n131 | |                 # best-effort fsync; ignore if unsupported\n132 | |                 pass\n    | |____________________^\n133 |           os.replace(str(tmp), str(path))\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:130:20\n    |\n128 |             try:\n129 |                 os.fsync(fh.fileno())\n130 |             except Exception:\n    |                    ^^^^^^^^^\n131 |                 # best-effort fsync; ignore if unsupported\n132 |                 pass\n    |\n\nPTH105 `os.replace()` should be replaced by `Path.replace()`\n   --> x_cls_make_github_visitor_x.py:133:9\n    |\n131 |                 # best-effort fsync; ignore if unsupported\n132 |                 pass\n133 |         os.replace(str(tmp), str(path))\n    |         ^^^^^^^^^^\n134 |\n135 |     def _repo_content_hash(self, repo_path: Path) -> str:\n    |\nhelp: Replace with `Path(...).replace(...)`\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:149:13\n    |\n147 |               try:\n148 |                   hasher.update(p.read_bytes())\n149 | /             except Exception:\n150 | |                 # Skip unreadable files without failing the whole hash\n151 | |                 continue\n    | |________________________^\n152 |           return hasher.hexdigest()\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:149:20\n    |\n147 |             try:\n148 |                 hasher.update(p.read_bytes())\n149 |             except Exception:\n    |                    ^^^^^^^^^\n150 |                 # Skip unreadable files without failing the whole hash\n151 |                 continue\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:172:16\n    |\n170 |             with cache_file.open(\"r\", encoding=\"utf-8\") as fh:\n171 |                 cached = cast(\"dict[str, Any]\", json.load(fh))\n172 |         except Exception:\n    |                ^^^^^^^^^\n173 |             try:\n174 |                 cache_file.unlink()\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:173:13\n    |\n171 |                   cached = cast(\"dict[str, Any]\", json.load(fh))\n172 |           except Exception:\n173 | /             try:\n174 | |                 cache_file.unlink()\n175 | |             except Exception:\n176 | |                 pass\n    | |____________________^\n177 |               return None\n178 |           exit_code: int | None\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:175:13\n    |\n173 |               try:\n174 |                   cache_file.unlink()\n175 | /             except Exception:\n176 | |                 pass\n    | |____________________^\n177 |               return None\n178 |           exit_code: int | None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:175:20\n    |\n173 |             try:\n174 |                 cache_file.unlink()\n175 |             except Exception:\n    |                    ^^^^^^^^^\n176 |                 pass\n177 |             return None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:181:16\n    |\n179 |         try:\n180 |             exit_code = int(cached.get(\"exit\", 0))\n181 |         except Exception:\n    |                ^^^^^^^^^\n182 |             exit_code = None\n183 |         if exit_code not in (None, 0):\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:198:9\n    |\n196 |               return\n197 |           cache_file = self._cache_path(repo_name, tool_name, repo_hash)\n198 | /         try:\n199 | |             self._atomic_write_json(cache_file, payload)\n200 | |         except Exception:\n201 | |             # Don't let cache write failures stop execution\n202 | |             pass\n    | |________________^\n203 |\n204 |       def _delete_cache(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:200:9\n    |\n198 |           try:\n199 |               self._atomic_write_json(cache_file, payload)\n200 | /         except Exception:\n201 | |             # Don't let cache write failures stop execution\n202 | |             pass\n    | |________________^\n203 |\n204 |       def _delete_cache(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:200:16\n    |\n198 |         try:\n199 |             self._atomic_write_json(cache_file, payload)\n200 |         except Exception:\n    |                ^^^^^^^^^\n201 |             # Don't let cache write failures stop execution\n202 |             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:213:9\n    |\n211 |               return\n212 |           cache_file = self._cache_path(repo_name, tool_name, repo_hash)\n213 | /         try:\n214 | |             cache_file.unlink()\n215 | |         except Exception:\n216 | |             pass\n    | |________________^\n217 |\n218 |       def _prune_cache(self, keep: int = 500) -> None:\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:215:9\n    |\n213 |           try:\n214 |               cache_file.unlink()\n215 | /         except Exception:\n216 | |             pass\n    | |________________^\n217 |\n218 |       def _prune_cache(self, keep: int = 500) -> None:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:215:16\n    |\n213 |         try:\n214 |             cache_file.unlink()\n215 |         except Exception:\n    |                ^^^^^^^^^\n216 |             pass\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_github_visitor_x.py:222:89\n    |\n220 |             return\n221 |         try:\n222 |             cache_files = sorted(self.cache_dir.glob(\"*.json\"), key=lambda p: p.stat().st_mtime)\n    |                                                                                         ^^^^^^^^\n223 |         except Exception:\n224 |             return\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:223:16\n    |\n221 |         try:\n222 |             cache_files = sorted(self.cache_dir.glob(\"*.json\"), key=lambda p: p.stat().st_mtime)\n223 |         except Exception:\n    |                ^^^^^^^^^\n224 |             return\n225 |         overflow = len(cache_files) - keep\n    |\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:231:13\n    |\n229 |               try:\n230 |                   stale.unlink()\n231 | /             except Exception:\n232 | |                 continue\n    | |________________________^\n233 |\n234 |       def inspect(self, json_name: str) -> list[str]:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:231:20\n    |\n229 |             try:\n230 |                 stale.unlink()\n231 |             except Exception:\n    |                    ^^^^^^^^^\n232 |                 continue\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:245:20\n    |\n243 |                     p.name for p in self.root.iterdir() if p.is_dir()\n244 |                 )\n245 |             except Exception:\n    |                    ^^^^^^^^^\n246 |                 entries = []\n247 |             preview = \", \".join(entries[:10])\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `10` with a constant variable\n   --> x_cls_make_github_visitor_x.py:248:44\n    |\n246 |                 entries = []\n247 |             preview = \", \".join(entries[:10])\n248 |             suffix = \"\" if len(entries) <= 10 else \" \u00e2\u20ac\u00a6\"\n    |                                            ^^\n249 |             raise AssertionError(\n250 |                 \"no child git repositories found\"\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:249:19\n    |\n247 |               preview = \", \".join(entries[:10])\n248 |               suffix = \"\" if len(entries) <= 10 else \" \u00e2\u20ac\u00a6\"\n249 |               raise AssertionError(\n    |  ___________________^\n250 | |                 \"no child git repositories found\"\n251 | |                 f\" under {self.root} (visible dirs: {preview}{suffix})\"\n252 | |             )\n    | |_____________^\n253 |           index: dict[str, list[str]] = {}\n254 |           repo_names: list[str] = []\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:250:17\n    |\n248 |               suffix = \"\" if len(entries) <= 10 else \" \u00e2\u20ac\u00a6\"\n249 |               raise AssertionError(\n250 | /                 \"no child git repositories found\"\n251 | |                 f\" under {self.root} (visible dirs: {preview}{suffix})\"\n    | |_______________________________________________________________________^\n252 |               )\n253 |           index: dict[str, list[str]] = {}\n    |\nhelp: Assign to variable; remove f-string literal\n\nC901 `body` is too complex (13 > 10)\n   --> x_cls_make_github_visitor_x.py:274:9\n    |\n272 |         return repo_names\n273 |\n274 |     def body(self) -> None:\n    |         ^^^^\n275 |         \"\"\"Run toolchain (ruff -> black -> ruff -> mypy -> pyright) against each child repo.\"\"\"\n    |\n\nPLR0915 Too many statements (59 > 50)\n   --> x_cls_make_github_visitor_x.py:274:9\n    |\n272 |         return repo_names\n273 |\n274 |     def body(self) -> None:\n    |         ^^^^\n275 |         \"\"\"Run toolchain (ruff -> black -> ruff -> mypy -> pyright) against each child repo.\"\"\"\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_github_visitor_x.py:275:89\n    |\n274 |     def body(self) -> None:\n275 |         \"\"\"Run toolchain (ruff -> black -> ruff -> mypy -> pyright) against each child repo.\"\"\"\n    |                                                                                         ^^^^^^^\n276 |\n277 |         python = sys.executable\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_github_visitor_x.py:279:13\n    |\n277 |         python = sys.executable\n278 |         packages = [\"ruff\", \"black\", \"mypy\", \"pyright\"]\n279 |         p = subprocess.run(\n    |             ^^^^^^^^^^^^^^\n280 |             [python, \"-m\", \"pip\", \"install\", \"--upgrade\", *packages],\n281 |             check=False,\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:286:19\n    |\n284 |           )\n285 |           if p.returncode != 0:\n286 |               raise AssertionError(\n    |  ___________________^\n287 | |                 f\"failed to install required packages: {p.stdout}\\n{p.stderr}\"\n288 | |             )\n    | |_____________^\n289 |\n290 |           self._prune_cache()\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:287:17\n    |\n285 |         if p.returncode != 0:\n286 |             raise AssertionError(\n287 |                 f\"failed to install required packages: {p.stdout}\\n{p.stderr}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n288 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_github_visitor_x.py:415:24\n    |\n413 |                     continue\n414 |\n415 |                 proc = subprocess.run(\n    |                        ^^^^^^^^^^^^^^\n416 |                     cmd,\n417 |                     check=False,\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> x_cls_make_github_visitor_x.py:435:48\n    |\n433 |                     truncated_stderr = proc.stderr.strip().splitlines()\n434 |                     preview_stdout = \"\\n\".join(truncated_stdout[:5])\n435 |                     if len(truncated_stdout) > 5:\n    |                                                ^\n436 |                         preview_stdout += \"\\n\u00e2\u20ac\u00a6\"\n437 |                     preview_stderr = \"\\n\".join(truncated_stderr[:5])\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> x_cls_make_github_visitor_x.py:438:48\n    |\n436 |                         preview_stdout += \"\\n\u00e2\u20ac\u00a6\"\n437 |                     preview_stderr = \"\\n\".join(truncated_stderr[:5])\n438 |                     if len(truncated_stderr) > 5:\n    |                                                ^\n439 |                         preview_stderr += \"\\n\u00e2\u20ac\u00a6\"\n440 |                     failure_messages.append(\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_github_visitor_x.py:456:89\n    |\n454 |                     )\n455 |                     _info(\n456 |                         f\"{tool_name}: failure (exit {proc.returncode}) in {rel}; details captured\"\n    |                                                                                         ^^^^^^^^^^^\n457 |                     )\n458 |                     continue\n    |\n\nC901 `run_inspect_flow` is too complex (15 > 10)\n   --> x_cls_make_github_visitor_x.py:525:9\n    |\n523 |         return summary\n524 |\n525 |     def run_inspect_flow(self) -> None:\n    |         ^^^^^^^^^^^^^^^^\n526 |         \"\"\"Run the inspect flow in four steps:\n527 |             1) a-priori run -> writes `x_index_a_a_priori_x.json`\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_github_visitor_x.py:525:9\n    |\n523 |         return summary\n524 |\n525 |     def run_inspect_flow(self) -> None:\n    |         ^^^^^^^^^^^^^^^^\n526 |         \"\"\"Run the inspect flow in four steps:\n527 |             1) a-priori run -> writes `x_index_a_a_priori_x.json`\n    |\n\nPLR0915 Too many statements (60 > 50)\n   --> x_cls_make_github_visitor_x.py:525:9\n    |\n523 |         return summary\n524 |\n525 |     def run_inspect_flow(self) -> None:\n    |         ^^^^^^^^^^^^^^^^\n526 |         \"\"\"Run the inspect flow in four steps:\n527 |             1) a-priori run -> writes `x_index_a_a_priori_x.json`\n    |\n\nS101 Use of `assert` detected\n   --> x_cls_make_github_visitor_x.py:535:9\n    |\n533 |         apriori_repos = self.inspect(\"x_index_a_a_priori_x.json\")\n534 |         p1 = self.package_root / \"x_index_a_a_priori_x.json\"\n535 |         assert (\n    |         ^^^^^^\n536 |             p1.exists() and p1.stat().st_size > 0\n537 |         ), f\"step1 failed: {p1} missing or empty\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_github_visitor_x.py:535:9\n    |\n533 |           apriori_repos = self.inspect(\"x_index_a_a_priori_x.json\")\n534 |           p1 = self.package_root / \"x_index_a_a_priori_x.json\"\n535 | /         assert (\n536 | |             p1.exists() and p1.stat().st_size > 0\n537 | |         ), f\"step1 failed: {p1} missing or empty\"\n    | |_________________________________________________^\n538 |           _info(\n539 |               f\"apriori discovery: found {len(apriori_repos)} repositories under {self.root}\"\n    |\nhelp: Break down assertion into multiple parts\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_github_visitor_x.py:539:89\n    |\n537 |         ), f\"step1 failed: {p1} missing or empty\"\n538 |         _info(\n539 |             f\"apriori discovery: found {len(apriori_repos)} repositories under {self.root}\"\n    |                                                                                         ^^^\n540 |         )\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:547:19\n    |\n545 |                   raw_apriori = json.load(fh)\n546 |           except Exception as exc:\n547 |               raise AssertionError(\n    |  ___________________^\n548 | |                 f\"failed to read a-priori index: {exc}\"\n549 | |             ) from exc\n    | |_____________^\n550 |\n551 |           if not isinstance(raw_apriori, dict):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:548:17\n    |\n546 |         except Exception as exc:\n547 |             raise AssertionError(\n548 |                 f\"failed to read a-priori index: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n549 |             ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> x_cls_make_github_visitor_x.py:552:13\n    |\n551 |           if not isinstance(raw_apriori, dict):\n552 | /             raise AssertionError(\n553 | |                 f\"a-priori index must be a JSON object mapping repo->files: {p1}\"\n554 | |             )\n    | |_____________^\n555 |\n556 |           apriori_raw = cast(\"dict[str, Any]\", raw_apriori)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:552:19\n    |\n551 |           if not isinstance(raw_apriori, dict):\n552 |               raise AssertionError(\n    |  ___________________^\n553 | |                 f\"a-priori index must be a JSON object mapping repo->files: {p1}\"\n554 | |             )\n    | |_____________^\n555 |\n556 |           apriori_raw = cast(\"dict[str, Any]\", raw_apriori)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:553:17\n    |\n551 |         if not isinstance(raw_apriori, dict):\n552 |             raise AssertionError(\n553 |                 f\"a-priori index must be a JSON object mapping repo->files: {p1}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n554 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_github_visitor_x.py:564:25\n    |\n562 |                 for item in cast(\"list[Any]\", value):\n563 |                     if isinstance(item, str):\n564 |                         normalized.append(item)\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^\n565 |                 apriori[key_str] = normalized\n566 |             else:\n    |\nhelp: Replace for loop with list comprehension\n\nE501 Line too long (93 > 88)\n   --> x_cls_make_github_visitor_x.py:569:89\n    |\n567 |                 apriori[key_str] = []\n568 |\n569 |         # ensure the apriori keys match visible child dirs (use _child_dirs to ignore caches)\n    |                                                                                         ^^^^^\n570 |         current_children = [\n571 |             str(p.relative_to(self.root)) for p in self._child_dirs()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:575:19\n    |\n573 |           apriori_keys = sorted(apriori.keys())\n574 |           if apriori_keys != sorted(current_children):\n575 |               raise AssertionError(\n    |  ___________________^\n576 | |                 f\"a-priori index contents do not match immediate children.\\n  expected: {sorted(current_children)}\\n  found: {apriori\u00e2\u20ac\u00a6\n577 | |             )\n    | |_____________^\n578 |\n579 |           # Step 2: run toolchain (ruff -> black -> ruff -> mypy)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:576:17\n    |\n574 | \u00e2\u20ac\u00a6apriori_keys != sorted(current_children):\n575 | \u00e2\u20ac\u00a6 raise AssertionError(\n576 | \u00e2\u20ac\u00a6     f\"a-priori index contents do not match immediate children.\\n  expected: {sorted(current_children)}\\n  found: {apriori_keys}\"\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n577 | \u00e2\u20ac\u00a6 )\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (140 > 88)\n   --> x_cls_make_github_visitor_x.py:576:89\n    |\n574 | \u00e2\u20ac\u00a6en):\n575 | \u00e2\u20ac\u00a6\n576 | \u00e2\u20ac\u00a6 match immediate children.\\n  expected: {sorted(current_children)}\\n  found: {apriori_keys}\"\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n577 | \u00e2\u20ac\u00a6\n    |\n\nS101 Use of `assert` detected\n   --> x_cls_make_github_visitor_x.py:585:9\n    |\n583 |         posterior_repos = self.inspect(\"x_index_b_a_posteriori_x.json\")\n584 |         p2 = self.package_root / \"x_index_b_a_posteriori_x.json\"\n585 |         assert (\n    |         ^^^^^^\n586 |             p2.exists() and p2.stat().st_size > 0\n587 |         ), f\"step3 failed: {p2} missing or empty\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_github_visitor_x.py:585:9\n    |\n583 |           posterior_repos = self.inspect(\"x_index_b_a_posteriori_x.json\")\n584 |           p2 = self.package_root / \"x_index_b_a_posteriori_x.json\"\n585 | /         assert (\n586 | |             p2.exists() and p2.stat().st_size > 0\n587 | |         ), f\"step3 failed: {p2} missing or empty\"\n    | |_________________________________________________^\n588 |           _info(\n589 |               f\"a-posteriori discovery: found {len(posterior_repos)} repositories under {self.root}\"\n    |\nhelp: Break down assertion into multiple parts\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_github_visitor_x.py:589:89\n    |\n587 |         ), f\"step3 failed: {p2} missing or empty\"\n588 |         _info(\n589 |             f\"a-posteriori discovery: found {len(posterior_repos)} repositories under {self.root}\"\n    |                                                                                         ^^^^^^^^^^\n590 |         )\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:596:19\n    |\n594 |                   raw_data = json.load(fh)\n595 |           except Exception as exc:\n596 |               raise AssertionError(\n    |  ___________________^\n597 | |                 f\"failed to read a-posteriori index: {exc}\"\n598 | |             ) from exc\n    | |_____________^\n599 |\n600 |           if not isinstance(raw_data, dict):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:597:17\n    |\n595 |         except Exception as exc:\n596 |             raise AssertionError(\n597 |                 f\"failed to read a-posteriori index: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n598 |             ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> x_cls_make_github_visitor_x.py:601:13\n    |\n600 |           if not isinstance(raw_data, dict):\n601 | /             raise AssertionError(\n602 | |                 f\"a-posteriori index must be a JSON object mapping repo->files: {p2}\"\n603 | |             )\n    | |_____________^\n604 |\n605 |           data_raw = cast(\"dict[str, Any]\", raw_data)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:601:19\n    |\n600 |           if not isinstance(raw_data, dict):\n601 |               raise AssertionError(\n    |  ___________________^\n602 | |                 f\"a-posteriori index must be a JSON object mapping repo->files: {p2}\"\n603 | |             )\n    | |_____________^\n604 |\n605 |           data_raw = cast(\"dict[str, Any]\", raw_data)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:602:17\n    |\n600 |         if not isinstance(raw_data, dict):\n601 |             raise AssertionError(\n602 |                 f\"a-posteriori index must be a JSON object mapping repo->files: {p2}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n603 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> x_cls_make_github_visitor_x.py:645:28\n    |\n643 |                 msgs = [\"tool failures occurred but no messages were captured\"]\n644 |             preview = \"\\n\\n\".join(msgs[:5])\n645 |             if len(msgs) > 5:\n    |                            ^\n646 |                 preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |             raise AssertionError(\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:647:19\n    |\n645 |               if len(msgs) > 5:\n646 |                   preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |               raise AssertionError(\n    |  ___________________^\n648 | |                 f\"toolchain failures detected across repositories ({len(msgs)} total).\\n{preview}\"\n649 | |             )\n    | |_____________^\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:648:17\n    |\n646 |                 preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |             raise AssertionError(\n648 |                 f\"toolchain failures detected across repositories ({len(msgs)} total).\\n{preview}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n649 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_github_visitor_x.py:648:89\n    |\n646 |                 preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |             raise AssertionError(\n648 |                 f\"toolchain failures detected across repositories ({len(msgs)} total).\\n{preview}\"\n    |                                                                                         ^^^^^^^^^^\n649 |             )\n    |\n\nE501 Line too long (109 > 88)\n   --> x_cls_make_github_visitor_x.py:703:89\n    |\n701 |     )\n702 |     _info(\n703 |         f\"processed {summary.get('total_repos', 0)} repositories | cache hits: {hits}/{total} ({ratio:.1f}%)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n704 |     )\n    |\n\nFound 79 errors.\nNo fixes available (15 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "warning: The top-level linter settings are deprecated in favour of their counterparts in the `lint` section. Please update the following options in `pyproject.toml`:\n  - 'ignore' -> 'lint.ignore'\n  - 'select' -> 'lint.select'\n",
                "stdout": "INP001 File `tests\\test_github_visitor.py` is part of an implicit namespace package. Add an `__init__.py`.\n--> tests\\test_github_visitor.py:1:1\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_visitor_x.py:18:5\n   |\n16 |   def _info(*args: object) -> None:\n17 |       msg = \" \".join(str(a) for a in args)\n18 | /     try:\n19 | |         _LOGGER.info(\"%s\", msg)\n20 | |     except Exception:\n21 | |         pass\n   | |____________^\n22 |       try:\n23 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_visitor_x.py:20:5\n   |\n18 |       try:\n19 |           _LOGGER.info(\"%s\", msg)\n20 | /     except Exception:\n21 | |         pass\n   | |____________^\n22 |       try:\n23 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_visitor_x.py:20:12\n   |\n18 |     try:\n19 |         _LOGGER.info(\"%s\", msg)\n20 |     except Exception:\n   |            ^^^^^^^^^\n21 |         pass\n22 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_visitor_x.py:24:12\n   |\n22 |     try:\n23 |         print(msg)\n24 |     except Exception:\n   |            ^^^^^^^^^\n25 |         try:\n26 |             sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_github_visitor_x.py:25:9\n   |\n23 |           print(msg)\n24 |       except Exception:\n25 | /         try:\n26 | |             sys.stdout.write(msg + \"\\n\")\n27 | |         except Exception:\n28 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_github_visitor_x.py:27:9\n   |\n25 |           try:\n26 |               sys.stdout.write(msg + \"\\n\")\n27 | /         except Exception:\n28 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_github_visitor_x.py:27:16\n   |\n25 |         try:\n26 |             sys.stdout.write(msg + \"\\n\")\n27 |         except Exception:\n   |                ^^^^^^^^^\n28 |             pass\n   |\n\nN801 Class name `x_cls_make_github_visitor_x` should use CapWords convention\n  --> x_cls_make_github_visitor_x.py:52:7\n   |\n52 | class x_cls_make_github_visitor_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n53 |     def __init__(\n54 |         self,\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_github_visitor_x.py:71:19\n   |\n69 |           self.root = Path(root_dir)\n70 |           if not self.root.exists() or not self.root.is_dir():\n71 |               raise AssertionError(\n   |  ___________________^\n72 | |                 f\"root path must exist and be a directory: {self.root}\"\n73 | |             )\n   | |_____________^\n74 |\n75 |           # The workspace root must not itself be a git repository (we operate\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_github_visitor_x.py:72:17\n   |\n70 |         if not self.root.exists() or not self.root.is_dir():\n71 |             raise AssertionError(\n72 |                 f\"root path must exist and be a directory: {self.root}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n73 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_github_visitor_x.py:79:19\n   |\n78 |           if (self.root / \".git\").exists():\n79 |               raise AssertionError(\n   |  ___________________^\n80 | |                 f\"root path must not be a git repository: {self.root}\"\n81 | |             )\n   | |_____________^\n82 |\n83 |           self.output_filename = output_filename\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_github_visitor_x.py:80:17\n   |\n78 |         if (self.root / \".git\").exists():\n79 |             raise AssertionError(\n80 |                 f\"root path must not be a git repository: {self.root}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nPIE810 Call `startswith` once with a `tuple`\n   --> x_cls_make_github_visitor_x.py:111:16\n    |\n109 |                 continue\n110 |             name = p.name\n111 |             if name.startswith(\".\") or name.startswith(\"__\"):\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n112 |                 # hidden or dunder directories (including caches)\n113 |                 continue\n    |\nhelp: Merge into a single `startswith` call\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `data`\n   --> x_cls_make_github_visitor_x.py:123:52\n    |\n121 |         return sorted(out)\n122 |\n123 |     def _atomic_write_json(self, path: Path, data: Any) -> None:\n    |                                                    ^^^\n124 |         tmp = path.with_name(path.name + \".tmp\")\n125 |         with tmp.open(\"w\", encoding=\"utf-8\") as fh:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:128:13\n    |\n126 |               json.dump(data, fh, indent=4, sort_keys=True)\n127 |               fh.flush()\n128 | /             try:\n129 | |                 os.fsync(fh.fileno())\n130 | |             except Exception:\n131 | |                 # best-effort fsync; ignore if unsupported\n132 | |                 pass\n    | |____________________^\n133 |           os.replace(str(tmp), str(path))\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:130:13\n    |\n128 |               try:\n129 |                   os.fsync(fh.fileno())\n130 | /             except Exception:\n131 | |                 # best-effort fsync; ignore if unsupported\n132 | |                 pass\n    | |____________________^\n133 |           os.replace(str(tmp), str(path))\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:130:20\n    |\n128 |             try:\n129 |                 os.fsync(fh.fileno())\n130 |             except Exception:\n    |                    ^^^^^^^^^\n131 |                 # best-effort fsync; ignore if unsupported\n132 |                 pass\n    |\n\nPTH105 `os.replace()` should be replaced by `Path.replace()`\n   --> x_cls_make_github_visitor_x.py:133:9\n    |\n131 |                 # best-effort fsync; ignore if unsupported\n132 |                 pass\n133 |         os.replace(str(tmp), str(path))\n    |         ^^^^^^^^^^\n134 |\n135 |     def _repo_content_hash(self, repo_path: Path) -> str:\n    |\nhelp: Replace with `Path(...).replace(...)`\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:149:13\n    |\n147 |               try:\n148 |                   hasher.update(p.read_bytes())\n149 | /             except Exception:\n150 | |                 # Skip unreadable files without failing the whole hash\n151 | |                 continue\n    | |________________________^\n152 |           return hasher.hexdigest()\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:149:20\n    |\n147 |             try:\n148 |                 hasher.update(p.read_bytes())\n149 |             except Exception:\n    |                    ^^^^^^^^^\n150 |                 # Skip unreadable files without failing the whole hash\n151 |                 continue\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:172:16\n    |\n170 |             with cache_file.open(\"r\", encoding=\"utf-8\") as fh:\n171 |                 cached = cast(\"dict[str, Any]\", json.load(fh))\n172 |         except Exception:\n    |                ^^^^^^^^^\n173 |             try:\n174 |                 cache_file.unlink()\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:173:13\n    |\n171 |                   cached = cast(\"dict[str, Any]\", json.load(fh))\n172 |           except Exception:\n173 | /             try:\n174 | |                 cache_file.unlink()\n175 | |             except Exception:\n176 | |                 pass\n    | |____________________^\n177 |               return None\n178 |           exit_code: int | None\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:175:13\n    |\n173 |               try:\n174 |                   cache_file.unlink()\n175 | /             except Exception:\n176 | |                 pass\n    | |____________________^\n177 |               return None\n178 |           exit_code: int | None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:175:20\n    |\n173 |             try:\n174 |                 cache_file.unlink()\n175 |             except Exception:\n    |                    ^^^^^^^^^\n176 |                 pass\n177 |             return None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:181:16\n    |\n179 |         try:\n180 |             exit_code = int(cached.get(\"exit\", 0))\n181 |         except Exception:\n    |                ^^^^^^^^^\n182 |             exit_code = None\n183 |         if exit_code not in (None, 0):\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:198:9\n    |\n196 |               return\n197 |           cache_file = self._cache_path(repo_name, tool_name, repo_hash)\n198 | /         try:\n199 | |             self._atomic_write_json(cache_file, payload)\n200 | |         except Exception:\n201 | |             # Don't let cache write failures stop execution\n202 | |             pass\n    | |________________^\n203 |\n204 |       def _delete_cache(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:200:9\n    |\n198 |           try:\n199 |               self._atomic_write_json(cache_file, payload)\n200 | /         except Exception:\n201 | |             # Don't let cache write failures stop execution\n202 | |             pass\n    | |________________^\n203 |\n204 |       def _delete_cache(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:200:16\n    |\n198 |         try:\n199 |             self._atomic_write_json(cache_file, payload)\n200 |         except Exception:\n    |                ^^^^^^^^^\n201 |             # Don't let cache write failures stop execution\n202 |             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_github_visitor_x.py:213:9\n    |\n211 |               return\n212 |           cache_file = self._cache_path(repo_name, tool_name, repo_hash)\n213 | /         try:\n214 | |             cache_file.unlink()\n215 | |         except Exception:\n216 | |             pass\n    | |________________^\n217 |\n218 |       def _prune_cache(self, keep: int = 500) -> None:\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:215:9\n    |\n213 |           try:\n214 |               cache_file.unlink()\n215 | /         except Exception:\n216 | |             pass\n    | |________________^\n217 |\n218 |       def _prune_cache(self, keep: int = 500) -> None:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:215:16\n    |\n213 |         try:\n214 |             cache_file.unlink()\n215 |         except Exception:\n    |                ^^^^^^^^^\n216 |             pass\n    |\n\nE501 Line too long (96 > 88)\n   --> x_cls_make_github_visitor_x.py:222:89\n    |\n220 |             return\n221 |         try:\n222 |             cache_files = sorted(self.cache_dir.glob(\"*.json\"), key=lambda p: p.stat().st_mtime)\n    |                                                                                         ^^^^^^^^\n223 |         except Exception:\n224 |             return\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:223:16\n    |\n221 |         try:\n222 |             cache_files = sorted(self.cache_dir.glob(\"*.json\"), key=lambda p: p.stat().st_mtime)\n223 |         except Exception:\n    |                ^^^^^^^^^\n224 |             return\n225 |         overflow = len(cache_files) - keep\n    |\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_github_visitor_x.py:231:13\n    |\n229 |               try:\n230 |                   stale.unlink()\n231 | /             except Exception:\n232 | |                 continue\n    | |________________________^\n233 |\n234 |       def inspect(self, json_name: str) -> list[str]:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:231:20\n    |\n229 |             try:\n230 |                 stale.unlink()\n231 |             except Exception:\n    |                    ^^^^^^^^^\n232 |                 continue\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_github_visitor_x.py:245:20\n    |\n243 |                     p.name for p in self.root.iterdir() if p.is_dir()\n244 |                 )\n245 |             except Exception:\n    |                    ^^^^^^^^^\n246 |                 entries = []\n247 |             preview = \", \".join(entries[:10])\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `10` with a constant variable\n   --> x_cls_make_github_visitor_x.py:248:44\n    |\n246 |                 entries = []\n247 |             preview = \", \".join(entries[:10])\n248 |             suffix = \"\" if len(entries) <= 10 else \" \u00e2\u20ac\u00a6\"\n    |                                            ^^\n249 |             raise AssertionError(\n250 |                 \"no child git repositories found\"\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:249:19\n    |\n247 |               preview = \", \".join(entries[:10])\n248 |               suffix = \"\" if len(entries) <= 10 else \" \u00e2\u20ac\u00a6\"\n249 |               raise AssertionError(\n    |  ___________________^\n250 | |                 \"no child git repositories found\"\n251 | |                 f\" under {self.root} (visible dirs: {preview}{suffix})\"\n252 | |             )\n    | |_____________^\n253 |           index: dict[str, list[str]] = {}\n254 |           repo_names: list[str] = []\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:250:17\n    |\n248 |               suffix = \"\" if len(entries) <= 10 else \" \u00e2\u20ac\u00a6\"\n249 |               raise AssertionError(\n250 | /                 \"no child git repositories found\"\n251 | |                 f\" under {self.root} (visible dirs: {preview}{suffix})\"\n    | |_______________________________________________________________________^\n252 |               )\n253 |           index: dict[str, list[str]] = {}\n    |\nhelp: Assign to variable; remove f-string literal\n\nC901 `body` is too complex (13 > 10)\n   --> x_cls_make_github_visitor_x.py:274:9\n    |\n272 |         return repo_names\n273 |\n274 |     def body(self) -> None:\n    |         ^^^^\n275 |         \"\"\"Run toolchain (ruff -> black -> ruff -> mypy -> pyright) against each child repo.\"\"\"\n    |\n\nPLR0915 Too many statements (59 > 50)\n   --> x_cls_make_github_visitor_x.py:274:9\n    |\n272 |         return repo_names\n273 |\n274 |     def body(self) -> None:\n    |         ^^^^\n275 |         \"\"\"Run toolchain (ruff -> black -> ruff -> mypy -> pyright) against each child repo.\"\"\"\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_github_visitor_x.py:275:89\n    |\n274 |     def body(self) -> None:\n275 |         \"\"\"Run toolchain (ruff -> black -> ruff -> mypy -> pyright) against each child repo.\"\"\"\n    |                                                                                         ^^^^^^^\n276 |\n277 |         python = sys.executable\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_github_visitor_x.py:279:13\n    |\n277 |         python = sys.executable\n278 |         packages = [\"ruff\", \"black\", \"mypy\", \"pyright\"]\n279 |         p = subprocess.run(\n    |             ^^^^^^^^^^^^^^\n280 |             [python, \"-m\", \"pip\", \"install\", \"--upgrade\", *packages],\n281 |             check=False,\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:286:19\n    |\n284 |           )\n285 |           if p.returncode != 0:\n286 |               raise AssertionError(\n    |  ___________________^\n287 | |                 f\"failed to install required packages: {p.stdout}\\n{p.stderr}\"\n288 | |             )\n    | |_____________^\n289 |\n290 |           self._prune_cache()\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:287:17\n    |\n285 |         if p.returncode != 0:\n286 |             raise AssertionError(\n287 |                 f\"failed to install required packages: {p.stdout}\\n{p.stderr}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n288 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_github_visitor_x.py:415:24\n    |\n413 |                     continue\n414 |\n415 |                 proc = subprocess.run(\n    |                        ^^^^^^^^^^^^^^\n416 |                     cmd,\n417 |                     check=False,\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> x_cls_make_github_visitor_x.py:435:48\n    |\n433 |                     truncated_stderr = proc.stderr.strip().splitlines()\n434 |                     preview_stdout = \"\\n\".join(truncated_stdout[:5])\n435 |                     if len(truncated_stdout) > 5:\n    |                                                ^\n436 |                         preview_stdout += \"\\n\u00e2\u20ac\u00a6\"\n437 |                     preview_stderr = \"\\n\".join(truncated_stderr[:5])\n    |\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> x_cls_make_github_visitor_x.py:438:48\n    |\n436 |                         preview_stdout += \"\\n\u00e2\u20ac\u00a6\"\n437 |                     preview_stderr = \"\\n\".join(truncated_stderr[:5])\n438 |                     if len(truncated_stderr) > 5:\n    |                                                ^\n439 |                         preview_stderr += \"\\n\u00e2\u20ac\u00a6\"\n440 |                     failure_messages.append(\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_github_visitor_x.py:456:89\n    |\n454 |                     )\n455 |                     _info(\n456 |                         f\"{tool_name}: failure (exit {proc.returncode}) in {rel}; details captured\"\n    |                                                                                         ^^^^^^^^^^^\n457 |                     )\n458 |                     continue\n    |\n\nC901 `run_inspect_flow` is too complex (15 > 10)\n   --> x_cls_make_github_visitor_x.py:525:9\n    |\n523 |         return summary\n524 |\n525 |     def run_inspect_flow(self) -> None:\n    |         ^^^^^^^^^^^^^^^^\n526 |         \"\"\"Run the inspect flow in four steps:\n527 |             1) a-priori run -> writes `x_index_a_a_priori_x.json`\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_github_visitor_x.py:525:9\n    |\n523 |         return summary\n524 |\n525 |     def run_inspect_flow(self) -> None:\n    |         ^^^^^^^^^^^^^^^^\n526 |         \"\"\"Run the inspect flow in four steps:\n527 |             1) a-priori run -> writes `x_index_a_a_priori_x.json`\n    |\n\nPLR0915 Too many statements (60 > 50)\n   --> x_cls_make_github_visitor_x.py:525:9\n    |\n523 |         return summary\n524 |\n525 |     def run_inspect_flow(self) -> None:\n    |         ^^^^^^^^^^^^^^^^\n526 |         \"\"\"Run the inspect flow in four steps:\n527 |             1) a-priori run -> writes `x_index_a_a_priori_x.json`\n    |\n\nS101 Use of `assert` detected\n   --> x_cls_make_github_visitor_x.py:535:9\n    |\n533 |         apriori_repos = self.inspect(\"x_index_a_a_priori_x.json\")\n534 |         p1 = self.package_root / \"x_index_a_a_priori_x.json\"\n535 |         assert (\n    |         ^^^^^^\n536 |             p1.exists() and p1.stat().st_size > 0\n537 |         ), f\"step1 failed: {p1} missing or empty\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_github_visitor_x.py:535:9\n    |\n533 |           apriori_repos = self.inspect(\"x_index_a_a_priori_x.json\")\n534 |           p1 = self.package_root / \"x_index_a_a_priori_x.json\"\n535 | /         assert (\n536 | |             p1.exists() and p1.stat().st_size > 0\n537 | |         ), f\"step1 failed: {p1} missing or empty\"\n    | |_________________________________________________^\n538 |           _info(\n539 |               f\"apriori discovery: found {len(apriori_repos)} repositories under {self.root}\"\n    |\nhelp: Break down assertion into multiple parts\n\nE501 Line too long (91 > 88)\n   --> x_cls_make_github_visitor_x.py:539:89\n    |\n537 |         ), f\"step1 failed: {p1} missing or empty\"\n538 |         _info(\n539 |             f\"apriori discovery: found {len(apriori_repos)} repositories under {self.root}\"\n    |                                                                                         ^^^\n540 |         )\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:547:19\n    |\n545 |                   raw_apriori = json.load(fh)\n546 |           except Exception as exc:\n547 |               raise AssertionError(\n    |  ___________________^\n548 | |                 f\"failed to read a-priori index: {exc}\"\n549 | |             ) from exc\n    | |_____________^\n550 |\n551 |           if not isinstance(raw_apriori, dict):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:548:17\n    |\n546 |         except Exception as exc:\n547 |             raise AssertionError(\n548 |                 f\"failed to read a-priori index: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n549 |             ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> x_cls_make_github_visitor_x.py:552:13\n    |\n551 |           if not isinstance(raw_apriori, dict):\n552 | /             raise AssertionError(\n553 | |                 f\"a-priori index must be a JSON object mapping repo->files: {p1}\"\n554 | |             )\n    | |_____________^\n555 |\n556 |           apriori_raw = cast(\"dict[str, Any]\", raw_apriori)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:552:19\n    |\n551 |           if not isinstance(raw_apriori, dict):\n552 |               raise AssertionError(\n    |  ___________________^\n553 | |                 f\"a-priori index must be a JSON object mapping repo->files: {p1}\"\n554 | |             )\n    | |_____________^\n555 |\n556 |           apriori_raw = cast(\"dict[str, Any]\", raw_apriori)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:553:17\n    |\n551 |         if not isinstance(raw_apriori, dict):\n552 |             raise AssertionError(\n553 |                 f\"a-priori index must be a JSON object mapping repo->files: {p1}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n554 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nPERF401 Use a list comprehension to create a transformed list\n   --> x_cls_make_github_visitor_x.py:564:25\n    |\n562 |                 for item in cast(\"list[Any]\", value):\n563 |                     if isinstance(item, str):\n564 |                         normalized.append(item)\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^\n565 |                 apriori[key_str] = normalized\n566 |             else:\n    |\nhelp: Replace for loop with list comprehension\n\nE501 Line too long (93 > 88)\n   --> x_cls_make_github_visitor_x.py:569:89\n    |\n567 |                 apriori[key_str] = []\n568 |\n569 |         # ensure the apriori keys match visible child dirs (use _child_dirs to ignore caches)\n    |                                                                                         ^^^^^\n570 |         current_children = [\n571 |             str(p.relative_to(self.root)) for p in self._child_dirs()\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:575:19\n    |\n573 |           apriori_keys = sorted(apriori.keys())\n574 |           if apriori_keys != sorted(current_children):\n575 |               raise AssertionError(\n    |  ___________________^\n576 | |                 f\"a-priori index contents do not match immediate children.\\n  expected: {sorted(current_children)}\\n  found: {apriori\u00e2\u20ac\u00a6\n577 | |             )\n    | |_____________^\n578 |\n579 |           # Step 2: run toolchain (ruff -> black -> ruff -> mypy)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:576:17\n    |\n574 | \u00e2\u20ac\u00a6apriori_keys != sorted(current_children):\n575 | \u00e2\u20ac\u00a6 raise AssertionError(\n576 | \u00e2\u20ac\u00a6     f\"a-priori index contents do not match immediate children.\\n  expected: {sorted(current_children)}\\n  found: {apriori_keys}\"\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n577 | \u00e2\u20ac\u00a6 )\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (140 > 88)\n   --> x_cls_make_github_visitor_x.py:576:89\n    |\n574 | \u00e2\u20ac\u00a6en):\n575 | \u00e2\u20ac\u00a6\n576 | \u00e2\u20ac\u00a6 match immediate children.\\n  expected: {sorted(current_children)}\\n  found: {apriori_keys}\"\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n577 | \u00e2\u20ac\u00a6\n    |\n\nS101 Use of `assert` detected\n   --> x_cls_make_github_visitor_x.py:585:9\n    |\n583 |         posterior_repos = self.inspect(\"x_index_b_a_posteriori_x.json\")\n584 |         p2 = self.package_root / \"x_index_b_a_posteriori_x.json\"\n585 |         assert (\n    |         ^^^^^^\n586 |             p2.exists() and p2.stat().st_size > 0\n587 |         ), f\"step3 failed: {p2} missing or empty\"\n    |\n\nPT018 Assertion should be broken down into multiple parts\n   --> x_cls_make_github_visitor_x.py:585:9\n    |\n583 |           posterior_repos = self.inspect(\"x_index_b_a_posteriori_x.json\")\n584 |           p2 = self.package_root / \"x_index_b_a_posteriori_x.json\"\n585 | /         assert (\n586 | |             p2.exists() and p2.stat().st_size > 0\n587 | |         ), f\"step3 failed: {p2} missing or empty\"\n    | |_________________________________________________^\n588 |           _info(\n589 |               f\"a-posteriori discovery: found {len(posterior_repos)} repositories under {self.root}\"\n    |\nhelp: Break down assertion into multiple parts\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_github_visitor_x.py:589:89\n    |\n587 |         ), f\"step3 failed: {p2} missing or empty\"\n588 |         _info(\n589 |             f\"a-posteriori discovery: found {len(posterior_repos)} repositories under {self.root}\"\n    |                                                                                         ^^^^^^^^^^\n590 |         )\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:596:19\n    |\n594 |                   raw_data = json.load(fh)\n595 |           except Exception as exc:\n596 |               raise AssertionError(\n    |  ___________________^\n597 | |                 f\"failed to read a-posteriori index: {exc}\"\n598 | |             ) from exc\n    | |_____________^\n599 |\n600 |           if not isinstance(raw_data, dict):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:597:17\n    |\n595 |         except Exception as exc:\n596 |             raise AssertionError(\n597 |                 f\"failed to read a-posteriori index: {exc}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n598 |             ) from exc\n    |\nhelp: Assign to variable; remove f-string literal\n\nTRY004 Prefer `TypeError` exception for invalid type\n   --> x_cls_make_github_visitor_x.py:601:13\n    |\n600 |           if not isinstance(raw_data, dict):\n601 | /             raise AssertionError(\n602 | |                 f\"a-posteriori index must be a JSON object mapping repo->files: {p2}\"\n603 | |             )\n    | |_____________^\n604 |\n605 |           data_raw = cast(\"dict[str, Any]\", raw_data)\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:601:19\n    |\n600 |           if not isinstance(raw_data, dict):\n601 |               raise AssertionError(\n    |  ___________________^\n602 | |                 f\"a-posteriori index must be a JSON object mapping repo->files: {p2}\"\n603 | |             )\n    | |_____________^\n604 |\n605 |           data_raw = cast(\"dict[str, Any]\", raw_data)\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:602:17\n    |\n600 |         if not isinstance(raw_data, dict):\n601 |             raise AssertionError(\n602 |                 f\"a-posteriori index must be a JSON object mapping repo->files: {p2}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n603 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nPLR2004 Magic value used in comparison, consider replacing `5` with a constant variable\n   --> x_cls_make_github_visitor_x.py:645:28\n    |\n643 |                 msgs = [\"tool failures occurred but no messages were captured\"]\n644 |             preview = \"\\n\\n\".join(msgs[:5])\n645 |             if len(msgs) > 5:\n    |                            ^\n646 |                 preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |             raise AssertionError(\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_github_visitor_x.py:647:19\n    |\n645 |               if len(msgs) > 5:\n646 |                   preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |               raise AssertionError(\n    |  ___________________^\n648 | |                 f\"toolchain failures detected across repositories ({len(msgs)} total).\\n{preview}\"\n649 | |             )\n    | |_____________^\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_github_visitor_x.py:648:17\n    |\n646 |                 preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |             raise AssertionError(\n648 |                 f\"toolchain failures detected across repositories ({len(msgs)} total).\\n{preview}\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n649 |             )\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (98 > 88)\n   --> x_cls_make_github_visitor_x.py:648:89\n    |\n646 |                 preview += \"\\n\\n\u00e2\u20ac\u00a6\"\n647 |             raise AssertionError(\n648 |                 f\"toolchain failures detected across repositories ({len(msgs)} total).\\n{preview}\"\n    |                                                                                         ^^^^^^^^^^\n649 |             )\n    |\n\nE501 Line too long (109 > 88)\n   --> x_cls_make_github_visitor_x.py:703:89\n    |\n701 |     )\n702 |     _info(\n703 |         f\"processed {summary.get('total_repos', 0)} repositories | cache hits: {hits}/{total} ({ratio:.1f}%)\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^\n704 |     )\n    |\n\nFound 79 errors.\nNo fixes available (15 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_graphviz_x": {
        "files": [
            "x_cls_make_graphviz_x.py"
        ],
        "files_index": [
            "x_cls_make_graphviz_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\t2025-10-07 16:24:13.118389+00:00\n+++ C:\\x_runner_x\\x_make_graphviz_x\\x_cls_make_graphviz_x.py\t2025-10-07 17:45:54.839422+00:00\n@@ -51,13 +51,11 @@\n class _Subgraph:\n     def __init__(\n         self, name: str, cluster: bool, attrs: dict[str, Any] | None = None\n     ) -> None:\n         self.name = (\n-            \"cluster_\" + name\n-            if cluster and not name.startswith(\"cluster_\")\n-            else name\n+            \"cluster_\" + name if cluster and not name.startswith(\"cluster_\") else name\n         )\n         self.attrs = attrs or {}\n         self.nodes: list[str] = []\n         self.edges: list[str] = []\n         self.raw: list[str] = []\n@@ -74,13 +72,11 @@\n \n \n class x_cls_make_graphviz_x:\n     \"\"\"Rich Graphviz builder.\"\"\"\n \n-    def __init__(\n-        self, ctx: object | None = None, directed: bool = True\n-    ) -> None:\n+    def __init__(self, ctx: object | None = None, directed: bool = True) -> None:\n         self._ctx = ctx\n         self._directed = directed\n         self._graph_attrs: dict[str, Any] = {}\n         self._node_defaults: dict[str, Any] = {}\n         self._edge_defaults: dict[str, Any] = {}\n@@ -226,13 +222,11 @@\n     def html_label(html: str) -> str:\n         return f\"<<{html}>>\"\n \n     # Subgraphs / clusters\n \n-    def subgraph(\n-        self, name: str, cluster: bool = False, **attrs: Any\n-    ) -> _Subgraph:\n+    def subgraph(self, name: str, cluster: bool = False, **attrs: Any) -> _Subgraph:\n         sg = _Subgraph(name=name, cluster=cluster, attrs=attrs or None)\n         self._subgraphs.append(sg)\n         return sg\n \n     def sub_node(\n@@ -294,13 +288,11 @@\n                 try:\n                     g.engine = self._engine\n                 except Exception:\n                     # fallback to layout attribute if engine not supported by graphviz.Source\n                     pass\n-            out_path = g.render(\n-                filename=output_file, format=format, cleanup=True\n-            )\n+            out_path = g.render(filename=output_file, format=format, cleanup=True)\n             return str(out_path)\n         except Exception:\n             dot_path = f\"{output_file}.dot\"\n             with open(dot_path, \"w\", encoding=\"utf-8\") as f:\n                 f.write(dot)\n@@ -333,26 +325,20 @@\n             if self._engine:\n                 try:\n                     src.engine = self._engine\n                 except Exception:\n                     pass\n-            out_path = src.render(\n-                filename=output_basename, format=\"svg\", cleanup=True\n-            )\n+            out_path = src.render(filename=output_basename, format=\"svg\", cleanup=True)\n             return str(out_path)\n         except Exception:\n             # on failure, still persist DOT for manual conversion\n             self.save_dot(f\"{output_basename}.dot\")\n             return None\n \n \n def main() -> str:\n-    g = (\n-        x_cls_make_graphviz_x(directed=True)\n-        .rankdir(\"LR\")\n-        .node_defaults(shape=\"box\")\n-    )\n+    g = x_cls_make_graphviz_x(directed=True).rankdir(\"LR\").node_defaults(shape=\"box\")\n     g.add_node(\"A\", \"Start\")\n     g.add_node(\"B\", \"End\")\n     g.add_edge(\"A\", \"B\", \"to\", color=\"blue\")\n     sg = g.subgraph(\"cluster_demo\", cluster=True, label=\"Demo\")\n     g.sub_node(sg, \"C\", \"In cluster\")\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_graphviz_x.py:38: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:39: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_graphviz_x.py:42: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:42: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:42: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:42: error: Expression type contains \"Any\" (has type \"dict_items[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:43: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:45: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:47: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:52: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:60: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_graphviz_x.py:60: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:67: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:68: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:84: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:85: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:86: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:102: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:103: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:106: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:107: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:110: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:111: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:135: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:137: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:139: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:144: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:147: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:151: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:152: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:152: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:153: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:154: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:154: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:156: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:157: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:158: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:161: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:171: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:172: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:172: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:173: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:174: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:174: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:179: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:180: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:181: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:189: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:199: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:200: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:202: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:203: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:205: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:206: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:207: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:231: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:234: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:234: error: Expression type contains \"Any\" (has type \"dict[str, Any] | None\")  [misc]\nx_cls_make_graphviz_x.py:238: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:245: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:246: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:247: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:250: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:259: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:260: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:261: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:269: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:270: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:271: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:272: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:273: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:274: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_graphviz_x.py:286: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_graphviz_x.py:291: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:292: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:295: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:299: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:302: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:307: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_graphviz_x.py:322: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_graphviz_x.py:326: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_graphviz_x.py:332: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:335: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:338: error: Expression has type \"Any\"  [misc]\nx_cls_make_graphviz_x.py:341: error: Expression has type \"Any\"  [misc]\nFound 85 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_graphviz_x.py:13:29\n   |\n11 | import logging\n12 | import sys as _sys\n13 | from collections.abc import Iterable, Sequence\n   |                             ^^^^^^^^\n14 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n  --> x_cls_make_graphviz_x.py:13:39\n   |\n11 | import logging\n12 | import sys as _sys\n13 | from collections.abc import Iterable, Sequence\n   |                                       ^^^^^^^^\n14 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_graphviz_x.py:21:5\n   |\n19 |   def _info(*args: object) -> None:\n20 |       msg = \" \".join(str(a) for a in args)\n21 | /     try:\n22 | |         _LOGGER.info(\"%s\", msg)\n23 | |     except Exception:\n24 | |         pass\n   | |____________^\n25 |       try:\n26 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_graphviz_x.py:23:5\n   |\n21 |       try:\n22 |           _LOGGER.info(\"%s\", msg)\n23 | /     except Exception:\n24 | |         pass\n   | |____________^\n25 |       try:\n26 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_graphviz_x.py:23:12\n   |\n21 |     try:\n22 |         _LOGGER.info(\"%s\", msg)\n23 |     except Exception:\n   |            ^^^^^^^^^\n24 |         pass\n25 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_graphviz_x.py:27:12\n   |\n25 |     try:\n26 |         print(msg)\n27 |     except Exception:\n   |            ^^^^^^^^^\n28 |         try:\n29 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_graphviz_x.py:28:9\n   |\n26 |           print(msg)\n27 |       except Exception:\n28 | /         try:\n29 | |             _sys.stdout.write(msg + \"\\n\")\n30 | |         except Exception:\n31 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_graphviz_x.py:30:9\n   |\n28 |           try:\n29 |               _sys.stdout.write(msg + \"\\n\")\n30 | /         except Exception:\n31 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_graphviz_x.py:30:16\n   |\n28 |         try:\n29 |             _sys.stdout.write(msg + \"\\n\")\n30 |         except Exception:\n   |                ^^^^^^^^^\n31 |             pass\n   |\n\nPLW2901 `for` loop variable `v` overwritten by assignment target\n  --> x_cls_make_graphviz_x.py:46:13\n   |\n44 |             continue\n45 |         if isinstance(v, bool):\n46 |             v = \"true\" if v else \"false\"\n   |             ^\n47 |         pairs.append(f'{k}=\"{_esc(v)}\"')\n48 |     return \" [\" + \", \".join(pairs) + \"]\"\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_graphviz_x.py:53:26\n   |\n51 | class _Subgraph:\n52 |     def __init__(\n53 |         self, name: str, cluster: bool, attrs: dict[str, Any] | None = None\n   |                          ^^^^^^^\n54 |     ) -> None:\n55 |         self.name = (\n   |\n\nN801 Class name `x_cls_make_graphviz_x` should use CapWords convention\n  --> x_cls_make_graphviz_x.py:76:7\n   |\n76 | class x_cls_make_graphviz_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^\n77 |     \"\"\"Rich Graphviz builder.\"\"\"\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_graphviz_x.py:80:42\n   |\n79 |     def __init__(\n80 |         self, ctx: object | None = None, directed: bool = True\n   |                                          ^^^^^^^^\n81 |     ) -> None:\n82 |         self._ctx = ctx\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_graphviz_x.py:80:42\n   |\n79 |     def __init__(\n80 |         self, ctx: object | None = None, directed: bool = True\n   |                                          ^^^^^^^^\n81 |     ) -> None:\n82 |         self._ctx = ctx\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_graphviz_x.py:94:24\n   |\n92 |     # Graph-wide controls\n93 |\n94 |     def directed(self, value: bool = True) -> x_cls_make_graphviz_x:\n   |                        ^^^^^\n95 |         self._directed = value\n96 |         return self\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_graphviz_x.py:94:24\n   |\n92 |     # Graph-wide controls\n93 |\n94 |     def directed(self, value: bool = True) -> x_cls_make_graphviz_x:\n   |                        ^^^^^\n95 |         self._directed = value\n96 |         return self\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:102:35\n    |\n100 |         return self\n101 |\n102 |     def graph_attr(self, **attrs: Any) -> x_cls_make_graphviz_x:\n    |                                   ^^^\n103 |         self._graph_attrs.update(attrs)\n104 |         return self\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:106:38\n    |\n104 |         return self\n105 |\n106 |     def node_defaults(self, **attrs: Any) -> x_cls_make_graphviz_x:\n    |                                      ^^^\n107 |         self._node_defaults.update(attrs)\n108 |         return self\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:110:38\n    |\n108 |         return self\n109 |\n110 |     def edge_defaults(self, **attrs: Any) -> x_cls_make_graphviz_x:\n    |                                      ^^^\n111 |         self._edge_defaults.update(attrs)\n112 |         return self\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:148:64\n    |\n147 |     def add_node(\n148 |         self, node_id: str, label: str | None = None, **attrs: Any\n    |                                                                ^^^\n149 |     ) -> x_cls_make_graphviz_x:\n150 |         # Map convenience keys to DOT/SVG hyperlink attributes\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:168:18\n    |\n166 |         from_port: str | None = None,\n167 |         to_port: str | None = None,\n168 |         **attrs: Any,\n    |                  ^^^\n169 |     ) -> x_cls_make_graphviz_x:\n170 |         # Map convenience keys to DOT/SVG hyperlink attributes\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:196:18\n    |\n194 |         width: str | None = None,\n195 |         height: str | None = None,\n196 |         **attrs: Any,\n    |                  ^^^\n197 |     ) -> x_cls_make_graphviz_x:\n198 |         \"\"\"Create an image-backed node (shape='none', image=...).\"\"\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_graphviz_x.py:232:26\n    |\n231 |     def subgraph(\n232 |         self, name: str, cluster: bool = False, **attrs: Any\n    |                          ^^^^^^^\n233 |     ) -> _Subgraph:\n234 |         sg = _Subgraph(name=name, cluster=cluster, attrs=attrs or None)\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_graphviz_x.py:232:26\n    |\n231 |     def subgraph(\n232 |         self, name: str, cluster: bool = False, **attrs: Any\n    |                          ^^^^^^^\n233 |     ) -> _Subgraph:\n234 |         sg = _Subgraph(name=name, cluster=cluster, attrs=attrs or None)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:232:58\n    |\n231 |     def subgraph(\n232 |         self, name: str, cluster: bool = False, **attrs: Any\n    |                                                          ^^^\n233 |     ) -> _Subgraph:\n234 |         sg = _Subgraph(name=name, cluster=cluster, attrs=attrs or None)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:243:18\n    |\n241 |         node_id: str,\n242 |         label: str | None = None,\n243 |         **attrs: Any,\n    |                  ^^^\n244 |     ) -> x_cls_make_graphviz_x:\n245 |         if label is not None and \"label\" not in attrs:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:256:18\n    |\n254 |         dst: str,\n255 |         label: str | None = None,\n256 |         **attrs: Any,\n    |                  ^^^\n257 |     ) -> x_cls_make_graphviz_x:\n258 |         arrow = \"->\" if self._directed else \"--\"\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_graphviz_x.py:278:13\n    |\n276 |         lines.extend(self._edges)\n277 |         for sg in self._subgraphs:\n278 |             lines.append(sg.dot())\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n279 |         body = \"\\n  \".join(lines)\n280 |         return f\"{kind} {name} {{\\n  {body}\\n}}\\n\"\n    |\nhelp: Replace for loop with list.extend\n\nA002 Function argument `format` is shadowing a Python builtin\n   --> x_cls_make_graphviz_x.py:284:50\n    |\n282 |     # Render\n283 |\n284 |     def render(self, output_file: str = \"graph\", format: str = \"png\") -> str:\n    |                                                  ^^^^^^\n285 |         dot = self._dot_source()\n286 |         if getattr(self._ctx, \"verbose\", False):\n    |\n\nE501 Line too long (116 > 88)\n   --> x_cls_make_graphviz_x.py:288:89\n    |\n286 |         if getattr(self._ctx, \"verbose\", False):\n287 |             _info(\n288 |                 f\"[graphviz] rendering output_file={output_file!r} format={format!r} engine={self._engine or 'dot'}\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n289 |             )\n290 |         try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_graphviz_x.py:294:17\n    |\n292 |               g = _graphviz.Source(dot)\n293 |               if self._engine:\n294 | /                 try:\n295 | |                     g.engine = self._engine\n296 | |                 except Exception:\n297 | |                     # fallback to layout attribute if engine not supported by graphviz.Source\n298 | |                     pass\n    | |________________________^\n299 |               out_path = g.render(\n300 |                   filename=output_file, format=format, cleanup=True\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_graphviz_x.py:296:17\n    |\n294 |                   try:\n295 |                       g.engine = self._engine\n296 | /                 except Exception:\n297 | |                     # fallback to layout attribute if engine not supported by graphviz.Source\n298 | |                     pass\n    | |________________________^\n299 |               out_path = g.render(\n300 |                   filename=output_file, format=format, cleanup=True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:296:24\n    |\n294 |                 try:\n295 |                     g.engine = self._engine\n296 |                 except Exception:\n    |                        ^^^^^^^^^\n297 |                     # fallback to layout attribute if engine not supported by graphviz.Source\n298 |                     pass\n    |\n\nE501 Line too long (93 > 88)\n   --> x_cls_make_graphviz_x.py:297:89\n    |\n295 |                     g.engine = self._engine\n296 |                 except Exception:\n297 |                     # fallback to layout attribute if engine not supported by graphviz.Source\n    |                                                                                         ^^^^^\n298 |                     pass\n299 |             out_path = g.render(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:303:16\n    |\n301 |             )\n302 |             return str(out_path)\n303 |         except Exception:\n    |                ^^^^^^^^^\n304 |             dot_path = f\"{output_file}.dot\"\n305 |             with open(dot_path, \"w\", encoding=\"utf-8\") as f:\n    |\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_graphviz_x.py:305:18\n    |\n303 |         except Exception:\n304 |             dot_path = f\"{output_file}.dot\"\n305 |             with open(dot_path, \"w\", encoding=\"utf-8\") as f:\n    |                  ^^^^\n306 |                 f.write(dot)\n307 |             if getattr(self._ctx, \"verbose\", False):\n    |\nhelp: Replace with `Path.open()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_graphviz_x.py:315:14\n    |\n313 |     def save_dot(self, path: str) -> str:\n314 |         dot = self._dot_source()\n315 |         with open(path, \"w\", encoding=\"utf-8\") as f:\n    |              ^^^^\n316 |             f.write(dot)\n317 |         return path\n    |\nhelp: Replace with `Path.open()`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_graphviz_x.py:320:89\n    |\n319 |     def to_svg(self, output_basename: str = \"graph\") -> str | None:\n320 |         \"\"\"Render SVG via graphviz if available. Returns SVG path or None on fallback.\"\"\"\n    |                                                                                         ^\n321 |         try:\n322 |             _graphviz: Any = importlib.import_module(\"graphviz\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:323:16\n    |\n321 |         try:\n322 |             _graphviz: Any = importlib.import_module(\"graphviz\")\n323 |         except Exception:\n    |                ^^^^^^^^^\n324 |             # ensure DOT exists for external conversion, even if graphviz python package is missing\n325 |             self.save_dot(f\"{output_basename}.dot\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_graphviz_x.py:324:89\n    |\n322 |             _graphviz: Any = importlib.import_module(\"graphviz\")\n323 |         except Exception:\n324 |             # ensure DOT exists for external conversion, even if graphviz python package is missing\n    |                                                                                         ^^^^^^^^^^^\n325 |             self.save_dot(f\"{output_basename}.dot\")\n326 |             if getattr(self._ctx, \"verbose\", False):\n    |\n\nE501 Line too long (103 > 88)\n   --> x_cls_make_graphviz_x.py:328:89\n    |\n326 |             if getattr(self._ctx, \"verbose\", False):\n327 |                 _info(\n328 |                     \"[graphviz] python 'graphviz' not available; wrote DOT for external svg conversion\"\n    |                                                                                         ^^^^^^^^^^^^^^^\n329 |                 )\n330 |             return None\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_graphviz_x.py:334:17\n    |\n332 |               src = _graphviz.Source(self._dot_source())\n333 |               if self._engine:\n334 | /                 try:\n335 | |                     src.engine = self._engine\n336 | |                 except Exception:\n337 | |                     pass\n    | |________________________^\n338 |               out_path = src.render(\n339 |                   filename=output_basename, format=\"svg\", cleanup=True\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_graphviz_x.py:336:17\n    |\n334 |                   try:\n335 |                       src.engine = self._engine\n336 | /                 except Exception:\n337 | |                     pass\n    | |________________________^\n338 |               out_path = src.render(\n339 |                   filename=output_basename, format=\"svg\", cleanup=True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:336:24\n    |\n334 |                 try:\n335 |                     src.engine = self._engine\n336 |                 except Exception:\n    |                        ^^^^^^^^^\n337 |                     pass\n338 |             out_path = src.render(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:342:16\n    |\n340 |             )\n341 |             return str(out_path)\n342 |         except Exception:\n    |                ^^^^^^^^^\n343 |             # on failure, still persist DOT for manual conversion\n344 |             self.save_dot(f\"{output_basename}.dot\")\n    |\n\nFound 45 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_graphviz_x.py:13:29\n   |\n11 | import logging\n12 | import sys as _sys\n13 | from collections.abc import Iterable, Sequence\n   |                             ^^^^^^^^\n14 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nTC003 Move standard library import `collections.abc.Sequence` into a type-checking block\n  --> x_cls_make_graphviz_x.py:13:39\n   |\n11 | import logging\n12 | import sys as _sys\n13 | from collections.abc import Iterable, Sequence\n   |                                       ^^^^^^^^\n14 | from typing import Any, cast\n   |\nhelp: Move into type-checking block\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_graphviz_x.py:21:5\n   |\n19 |   def _info(*args: object) -> None:\n20 |       msg = \" \".join(str(a) for a in args)\n21 | /     try:\n22 | |         _LOGGER.info(\"%s\", msg)\n23 | |     except Exception:\n24 | |         pass\n   | |____________^\n25 |       try:\n26 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_graphviz_x.py:23:5\n   |\n21 |       try:\n22 |           _LOGGER.info(\"%s\", msg)\n23 | /     except Exception:\n24 | |         pass\n   | |____________^\n25 |       try:\n26 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_graphviz_x.py:23:12\n   |\n21 |     try:\n22 |         _LOGGER.info(\"%s\", msg)\n23 |     except Exception:\n   |            ^^^^^^^^^\n24 |         pass\n25 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_graphviz_x.py:27:12\n   |\n25 |     try:\n26 |         print(msg)\n27 |     except Exception:\n   |            ^^^^^^^^^\n28 |         try:\n29 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_graphviz_x.py:28:9\n   |\n26 |           print(msg)\n27 |       except Exception:\n28 | /         try:\n29 | |             _sys.stdout.write(msg + \"\\n\")\n30 | |         except Exception:\n31 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_graphviz_x.py:30:9\n   |\n28 |           try:\n29 |               _sys.stdout.write(msg + \"\\n\")\n30 | /         except Exception:\n31 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_graphviz_x.py:30:16\n   |\n28 |         try:\n29 |             _sys.stdout.write(msg + \"\\n\")\n30 |         except Exception:\n   |                ^^^^^^^^^\n31 |             pass\n   |\n\nPLW2901 `for` loop variable `v` overwritten by assignment target\n  --> x_cls_make_graphviz_x.py:46:13\n   |\n44 |             continue\n45 |         if isinstance(v, bool):\n46 |             v = \"true\" if v else \"false\"\n   |             ^\n47 |         pairs.append(f'{k}=\"{_esc(v)}\"')\n48 |     return \" [\" + \", \".join(pairs) + \"]\"\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_graphviz_x.py:53:26\n   |\n51 | class _Subgraph:\n52 |     def __init__(\n53 |         self, name: str, cluster: bool, attrs: dict[str, Any] | None = None\n   |                          ^^^^^^^\n54 |     ) -> None:\n55 |         self.name = (\n   |\n\nN801 Class name `x_cls_make_graphviz_x` should use CapWords convention\n  --> x_cls_make_graphviz_x.py:76:7\n   |\n76 | class x_cls_make_graphviz_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^\n77 |     \"\"\"Rich Graphviz builder.\"\"\"\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_graphviz_x.py:80:42\n   |\n79 |     def __init__(\n80 |         self, ctx: object | None = None, directed: bool = True\n   |                                          ^^^^^^^^\n81 |     ) -> None:\n82 |         self._ctx = ctx\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_graphviz_x.py:80:42\n   |\n79 |     def __init__(\n80 |         self, ctx: object | None = None, directed: bool = True\n   |                                          ^^^^^^^^\n81 |     ) -> None:\n82 |         self._ctx = ctx\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_graphviz_x.py:94:24\n   |\n92 |     # Graph-wide controls\n93 |\n94 |     def directed(self, value: bool = True) -> x_cls_make_graphviz_x:\n   |                        ^^^^^\n95 |         self._directed = value\n96 |         return self\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_graphviz_x.py:94:24\n   |\n92 |     # Graph-wide controls\n93 |\n94 |     def directed(self, value: bool = True) -> x_cls_make_graphviz_x:\n   |                        ^^^^^\n95 |         self._directed = value\n96 |         return self\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:102:35\n    |\n100 |         return self\n101 |\n102 |     def graph_attr(self, **attrs: Any) -> x_cls_make_graphviz_x:\n    |                                   ^^^\n103 |         self._graph_attrs.update(attrs)\n104 |         return self\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:106:38\n    |\n104 |         return self\n105 |\n106 |     def node_defaults(self, **attrs: Any) -> x_cls_make_graphviz_x:\n    |                                      ^^^\n107 |         self._node_defaults.update(attrs)\n108 |         return self\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:110:38\n    |\n108 |         return self\n109 |\n110 |     def edge_defaults(self, **attrs: Any) -> x_cls_make_graphviz_x:\n    |                                      ^^^\n111 |         self._edge_defaults.update(attrs)\n112 |         return self\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:148:64\n    |\n147 |     def add_node(\n148 |         self, node_id: str, label: str | None = None, **attrs: Any\n    |                                                                ^^^\n149 |     ) -> x_cls_make_graphviz_x:\n150 |         # Map convenience keys to DOT/SVG hyperlink attributes\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:168:18\n    |\n166 |         from_port: str | None = None,\n167 |         to_port: str | None = None,\n168 |         **attrs: Any,\n    |                  ^^^\n169 |     ) -> x_cls_make_graphviz_x:\n170 |         # Map convenience keys to DOT/SVG hyperlink attributes\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:196:18\n    |\n194 |         width: str | None = None,\n195 |         height: str | None = None,\n196 |         **attrs: Any,\n    |                  ^^^\n197 |     ) -> x_cls_make_graphviz_x:\n198 |         \"\"\"Create an image-backed node (shape='none', image=...).\"\"\"\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_graphviz_x.py:232:26\n    |\n231 |     def subgraph(\n232 |         self, name: str, cluster: bool = False, **attrs: Any\n    |                          ^^^^^^^\n233 |     ) -> _Subgraph:\n234 |         sg = _Subgraph(name=name, cluster=cluster, attrs=attrs or None)\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_graphviz_x.py:232:26\n    |\n231 |     def subgraph(\n232 |         self, name: str, cluster: bool = False, **attrs: Any\n    |                          ^^^^^^^\n233 |     ) -> _Subgraph:\n234 |         sg = _Subgraph(name=name, cluster=cluster, attrs=attrs or None)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:232:58\n    |\n231 |     def subgraph(\n232 |         self, name: str, cluster: bool = False, **attrs: Any\n    |                                                          ^^^\n233 |     ) -> _Subgraph:\n234 |         sg = _Subgraph(name=name, cluster=cluster, attrs=attrs or None)\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:243:18\n    |\n241 |         node_id: str,\n242 |         label: str | None = None,\n243 |         **attrs: Any,\n    |                  ^^^\n244 |     ) -> x_cls_make_graphviz_x:\n245 |         if label is not None and \"label\" not in attrs:\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**attrs`\n   --> x_cls_make_graphviz_x.py:256:18\n    |\n254 |         dst: str,\n255 |         label: str | None = None,\n256 |         **attrs: Any,\n    |                  ^^^\n257 |     ) -> x_cls_make_graphviz_x:\n258 |         arrow = \"->\" if self._directed else \"--\"\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_graphviz_x.py:278:13\n    |\n276 |         lines.extend(self._edges)\n277 |         for sg in self._subgraphs:\n278 |             lines.append(sg.dot())\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n279 |         body = \"\\n  \".join(lines)\n280 |         return f\"{kind} {name} {{\\n  {body}\\n}}\\n\"\n    |\nhelp: Replace for loop with list.extend\n\nA002 Function argument `format` is shadowing a Python builtin\n   --> x_cls_make_graphviz_x.py:284:50\n    |\n282 |     # Render\n283 |\n284 |     def render(self, output_file: str = \"graph\", format: str = \"png\") -> str:\n    |                                                  ^^^^^^\n285 |         dot = self._dot_source()\n286 |         if getattr(self._ctx, \"verbose\", False):\n    |\n\nE501 Line too long (116 > 88)\n   --> x_cls_make_graphviz_x.py:288:89\n    |\n286 |         if getattr(self._ctx, \"verbose\", False):\n287 |             _info(\n288 |                 f\"[graphviz] rendering output_file={output_file!r} format={format!r} engine={self._engine or 'dot'}\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n289 |             )\n290 |         try:\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_graphviz_x.py:294:17\n    |\n292 |               g = _graphviz.Source(dot)\n293 |               if self._engine:\n294 | /                 try:\n295 | |                     g.engine = self._engine\n296 | |                 except Exception:\n297 | |                     # fallback to layout attribute if engine not supported by graphviz.Source\n298 | |                     pass\n    | |________________________^\n299 |               out_path = g.render(\n300 |                   filename=output_file, format=format, cleanup=True\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_graphviz_x.py:296:17\n    |\n294 |                   try:\n295 |                       g.engine = self._engine\n296 | /                 except Exception:\n297 | |                     # fallback to layout attribute if engine not supported by graphviz.Source\n298 | |                     pass\n    | |________________________^\n299 |               out_path = g.render(\n300 |                   filename=output_file, format=format, cleanup=True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:296:24\n    |\n294 |                 try:\n295 |                     g.engine = self._engine\n296 |                 except Exception:\n    |                        ^^^^^^^^^\n297 |                     # fallback to layout attribute if engine not supported by graphviz.Source\n298 |                     pass\n    |\n\nE501 Line too long (93 > 88)\n   --> x_cls_make_graphviz_x.py:297:89\n    |\n295 |                     g.engine = self._engine\n296 |                 except Exception:\n297 |                     # fallback to layout attribute if engine not supported by graphviz.Source\n    |                                                                                         ^^^^^\n298 |                     pass\n299 |             out_path = g.render(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:303:16\n    |\n301 |             )\n302 |             return str(out_path)\n303 |         except Exception:\n    |                ^^^^^^^^^\n304 |             dot_path = f\"{output_file}.dot\"\n305 |             with open(dot_path, \"w\", encoding=\"utf-8\") as f:\n    |\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_graphviz_x.py:305:18\n    |\n303 |         except Exception:\n304 |             dot_path = f\"{output_file}.dot\"\n305 |             with open(dot_path, \"w\", encoding=\"utf-8\") as f:\n    |                  ^^^^\n306 |                 f.write(dot)\n307 |             if getattr(self._ctx, \"verbose\", False):\n    |\nhelp: Replace with `Path.open()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_graphviz_x.py:315:14\n    |\n313 |     def save_dot(self, path: str) -> str:\n314 |         dot = self._dot_source()\n315 |         with open(path, \"w\", encoding=\"utf-8\") as f:\n    |              ^^^^\n316 |             f.write(dot)\n317 |         return path\n    |\nhelp: Replace with `Path.open()`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_graphviz_x.py:320:89\n    |\n319 |     def to_svg(self, output_basename: str = \"graph\") -> str | None:\n320 |         \"\"\"Render SVG via graphviz if available. Returns SVG path or None on fallback.\"\"\"\n    |                                                                                         ^\n321 |         try:\n322 |             _graphviz: Any = importlib.import_module(\"graphviz\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:323:16\n    |\n321 |         try:\n322 |             _graphviz: Any = importlib.import_module(\"graphviz\")\n323 |         except Exception:\n    |                ^^^^^^^^^\n324 |             # ensure DOT exists for external conversion, even if graphviz python package is missing\n325 |             self.save_dot(f\"{output_basename}.dot\")\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_graphviz_x.py:324:89\n    |\n322 |             _graphviz: Any = importlib.import_module(\"graphviz\")\n323 |         except Exception:\n324 |             # ensure DOT exists for external conversion, even if graphviz python package is missing\n    |                                                                                         ^^^^^^^^^^^\n325 |             self.save_dot(f\"{output_basename}.dot\")\n326 |             if getattr(self._ctx, \"verbose\", False):\n    |\n\nE501 Line too long (103 > 88)\n   --> x_cls_make_graphviz_x.py:328:89\n    |\n326 |             if getattr(self._ctx, \"verbose\", False):\n327 |                 _info(\n328 |                     \"[graphviz] python 'graphviz' not available; wrote DOT for external svg conversion\"\n    |                                                                                         ^^^^^^^^^^^^^^^\n329 |                 )\n330 |             return None\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_graphviz_x.py:334:17\n    |\n332 |               src = _graphviz.Source(self._dot_source())\n333 |               if self._engine:\n334 | /                 try:\n335 | |                     src.engine = self._engine\n336 | |                 except Exception:\n337 | |                     pass\n    | |________________________^\n338 |               out_path = src.render(\n339 |                   filename=output_basename, format=\"svg\", cleanup=True\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_graphviz_x.py:336:17\n    |\n334 |                   try:\n335 |                       src.engine = self._engine\n336 | /                 except Exception:\n337 | |                     pass\n    | |________________________^\n338 |               out_path = src.render(\n339 |                   filename=output_basename, format=\"svg\", cleanup=True\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:336:24\n    |\n334 |                 try:\n335 |                     src.engine = self._engine\n336 |                 except Exception:\n    |                        ^^^^^^^^^\n337 |                     pass\n338 |             out_path = src.render(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_graphviz_x.py:342:16\n    |\n340 |             )\n341 |             return str(out_path)\n342 |         except Exception:\n    |                ^^^^^^^^^\n343 |             # on failure, still persist DOT for manual conversion\n344 |             self.save_dot(f\"{output_basename}.dot\")\n    |\n\nFound 45 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_markdown_x": {
        "files": [
            "x_cls_make_markdown_x.py"
        ],
        "files_index": [
            "x_cls_make_markdown_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\t2025-10-07 16:24:14.229777+00:00\n+++ C:\\x_runner_x\\x_make_markdown_x\\x_cls_make_markdown_x.py\t2025-10-07 17:45:56.943509+00:00\n@@ -52,13 +52,11 @@\n     \"\"\"A simple markdown builder with an optional PDF export step.\"\"\"\n \n     # Environment variable to override wkhtmltopdf path\n     WKHTMLTOPDF_ENV_VAR: str = \"X_WKHTMLTOPDF_PATH\"\n     # Default Windows install path (used if present and env var not set)\n-    DEFAULT_WKHTMLTOPDF_PATH: str = (\n-        r\"C:\\Program Files\\wkhtmltopdf\\bin\\wkhtmltopdf.exe\"\n-    )\n+    DEFAULT_WKHTMLTOPDF_PATH: str = r\"C:\\Program Files\\wkhtmltopdf\\bin\\wkhtmltopdf.exe\"\n \n     def __init__(\n         self, wkhtmltopdf_path: str | None = None, ctx: object | None = None\n     ) -> None:\n         \"\"\"Accept optional ctx for future orchestrator integration.\n@@ -118,13 +116,11 @@\n         self.elements.append(f\"![{alt_text}]({url})\\n\\n\")\n \n     def add_list(self, items: list[str], ordered: bool = False) -> None:\n         \"\"\"Add a list to the markdown document.\"\"\"\n         if ordered:\n-            self.elements.extend(\n-                [f\"{i + 1}. {item}\" for i, item in enumerate(items)]\n-            )\n+            self.elements.extend([f\"{i + 1}. {item}\" for i, item in enumerate(items)])\n         else:\n             self.elements.extend([f\"- {item}\" for item in items])\n         self.elements.append(\"\\n\")\n \n     def add_toc(self) -> None:\n@@ -141,23 +137,19 @@\n             # Minimal fallback: return plain text wrapped in <pre> to preserve content\n             return f\"<pre>{(text or '').replace('<','&lt;').replace('>','&gt;')}</pre>\"\n \n     def to_pdf(self, html_str: str, out_path: str) -> None:\n         \"\"\"Render HTML to PDF using pdfkit + wkhtmltopdf; fail fast if unavailable.\"\"\"\n-        if not self.wkhtmltopdf_path or not _os.path.isfile(\n-            self.wkhtmltopdf_path\n-        ):\n+        if not self.wkhtmltopdf_path or not _os.path.isfile(self.wkhtmltopdf_path):\n             raise RuntimeError(\n                 f\"wkhtmltopdf not found (set {self.WKHTMLTOPDF_ENV_VAR} or install at default path)\"\n             )\n         try:\n             _pdfkit: Any = importlib.import_module(\"pdfkit\")\n         except Exception as e:\n             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n-        _os.makedirs(\n-            _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n-        )\n+        _os.makedirs(_os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True)\n         cfg = _pdfkit.configuration(wkhtmltopdf=self.wkhtmltopdf_path)\n         _pdfkit.from_string(html_str, out_path, configuration=cfg)\n \n     def generate(self, output_file: str = \"example.md\") -> str:\n         \"\"\"Generate markdown and save it to a file; optionally render a PDF.\"\"\"\n@@ -187,13 +179,11 @@\n         verbose = True\n \n     maker = x_cls_make_markdown_x(ctx=_Ctx())\n \n     maker.add_header(\"Alice's Adventures in Wonderland\", 1)\n-    maker.add_paragraph(\n-        \"Public-domain sampler inspired by Lewis Carroll (1865).\"\n-    )\n+    maker.add_paragraph(\"Public-domain sampler inspired by Lewis Carroll (1865).\")\n \n     maker.add_header(\"Down the Rabbit-Hole\", 2)\n     maker.add_paragraph(\n         \"Alice was beginning to get very tired of sitting by her sister on the bank, \"\n         \"and of having nothing to do: once or twice she had peeped into the book her \"\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_markdown_x.py:22: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_markdown_x.py:23: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:75: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:76: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:137: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_markdown_x.py:138: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:153: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_markdown_x.py:159: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:160: error: Expression has type \"Any\"  [misc]\nx_cls_make_markdown_x.py:168: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 10 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`\n  --> x_cls_make_markdown_x.py:22:42\n   |\n20 | class BaseMake:\n21 |     @classmethod\n22 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                          ^^^\n23 |         return _os.environ.get(name, default)\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `get_env`\n  --> x_cls_make_markdown_x.py:22:57\n   |\n20 | class BaseMake:\n21 |     @classmethod\n22 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                                         ^^^\n23 |         return _os.environ.get(name, default)\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_markdown_x.py:26:38\n   |\n25 |     @classmethod\n26 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n27 |         v = _os.environ.get(name)\n28 |         if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_markdown_x.py:26:38\n   |\n25 |     @classmethod\n26 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n27 |         v = _os.environ.get(name)\n28 |         if v is None:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_markdown_x.py:35:5\n   |\n33 |   def _info(*args: object) -> None:\n34 |       msg = \" \".join(str(a) for a in args)\n35 | /     try:\n36 | |         _LOGGER.info(\"%s\", msg)\n37 | |     except Exception:\n38 | |         pass\n   | |____________^\n39 |       try:\n40 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_markdown_x.py:37:5\n   |\n35 |       try:\n36 |           _LOGGER.info(\"%s\", msg)\n37 | /     except Exception:\n38 | |         pass\n   | |____________^\n39 |       try:\n40 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_markdown_x.py:37:12\n   |\n35 |     try:\n36 |         _LOGGER.info(\"%s\", msg)\n37 |     except Exception:\n   |            ^^^^^^^^^\n38 |         pass\n39 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_markdown_x.py:41:12\n   |\n39 |     try:\n40 |         print(msg)\n41 |     except Exception:\n   |            ^^^^^^^^^\n42 |         try:\n43 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_markdown_x.py:42:9\n   |\n40 |           print(msg)\n41 |       except Exception:\n42 | /         try:\n43 | |             _sys.stdout.write(msg + \"\\n\")\n44 | |         except Exception:\n45 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_markdown_x.py:44:9\n   |\n42 |           try:\n43 |               _sys.stdout.write(msg + \"\\n\")\n44 | /         except Exception:\n45 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_markdown_x.py:44:16\n   |\n42 |         try:\n43 |             _sys.stdout.write(msg + \"\\n\")\n44 |         except Exception:\n   |                ^^^^^^^^^\n45 |             pass\n   |\n\nN801 Class name `x_cls_make_markdown_x` should use CapWords convention\n  --> x_cls_make_markdown_x.py:51:7\n   |\n51 | class x_cls_make_markdown_x(BaseMake):\n   |       ^^^^^^^^^^^^^^^^^^^^^\n52 |     \"\"\"A simple markdown builder with an optional PDF export step.\"\"\"\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_markdown_x.py:78:20\n   |\n76 |             wkhtmltopdf_path = env_path or (\n77 |                 self.DEFAULT_WKHTMLTOPDF_PATH\n78 |                 if _os.path.isfile(self.DEFAULT_WKHTMLTOPDF_PATH)\n   |                    ^^^^^^^^^^^^^^^\n79 |                 else None\n80 |             )\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPLR2004 Magic value used in comparison, consider replacing `6` with a constant variable\n  --> x_cls_make_markdown_x.py:85:20\n   |\n83 |     def add_header(self, text: str, level: int = 1) -> None:\n84 |         \"\"\"Add a header with hierarchical numbering and TOC update.\"\"\"\n85 |         if level > 6:\n   |                    ^\n86 |             raise ValueError(\"Header level cannot exceed 6.\")\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_markdown_x.py:86:19\n   |\n84 |         \"\"\"Add a header with hierarchical numbering and TOC update.\"\"\"\n85 |         if level > 6:\n86 |             raise ValueError(\"Header level cannot exceed 6.\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |         # Update section counter\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> x_cls_make_markdown_x.py:86:30\n   |\n84 |         \"\"\"Add a header with hierarchical numbering and TOC update.\"\"\"\n85 |         if level > 6:\n86 |             raise ValueError(\"Header level cannot exceed 6.\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |         # Update section counter\n   |\nhelp: Assign to variable; remove string literal\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_markdown_x.py:120:42\n    |\n118 |         self.elements.append(f\"![{alt_text}]({url})\\n\\n\")\n119 |\n120 |     def add_list(self, items: list[str], ordered: bool = False) -> None:\n    |                                          ^^^^^^^\n121 |         \"\"\"Add a list to the markdown document.\"\"\"\n122 |         if ordered:\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_markdown_x.py:120:42\n    |\n118 |         self.elements.append(f\"![{alt_text}]({url})\\n\\n\")\n119 |\n120 |     def add_list(self, items: list[str], ordered: bool = False) -> None:\n    |                                          ^^^^^^^\n121 |         \"\"\"Add a list to the markdown document.\"\"\"\n122 |         if ordered:\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_markdown_x.py:135:89\n    |\n134 |     def to_html(self, text: str) -> str:\n135 |         \"\"\"Convert markdown text to HTML using python-markdown; minimal fallback on failure.\"\"\"\n    |                                                                                         ^^^^^^^\n136 |         try:\n137 |             _markdown: Any = importlib.import_module(\"markdown\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_markdown_x.py:140:16\n    |\n138 |             val = _markdown.markdown(text or \"\")\n139 |             return cast(\"str\", val)\n140 |         except Exception:\n    |                ^^^^^^^^^\n141 |             # Minimal fallback: return plain text wrapped in <pre> to preserve content\n142 |             return f\"<pre>{(text or '').replace('<','&lt;').replace('>','&gt;')}</pre>\"\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_markdown_x.py:146:45\n    |\n144 |     def to_pdf(self, html_str: str, out_path: str) -> None:\n145 |         \"\"\"Render HTML to PDF using pdfkit + wkhtmltopdf; fail fast if unavailable.\"\"\"\n146 |         if not self.wkhtmltopdf_path or not _os.path.isfile(\n    |                                             ^^^^^^^^^^^^^^^\n147 |             self.wkhtmltopdf_path\n148 |         ):\n    |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_markdown_x.py:149:19\n    |\n147 |               self.wkhtmltopdf_path\n148 |           ):\n149 |               raise RuntimeError(\n    |  ___________________^\n150 | |                 f\"wkhtmltopdf not found (set {self.WKHTMLTOPDF_ENV_VAR} or install at default path)\"\n151 | |             )\n    | |_____________^\n152 |           try:\n153 |               _pdfkit: Any = importlib.import_module(\"pdfkit\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_markdown_x.py:150:17\n    |\n148 |         ):\n149 |             raise RuntimeError(\n150 |                 f\"wkhtmltopdf not found (set {self.WKHTMLTOPDF_ENV_VAR} or install at default path)\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n151 |             )\n152 |         try:\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (100 > 88)\n   --> x_cls_make_markdown_x.py:150:89\n    |\n148 |         ):\n149 |             raise RuntimeError(\n150 |                 f\"wkhtmltopdf not found (set {self.WKHTMLTOPDF_ENV_VAR} or install at default path)\"\n    |                                                                                         ^^^^^^^^^^^^\n151 |             )\n152 |         try:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_markdown_x.py:155:19\n    |\n153 |             _pdfkit: Any = importlib.import_module(\"pdfkit\")\n154 |         except Exception as e:\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_markdown_x.py:155:32\n    |\n153 |             _pdfkit: Any = importlib.import_module(\"pdfkit\")\n154 |         except Exception as e:\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |\nhelp: Assign to variable; remove string literal\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_markdown_x.py:156:9\n    |\n154 |         except Exception as e:\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n156 |         _os.makedirs(\n    |         ^^^^^^^^^^^^\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n158 |         )\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_markdown_x.py:157:13\n    |\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |             ^^^^^^^^^^^^^^^^\n158 |         )\n159 |         cfg = _pdfkit.configuration(wkhtmltopdf=self.wkhtmltopdf_path)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_markdown_x.py:157:30\n    |\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |                              ^^^^^^^^^^^^^^^^\n158 |         )\n159 |         cfg = _pdfkit.configuration(wkhtmltopdf=self.wkhtmltopdf_path)\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_markdown_x.py:165:14\n    |\n163 |         \"\"\"Generate markdown and save it to a file; optionally render a PDF.\"\"\"\n164 |         markdown_content = \"\".join(self.elements)\n165 |         with open(output_file, \"w\", encoding=\"utf-8\") as f:\n    |              ^^^^\n166 |             f.write(markdown_content)\n    |\nhelp: Replace with `Path.open()`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_markdown_x.py:182:16\n    |\n180 | if __name__ == \"__main__\":\n181 |     # Rich example: Alice in Wonderland sampler -> Markdown + PDF beside this file\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n    |                ^^^^^^^^^^^^^^^^\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_markdown_x.py:182:33\n    |\n180 | if __name__ == \"__main__\":\n181 |     # Rich example: Alice in Wonderland sampler -> Markdown + PDF beside this file\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n    |                                 ^^^^^^^^^^^^^^^^\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_markdown_x.py:183:15\n    |\n181 |     # Rich example: Alice in Wonderland sampler -> Markdown + PDF beside this file\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n    |               ^^^^^^^^^^^^^\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_markdown_x.py:184:5\n    |\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |     ^^^^^^^^^^^^\n185 |\n186 |     class _Ctx:\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nE501 Line too long (125 > 88)\n   --> x_cls_make_markdown_x.py:214:89\n    |\n212 |     maker.add_header(\"A Curious Bottle\", 2)\n213 |     maker.add_paragraph(\n214 |         'On a little table she found a bottle, on it was a paper label, with the words \"DRINK ME\" beautifully printed on it.'\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n215 |     )\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_markdown_x.py:233:89\n    |\n231 |     maker.add_header(\"Conclusion\", 2)\n232 |     maker.add_paragraph(\n233 |         \"This document demonstrates headers with numbering and TOC, lists, tables, and images.\"\n    |                                                                                         ^^^^^^^\n234 |     )\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_markdown_x.py:239:17\n    |\n237 |     maker.add_toc()\n238 |\n239 |     output_md = _os.path.join(out_dir, \"alice_in_wonderland.md\")\n    |                 ^^^^^^^^^^^^^\n240 |     maker.generate(output_file=output_md)\n    |\n\nE501 Line too long (111 > 88)\n   --> x_cls_make_markdown_x.py:244:89\n    |\n242 |     if not maker.wkhtmltopdf_path:\n243 |         _info(\n244 |             f\"[markdown] PDF not generated: set {x_cls_make_markdown_x.WKHTMLTOPDF_ENV_VAR} to wkhtmltopdf.exe\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^\n245 |         )\n    |\n\nFound 38 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`\n  --> x_cls_make_markdown_x.py:22:42\n   |\n20 | class BaseMake:\n21 |     @classmethod\n22 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                          ^^^\n23 |         return _os.environ.get(name, default)\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `get_env`\n  --> x_cls_make_markdown_x.py:22:57\n   |\n20 | class BaseMake:\n21 |     @classmethod\n22 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                                         ^^^\n23 |         return _os.environ.get(name, default)\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_markdown_x.py:26:38\n   |\n25 |     @classmethod\n26 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n27 |         v = _os.environ.get(name)\n28 |         if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_markdown_x.py:26:38\n   |\n25 |     @classmethod\n26 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n27 |         v = _os.environ.get(name)\n28 |         if v is None:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_markdown_x.py:35:5\n   |\n33 |   def _info(*args: object) -> None:\n34 |       msg = \" \".join(str(a) for a in args)\n35 | /     try:\n36 | |         _LOGGER.info(\"%s\", msg)\n37 | |     except Exception:\n38 | |         pass\n   | |____________^\n39 |       try:\n40 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_markdown_x.py:37:5\n   |\n35 |       try:\n36 |           _LOGGER.info(\"%s\", msg)\n37 | /     except Exception:\n38 | |         pass\n   | |____________^\n39 |       try:\n40 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_markdown_x.py:37:12\n   |\n35 |     try:\n36 |         _LOGGER.info(\"%s\", msg)\n37 |     except Exception:\n   |            ^^^^^^^^^\n38 |         pass\n39 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_markdown_x.py:41:12\n   |\n39 |     try:\n40 |         print(msg)\n41 |     except Exception:\n   |            ^^^^^^^^^\n42 |         try:\n43 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_markdown_x.py:42:9\n   |\n40 |           print(msg)\n41 |       except Exception:\n42 | /         try:\n43 | |             _sys.stdout.write(msg + \"\\n\")\n44 | |         except Exception:\n45 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_markdown_x.py:44:9\n   |\n42 |           try:\n43 |               _sys.stdout.write(msg + \"\\n\")\n44 | /         except Exception:\n45 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_markdown_x.py:44:16\n   |\n42 |         try:\n43 |             _sys.stdout.write(msg + \"\\n\")\n44 |         except Exception:\n   |                ^^^^^^^^^\n45 |             pass\n   |\n\nN801 Class name `x_cls_make_markdown_x` should use CapWords convention\n  --> x_cls_make_markdown_x.py:51:7\n   |\n51 | class x_cls_make_markdown_x(BaseMake):\n   |       ^^^^^^^^^^^^^^^^^^^^^\n52 |     \"\"\"A simple markdown builder with an optional PDF export step.\"\"\"\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_markdown_x.py:78:20\n   |\n76 |             wkhtmltopdf_path = env_path or (\n77 |                 self.DEFAULT_WKHTMLTOPDF_PATH\n78 |                 if _os.path.isfile(self.DEFAULT_WKHTMLTOPDF_PATH)\n   |                    ^^^^^^^^^^^^^^^\n79 |                 else None\n80 |             )\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPLR2004 Magic value used in comparison, consider replacing `6` with a constant variable\n  --> x_cls_make_markdown_x.py:85:20\n   |\n83 |     def add_header(self, text: str, level: int = 1) -> None:\n84 |         \"\"\"Add a header with hierarchical numbering and TOC update.\"\"\"\n85 |         if level > 6:\n   |                    ^\n86 |             raise ValueError(\"Header level cannot exceed 6.\")\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_markdown_x.py:86:19\n   |\n84 |         \"\"\"Add a header with hierarchical numbering and TOC update.\"\"\"\n85 |         if level > 6:\n86 |             raise ValueError(\"Header level cannot exceed 6.\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |         # Update section counter\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> x_cls_make_markdown_x.py:86:30\n   |\n84 |         \"\"\"Add a header with hierarchical numbering and TOC update.\"\"\"\n85 |         if level > 6:\n86 |             raise ValueError(\"Header level cannot exceed 6.\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |\n88 |         # Update section counter\n   |\nhelp: Assign to variable; remove string literal\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_markdown_x.py:120:42\n    |\n118 |         self.elements.append(f\"![{alt_text}]({url})\\n\\n\")\n119 |\n120 |     def add_list(self, items: list[str], ordered: bool = False) -> None:\n    |                                          ^^^^^^^\n121 |         \"\"\"Add a list to the markdown document.\"\"\"\n122 |         if ordered:\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_markdown_x.py:120:42\n    |\n118 |         self.elements.append(f\"![{alt_text}]({url})\\n\\n\")\n119 |\n120 |     def add_list(self, items: list[str], ordered: bool = False) -> None:\n    |                                          ^^^^^^^\n121 |         \"\"\"Add a list to the markdown document.\"\"\"\n122 |         if ordered:\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_markdown_x.py:135:89\n    |\n134 |     def to_html(self, text: str) -> str:\n135 |         \"\"\"Convert markdown text to HTML using python-markdown; minimal fallback on failure.\"\"\"\n    |                                                                                         ^^^^^^^\n136 |         try:\n137 |             _markdown: Any = importlib.import_module(\"markdown\")\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_markdown_x.py:140:16\n    |\n138 |             val = _markdown.markdown(text or \"\")\n139 |             return cast(\"str\", val)\n140 |         except Exception:\n    |                ^^^^^^^^^\n141 |             # Minimal fallback: return plain text wrapped in <pre> to preserve content\n142 |             return f\"<pre>{(text or '').replace('<','&lt;').replace('>','&gt;')}</pre>\"\n    |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_markdown_x.py:146:45\n    |\n144 |     def to_pdf(self, html_str: str, out_path: str) -> None:\n145 |         \"\"\"Render HTML to PDF using pdfkit + wkhtmltopdf; fail fast if unavailable.\"\"\"\n146 |         if not self.wkhtmltopdf_path or not _os.path.isfile(\n    |                                             ^^^^^^^^^^^^^^^\n147 |             self.wkhtmltopdf_path\n148 |         ):\n    |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_markdown_x.py:149:19\n    |\n147 |               self.wkhtmltopdf_path\n148 |           ):\n149 |               raise RuntimeError(\n    |  ___________________^\n150 | |                 f\"wkhtmltopdf not found (set {self.WKHTMLTOPDF_ENV_VAR} or install at default path)\"\n151 | |             )\n    | |_____________^\n152 |           try:\n153 |               _pdfkit: Any = importlib.import_module(\"pdfkit\")\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_markdown_x.py:150:17\n    |\n148 |         ):\n149 |             raise RuntimeError(\n150 |                 f\"wkhtmltopdf not found (set {self.WKHTMLTOPDF_ENV_VAR} or install at default path)\"\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n151 |             )\n152 |         try:\n    |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (100 > 88)\n   --> x_cls_make_markdown_x.py:150:89\n    |\n148 |         ):\n149 |             raise RuntimeError(\n150 |                 f\"wkhtmltopdf not found (set {self.WKHTMLTOPDF_ENV_VAR} or install at default path)\"\n    |                                                                                         ^^^^^^^^^^^^\n151 |             )\n152 |         try:\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_markdown_x.py:155:19\n    |\n153 |             _pdfkit: Any = importlib.import_module(\"pdfkit\")\n154 |         except Exception as e:\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_markdown_x.py:155:32\n    |\n153 |             _pdfkit: Any = importlib.import_module(\"pdfkit\")\n154 |         except Exception as e:\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |\nhelp: Assign to variable; remove string literal\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_markdown_x.py:156:9\n    |\n154 |         except Exception as e:\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n156 |         _os.makedirs(\n    |         ^^^^^^^^^^^^\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n158 |         )\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_markdown_x.py:157:13\n    |\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |             ^^^^^^^^^^^^^^^^\n158 |         )\n159 |         cfg = _pdfkit.configuration(wkhtmltopdf=self.wkhtmltopdf_path)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_markdown_x.py:157:30\n    |\n155 |             raise RuntimeError(\"pdfkit is required for PDF export\") from e\n156 |         _os.makedirs(\n157 |             _os.path.dirname(_os.path.abspath(out_path)) or \".\", exist_ok=True\n    |                              ^^^^^^^^^^^^^^^^\n158 |         )\n159 |         cfg = _pdfkit.configuration(wkhtmltopdf=self.wkhtmltopdf_path)\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_markdown_x.py:165:14\n    |\n163 |         \"\"\"Generate markdown and save it to a file; optionally render a PDF.\"\"\"\n164 |         markdown_content = \"\".join(self.elements)\n165 |         with open(output_file, \"w\", encoding=\"utf-8\") as f:\n    |              ^^^^\n166 |             f.write(markdown_content)\n    |\nhelp: Replace with `Path.open()`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_markdown_x.py:182:16\n    |\n180 | if __name__ == \"__main__\":\n181 |     # Rich example: Alice in Wonderland sampler -> Markdown + PDF beside this file\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n    |                ^^^^^^^^^^^^^^^^\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_markdown_x.py:182:33\n    |\n180 | if __name__ == \"__main__\":\n181 |     # Rich example: Alice in Wonderland sampler -> Markdown + PDF beside this file\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n    |                                 ^^^^^^^^^^^^^^^^\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_markdown_x.py:183:15\n    |\n181 |     # Rich example: Alice in Wonderland sampler -> Markdown + PDF beside this file\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n    |               ^^^^^^^^^^^^^\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_markdown_x.py:184:5\n    |\n182 |     base_dir = _os.path.dirname(_os.path.abspath(__file__))\n183 |     out_dir = _os.path.join(base_dir, \"out_docs\")\n184 |     _os.makedirs(out_dir, exist_ok=True)\n    |     ^^^^^^^^^^^^\n185 |\n186 |     class _Ctx:\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nE501 Line too long (125 > 88)\n   --> x_cls_make_markdown_x.py:214:89\n    |\n212 |     maker.add_header(\"A Curious Bottle\", 2)\n213 |     maker.add_paragraph(\n214 |         'On a little table she found a bottle, on it was a paper label, with the words \"DRINK ME\" beautifully printed on it.'\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n215 |     )\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_markdown_x.py:233:89\n    |\n231 |     maker.add_header(\"Conclusion\", 2)\n232 |     maker.add_paragraph(\n233 |         \"This document demonstrates headers with numbering and TOC, lists, tables, and images.\"\n    |                                                                                         ^^^^^^^\n234 |     )\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_markdown_x.py:239:17\n    |\n237 |     maker.add_toc()\n238 |\n239 |     output_md = _os.path.join(out_dir, \"alice_in_wonderland.md\")\n    |                 ^^^^^^^^^^^^^\n240 |     maker.generate(output_file=output_md)\n    |\n\nE501 Line too long (111 > 88)\n   --> x_cls_make_markdown_x.py:244:89\n    |\n242 |     if not maker.wkhtmltopdf_path:\n243 |         _info(\n244 |             f\"[markdown] PDF not generated: set {x_cls_make_markdown_x.WKHTMLTOPDF_ENV_VAR} to wkhtmltopdf.exe\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^\n245 |         )\n    |\n\nFound 38 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_mermaid_x": {
        "files": [
            "x_cls_make_mermaid_x.py"
        ],
        "files_index": [
            "x_cls_make_mermaid_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-07 16:24:15.277430+00:00\n+++ C:\\x_runner_x\\x_make_mermaid_x\\x_cls_make_mermaid_x.py\t2025-10-07 17:45:59.210617+00:00\n@@ -61,13 +61,11 @@\n @dataclass\n class MermaidDoc:\n     kind: str\n     header: str\n     lines: list[str] = field(default_factory=list)\n-    directives: list[str] = field(\n-        default_factory=list\n-    )  # e.g., %%{init: {...}}%%\n+    directives: list[str] = field(default_factory=list)  # e.g., %%{init: {...}}%%\n     comments: list[str] = field(default_factory=list)\n \n \n class x_cls_make_mermaid_x:\n     \"\"\"Flexible Mermaid builder covering many diagram kinds.\n@@ -76,13 +74,11 @@\n       m = x_cls_make_mermaid_x().flowchart(\"LR\").node(\"A\",\"Start\").edge(\"A\",\"B\",\"go\")\n       m.sequence().participant(\"A\",\"Alice\").message(\"A\",\"B\",\"Hi\")\n       src = m.source()\n     \"\"\"\n \n-    def __init__(\n-        self, direction: str = \"LR\", ctx: object | None = None\n-    ) -> None:\n+    def __init__(self, direction: str = \"LR\", ctx: object | None = None) -> None:\n         self._ctx = ctx\n         self._doc = MermaidDoc(kind=_FLOW, header=f\"{_FLOW} {direction}\")\n \n     # Core controls\n \n@@ -202,13 +198,11 @@\n             \"circle\": (\"((\", \"))\"),\n             \"asym\": (\">\", \"]\"),\n         }\n         if shape and shape in shape_map:\n             left_delim, right_delim = shape_map[shape]\n-            self._doc.lines.append(\n-                f\"{node_id}{left_delim}{_esc(label)}{right_delim}\"\n-            )\n+            self._doc.lines.append(f\"{node_id}{left_delim}{_esc(label)}{right_delim}\")\n         else:\n             self._doc.lines.append(f'{node_id}[\"{_esc(label)}\"]')\n         return self\n \n     def edge(\n@@ -260,13 +254,11 @@\n                 self._doc.lines.append(f'click {node_id} \"{_esc(url)}\"')\n         return self\n \n     # Sequence API\n \n-    def participant(\n-        self, pid: str, label: str | None = None\n-    ) -> x_cls_make_mermaid_x:\n+    def participant(self, pid: str, label: str | None = None) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _SEQ:\n             if label:\n                 self._doc.lines.append(f'participant {pid} as \"{_esc(label)}\"')\n             else:\n                 self._doc.lines.append(f\"participant {pid}\")\n@@ -277,18 +269,14 @@\n     ) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _SEQ:\n             self._doc.lines.append(f\"{src} {kind} {dst}: {_esc(text)}\")\n         return self\n \n-    def note_over(\n-        self, who: str | tuple[str, str], text: str\n-    ) -> x_cls_make_mermaid_x:\n+    def note_over(self, who: str | tuple[str, str], text: str) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _SEQ:\n             if isinstance(who, tuple):\n-                self._doc.lines.append(\n-                    f\"Note over {who[0]},{who[1]}: {_esc(text)}\"\n-                )\n+                self._doc.lines.append(f\"Note over {who[0]},{who[1]}: {_esc(text)}\")\n             else:\n                 self._doc.lines.append(f\"Note over {who}: {_esc(text)}\")\n         return self\n \n     def activate(self, pid: str) -> x_cls_make_mermaid_x:\n@@ -299,13 +287,11 @@\n     def deactivate(self, pid: str) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _SEQ:\n             self._doc.lines.append(f\"deactivate {pid}\")\n         return self\n \n-    def block(\n-        self, kind: str, title: str, body: Iterable[str]\n-    ) -> x_cls_make_mermaid_x:\n+    def block(self, kind: str, title: str, body: Iterable[str]) -> x_cls_make_mermaid_x:\n         \"\"\"Generic sequence block: kind in ('loop','alt','opt','par','rect').\"\"\"\n         if self._doc.kind == _SEQ:\n             self._doc.lines.append(f\"{kind} {_esc(title)}\")\n             for ln in body:\n                 self._doc.lines.append(ln)\n@@ -338,13 +324,11 @@\n             self._doc.lines.append(f\"{a} {op} {b}{lab}\")\n         return self\n \n     # State API\n \n-    def state_node(\n-        self, name: str, alias: str | None = None\n-    ) -> x_cls_make_mermaid_x:\n+    def state_node(self, name: str, alias: str | None = None) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _STATE:\n             if alias:\n                 self._doc.lines.append(f'state \"{_esc(name)}\" as {alias}')\n             else:\n                 self._doc.lines.append(f'state \"{_esc(name)}\"')\n@@ -362,13 +346,11 @@\n         return self.state_trans(\"[*]\", to)\n \n     def state_end(self, frm: str) -> x_cls_make_mermaid_x:\n         return self.state_trans(frm, \"[*]\")\n \n-    def state_subgraph(\n-        self, name: str, body: Iterable[str]\n-    ) -> x_cls_make_mermaid_x:\n+    def state_subgraph(self, name: str, body: Iterable[str]) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _STATE:\n             self._doc.lines.append(f\"state {_esc(name)} {{\")\n             for ln in body:\n                 self._doc.lines.append(ln)\n             self._doc.lines.append(\"}\")\n@@ -434,13 +416,11 @@\n     def journey_section(self, title: str) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _JOURNEY:\n             self._doc.lines.append(f\"section {_esc(title)}\")\n         return self\n \n-    def journey_step(\n-        self, actor: str, score: int, text: str\n-    ) -> x_cls_make_mermaid_x:\n+    def journey_step(self, actor: str, score: int, text: str) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _JOURNEY:\n             self._doc.lines.append(f\"{_esc(actor)}: {score}: {_esc(text)}\")\n         return self\n \n     # Pie\n@@ -493,13 +473,11 @@\n                 self._doc.lines.append(f\"{indent}{_esc(part)}\")\n         return self\n \n     # Requirement\n \n-    def req(\n-        self, kind: str, ident: str, attrs: dict[str, str]\n-    ) -> x_cls_make_mermaid_x:\n+    def req(self, kind: str, ident: str, attrs: dict[str, str]) -> x_cls_make_mermaid_x:\n         \"\"\"kind in ('requirement','functionalRequirement','test','risk',...).\"\"\"\n         if self._doc.kind == _REQ:\n             self._doc.lines.append(f\"{kind} {ident} {{\")\n             for k, v in attrs.items():\n                 self._doc.lines.append(f\"  {k}: {_esc(v)}\")\n@@ -519,13 +497,11 @@\n     def quadrant(self, idx: int, name: str) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _QUAD:\n             self._doc.lines.append(f'quadrant-{idx} \"{_esc(name)}\"')\n         return self\n \n-    def quad_point(\n-        self, label: str, x: float, y: float\n-    ) -> x_cls_make_mermaid_x:\n+    def quad_point(self, label: str, x: float, y: float) -> x_cls_make_mermaid_x:\n         if self._doc.kind == _QUAD:\n             self._doc.lines.append(f'point \"{_esc(label)}\" : {x}, {y}')\n         return self\n \n     # Beta charts (stubs: let callers write lines)\n@@ -571,13 +547,11 @@\n                 self.save(mmd_path)\n         except Exception:\n             self.save(mmd_path)\n         # Decide svg output\n         svg_path = svg_path or (\n-            mmd_path[:-4] + \"svg\"\n-            if mmd_path.endswith(\".mmd\")\n-            else mmd_path + \".svg\"\n+            mmd_path[:-4] + \"svg\" if mmd_path.endswith(\".mmd\") else mmd_path + \".svg\"\n         )\n         # Resolve CLI\n         cmd = mmdc_cmd or os.environ.get(\"MMDC\", \"mmdc\")\n         exe = shutil.which(cmd)\n         if not exe:\n@@ -588,13 +562,11 @@\n             return None\n         args = [exe, \"-i\", mmd_path, \"-o\", svg_path, \"-b\", \"transparent\"]\n         if extra_args:\n             args.extend(extra_args)\n         try:\n-            res = _subprocess.run(\n-                args, check=False, capture_output=True, text=True\n-            )\n+            res = _subprocess.run(args, check=False, capture_output=True, text=True)\n             if res.stdout:\n                 _info(res.stdout.strip())\n             if res.returncode == 0:\n                 return svg_path\n             if res.stderr:\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_mermaid_x.py:89: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_mermaid_x.py:93: error: Expression type contains \"Any\" (has type \"str | dict[str, Any]\")  [misc]\nx_cls_make_mermaid_x.py:552: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_mermaid_x.py:584: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nFound 4 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_mermaid_x.py:14:29\n   |\n12 | import subprocess as _subprocess\n13 | import sys as _sys\n14 | from collections.abc import Iterable\n   |                             ^^^^^^^^\n15 | from dataclasses import dataclass, field\n16 | from typing import Any\n   |\nhelp: Move into type-checking block\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_mermaid_x.py:23:5\n   |\n21 |   def _info(*args: object) -> None:\n22 |       msg = \" \".join(str(a) for a in args)\n23 | /     try:\n24 | |         _LOGGER.info(\"%s\", msg)\n25 | |     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_mermaid_x.py:25:5\n   |\n23 |       try:\n24 |           _LOGGER.info(\"%s\", msg)\n25 | /     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_mermaid_x.py:25:12\n   |\n23 |     try:\n24 |         _LOGGER.info(\"%s\", msg)\n25 |     except Exception:\n   |            ^^^^^^^^^\n26 |         pass\n27 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_mermaid_x.py:29:12\n   |\n27 |     try:\n28 |         print(msg)\n29 |     except Exception:\n   |            ^^^^^^^^^\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_mermaid_x.py:30:9\n   |\n28 |           print(msg)\n29 |       except Exception:\n30 | /         try:\n31 | |             _sys.stdout.write(msg + \"\\n\")\n32 | |         except Exception:\n33 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_mermaid_x.py:32:9\n   |\n30 |           try:\n31 |               _sys.stdout.write(msg + \"\\n\")\n32 | /         except Exception:\n33 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_mermaid_x.py:32:16\n   |\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n32 |         except Exception:\n   |                ^^^^^^^^^\n33 |             pass\n   |\n\nN801 Class name `x_cls_make_mermaid_x` should use CapWords convention\n  --> x_cls_make_mermaid_x.py:72:7\n   |\n72 | class x_cls_make_mermaid_x:\n   |       ^^^^^^^^^^^^^^^^^^^^\n73 |     \"\"\"Flexible Mermaid builder covering many diagram kinds.\n   |\n\nPLC0415 `import` should be at the top-level of a file\n  --> x_cls_make_mermaid_x.py:95:13\n   |\n93 |         if isinstance(directive_json, dict):\n94 |             # minimal serializer without imports\n95 |             import json as _json\n   |             ^^^^^^^^^^^^^^^^^^^^\n96 |\n97 |             txt = _json.dumps(directive_json, separators=(\",\", \":\"))\n   |\n\ninvalid-syntax: Cannot use an escape sequence (backslash) in f-strings on Python 3.11 (syntax was added in Python 3.12)\n   --> x_cls_make_mermaid_x.py:467:33\n    |\n465 |         if self._doc.kind == _GIT:\n466 |             self._doc.lines.append(\n467 |                 f'commit {\"tag: \\\"\"+_esc(msg)+\"\\\"\" if msg else \"\"}'.rstrip()\n    |                                 ^\n468 |             )\n469 |         return self\n    |\n\ninvalid-syntax: Cannot use an escape sequence (backslash) in f-strings on Python 3.11 (syntax was added in Python 3.12)\n   --> x_cls_make_mermaid_x.py:467:48\n    |\n465 |         if self._doc.kind == _GIT:\n466 |             self._doc.lines.append(\n467 |                 f'commit {\"tag: \\\"\"+_esc(msg)+\"\\\"\" if msg else \"\"}'.rstrip()\n    |                                                ^\n468 |             )\n469 |         return self\n    |\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_mermaid_x.py:550:14\n    |\n548 |     def save(self, path: str = \"diagram.mmd\") -> str:\n549 |         src = self.source()\n550 |         with open(path, \"w\", encoding=\"utf-8\") as f:\n    |              ^^^^\n551 |             f.write(src)\n552 |         if getattr(self._ctx, \"verbose\", False):\n    |\nhelp: Replace with `Path.open()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_mermaid_x.py:570:20\n    |\n568 |         mmd_path = mmd_path or \"diagram.mmd\"\n569 |         try:\n570 |             if not os.path.exists(mmd_path):\n    |                    ^^^^^^^^^^^^^^\n571 |                 self.save(mmd_path)\n572 |         except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_mermaid_x.py:572:16\n    |\n570 |             if not os.path.exists(mmd_path):\n571 |                 self.save(mmd_path)\n572 |         except Exception:\n    |                ^^^^^^^^^\n573 |             self.save(mmd_path)\n574 |         # Decide svg output\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_mermaid_x.py:586:89\n    |\n584 |             if getattr(self._ctx, \"verbose\", False):\n585 |                 _info(\n586 |                     f\"[mermaid] mermaid-cli '{cmd}' not found in PATH; left .mmd at {mmd_path}\"\n    |                                                                                         ^^^^^^^\n587 |                 )\n588 |             return None\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_mermaid_x.py:593:19\n    |\n591 |             args.extend(extra_args)\n592 |         try:\n593 |             res = _subprocess.run(\n    |                   ^^^^^^^^^^^^^^^\n594 |                 args, check=False, capture_output=True, text=True\n595 |             )\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_mermaid_x.py:602:9\n    |\n600 |               if res.stderr:\n601 |                   _info(res.stderr.strip())\n602 | /         except Exception:\n603 | |             pass\n    | |________________^\n604 |           return None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_mermaid_x.py:602:16\n    |\n600 |             if res.stderr:\n601 |                 _info(res.stderr.strip())\n602 |         except Exception:\n    |                ^^^^^^^^^\n603 |             pass\n604 |         return None\n    |\n\nFound 19 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_mermaid_x.py:14:29\n   |\n12 | import subprocess as _subprocess\n13 | import sys as _sys\n14 | from collections.abc import Iterable\n   |                             ^^^^^^^^\n15 | from dataclasses import dataclass, field\n16 | from typing import Any\n   |\nhelp: Move into type-checking block\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_mermaid_x.py:23:5\n   |\n21 |   def _info(*args: object) -> None:\n22 |       msg = \" \".join(str(a) for a in args)\n23 | /     try:\n24 | |         _LOGGER.info(\"%s\", msg)\n25 | |     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_mermaid_x.py:25:5\n   |\n23 |       try:\n24 |           _LOGGER.info(\"%s\", msg)\n25 | /     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_mermaid_x.py:25:12\n   |\n23 |     try:\n24 |         _LOGGER.info(\"%s\", msg)\n25 |     except Exception:\n   |            ^^^^^^^^^\n26 |         pass\n27 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_mermaid_x.py:29:12\n   |\n27 |     try:\n28 |         print(msg)\n29 |     except Exception:\n   |            ^^^^^^^^^\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_mermaid_x.py:30:9\n   |\n28 |           print(msg)\n29 |       except Exception:\n30 | /         try:\n31 | |             _sys.stdout.write(msg + \"\\n\")\n32 | |         except Exception:\n33 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_mermaid_x.py:32:9\n   |\n30 |           try:\n31 |               _sys.stdout.write(msg + \"\\n\")\n32 | /         except Exception:\n33 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_mermaid_x.py:32:16\n   |\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n32 |         except Exception:\n   |                ^^^^^^^^^\n33 |             pass\n   |\n\nN801 Class name `x_cls_make_mermaid_x` should use CapWords convention\n  --> x_cls_make_mermaid_x.py:72:7\n   |\n72 | class x_cls_make_mermaid_x:\n   |       ^^^^^^^^^^^^^^^^^^^^\n73 |     \"\"\"Flexible Mermaid builder covering many diagram kinds.\n   |\n\nPLC0415 `import` should be at the top-level of a file\n  --> x_cls_make_mermaid_x.py:95:13\n   |\n93 |         if isinstance(directive_json, dict):\n94 |             # minimal serializer without imports\n95 |             import json as _json\n   |             ^^^^^^^^^^^^^^^^^^^^\n96 |\n97 |             txt = _json.dumps(directive_json, separators=(\",\", \":\"))\n   |\n\ninvalid-syntax: Cannot use an escape sequence (backslash) in f-strings on Python 3.11 (syntax was added in Python 3.12)\n   --> x_cls_make_mermaid_x.py:467:33\n    |\n465 |         if self._doc.kind == _GIT:\n466 |             self._doc.lines.append(\n467 |                 f'commit {\"tag: \\\"\"+_esc(msg)+\"\\\"\" if msg else \"\"}'.rstrip()\n    |                                 ^\n468 |             )\n469 |         return self\n    |\n\ninvalid-syntax: Cannot use an escape sequence (backslash) in f-strings on Python 3.11 (syntax was added in Python 3.12)\n   --> x_cls_make_mermaid_x.py:467:48\n    |\n465 |         if self._doc.kind == _GIT:\n466 |             self._doc.lines.append(\n467 |                 f'commit {\"tag: \\\"\"+_esc(msg)+\"\\\"\" if msg else \"\"}'.rstrip()\n    |                                                ^\n468 |             )\n469 |         return self\n    |\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_mermaid_x.py:550:14\n    |\n548 |     def save(self, path: str = \"diagram.mmd\") -> str:\n549 |         src = self.source()\n550 |         with open(path, \"w\", encoding=\"utf-8\") as f:\n    |              ^^^^\n551 |             f.write(src)\n552 |         if getattr(self._ctx, \"verbose\", False):\n    |\nhelp: Replace with `Path.open()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_mermaid_x.py:570:20\n    |\n568 |         mmd_path = mmd_path or \"diagram.mmd\"\n569 |         try:\n570 |             if not os.path.exists(mmd_path):\n    |                    ^^^^^^^^^^^^^^\n571 |                 self.save(mmd_path)\n572 |         except Exception:\n    |\nhelp: Replace with `Path(...).exists()`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_mermaid_x.py:572:16\n    |\n570 |             if not os.path.exists(mmd_path):\n571 |                 self.save(mmd_path)\n572 |         except Exception:\n    |                ^^^^^^^^^\n573 |             self.save(mmd_path)\n574 |         # Decide svg output\n    |\n\nE501 Line too long (95 > 88)\n   --> x_cls_make_mermaid_x.py:586:89\n    |\n584 |             if getattr(self._ctx, \"verbose\", False):\n585 |                 _info(\n586 |                     f\"[mermaid] mermaid-cli '{cmd}' not found in PATH; left .mmd at {mmd_path}\"\n    |                                                                                         ^^^^^^^\n587 |                 )\n588 |             return None\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_mermaid_x.py:593:19\n    |\n591 |             args.extend(extra_args)\n592 |         try:\n593 |             res = _subprocess.run(\n    |                   ^^^^^^^^^^^^^^^\n594 |                 args, check=False, capture_output=True, text=True\n595 |             )\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_mermaid_x.py:602:9\n    |\n600 |               if res.stderr:\n601 |                   _info(res.stderr.strip())\n602 | /         except Exception:\n603 | |             pass\n    | |________________^\n604 |           return None\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_mermaid_x.py:602:16\n    |\n600 |             if res.stderr:\n601 |                 _info(res.stderr.strip())\n602 |         except Exception:\n    |                ^^^^^^^^^\n603 |             pass\n604 |         return None\n    |\n\nFound 19 errors.\nNo fixes available (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_persistent_env_var_x": {
        "files": [
            "x_cls_make_persistent_env_var_x.py"
        ],
        "files_index": [
            "x_cls_make_persistent_env_var_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\t2025-10-07 16:24:16.388223+00:00\n+++ C:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\t2025-10-07 17:46:01.483717+00:00\n@@ -265,13 +265,11 @@\n     btn_frame = tk_mod.Frame(frame)\n     btn_frame.grid(row=row, column=0, columnspan=2, pady=(10, 0))\n     tk_mod.Button(btn_frame, text=\"Set\", command=on_set).pack(\n         side=tk_mod.LEFT, padx=(0, 6)\n     )\n-    tk_mod.Button(btn_frame, text=\"Cancel\", command=on_cancel).pack(\n-        side=tk_mod.LEFT\n-    )\n+    tk_mod.Button(btn_frame, text=\"Cancel\", command=on_cancel).pack(side=tk_mod.LEFT)\n \n     return root, entries, show_var, result\n \n \n def _run_gui_loop(\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_persistent_env_var_x.py:113: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_persistent_env_var_x.py:119: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_persistent_env_var_x.py:128: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_persistent_env_var_x.py:136: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_persistent_env_var_x.py:142: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_persistent_env_var_x.py:203: error: Expression type contains \"Any\" (has type \"tuple[Any, dict[str, Any], Any, dict[str, str]]\")  [misc]\nx_cls_make_persistent_env_var_x.py:203: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:203: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:204: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:204: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:217: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_persistent_env_var_x.py:221: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:222: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:223: error: Type of variable becomes \"dict[str, Any]\" due to an unfollowed import  [no-any-unimported]\nx_cls_make_persistent_env_var_x.py:225: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:226: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:228: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:231: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:232: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:232: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:232: error: Expression type contains \"Any\" (has type \"dict_values[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:233: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:237: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:238: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:240: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:241: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:243: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:244: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:244: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:247: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:248: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:250: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:256: error: Expression type contains \"Any\" (has type \"tuple[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:256: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:256: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:256: error: Expression type contains \"Any\" (has type \"dict_items[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:257: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:258: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:259: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:262: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:265: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:266: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:267: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:268: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:270: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:271: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:274: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:274: error: Expression type contains \"Any\" (has type \"tuple[Any, dict[str, Any], Any, dict[str, str]]\")  [misc]\nx_cls_make_persistent_env_var_x.py:274: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_persistent_env_var_x.py:277: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_persistent_env_var_x.py:282: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:283: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:284: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:285: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:286: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:287: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:288: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:290: error: Expression has type \"Any\"  [misc]\nx_cls_make_persistent_env_var_x.py:294: error: Expression has type \"Any\"  [misc]\nFound 59 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "c:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py\n  c:\\x_runner_x\\x_make_persistent_env_var_x\\x_cls_make_persistent_env_var_x.py:223:24 - error: Variable not allowed in type expression (reportInvalidTypeForm)\n1 error, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:15:5\n   |\n13 |   def _info(*args: object) -> None:\n14 |       msg = \" \".join(str(a) for a in args)\n15 | /     try:\n16 | |         _LOGGER.info(\"%s\", msg)\n17 | |     except Exception:\n18 | |         pass\n   | |____________^\n19 |       try:\n20 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:17:5\n   |\n15 |       try:\n16 |           _LOGGER.info(\"%s\", msg)\n17 | /     except Exception:\n18 | |         pass\n   | |____________^\n19 |       try:\n20 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:17:12\n   |\n15 |     try:\n16 |         _LOGGER.info(\"%s\", msg)\n17 |     except Exception:\n   |            ^^^^^^^^^\n18 |         pass\n19 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:21:12\n   |\n19 |     try:\n20 |         print(msg)\n21 |     except Exception:\n   |            ^^^^^^^^^\n22 |         try:\n23 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:22:9\n   |\n20 |           print(msg)\n21 |       except Exception:\n22 | /         try:\n23 | |             _sys.stdout.write(msg + \"\\n\")\n24 | |         except Exception:\n25 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:24:9\n   |\n22 |           try:\n23 |               _sys.stdout.write(msg + \"\\n\")\n24 | /         except Exception:\n25 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:24:16\n   |\n22 |         try:\n23 |             _sys.stdout.write(msg + \"\\n\")\n24 |         except Exception:\n   |                ^^^^^^^^^\n25 |             pass\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:30:5\n   |\n28 |   def _error(*args: object) -> None:\n29 |       msg = \" \".join(str(a) for a in args)\n30 | /     try:\n31 | |         _LOGGER.error(\"%s\", msg)\n32 | |     except Exception:\n33 | |         pass\n   | |____________^\n34 |       try:\n35 |           print(msg, file=_sys.stderr)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:32:5\n   |\n30 |       try:\n31 |           _LOGGER.error(\"%s\", msg)\n32 | /     except Exception:\n33 | |         pass\n   | |____________^\n34 |       try:\n35 |           print(msg, file=_sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:32:12\n   |\n30 |     try:\n31 |         _LOGGER.error(\"%s\", msg)\n32 |     except Exception:\n   |            ^^^^^^^^^\n33 |         pass\n34 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:36:12\n   |\n34 |     try:\n35 |         print(msg, file=_sys.stderr)\n36 |     except Exception:\n   |            ^^^^^^^^^\n37 |         try:\n38 |             _sys.stderr.write(msg + \"\\n\")\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:39:16\n   |\n37 |         try:\n38 |             _sys.stderr.write(msg + \"\\n\")\n39 |         except Exception:\n   |                ^^^^^^^^^\n40 |             try:\n41 |                 print(msg)\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:40:13\n   |\n38 |               _sys.stderr.write(msg + \"\\n\")\n39 |           except Exception:\n40 | /             try:\n41 | |                 print(msg)\n42 | |             except Exception:\n43 | |                 pass\n   | |____________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:42:13\n   |\n40 |               try:\n41 |                   print(msg)\n42 | /             except Exception:\n43 | |                 pass\n   | |____________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:42:20\n   |\n40 |             try:\n41 |                 print(msg)\n42 |             except Exception:\n   |                    ^^^^^^^^^\n43 |                 pass\n   |\n\nN801 Class name `x_cls_make_persistent_env_var_x` should use CapWords convention\n  --> x_cls_make_persistent_env_var_x.py:54:7\n   |\n54 | class x_cls_make_persistent_env_var_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n55 |     \"\"\"Persistent environment variable setter (Windows user scope).\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_persistent_env_var_x.py:64:9\n   |\n62 |         var: str = \"\",\n63 |         value: str = \"\",\n64 |         quiet: bool = False,\n   |         ^^^^^\n65 |         tokens: list[tuple[str, str]] | None = None,\n66 |         ctx: object | None = None,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_persistent_env_var_x.py:64:9\n   |\n62 |         var: str = \"\",\n63 |         value: str = \"\",\n64 |         quiet: bool = False,\n   |         ^^^^^\n65 |         tokens: list[tuple[str, str]] | None = None,\n66 |         ctx: object | None = None,\n   |\n\nE501 Line too long (92 > 88)\n  --> x_cls_make_persistent_env_var_x.py:80:89\n   |\n79 |     def set_user_env(self) -> bool:\n80 |         cmd = f'[Environment]::SetEnvironmentVariable(\"{self.var}\", \"{self.value}\", \"User\")'\n   |                                                                                         ^^^^\n81 |         result = self.run_powershell(cmd)\n82 |         return result.returncode == 0\n   |\n\nS603 `subprocess` call: check for execution of untrusted input\n  --> x_cls_make_persistent_env_var_x.py:94:16\n   |\n92 |     @staticmethod\n93 |     def run_powershell(command: str) -> subprocess.CompletedProcess[str]:\n94 |         return subprocess.run(\n   |                ^^^^^^^^^^^^^^\n95 |             [\"powershell\", \"-Command\", command],\n96 |             check=False,\n   |\n\nS607 Starting a process with a partial executable path\n  --> x_cls_make_persistent_env_var_x.py:95:13\n   |\n93 |     def run_powershell(command: str) -> subprocess.CompletedProcess[str]:\n94 |         return subprocess.run(\n95 |             [\"powershell\", \"-Command\", command],\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n96 |             check=False,\n97 |             capture_output=True,\n   |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> x_cls_make_persistent_env_var_x.py:112:13\n    |\n111 |           if any_changed:\n112 | /             if not self.quiet:\n113 | |                 if getattr(self._ctx, \"verbose\", False):\n    | |________________________________________________________^\n114 |                       _info(\n115 |                           \"Done. Open a NEW PowerShell window for changes to take effect in new shells.\"\n    |\nhelp: Combine `if` statements using `and`\n\nE501 Line too long (102 > 88)\n   --> x_cls_make_persistent_env_var_x.py:115:89\n    |\n113 |                 if getattr(self._ctx, \"verbose\", False):\n114 |                     _info(\n115 |                         \"Done. Open a NEW PowerShell window for changes to take effect in new shells.\"\n    |                                                                                         ^^^^^^^^^^^^^^\n116 |                     )\n117 |             return 0\n    |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> x_cls_make_persistent_env_var_x.py:118:9\n    |\n116 |                       )\n117 |               return 0\n118 | /         if not self.quiet:\n119 | |             if getattr(self._ctx, \"verbose\", False):\n    | |____________________________________________________^\n120 |                   _info(\"No variables were persisted.\")\n121 |           return 2\n    |\nhelp: Combine `if` statements using `and`\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> x_cls_make_persistent_env_var_x.py:127:13\n    |\n125 |           val = os.environ.get(var)\n126 |           if not val:\n127 | /             if not self.quiet:\n128 | |                 if getattr(self._ctx, \"verbose\", False):\n    | |________________________________________________________^\n129 |                       _info(f\"{var}: not present in current shell; skipping\")\n130 |               return False\n    |\nhelp: Combine `if` statements using `and`\n\nC901 `run_gui` is too complex (12 > 10)\n   --> x_cls_make_persistent_env_var_x.py:146:9\n    |\n144 |         return False\n145 |\n146 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n147 |         \"\"\"Run the GUI interactive flow. Return codes: 0 ok, 1 partial, 2 cancelled/error.\"\"\"\n148 |         vals = _open_gui_and_collect()\n    |\n\nE501 Line too long (93 > 88)\n   --> x_cls_make_persistent_env_var_x.py:147:89\n    |\n146 |     def run_gui(self) -> int:\n147 |         \"\"\"Run the GUI interactive flow. Return codes: 0 ok, 1 partial, 2 cancelled/error.\"\"\"\n    |                                                                                         ^^^^^\n148 |         vals = _open_gui_and_collect()\n149 |         if vals is None:\n    |\n\nE501 Line too long (90 > 88)\n   --> x_cls_make_persistent_env_var_x.py:187:89\n    |\n185 |         if not self.quiet:\n186 |             _info(\n187 |                 \"All values set. Open a NEW PowerShell window for changes to take effect.\"\n    |                                                                                         ^^\n188 |             )\n189 |         return 0\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_make_persistent_env_var_x.py:198:9\n    |\n196 |     \"\"\"\n197 |     try:\n198 |         import tkinter as _tk\n    |         ^^^^^^^^^^^^^^^^^^^^^\n199 |     except Exception:\n200 |         return None\n    |\n\nICN001 `tkinter` should be imported as `tk`\n   --> x_cls_make_persistent_env_var_x.py:198:27\n    |\n196 |     \"\"\"\n197 |     try:\n198 |         import tkinter as _tk\n    |                           ^^^\n199 |     except Exception:\n200 |         return None\n    |\nhelp: Alias `tkinter` to `tk`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_persistent_env_var_x.py:199:12\n    |\n197 |     try:\n198 |         import tkinter as _tk\n199 |     except Exception:\n    |            ^^^^^^^^^\n200 |         return None\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `tk_mod`\n   --> x_cls_make_persistent_env_var_x.py:218:13\n    |\n217 | def _build_gui_parts(\n218 |     tk_mod: Any, prefill: dict[str, str]\n    |             ^^^\n219 | ) -> tuple[Any, dict[str, Any], Any, dict[str, str]]:\n220 |     \"\"\"Build widgets and layout; return (root, entries, show_var, result).\"\"\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `root`\n   --> x_cls_make_persistent_env_var_x.py:278:11\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |           ^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nARG001 Unused function argument: `entries`\n   --> x_cls_make_persistent_env_var_x.py:278:16\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |                ^^^^^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nARG001 Unused function argument: `show_var`\n   --> x_cls_make_persistent_env_var_x.py:278:41\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |                                         ^^^^^^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `show_var`\n   --> x_cls_make_persistent_env_var_x.py:278:51\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |                                                   ^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_persistent_env_var_x.py:289:9\n    |\n287 |           x = (ws // 2) - (w // 2)\n288 |           y = (hs // 2) - (h // 2)\n289 | /         try:\n290 | |             root.geometry(f\"+{x}+{y}\")\n291 | |         except Exception:\n292 | |             pass\n    | |________________^\n293 |\n294 |           root.mainloop()\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_persistent_env_var_x.py:291:9\n    |\n289 |           try:\n290 |               root.geometry(f\"+{x}+{y}\")\n291 | /         except Exception:\n292 | |             pass\n    | |________________^\n293 |\n294 |           root.mainloop()\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_persistent_env_var_x.py:291:16\n    |\n289 |         try:\n290 |             root.geometry(f\"+{x}+{y}\")\n291 |         except Exception:\n    |                ^^^^^^^^^\n292 |             pass\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_persistent_env_var_x.py:295:12\n    |\n294 |         root.mainloop()\n295 |     except Exception:\n    |            ^^^^^^^^^\n296 |         return None\n297 |     return result if result else None\n    |\n\nFound 40 errors.\nNo fixes available (8 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:15:5\n   |\n13 |   def _info(*args: object) -> None:\n14 |       msg = \" \".join(str(a) for a in args)\n15 | /     try:\n16 | |         _LOGGER.info(\"%s\", msg)\n17 | |     except Exception:\n18 | |         pass\n   | |____________^\n19 |       try:\n20 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:17:5\n   |\n15 |       try:\n16 |           _LOGGER.info(\"%s\", msg)\n17 | /     except Exception:\n18 | |         pass\n   | |____________^\n19 |       try:\n20 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:17:12\n   |\n15 |     try:\n16 |         _LOGGER.info(\"%s\", msg)\n17 |     except Exception:\n   |            ^^^^^^^^^\n18 |         pass\n19 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:21:12\n   |\n19 |     try:\n20 |         print(msg)\n21 |     except Exception:\n   |            ^^^^^^^^^\n22 |         try:\n23 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:22:9\n   |\n20 |           print(msg)\n21 |       except Exception:\n22 | /         try:\n23 | |             _sys.stdout.write(msg + \"\\n\")\n24 | |         except Exception:\n25 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:24:9\n   |\n22 |           try:\n23 |               _sys.stdout.write(msg + \"\\n\")\n24 | /         except Exception:\n25 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:24:16\n   |\n22 |         try:\n23 |             _sys.stdout.write(msg + \"\\n\")\n24 |         except Exception:\n   |                ^^^^^^^^^\n25 |             pass\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:30:5\n   |\n28 |   def _error(*args: object) -> None:\n29 |       msg = \" \".join(str(a) for a in args)\n30 | /     try:\n31 | |         _LOGGER.error(\"%s\", msg)\n32 | |     except Exception:\n33 | |         pass\n   | |____________^\n34 |       try:\n35 |           print(msg, file=_sys.stderr)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:32:5\n   |\n30 |       try:\n31 |           _LOGGER.error(\"%s\", msg)\n32 | /     except Exception:\n33 | |         pass\n   | |____________^\n34 |       try:\n35 |           print(msg, file=_sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:32:12\n   |\n30 |     try:\n31 |         _LOGGER.error(\"%s\", msg)\n32 |     except Exception:\n   |            ^^^^^^^^^\n33 |         pass\n34 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:36:12\n   |\n34 |     try:\n35 |         print(msg, file=_sys.stderr)\n36 |     except Exception:\n   |            ^^^^^^^^^\n37 |         try:\n38 |             _sys.stderr.write(msg + \"\\n\")\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:39:16\n   |\n37 |         try:\n38 |             _sys.stderr.write(msg + \"\\n\")\n39 |         except Exception:\n   |                ^^^^^^^^^\n40 |             try:\n41 |                 print(msg)\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_persistent_env_var_x.py:40:13\n   |\n38 |               _sys.stderr.write(msg + \"\\n\")\n39 |           except Exception:\n40 | /             try:\n41 | |                 print(msg)\n42 | |             except Exception:\n43 | |                 pass\n   | |____________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_persistent_env_var_x.py:42:13\n   |\n40 |               try:\n41 |                   print(msg)\n42 | /             except Exception:\n43 | |                 pass\n   | |____________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_persistent_env_var_x.py:42:20\n   |\n40 |             try:\n41 |                 print(msg)\n42 |             except Exception:\n   |                    ^^^^^^^^^\n43 |                 pass\n   |\n\nN801 Class name `x_cls_make_persistent_env_var_x` should use CapWords convention\n  --> x_cls_make_persistent_env_var_x.py:54:7\n   |\n54 | class x_cls_make_persistent_env_var_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n55 |     \"\"\"Persistent environment variable setter (Windows user scope).\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_persistent_env_var_x.py:64:9\n   |\n62 |         var: str = \"\",\n63 |         value: str = \"\",\n64 |         quiet: bool = False,\n   |         ^^^^^\n65 |         tokens: list[tuple[str, str]] | None = None,\n66 |         ctx: object | None = None,\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_persistent_env_var_x.py:64:9\n   |\n62 |         var: str = \"\",\n63 |         value: str = \"\",\n64 |         quiet: bool = False,\n   |         ^^^^^\n65 |         tokens: list[tuple[str, str]] | None = None,\n66 |         ctx: object | None = None,\n   |\n\nE501 Line too long (92 > 88)\n  --> x_cls_make_persistent_env_var_x.py:80:89\n   |\n79 |     def set_user_env(self) -> bool:\n80 |         cmd = f'[Environment]::SetEnvironmentVariable(\"{self.var}\", \"{self.value}\", \"User\")'\n   |                                                                                         ^^^^\n81 |         result = self.run_powershell(cmd)\n82 |         return result.returncode == 0\n   |\n\nS603 `subprocess` call: check for execution of untrusted input\n  --> x_cls_make_persistent_env_var_x.py:94:16\n   |\n92 |     @staticmethod\n93 |     def run_powershell(command: str) -> subprocess.CompletedProcess[str]:\n94 |         return subprocess.run(\n   |                ^^^^^^^^^^^^^^\n95 |             [\"powershell\", \"-Command\", command],\n96 |             check=False,\n   |\n\nS607 Starting a process with a partial executable path\n  --> x_cls_make_persistent_env_var_x.py:95:13\n   |\n93 |     def run_powershell(command: str) -> subprocess.CompletedProcess[str]:\n94 |         return subprocess.run(\n95 |             [\"powershell\", \"-Command\", command],\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n96 |             check=False,\n97 |             capture_output=True,\n   |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> x_cls_make_persistent_env_var_x.py:112:13\n    |\n111 |           if any_changed:\n112 | /             if not self.quiet:\n113 | |                 if getattr(self._ctx, \"verbose\", False):\n    | |________________________________________________________^\n114 |                       _info(\n115 |                           \"Done. Open a NEW PowerShell window for changes to take effect in new shells.\"\n    |\nhelp: Combine `if` statements using `and`\n\nE501 Line too long (102 > 88)\n   --> x_cls_make_persistent_env_var_x.py:115:89\n    |\n113 |                 if getattr(self._ctx, \"verbose\", False):\n114 |                     _info(\n115 |                         \"Done. Open a NEW PowerShell window for changes to take effect in new shells.\"\n    |                                                                                         ^^^^^^^^^^^^^^\n116 |                     )\n117 |             return 0\n    |\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> x_cls_make_persistent_env_var_x.py:118:9\n    |\n116 |                       )\n117 |               return 0\n118 | /         if not self.quiet:\n119 | |             if getattr(self._ctx, \"verbose\", False):\n    | |____________________________________________________^\n120 |                   _info(\"No variables were persisted.\")\n121 |           return 2\n    |\nhelp: Combine `if` statements using `and`\n\nSIM102 Use a single `if` statement instead of nested `if` statements\n   --> x_cls_make_persistent_env_var_x.py:127:13\n    |\n125 |           val = os.environ.get(var)\n126 |           if not val:\n127 | /             if not self.quiet:\n128 | |                 if getattr(self._ctx, \"verbose\", False):\n    | |________________________________________________________^\n129 |                       _info(f\"{var}: not present in current shell; skipping\")\n130 |               return False\n    |\nhelp: Combine `if` statements using `and`\n\nC901 `run_gui` is too complex (12 > 10)\n   --> x_cls_make_persistent_env_var_x.py:146:9\n    |\n144 |         return False\n145 |\n146 |     def run_gui(self) -> int:\n    |         ^^^^^^^\n147 |         \"\"\"Run the GUI interactive flow. Return codes: 0 ok, 1 partial, 2 cancelled/error.\"\"\"\n148 |         vals = _open_gui_and_collect()\n    |\n\nE501 Line too long (93 > 88)\n   --> x_cls_make_persistent_env_var_x.py:147:89\n    |\n146 |     def run_gui(self) -> int:\n147 |         \"\"\"Run the GUI interactive flow. Return codes: 0 ok, 1 partial, 2 cancelled/error.\"\"\"\n    |                                                                                         ^^^^^\n148 |         vals = _open_gui_and_collect()\n149 |         if vals is None:\n    |\n\nE501 Line too long (90 > 88)\n   --> x_cls_make_persistent_env_var_x.py:187:89\n    |\n185 |         if not self.quiet:\n186 |             _info(\n187 |                 \"All values set. Open a NEW PowerShell window for changes to take effect.\"\n    |                                                                                         ^^\n188 |             )\n189 |         return 0\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_make_persistent_env_var_x.py:198:9\n    |\n196 |     \"\"\"\n197 |     try:\n198 |         import tkinter as _tk\n    |         ^^^^^^^^^^^^^^^^^^^^^\n199 |     except Exception:\n200 |         return None\n    |\n\nICN001 `tkinter` should be imported as `tk`\n   --> x_cls_make_persistent_env_var_x.py:198:27\n    |\n196 |     \"\"\"\n197 |     try:\n198 |         import tkinter as _tk\n    |                           ^^^\n199 |     except Exception:\n200 |         return None\n    |\nhelp: Alias `tkinter` to `tk`\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_persistent_env_var_x.py:199:12\n    |\n197 |     try:\n198 |         import tkinter as _tk\n199 |     except Exception:\n    |            ^^^^^^^^^\n200 |         return None\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `tk_mod`\n   --> x_cls_make_persistent_env_var_x.py:218:13\n    |\n217 | def _build_gui_parts(\n218 |     tk_mod: Any, prefill: dict[str, str]\n    |             ^^^\n219 | ) -> tuple[Any, dict[str, Any], Any, dict[str, str]]:\n220 |     \"\"\"Build widgets and layout; return (root, entries, show_var, result).\"\"\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `root`\n   --> x_cls_make_persistent_env_var_x.py:278:11\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |           ^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nARG001 Unused function argument: `entries`\n   --> x_cls_make_persistent_env_var_x.py:278:16\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |                ^^^^^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nARG001 Unused function argument: `show_var`\n   --> x_cls_make_persistent_env_var_x.py:278:41\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |                                         ^^^^^^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `show_var`\n   --> x_cls_make_persistent_env_var_x.py:278:51\n    |\n277 | def _run_gui_loop(\n278 |     root: Any, entries: dict[str, Any], show_var: Any, result: dict[str, str]\n    |                                                   ^^^\n279 | ) -> dict[str, str] | None:\n280 |     \"\"\"Center the window, run the Tk mainloop, and return collected results or None.\"\"\"\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_persistent_env_var_x.py:289:9\n    |\n287 |           x = (ws // 2) - (w // 2)\n288 |           y = (hs // 2) - (h // 2)\n289 | /         try:\n290 | |             root.geometry(f\"+{x}+{y}\")\n291 | |         except Exception:\n292 | |             pass\n    | |________________^\n293 |\n294 |           root.mainloop()\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_persistent_env_var_x.py:291:9\n    |\n289 |           try:\n290 |               root.geometry(f\"+{x}+{y}\")\n291 | /         except Exception:\n292 | |             pass\n    | |________________^\n293 |\n294 |           root.mainloop()\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_persistent_env_var_x.py:291:16\n    |\n289 |         try:\n290 |             root.geometry(f\"+{x}+{y}\")\n291 |         except Exception:\n    |                ^^^^^^^^^\n292 |             pass\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_persistent_env_var_x.py:295:12\n    |\n294 |         root.mainloop()\n295 |     except Exception:\n    |            ^^^^^^^^^\n296 |         return None\n297 |     return result if result else None\n    |\n\nFound 40 errors.\nNo fixes available (8 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_pip_updates_x": {
        "files": [
            "x_cls_make_pip_updates_x.py"
        ],
        "files_index": [
            "x_cls_make_pip_updates_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\t2025-10-07 16:24:17.482783+00:00\n+++ C:\\x_runner_x\\x_make_pip_updates_x\\x_cls_make_pip_updates_x.py\t2025-10-07 17:46:03.668570+00:00\n@@ -52,13 +52,11 @@\n \n \n class x_cls_make_pip_updates_x:\n     # ...existing code...\n \n-    def batch_install(\n-        self, packages: list[str], use_user: bool = False\n-    ) -> int:\n+    def batch_install(self, packages: list[str], use_user: bool = False) -> int:\n         # Force pip upgrade first\n         _info(\"Upgrading pip itself...\")\n         pip_upgrade_cmd = [\n             sys.executable,\n             \"-m\",\n@@ -118,19 +116,15 @@\n \n         _info(\"\\nSummary:\")\n         for r in results:\n             prev_val = r.get(\"prev\")\n             prev = (\n-                prev_val\n-                if isinstance(prev_val, str) and prev_val\n-                else \"not installed\"\n+                prev_val if isinstance(prev_val, str) and prev_val else \"not installed\"\n             )\n             curr_val = r.get(\"curr\")\n             curr = (\n-                curr_val\n-                if isinstance(curr_val, str) and curr_val\n-                else \"not installed\"\n+                curr_val if isinstance(curr_val, str) and curr_val else \"not installed\"\n             )\n             status = \"OK\" if r[\"code\"] == 0 else f\"FAIL (code {r['code']})\"\n             _info(f\"- {r['name']}: {status} | current: {curr}\")\n         return 1 if any_fail else 0\n \n@@ -223,13 +217,11 @@\n             _info(f\"{dist_name} not installed. Installing...\")\n             code = self.pip_install(dist_name, upgrade=False)\n             if code != 0:\n                 _error(f\"Failed to install {dist_name} (exit {code}).\")\n             return\n-        _info(\n-            f\"{dist_name} installed (version {installed}). Checking for updates...\"\n-        )\n+        _info(f\"{dist_name} installed (version {installed}). Checking for updates...\")\n         if self.is_outdated(dist_name):\n             _info(f\"{dist_name} is outdated. Upgrading...\")\n             code = self.pip_install(dist_name, upgrade=True)\n             if code != 0:\n                 _error(f\"Failed to upgrade {dist_name} (exit {code}).\")\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_pip_updates_x.py:154: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_pip_updates_x.py:158: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_pip_updates_x.py:193: error: Expression has type \"Any\"  [misc]\nx_cls_make_pip_updates_x.py:194: error: Expression has type \"Any\"  [misc]\nFound 4 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Callable` into a type-checking block\n  --> x_cls_make_pip_updates_x.py:8:29\n   |\n 6 | import sys\n 7 | import sys as _sys\n 8 | from collections.abc import Callable\n   |                             ^^^^^^^^\n 9 | from importlib.metadata import version as _version\n10 | from typing import cast\n   |\nhelp: Move into type-checking block\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:17:5\n   |\n15 |   def _info(*args: object) -> None:\n16 |       msg = \" \".join(str(a) for a in args)\n17 | /     try:\n18 | |         _LOGGER.info(\"%s\", msg)\n19 | |     except Exception:\n20 | |         pass\n   | |____________^\n21 |       try:\n22 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:19:5\n   |\n17 |       try:\n18 |           _LOGGER.info(\"%s\", msg)\n19 | /     except Exception:\n20 | |         pass\n   | |____________^\n21 |       try:\n22 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:19:12\n   |\n17 |     try:\n18 |         _LOGGER.info(\"%s\", msg)\n19 |     except Exception:\n   |            ^^^^^^^^^\n20 |         pass\n21 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:23:12\n   |\n21 |     try:\n22 |         print(msg)\n23 |     except Exception:\n   |            ^^^^^^^^^\n24 |         try:\n25 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:24:9\n   |\n22 |           print(msg)\n23 |       except Exception:\n24 | /         try:\n25 | |             _sys.stdout.write(msg + \"\\n\")\n26 | |         except Exception:\n27 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:26:9\n   |\n24 |           try:\n25 |               _sys.stdout.write(msg + \"\\n\")\n26 | /         except Exception:\n27 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:26:16\n   |\n24 |         try:\n25 |             _sys.stdout.write(msg + \"\\n\")\n26 |         except Exception:\n   |                ^^^^^^^^^\n27 |             pass\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:32:5\n   |\n30 |   def _error(*args: object) -> None:\n31 |       msg = \" \".join(str(a) for a in args)\n32 | /     try:\n33 | |         _LOGGER.error(\"%s\", msg)\n34 | |     except Exception:\n35 | |         pass\n   | |____________^\n36 |       try:\n37 |           print(msg, file=_sys.stderr)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:34:5\n   |\n32 |       try:\n33 |           _LOGGER.error(\"%s\", msg)\n34 | /     except Exception:\n35 | |         pass\n   | |____________^\n36 |       try:\n37 |           print(msg, file=_sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:34:12\n   |\n32 |     try:\n33 |         _LOGGER.error(\"%s\", msg)\n34 |     except Exception:\n   |            ^^^^^^^^^\n35 |         pass\n36 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:38:12\n   |\n36 |     try:\n37 |         print(msg, file=_sys.stderr)\n38 |     except Exception:\n   |            ^^^^^^^^^\n39 |         try:\n40 |             _sys.stderr.write(msg + \"\\n\")\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:41:16\n   |\n39 |         try:\n40 |             _sys.stderr.write(msg + \"\\n\")\n41 |         except Exception:\n   |                ^^^^^^^^^\n42 |             try:\n43 |                 print(msg)\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:42:13\n   |\n40 |               _sys.stderr.write(msg + \"\\n\")\n41 |           except Exception:\n42 | /             try:\n43 | |                 print(msg)\n44 | |             except Exception:\n45 | |                 pass\n   | |____________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:44:13\n   |\n42 |               try:\n43 |                   print(msg)\n44 | /             except Exception:\n45 | |                 pass\n   | |____________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:44:20\n   |\n42 |             try:\n43 |                 print(msg)\n44 |             except Exception:\n   |                    ^^^^^^^^^\n45 |                 pass\n   |\n\nN801 Class name `x_cls_make_pip_updates_x` should use CapWords convention\n  --> x_cls_make_pip_updates_x.py:54:7\n   |\n54 | class x_cls_make_pip_updates_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n55 |     # ...existing code...\n   |\n\nC901 `batch_install` is too complex (11 > 10)\n  --> x_cls_make_pip_updates_x.py:57:9\n   |\n55 |     # ...existing code...\n56 |\n57 |     def batch_install(\n   |         ^^^^^^^^^^^^^\n58 |         self, packages: list[str], use_user: bool = False\n59 |     ) -> int:\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_pip_updates_x.py:58:36\n   |\n57 |     def batch_install(\n58 |         self, packages: list[str], use_user: bool = False\n   |                                    ^^^^^^^^\n59 |     ) -> int:\n60 |         # Force pip upgrade first\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_pip_updates_x.py:58:36\n   |\n57 |     def batch_install(\n58 |         self, packages: list[str], use_user: bool = False\n   |                                    ^^^^^^^^\n59 |     ) -> int:\n60 |         # Force pip upgrade first\n   |\n\nE501 Line too long (97 > 88)\n  --> x_cls_make_pip_updates_x.py:80:89\n   |\n78 |         # After publishing, upgrade all published packages\n79 |         _info(\n80 |             \"Upgrading all published packages with --upgrade --force-reinstall --no-cache-dir...\"\n   |                                                                                         ^^^^^^^^^\n81 |         )\n82 |         for pkg in packages:\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:145:24\n    |\n143 |     \"\"\"\n144 |\n145 |     def __init__(self, user: bool = False, ctx: object | None = None) -> None:\n    |                        ^^^^\n146 |         \"\"\"Primary constructor: preserve previous 'user' flag and accept ctx.\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:145:24\n    |\n143 |     \"\"\"\n144 |\n145 |     def __init__(self, user: bool = False, ctx: object | None = None) -> None:\n    |                        ^^^^\n146 |         \"\"\"Primary constructor: preserve previous 'user' flag and accept ctx.\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pip_updates_x.py:155:16\n    |\n153 |         try:\n154 |             self.dry_run = bool(getattr(self._ctx, \"dry_run\", False))\n155 |         except Exception:\n    |                ^^^^^^^^^\n156 |             self.dry_run = False\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_pip_updates_x.py:163:14\n    |\n161 |     @staticmethod\n162 |     def _run(cmd: list[str]) -> tuple[int, str, str]:\n163 |         cp = subprocess.run(cmd, text=True, capture_output=True, check=False)\n    |              ^^^^^^^^^^^^^^\n164 |         stdout = cp.stdout or \"\"\n165 |         stderr = cp.stderr or \"\"\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pip_updates_x.py:175:16\n    |\n173 |             # Coerce to str in case metadata returns a non-str representation\n174 |             return str(res) if res is not None else None\n175 |         except Exception:\n    |                ^^^^^^^^^\n176 |             return None\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:200:43\n    |\n198 |         return False\n199 |\n200 |     def pip_install(self, dist_name: str, upgrade: bool = False) -> int:\n    |                                           ^^^^^^^\n201 |         cmd = [\n202 |             sys.executable,\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:200:43\n    |\n198 |         return False\n199 |\n200 |     def pip_install(self, dist_name: str, upgrade: bool = False) -> int:\n    |                                           ^^^^^^^\n201 |         cmd = [\n202 |             sys.executable,\n    |\n\nFound 28 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Callable` into a type-checking block\n  --> x_cls_make_pip_updates_x.py:8:29\n   |\n 6 | import sys\n 7 | import sys as _sys\n 8 | from collections.abc import Callable\n   |                             ^^^^^^^^\n 9 | from importlib.metadata import version as _version\n10 | from typing import cast\n   |\nhelp: Move into type-checking block\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:17:5\n   |\n15 |   def _info(*args: object) -> None:\n16 |       msg = \" \".join(str(a) for a in args)\n17 | /     try:\n18 | |         _LOGGER.info(\"%s\", msg)\n19 | |     except Exception:\n20 | |         pass\n   | |____________^\n21 |       try:\n22 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:19:5\n   |\n17 |       try:\n18 |           _LOGGER.info(\"%s\", msg)\n19 | /     except Exception:\n20 | |         pass\n   | |____________^\n21 |       try:\n22 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:19:12\n   |\n17 |     try:\n18 |         _LOGGER.info(\"%s\", msg)\n19 |     except Exception:\n   |            ^^^^^^^^^\n20 |         pass\n21 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:23:12\n   |\n21 |     try:\n22 |         print(msg)\n23 |     except Exception:\n   |            ^^^^^^^^^\n24 |         try:\n25 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:24:9\n   |\n22 |           print(msg)\n23 |       except Exception:\n24 | /         try:\n25 | |             _sys.stdout.write(msg + \"\\n\")\n26 | |         except Exception:\n27 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:26:9\n   |\n24 |           try:\n25 |               _sys.stdout.write(msg + \"\\n\")\n26 | /         except Exception:\n27 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:26:16\n   |\n24 |         try:\n25 |             _sys.stdout.write(msg + \"\\n\")\n26 |         except Exception:\n   |                ^^^^^^^^^\n27 |             pass\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:32:5\n   |\n30 |   def _error(*args: object) -> None:\n31 |       msg = \" \".join(str(a) for a in args)\n32 | /     try:\n33 | |         _LOGGER.error(\"%s\", msg)\n34 | |     except Exception:\n35 | |         pass\n   | |____________^\n36 |       try:\n37 |           print(msg, file=_sys.stderr)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:34:5\n   |\n32 |       try:\n33 |           _LOGGER.error(\"%s\", msg)\n34 | /     except Exception:\n35 | |         pass\n   | |____________^\n36 |       try:\n37 |           print(msg, file=_sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:34:12\n   |\n32 |     try:\n33 |         _LOGGER.error(\"%s\", msg)\n34 |     except Exception:\n   |            ^^^^^^^^^\n35 |         pass\n36 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:38:12\n   |\n36 |     try:\n37 |         print(msg, file=_sys.stderr)\n38 |     except Exception:\n   |            ^^^^^^^^^\n39 |         try:\n40 |             _sys.stderr.write(msg + \"\\n\")\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:41:16\n   |\n39 |         try:\n40 |             _sys.stderr.write(msg + \"\\n\")\n41 |         except Exception:\n   |                ^^^^^^^^^\n42 |             try:\n43 |                 print(msg)\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pip_updates_x.py:42:13\n   |\n40 |               _sys.stderr.write(msg + \"\\n\")\n41 |           except Exception:\n42 | /             try:\n43 | |                 print(msg)\n44 | |             except Exception:\n45 | |                 pass\n   | |____________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pip_updates_x.py:44:13\n   |\n42 |               try:\n43 |                   print(msg)\n44 | /             except Exception:\n45 | |                 pass\n   | |____________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pip_updates_x.py:44:20\n   |\n42 |             try:\n43 |                 print(msg)\n44 |             except Exception:\n   |                    ^^^^^^^^^\n45 |                 pass\n   |\n\nN801 Class name `x_cls_make_pip_updates_x` should use CapWords convention\n  --> x_cls_make_pip_updates_x.py:54:7\n   |\n54 | class x_cls_make_pip_updates_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n55 |     # ...existing code...\n   |\n\nC901 `batch_install` is too complex (11 > 10)\n  --> x_cls_make_pip_updates_x.py:57:9\n   |\n55 |     # ...existing code...\n56 |\n57 |     def batch_install(\n   |         ^^^^^^^^^^^^^\n58 |         self, packages: list[str], use_user: bool = False\n59 |     ) -> int:\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_pip_updates_x.py:58:36\n   |\n57 |     def batch_install(\n58 |         self, packages: list[str], use_user: bool = False\n   |                                    ^^^^^^^^\n59 |     ) -> int:\n60 |         # Force pip upgrade first\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_pip_updates_x.py:58:36\n   |\n57 |     def batch_install(\n58 |         self, packages: list[str], use_user: bool = False\n   |                                    ^^^^^^^^\n59 |     ) -> int:\n60 |         # Force pip upgrade first\n   |\n\nE501 Line too long (97 > 88)\n  --> x_cls_make_pip_updates_x.py:80:89\n   |\n78 |         # After publishing, upgrade all published packages\n79 |         _info(\n80 |             \"Upgrading all published packages with --upgrade --force-reinstall --no-cache-dir...\"\n   |                                                                                         ^^^^^^^^^\n81 |         )\n82 |         for pkg in packages:\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:145:24\n    |\n143 |     \"\"\"\n144 |\n145 |     def __init__(self, user: bool = False, ctx: object | None = None) -> None:\n    |                        ^^^^\n146 |         \"\"\"Primary constructor: preserve previous 'user' flag and accept ctx.\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:145:24\n    |\n143 |     \"\"\"\n144 |\n145 |     def __init__(self, user: bool = False, ctx: object | None = None) -> None:\n    |                        ^^^^\n146 |         \"\"\"Primary constructor: preserve previous 'user' flag and accept ctx.\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pip_updates_x.py:155:16\n    |\n153 |         try:\n154 |             self.dry_run = bool(getattr(self._ctx, \"dry_run\", False))\n155 |         except Exception:\n    |                ^^^^^^^^^\n156 |             self.dry_run = False\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_pip_updates_x.py:163:14\n    |\n161 |     @staticmethod\n162 |     def _run(cmd: list[str]) -> tuple[int, str, str]:\n163 |         cp = subprocess.run(cmd, text=True, capture_output=True, check=False)\n    |              ^^^^^^^^^^^^^^\n164 |         stdout = cp.stdout or \"\"\n165 |         stderr = cp.stderr or \"\"\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pip_updates_x.py:175:16\n    |\n173 |             # Coerce to str in case metadata returns a non-str representation\n174 |             return str(res) if res is not None else None\n175 |         except Exception:\n    |                ^^^^^^^^^\n176 |             return None\n    |\n\nFBT001 Boolean-typed positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:200:43\n    |\n198 |         return False\n199 |\n200 |     def pip_install(self, dist_name: str, upgrade: bool = False) -> int:\n    |                                           ^^^^^^^\n201 |         cmd = [\n202 |             sys.executable,\n    |\n\nFBT002 Boolean default positional argument in function definition\n   --> x_cls_make_pip_updates_x.py:200:43\n    |\n198 |         return False\n199 |\n200 |     def pip_install(self, dist_name: str, upgrade: bool = False) -> int:\n    |                                           ^^^^^^^\n201 |         cmd = [\n202 |             sys.executable,\n    |\n\nFound 28 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_py_mod_sideload_x": {
        "files": [
            "x_cls_make_py_mod_sideload_x.py"
        ],
        "files_index": [
            "x_cls_make_py_mod_sideload_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-07 16:24:19.617330+00:00\n+++ C:\\x_runner_x\\x_make_py_mod_sideload_x\\x_cls_make_py_mod_sideload_x.py\t2025-10-07 17:46:05.894898+00:00\n@@ -12,13 +12,11 @@\n import os\n from typing import Any\n \n \n class x_cls_make_py_mod_sideload_x:\n-    def run(\n-        self, base_path: str, module: str, obj: str | None = None\n-    ) -> Any:\n+    def run(self, base_path: str, module: str, obj: str | None = None) -> Any:\n         \"\"\"Load a module file under base_path and return module or attribute.\n \n         base_path: directory containing modules or packages\n         module: a filename (foo.py), a dotted name (pkg.mod) or a module name\n         obj: optional attribute name to return from the module\n@@ -63,13 +61,11 @@\n \n         spec = importlib.util.spec_from_file_location(\n             f\"sideload_{abs(hash(module_file))}\", module_file\n         )\n         if spec is None or spec.loader is None:\n-            raise ImportError(\n-                f\"Failed to create module spec for {module_file}\"\n-            )\n+            raise ImportError(f\"Failed to create module spec for {module_file}\")\n \n         module_obj = importlib.util.module_from_spec(spec)\n         spec.loader.exec_module(module_obj)\n \n         if obj is None:\n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_py_mod_sideload_x.py:17: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_py_mod_sideload_x.py:83: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:84: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:85: error: Expression has type \"Any\"  [misc]\nx_cls_make_py_mod_sideload_x.py:86: error: Expression has type \"Any\"  [misc]\nFound 5 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "N801 Class name `x_cls_make_py_mod_sideload_x` should use CapWords convention\n  --> x_cls_make_py_mod_sideload_x.py:16:7\n   |\n16 | class x_cls_make_py_mod_sideload_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 |     def run(\n18 |         self, base_path: str, module: str, obj: str | None = None\n   |\n\nC901 `run` is too complex (15 > 10)\n  --> x_cls_make_py_mod_sideload_x.py:17:9\n   |\n16 | class x_cls_make_py_mod_sideload_x:\n17 |     def run(\n   |         ^^^\n18 |         self, base_path: str, module: str, obj: str | None = None\n19 |     ) -> Any:\n   |\n\nPLR0912 Too many branches (16 > 12)\n  --> x_cls_make_py_mod_sideload_x.py:17:9\n   |\n16 | class x_cls_make_py_mod_sideload_x:\n17 |     def run(\n   |         ^^^\n18 |         self, base_path: str, module: str, obj: str | None = None\n19 |     ) -> Any:\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `run`\n  --> x_cls_make_py_mod_sideload_x.py:19:10\n   |\n17 |     def run(\n18 |         self, base_path: str, module: str, obj: str | None = None\n19 |     ) -> Any:\n   |          ^^^\n20 |         \"\"\"Load a module file under base_path and return module or attribute.\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:27:19\n   |\n25 |         \"\"\"\n26 |         if not base_path:\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:27:30\n   |\n25 |         \"\"\"\n26 |         if not base_path:\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |\nhelp: Assign to variable; remove string literal\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n  --> x_cls_make_py_mod_sideload_x.py:29:16\n   |\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |                ^^^^^^^^^^^^^\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:29:49\n   |\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |                                                 ^^^^^^^^^^^^^^\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:30:19\n   |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |\n32 |         module_file: str | None = None\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:30:37\n   |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |\n32 |         module_file: str | None = None\n   |\nhelp: Assign to variable; remove f-string literal\n\nPTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`\n  --> x_cls_make_py_mod_sideload_x.py:35:12\n   |\n34 |         # Absolute path to a file\n35 |         if os.path.isabs(module) and os.path.isfile(module):\n   |            ^^^^^^^^^^^^^\n36 |             module_file = module\n37 |         # Literal filename relative to base_path\n   |\nhelp: Replace with `Path(...).is_absolute()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:35:38\n   |\n34 |         # Absolute path to a file\n35 |         if os.path.isabs(module) and os.path.isfile(module):\n   |                                      ^^^^^^^^^^^^^^\n36 |             module_file = module\n37 |         # Literal filename relative to base_path\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_py_mod_sideload_x.py:39:25\n   |\n37 |         # Literal filename relative to base_path\n38 |         elif module.endswith(\".py\"):\n39 |             candidate = os.path.join(base_path, module)\n   |                         ^^^^^^^^^^^^\n40 |             if os.path.isfile(candidate):\n41 |                 module_file = candidate\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:40:16\n   |\n38 |         elif module.endswith(\".py\"):\n39 |             candidate = os.path.join(base_path, module)\n40 |             if os.path.isfile(candidate):\n   |                ^^^^^^^^^^^^^^\n41 |                 module_file = candidate\n42 |         # Dotted path like pkg.mod -> base_path/pkg/mod.py\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path.joinpath()`\n  --> x_cls_make_py_mod_sideload_x.py:46:25\n   |\n44 |             parts = module.split(\".\")\n45 |             *pkg, mod = parts\n46 |             candidate = os.path.join(base_path, *pkg, f\"{mod}.py\")\n   |                         ^^^^^^^^^^^^\n47 |             if os.path.isfile(candidate):\n48 |                 module_file = candidate\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:47:16\n   |\n45 |             *pkg, mod = parts\n46 |             candidate = os.path.join(base_path, *pkg, f\"{mod}.py\")\n47 |             if os.path.isfile(candidate):\n   |                ^^^^^^^^^^^^^^\n48 |                 module_file = candidate\n49 |         # Try module.py or package __init__.py\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_py_mod_sideload_x.py:51:25\n   |\n49 |         # Try module.py or package __init__.py\n50 |         else:\n51 |             candidate = os.path.join(base_path, f\"{module}.py\")\n   |                         ^^^^^^^^^^^^\n52 |             if os.path.isfile(candidate):\n53 |                 module_file = candidate\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:52:16\n   |\n50 |         else:\n51 |             candidate = os.path.join(base_path, f\"{module}.py\")\n52 |             if os.path.isfile(candidate):\n   |                ^^^^^^^^^^^^^^\n53 |                 module_file = candidate\n54 |             else:\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_py_mod_sideload_x.py:55:24\n   |\n53 |                 module_file = candidate\n54 |             else:\n55 |                 init = os.path.join(base_path, module, \"__init__.py\")\n   |                        ^^^^^^^^^^^^\n56 |                 if os.path.isfile(init):\n57 |                     module_file = init\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:56:20\n   |\n54 |             else:\n55 |                 init = os.path.join(base_path, module, \"__init__.py\")\n56 |                 if os.path.isfile(init):\n   |                    ^^^^^^^^^^^^^^\n57 |                     module_file = init\n   |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:60:19\n   |\n59 |           if module_file is None:\n60 |               raise ImportError(\n   |  ___________________^\n61 | |                 f\"Cannot resolve module file for module={module} under base_path={base_path}\"\n62 | |             )\n   | |_____________^\n63 |\n64 |           spec = importlib.util.spec_from_file_location(\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:61:17\n   |\n59 |         if module_file is None:\n60 |             raise ImportError(\n61 |                 f\"Cannot resolve module file for module={module} under base_path={base_path}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n62 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (93 > 88)\n  --> x_cls_make_py_mod_sideload_x.py:61:89\n   |\n59 |         if module_file is None:\n60 |             raise ImportError(\n61 |                 f\"Cannot resolve module file for module={module} under base_path={base_path}\"\n   |                                                                                         ^^^^^\n62 |             )\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:68:19\n   |\n66 |           )\n67 |           if spec is None or spec.loader is None:\n68 |               raise ImportError(\n   |  ___________________^\n69 | |                 f\"Failed to create module spec for {module_file}\"\n70 | |             )\n   | |_____________^\n71 |\n72 |           module_obj = importlib.util.module_from_spec(spec)\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:69:17\n   |\n67 |         if spec is None or spec.loader is None:\n68 |             raise ImportError(\n69 |                 f\"Failed to create module spec for {module_file}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n70 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:79:19\n   |\n78 |           if not hasattr(module_obj, obj):\n79 |               raise AttributeError(\n   |  ___________________^\n80 | |                 f\"Module loaded from {module_file} has no attribute {obj!r}\"\n81 | |             )\n   | |_____________^\n82 |\n83 |           attr = getattr(module_obj, obj)\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:80:17\n   |\n78 |         if not hasattr(module_obj, obj):\n79 |             raise AttributeError(\n80 |                 f\"Module loaded from {module_file} has no attribute {obj!r}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nFound 27 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "N801 Class name `x_cls_make_py_mod_sideload_x` should use CapWords convention\n  --> x_cls_make_py_mod_sideload_x.py:16:7\n   |\n16 | class x_cls_make_py_mod_sideload_x:\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n17 |     def run(\n18 |         self, base_path: str, module: str, obj: str | None = None\n   |\n\nC901 `run` is too complex (15 > 10)\n  --> x_cls_make_py_mod_sideload_x.py:17:9\n   |\n16 | class x_cls_make_py_mod_sideload_x:\n17 |     def run(\n   |         ^^^\n18 |         self, base_path: str, module: str, obj: str | None = None\n19 |     ) -> Any:\n   |\n\nPLR0912 Too many branches (16 > 12)\n  --> x_cls_make_py_mod_sideload_x.py:17:9\n   |\n16 | class x_cls_make_py_mod_sideload_x:\n17 |     def run(\n   |         ^^^\n18 |         self, base_path: str, module: str, obj: str | None = None\n19 |     ) -> Any:\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `run`\n  --> x_cls_make_py_mod_sideload_x.py:19:10\n   |\n17 |     def run(\n18 |         self, base_path: str, module: str, obj: str | None = None\n19 |     ) -> Any:\n   |          ^^^\n20 |         \"\"\"Load a module file under base_path and return module or attribute.\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:27:19\n   |\n25 |         \"\"\"\n26 |         if not base_path:\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |\n\nEM101 Exception must not use a string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:27:30\n   |\n25 |         \"\"\"\n26 |         if not base_path:\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |\nhelp: Assign to variable; remove string literal\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n  --> x_cls_make_py_mod_sideload_x.py:29:16\n   |\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |                ^^^^^^^^^^^^^\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:29:49\n   |\n27 |             raise ValueError(\"base_path must be a non-empty string\")\n28 |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n   |                                                 ^^^^^^^^^^^^^^\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:30:19\n   |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |\n32 |         module_file: str | None = None\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:30:37\n   |\n29 |         if not os.path.isdir(base_path) and not os.path.isfile(base_path):\n30 |             raise FileNotFoundError(f\"base_path does not exist: {base_path}\")\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n31 |\n32 |         module_file: str | None = None\n   |\nhelp: Assign to variable; remove f-string literal\n\nPTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`\n  --> x_cls_make_py_mod_sideload_x.py:35:12\n   |\n34 |         # Absolute path to a file\n35 |         if os.path.isabs(module) and os.path.isfile(module):\n   |            ^^^^^^^^^^^^^\n36 |             module_file = module\n37 |         # Literal filename relative to base_path\n   |\nhelp: Replace with `Path(...).is_absolute()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:35:38\n   |\n34 |         # Absolute path to a file\n35 |         if os.path.isabs(module) and os.path.isfile(module):\n   |                                      ^^^^^^^^^^^^^^\n36 |             module_file = module\n37 |         # Literal filename relative to base_path\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_py_mod_sideload_x.py:39:25\n   |\n37 |         # Literal filename relative to base_path\n38 |         elif module.endswith(\".py\"):\n39 |             candidate = os.path.join(base_path, module)\n   |                         ^^^^^^^^^^^^\n40 |             if os.path.isfile(candidate):\n41 |                 module_file = candidate\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:40:16\n   |\n38 |         elif module.endswith(\".py\"):\n39 |             candidate = os.path.join(base_path, module)\n40 |             if os.path.isfile(candidate):\n   |                ^^^^^^^^^^^^^^\n41 |                 module_file = candidate\n42 |         # Dotted path like pkg.mod -> base_path/pkg/mod.py\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path.joinpath()`\n  --> x_cls_make_py_mod_sideload_x.py:46:25\n   |\n44 |             parts = module.split(\".\")\n45 |             *pkg, mod = parts\n46 |             candidate = os.path.join(base_path, *pkg, f\"{mod}.py\")\n   |                         ^^^^^^^^^^^^\n47 |             if os.path.isfile(candidate):\n48 |                 module_file = candidate\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:47:16\n   |\n45 |             *pkg, mod = parts\n46 |             candidate = os.path.join(base_path, *pkg, f\"{mod}.py\")\n47 |             if os.path.isfile(candidate):\n   |                ^^^^^^^^^^^^^^\n48 |                 module_file = candidate\n49 |         # Try module.py or package __init__.py\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_py_mod_sideload_x.py:51:25\n   |\n49 |         # Try module.py or package __init__.py\n50 |         else:\n51 |             candidate = os.path.join(base_path, f\"{module}.py\")\n   |                         ^^^^^^^^^^^^\n52 |             if os.path.isfile(candidate):\n53 |                 module_file = candidate\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:52:16\n   |\n50 |         else:\n51 |             candidate = os.path.join(base_path, f\"{module}.py\")\n52 |             if os.path.isfile(candidate):\n   |                ^^^^^^^^^^^^^^\n53 |                 module_file = candidate\n54 |             else:\n   |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n  --> x_cls_make_py_mod_sideload_x.py:55:24\n   |\n53 |                 module_file = candidate\n54 |             else:\n55 |                 init = os.path.join(base_path, module, \"__init__.py\")\n   |                        ^^^^^^^^^^^^\n56 |                 if os.path.isfile(init):\n57 |                     module_file = init\n   |\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n  --> x_cls_make_py_mod_sideload_x.py:56:20\n   |\n54 |             else:\n55 |                 init = os.path.join(base_path, module, \"__init__.py\")\n56 |                 if os.path.isfile(init):\n   |                    ^^^^^^^^^^^^^^\n57 |                     module_file = init\n   |\nhelp: Replace with `Path(...).is_file()`\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:60:19\n   |\n59 |           if module_file is None:\n60 |               raise ImportError(\n   |  ___________________^\n61 | |                 f\"Cannot resolve module file for module={module} under base_path={base_path}\"\n62 | |             )\n   | |_____________^\n63 |\n64 |           spec = importlib.util.spec_from_file_location(\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:61:17\n   |\n59 |         if module_file is None:\n60 |             raise ImportError(\n61 |                 f\"Cannot resolve module file for module={module} under base_path={base_path}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n62 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nE501 Line too long (93 > 88)\n  --> x_cls_make_py_mod_sideload_x.py:61:89\n   |\n59 |         if module_file is None:\n60 |             raise ImportError(\n61 |                 f\"Cannot resolve module file for module={module} under base_path={base_path}\"\n   |                                                                                         ^^^^^\n62 |             )\n   |\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:68:19\n   |\n66 |           )\n67 |           if spec is None or spec.loader is None:\n68 |               raise ImportError(\n   |  ___________________^\n69 | |                 f\"Failed to create module spec for {module_file}\"\n70 | |             )\n   | |_____________^\n71 |\n72 |           module_obj = importlib.util.module_from_spec(spec)\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:69:17\n   |\n67 |         if spec is None or spec.loader is None:\n68 |             raise ImportError(\n69 |                 f\"Failed to create module spec for {module_file}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n70 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nTRY003 Avoid specifying long messages outside the exception class\n  --> x_cls_make_py_mod_sideload_x.py:79:19\n   |\n78 |           if not hasattr(module_obj, obj):\n79 |               raise AttributeError(\n   |  ___________________^\n80 | |                 f\"Module loaded from {module_file} has no attribute {obj!r}\"\n81 | |             )\n   | |_____________^\n82 |\n83 |           attr = getattr(module_obj, obj)\n   |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n  --> x_cls_make_py_mod_sideload_x.py:80:17\n   |\n78 |         if not hasattr(module_obj, obj):\n79 |             raise AttributeError(\n80 |                 f\"Module loaded from {module_file} has no attribute {obj!r}\"\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n81 |             )\n   |\nhelp: Assign to variable; remove f-string literal\n\nFound 27 errors.\nNo fixes available (5 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_pypi_x": {
        "files": [
            "x_cls_make_pypi_x.py"
        ],
        "files_index": [
            "x_cls_make_pypi_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 1,
                "stderr": "would reformat C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\n\nOh no! \\U0001f4a5 \\U0001f494 \\U0001f4a5\n1 file would be reformatted.\n",
                "stdout": "--- C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\t2025-10-07 16:24:18.558980+00:00\n+++ C:\\x_runner_x\\x_make_pypi_x\\x_cls_make_pypi_x.py\t2025-10-07 17:46:08.122739+00:00\n@@ -85,13 +85,11 @@\n             url = f\"{self.PYPI_INDEX_URL}/pypi/{self.name}/json\"\n             with urllib.request.urlopen(url, timeout=10) as response:\n                 data = json.load(response)\n             return self.version in data.get(\"releases\", {})\n         except Exception as e:\n-            _info(\n-                f\"WARNING: Could not check PyPI for {self.name}=={self.version}: {e}\"\n-            )\n+            _info(f\"WARNING: Could not check PyPI for {self.name}=={self.version}: {e}\")\n             return False\n \n     def __init__(\n         self,\n         name: str,\n@@ -195,16 +193,12 @@\n                 if self.author or self.email:\n                     auth_name = self.author or \"Unknown\"\n                     auth_email = self.email or \"unknown@example.com\"\n                     base_pyproject += f'authors = [{{name = \"{auth_name}\", email = \"{auth_email}\"}}]\\n'\n                 if self.dependencies:\n-                    deps_serial = \",\\n    \".join(\n-                        f'\"{d}\"' for d in self.dependencies\n-                    )\n-                    base_pyproject += (\n-                        f\"dependencies = [\\n    {deps_serial}\\n]\\n\"\n-                    )\n+                    deps_serial = \",\\n    \".join(f'\"{d}\"' for d in self.dependencies)\n+                    base_pyproject += f\"dependencies = [\\n    {deps_serial}\\n]\\n\"\n \n                 # Compose explicit package-data list\n                 pkg_data_list = [\n                     '\"py.typed\"',\n                     *[f'\"{rel}\"' for rel in explicit_files],\n@@ -276,34 +270,28 @@\n                 shutil.rmtree(package_dir)\n             else:\n                 os.remove(package_dir)\n         os.makedirs(package_dir, exist_ok=True)\n \n-        shutil.copy2(\n-            main_file, os.path.join(package_dir, os.path.basename(main_file))\n-        )\n+        shutil.copy2(main_file, os.path.join(package_dir, os.path.basename(main_file)))\n         init_path = os.path.join(package_dir, \"__init__.py\")\n         if not os.path.exists(init_path):\n             with open(init_path, \"w\", encoding=\"utf-8\") as f:\n                 f.write(\"# Package init\\n\")\n \n         def _is_allowed(p: str) -> bool:\n             \"\"\"Allow-list files copied into the build.\"\"\"\n             _, ext = os.path.splitext(p.lower())\n             allowed = {\".py\", \".txt\", \".md\", \".rst\"}\n-            return (\n-                ext in allowed or os.path.basename(p).lower() == \"__init__.py\"\n-            )\n+            return ext in allowed or os.path.basename(p).lower() == \"__init__.py\"\n \n         # Copy ancillaries: files only; do not recurse directories\n         for entry in ancillary_files or []:\n             rel_norm = entry.replace(\"\\\\\", \"/\").lstrip(\"/\")\n             src_path = rel_norm.replace(\"/\", os.sep)\n             if os.path.isdir(src_path):\n-                _info(\n-                    f\"Ignoring ancillary directory (no recursion): {rel_norm}\"\n-                )\n+                _info(f\"Ignoring ancillary directory (no recursion): {rel_norm}\")\n                 continue\n             if os.path.isfile(src_path) and _is_allowed(src_path):\n                 dest_path = os.path.join(package_dir, src_path)\n                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n                 shutil.copy2(src_path, dest_path)\n@@ -329,13 +317,11 @@\n                 for fname in files:\n                     if fname.endswith(\".py\") and not fname.endswith(\".pyi\"):\n                         stub_path = os.path.join(root, fname[:-3] + \".pyi\")\n                         if not os.path.exists(stub_path):\n                             try:\n-                                with open(\n-                                    stub_path, \"w\", encoding=\"utf-8\"\n-                                ) as f:\n+                                with open(stub_path, \"w\", encoding=\"utf-8\") as f:\n                                     f.write(\n                                         f\"# Stub for {fname}\\nfrom typing import Any\\n\\n\"\n                                     )\n                             except Exception:\n                                 pass\n@@ -455,13 +441,11 @@\n             try:\n                 os.chdir(cwd)\n             except Exception:\n                 pass\n \n-    def prepare_and_publish(\n-        self, main_file: str, ancillary_files: list[str]\n-    ) -> None:\n+    def prepare_and_publish(self, main_file: str, ancillary_files: list[str]) -> None:\n         # Always validate inputs (evidence cleanup is enforced unconditionally).\n         self.prepare(main_file, ancillary_files or [])\n         self.publish(main_file, ancillary_files or [])\n \n \n"
            },
            "mypy": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "x_cls_make_pypi_x.py:21: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:22: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:22: error: Expression type contains \"Any\" (has type \"tuple[Any, ...]\")  [misc]\nx_cls_make_pypi_x.py:36: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:37: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:37: error: Expression type contains \"Any\" (has type \"tuple[Any, ...]\")  [misc]\nx_cls_make_pypi_x.py:52: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:53: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:65: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:69: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:86: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:87: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:88: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:95: error: Explicit \"Any\" is not allowed  [explicit-any]\nx_cls_make_pypi_x.py:121: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_pypi_x.py:125: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:126: error: Expression type contains \"Any\" (has type \"dict[str, Any]\")  [misc]\nx_cls_make_pypi_x.py:126: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:129: error: Expression type contains \"Any\" (has type \"Any | bool\")  [misc]\nx_cls_make_pypi_x.py:176: error: Expression type contains \"Any\" (has type \"dict[str, Any | None]\")  [misc]\nx_cls_make_pypi_x.py:409: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:410: error: Expression has type \"Any\"  [misc]\nx_cls_make_pypi_x.py:411: error: Expression has type \"Any\"  [misc]\nFound 23 errors in 1 file (checked 1 source file)\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_pypi_x.py:14:29\n   |\n12 | import urllib.request\n13 | import uuid\n14 | from collections.abc import Iterable\n   |                             ^^^^^^^^\n15 | from typing import Any\n   |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_pypi_x.py:21:18\n   |\n21 | def _info(*args: Any) -> None:\n   |                  ^^^\n22 |     msg = \" \".join(str(a) for a in args)\n23 |     try:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:23:5\n   |\n21 |   def _info(*args: Any) -> None:\n22 |       msg = \" \".join(str(a) for a in args)\n23 | /     try:\n24 | |         _LOGGER.info(\"%s\", msg)\n25 | |     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:25:5\n   |\n23 |       try:\n24 |           _LOGGER.info(\"%s\", msg)\n25 | /     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:25:12\n   |\n23 |     try:\n24 |         _LOGGER.info(\"%s\", msg)\n25 |     except Exception:\n   |            ^^^^^^^^^\n26 |         pass\n27 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:29:12\n   |\n27 |     try:\n28 |         print(msg)\n29 |     except Exception:\n   |            ^^^^^^^^^\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:30:9\n   |\n28 |           print(msg)\n29 |       except Exception:\n30 | /         try:\n31 | |             _sys.stdout.write(msg + \"\\n\")\n32 | |         except Exception:\n33 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:32:9\n   |\n30 |           try:\n31 |               _sys.stdout.write(msg + \"\\n\")\n32 | /         except Exception:\n33 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:32:16\n   |\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n32 |         except Exception:\n   |                ^^^^^^^^^\n33 |             pass\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_pypi_x.py:36:19\n   |\n36 | def _error(*args: Any) -> None:\n   |                   ^^^\n37 |     msg = \" \".join(str(a) for a in args)\n38 |     try:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:38:5\n   |\n36 |   def _error(*args: Any) -> None:\n37 |       msg = \" \".join(str(a) for a in args)\n38 | /     try:\n39 | |         _LOGGER.error(\"%s\", msg)\n40 | |     except Exception:\n41 | |         pass\n   | |____________^\n42 |       try:\n43 |           print(msg, file=_sys.stderr)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:40:5\n   |\n38 |       try:\n39 |           _LOGGER.error(\"%s\", msg)\n40 | /     except Exception:\n41 | |         pass\n   | |____________^\n42 |       try:\n43 |           print(msg, file=_sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:40:12\n   |\n38 |     try:\n39 |         _LOGGER.error(\"%s\", msg)\n40 |     except Exception:\n   |            ^^^^^^^^^\n41 |         pass\n42 |     try:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:42:5\n   |\n40 |       except Exception:\n41 |           pass\n42 | /     try:\n43 | |         print(msg, file=_sys.stderr)\n44 | |     except Exception:\n45 | |         pass\n   | |____________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:44:5\n   |\n42 |       try:\n43 |           print(msg, file=_sys.stderr)\n44 | /     except Exception:\n45 | |         pass\n   | |____________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:44:12\n   |\n42 |     try:\n43 |         print(msg, file=_sys.stderr)\n44 |     except Exception:\n   |            ^^^^^^^^^\n45 |         pass\n   |\n\nS105 Possible hardcoded password assigned to: \"TOKEN_ENV_VAR\"\n  --> x_cls_make_pypi_x.py:49:26\n   |\n48 | class BaseMake:\n49 |     TOKEN_ENV_VAR: str = \"GITHUB_TOKEN\"\n   |                          ^^^^^^^^^^^^^^\n50 |\n51 |     @classmethod\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`\n  --> x_cls_make_pypi_x.py:52:42\n   |\n51 |     @classmethod\n52 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                          ^^^\n53 |         return _os.environ.get(name, default)\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `get_env`\n  --> x_cls_make_pypi_x.py:52:57\n   |\n51 |     @classmethod\n52 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                                         ^^^\n53 |         return _os.environ.get(name, default)\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_pypi_x.py:56:38\n   |\n55 |     @classmethod\n56 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n57 |         v = _os.environ.get(name, None)\n58 |         if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_pypi_x.py:56:38\n   |\n55 |     @classmethod\n56 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n57 |         v = _os.environ.get(name, None)\n58 |         if v is None:\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> x_cls_make_pypi_x.py:66:46\n   |\n65 |     def run_cmd(\n66 |         self, args: Iterable[str], **kwargs: Any\n   |                                              ^^^\n67 |     ) -> _subprocess.CompletedProcess[str]:\n68 |         return _subprocess.run(\n   |\n\nS603 `subprocess` call: check for execution of untrusted input\n  --> x_cls_make_pypi_x.py:68:16\n   |\n66 |         self, args: Iterable[str], **kwargs: Any\n67 |     ) -> _subprocess.CompletedProcess[str]:\n68 |         return _subprocess.run(\n   |                ^^^^^^^^^^^^^^^\n69 |             list(args), check=False, capture_output=True, text=True, **kwargs\n70 |         )\n   |\n\nN801 Class name `x_cls_make_pypi_x` should use CapWords convention\n  --> x_cls_make_pypi_x.py:76:7\n   |\n76 | class x_cls_make_pypi_x(BaseMake):\n   |       ^^^^^^^^^^^^^^^^^\n77 |     # Configurable endpoints and env names\n78 |     PYPI_INDEX_URL: str = \"https://pypi.org\"\n   |\n\nS105 Possible hardcoded password assigned to: \"TEST_PYPI_TOKEN_ENV\"\n  --> x_cls_make_pypi_x.py:80:32\n   |\n78 |     PYPI_INDEX_URL: str = \"https://pypi.org\"\n79 |     TEST_PYPI_URL: str = \"https://test.pypi.org\"\n80 |     TEST_PYPI_TOKEN_ENV: str = \"TEST_PYPI_TOKEN\"\n   |                                ^^^^^^^^^^^^^^^^^\n81 |\n82 |     def version_exists_on_pypi(self) -> bool:\n   |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n  --> x_cls_make_pypi_x.py:86:18\n   |\n84 |         try:\n85 |             url = f\"{self.PYPI_INDEX_URL}/pypi/{self.name}/json\"\n86 |             with urllib.request.urlopen(url, timeout=10) as response:\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |                 data = json.load(response)\n88 |             return self.version in data.get(\"releases\", {})\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:89:16\n   |\n87 |                 data = json.load(response)\n88 |             return self.version in data.get(\"releases\", {})\n89 |         except Exception as e:\n   |                ^^^^^^^^^\n90 |             _info(\n91 |                 f\"WARNING: Could not check PyPI for {self.name}=={self.version}: {e}\"\n   |\n\nPLR0913 Too many arguments in function definition (8 > 5)\n  --> x_cls_make_pypi_x.py:95:9\n   |\n93 |             return False\n94 |\n95 |     def __init__(\n   |         ^^^^^^^^\n96 |         self,\n97 |         name: str,\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> x_cls_make_pypi_x.py:105:19\n    |\n103 |         dependencies: list[str],\n104 |         ctx: object | None = None,\n105 |         **kwargs: Any,\n    |                   ^^^\n106 |     ) -> None:\n107 |         # accept optional orchestrator context (backwards compatible)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:122:16\n    |\n120 |         try:\n121 |             self.dry_run = bool(getattr(self._ctx, \"dry_run\", False))\n122 |         except Exception:\n    |                ^^^^^^^^^\n123 |             self.dry_run = False\n    |\n\nARG002 Unused method argument: `project_dir`\n   --> x_cls_make_pypi_x.py:132:37\n    |\n130 |             _info(f\"[pypi] prepared publisher for {self.name}=={self.version}\")\n131 |\n132 |     def update_pyproject_toml(self, project_dir: str) -> None:\n    |                                     ^^^^^^^^^^^\n133 |         # Intentionally removed: no metadata file manipulation in this publisher.\n134 |         # Older behavior updated project metadata here; that logic was removed\n    |\n\nC901 `ensure_type_metadata` is too complex (19 > 10)\n   --> x_cls_make_pypi_x.py:138:9\n    |\n136 |         return\n137 |\n138 |     def ensure_type_metadata(\n    |         ^^^^^^^^^^^^^^^^^^^^\n139 |         self,\n140 |         repo_name: str,\n    |\n\nPLR0912 Too many branches (21 > 12)\n   --> x_cls_make_pypi_x.py:138:9\n    |\n136 |         return\n137 |\n138 |     def ensure_type_metadata(\n    |         ^^^^^^^^^^^^^^^^^^^^\n139 |         self,\n140 |         repo_name: str,\n    |\n\nPLR0915 Too many statements (66 > 50)\n   --> x_cls_make_pypi_x.py:138:9\n    |\n136 |         return\n137 |\n138 |     def ensure_type_metadata(\n    |         ^^^^^^^^^^^^^^^^^^^^\n139 |         self,\n140 |         repo_name: str,\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_make_pypi_x.py:146:13\n    |\n144 |         \"\"\"Inject PEP 561 artifacts and minimal build metadata without recursion.\"\"\"\n145 |         try:\n146 |             from pathlib import Path as _P\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n147 |\n148 |             pkg_path = _P(base_dir)  # build_dir/<dist_name>\n    |\n\nN814 Camelcase `Path` imported as constant `_P`\n   --> x_cls_make_pypi_x.py:146:33\n    |\n144 |         \"\"\"Inject PEP 561 artifacts and minimal build metadata without recursion.\"\"\"\n145 |         try:\n146 |             from pathlib import Path as _P\n    |                                 ^^^^^^^^^^\n147 |\n148 |             pkg_path = _P(base_dir)  # build_dir/<dist_name>\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:156:24\n    |\n154 |                 try:\n155 |                     py_typed.write_text(\"\", encoding=\"utf-8\")\n156 |                 except Exception:\n    |                        ^^^^^^^^^\n157 |                     return\n    |\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:166:17\n    |\n164 |                       if (pkg_path / rel).is_file():\n165 |                           explicit_files.append(rel)\n166 | /                 except Exception:\n167 | |                     continue\n    | |____________________________^\n168 |\n169 |               # MANIFEST.in: explicit includes only\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:166:24\n    |\n164 |                     if (pkg_path / rel).is_file():\n165 |                         explicit_files.append(rel)\n166 |                 except Exception:\n    |                        ^^^^^^^^^\n167 |                     continue\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_pypi_x.py:172:17\n    |\n170 |             manifest_lines: list[str] = [f\"include {pkg_path.name}/py.typed\"]\n171 |             for rel in explicit_files:\n172 |                 manifest_lines.append(f\"include {pkg_path.name}/{rel}\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n173 |             man_path = bd / \"MANIFEST.in\"\n174 |             try:\n    |\nhelp: Replace for loop with list.extend\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:174:13\n    |\n172 |                   manifest_lines.append(f\"include {pkg_path.name}/{rel}\")\n173 |               man_path = bd / \"MANIFEST.in\"\n174 | /             try:\n175 | |                 man_path.write_text(\n176 | |                     \"\\n\".join(dict.fromkeys(manifest_lines)) + \"\\n\",\n177 | |                     encoding=\"utf-8\",\n178 | |                 )\n179 | |             except Exception:\n180 | |                 pass\n    | |____________________^\n181 |\n182 |               # pyproject: include-package-data and explicit package-data (no globs)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:179:13\n    |\n177 |                       encoding=\"utf-8\",\n178 |                   )\n179 | /             except Exception:\n180 | |                 pass\n    | |____________________^\n181 |\n182 |               # pyproject: include-package-data and explicit package-data (no globs)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:179:20\n    |\n177 |                     encoding=\"utf-8\",\n178 |                 )\n179 |             except Exception:\n    |                    ^^^^^^^^^\n180 |                 pass\n    |\n\nE501 Line too long (103 > 88)\n   --> x_cls_make_pypi_x.py:198:89\n    |\n196 |                     auth_name = self.author or \"Unknown\"\n197 |                     auth_email = self.email or \"unknown@example.com\"\n198 |                     base_pyproject += f'authors = [{{name = \"{auth_name}\", email = \"{auth_email}\"}}]\\n'\n    |                                                                                         ^^^^^^^^^^^^^^^\n199 |                 if self.dependencies:\n200 |                     deps_serial = \",\\n    \".join(\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_pypi_x.py:236:89\n    |\n234 |                         txt += '\\n[tool.setuptools.packages.find]\\nwhere = [\".\"]\\n'\n235 |                         changed = True\n236 |                     # write/replace package-data block (append a fresh block with explicit entries)\n    |                                                                                         ^^^^^^^^^^^\n237 |                     pkg_data_block = (\n238 |                         f\"\\n[tool.setuptools.package-data]\\n\"\n    |\n\nE501 Line too long (103 > 88)\n   --> x_cls_make_pypi_x.py:245:89\n    |\n243 |                         changed = True\n244 |                     else:\n245 |                         # naive replace for the same key (append new explicit block to take precedence)\n    |                                                                                         ^^^^^^^^^^^^^^^\n246 |                         txt += pkg_data_block\n247 |                         changed = True\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:254:13\n    |\n252 |                       if changed:\n253 |                           pyproject.write_text(txt, encoding=\"utf-8\")\n254 | /             except Exception:\n255 | |                 pass\n    | |____________________^\n256 |           except Exception:\n257 |               pass\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:254:20\n    |\n252 |                     if changed:\n253 |                         pyproject.write_text(txt, encoding=\"utf-8\")\n254 |             except Exception:\n    |                    ^^^^^^^^^\n255 |                 pass\n256 |         except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:256:9\n    |\n254 |               except Exception:\n255 |                   pass\n256 | /         except Exception:\n257 | |             pass\n    | |________________^\n258 |\n259 |       def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:256:16\n    |\n254 |             except Exception:\n255 |                 pass\n256 |         except Exception:\n    |                ^^^^^^^^^\n257 |             pass\n    |\n\nC901 `create_files` is too complex (17 > 10)\n   --> x_cls_make_pypi_x.py:259:9\n    |\n257 |             pass\n258 |\n259 |     def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |         ^^^^^^^^^^^^\n260 |         \"\"\"\n261 |         Create a minimal package tree in a temporary build directory and\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_pypi_x.py:259:9\n    |\n257 |             pass\n258 |\n259 |     def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |         ^^^^^^^^^^^^\n260 |         \"\"\"\n261 |         Create a minimal package tree in a temporary build directory and\n    |\n\nPLR0915 Too many statements (54 > 50)\n   --> x_cls_make_pypi_x.py:259:9\n    |\n257 |             pass\n258 |\n259 |     def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |         ^^^^^^^^^^^^\n260 |         \"\"\"\n261 |         Create a minimal package tree in a temporary build directory and\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_pypi_x.py:265:27\n    |\n263 |         \"\"\"\n264 |         package_name = self.name\n265 |         repo_build_root = os.path.abspath(\n    |                           ^^^^^^^^^^^^^^^\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n267 |         )\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:266:13\n    |\n264 |         package_name = self.name\n265 |         repo_build_root = os.path.abspath(\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n    |             ^^^^^^^^^^^^\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_pypi_x.py:266:26\n    |\n264 |         package_name = self.name\n265 |         repo_build_root = os.path.abspath(\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n    |                          ^^^^^^^^^^^^^^^\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:268:9\n    |\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n    |         ^^^^^^^^^^^\n269 |         build_dir = os.path.join(\n270 |             repo_build_root, f\"_build_{package_name}_{uuid.uuid4().hex}\"\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:269:21\n    |\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n269 |         build_dir = os.path.join(\n    |                     ^^^^^^^^^^^^\n270 |             repo_build_root, f\"_build_{package_name}_{uuid.uuid4().hex}\"\n271 |         )\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:272:9\n    |\n270 |             repo_build_root, f\"_build_{package_name}_{uuid.uuid4().hex}\"\n271 |         )\n272 |         os.makedirs(build_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n273 |         package_dir = os.path.join(build_dir, package_name)\n274 |         if os.path.lexists(package_dir):\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:273:23\n    |\n271 |         )\n272 |         os.makedirs(build_dir, exist_ok=True)\n273 |         package_dir = os.path.join(build_dir, package_name)\n    |                       ^^^^^^^^^^^^\n274 |         if os.path.lexists(package_dir):\n275 |             if os.path.isdir(package_dir):\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_pypi_x.py:275:16\n    |\n273 |         package_dir = os.path.join(build_dir, package_name)\n274 |         if os.path.lexists(package_dir):\n275 |             if os.path.isdir(package_dir):\n    |                ^^^^^^^^^^^^^\n276 |                 shutil.rmtree(package_dir)\n277 |             else:\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_make_pypi_x.py:278:17\n    |\n276 |                 shutil.rmtree(package_dir)\n277 |             else:\n278 |                 os.remove(package_dir)\n    |                 ^^^^^^^^^\n279 |         os.makedirs(package_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).unlink()`\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:279:9\n    |\n277 |             else:\n278 |                 os.remove(package_dir)\n279 |         os.makedirs(package_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n280 |\n281 |         shutil.copy2(\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:282:24\n    |\n281 |         shutil.copy2(\n282 |             main_file, os.path.join(package_dir, os.path.basename(main_file))\n    |                        ^^^^^^^^^^^^\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_pypi_x.py:282:50\n    |\n281 |         shutil.copy2(\n282 |             main_file, os.path.join(package_dir, os.path.basename(main_file))\n    |                                                  ^^^^^^^^^^^^^^^^\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n    |\nhelp: Replace with `Path(...).name`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:284:21\n    |\n282 |             main_file, os.path.join(package_dir, os.path.basename(main_file))\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n    |                     ^^^^^^^^^^^^\n285 |         if not os.path.exists(init_path):\n286 |             with open(init_path, \"w\", encoding=\"utf-8\") as f:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:285:16\n    |\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n285 |         if not os.path.exists(init_path):\n    |                ^^^^^^^^^^^^^^\n286 |             with open(init_path, \"w\", encoding=\"utf-8\") as f:\n287 |                 f.write(\"# Package init\\n\")\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_pypi_x.py:286:18\n    |\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n285 |         if not os.path.exists(init_path):\n286 |             with open(init_path, \"w\", encoding=\"utf-8\") as f:\n    |                  ^^^^\n287 |                 f.write(\"# Package init\\n\")\n    |\nhelp: Replace with `Path.open()`\n\nPTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`\n   --> x_cls_make_pypi_x.py:291:22\n    |\n289 |         def _is_allowed(p: str) -> bool:\n290 |             \"\"\"Allow-list files copied into the build.\"\"\"\n291 |             _, ext = os.path.splitext(p.lower())\n    |                      ^^^^^^^^^^^^^^^^\n292 |             allowed = {\".py\", \".txt\", \".md\", \".rst\"}\n293 |             return (\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_pypi_x.py:294:35\n    |\n292 |             allowed = {\".py\", \".txt\", \".md\", \".rst\"}\n293 |             return (\n294 |                 ext in allowed or os.path.basename(p).lower() == \"__init__.py\"\n    |                                   ^^^^^^^^^^^^^^^^\n295 |             )\n    |\nhelp: Replace with `Path(...).name`\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_pypi_x.py:301:16\n    |\n299 |             rel_norm = entry.replace(\"\\\\\", \"/\").lstrip(\"/\")\n300 |             src_path = rel_norm.replace(\"/\", os.sep)\n301 |             if os.path.isdir(src_path):\n    |                ^^^^^^^^^^^^^\n302 |                 _info(\n303 |                     f\"Ignoring ancillary directory (no recursion): {rel_norm}\"\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_pypi_x.py:306:16\n    |\n304 |                 )\n305 |                 continue\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n    |                ^^^^^^^^^^^^^^\n307 |                 dest_path = os.path.join(package_dir, src_path)\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:307:29\n    |\n305 |                 continue\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n307 |                 dest_path = os.path.join(package_dir, src_path)\n    |                             ^^^^^^^^^^^^\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n309 |                 shutil.copy2(src_path, dest_path)\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:308:17\n    |\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n307 |                 dest_path = os.path.join(package_dir, src_path)\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n    |                 ^^^^^^^^^^^\n309 |                 shutil.copy2(src_path, dest_path)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_pypi_x.py:308:29\n    |\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n307 |                 dest_path = os.path.join(package_dir, src_path)\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n    |                             ^^^^^^^^^^^^^^^\n309 |                 shutil.copy2(src_path, dest_path)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:318:28\n    |\n316 |             for root, _dirs, files in os.walk(package_dir):\n317 |                 # package-level stub\n318 |                 pyi_init = os.path.join(root, \"__init__.pyi\")\n    |                            ^^^^^^^^^^^^\n319 |                 if not os.path.exists(pyi_init):\n320 |                     try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:319:24\n    |\n317 |                 # package-level stub\n318 |                 pyi_init = os.path.join(root, \"__init__.pyi\")\n319 |                 if not os.path.exists(pyi_init):\n    |                        ^^^^^^^^^^^^^^\n320 |                     try:\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_pypi_x.py:321:30\n    |\n319 |                 if not os.path.exists(pyi_init):\n320 |                     try:\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n    |                              ^^^^\n322 |                             f.write(\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n    |\nhelp: Replace with `Path.open()`\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_pypi_x.py:323:61\n    |\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n322 |                             f.write(\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n    |                                                             ^^^^^^^^^^^^^^^^\n324 |                             )\n325 |                     except Exception:\n    |\nhelp: Replace with `Path(...).name`\n\nE501 Line too long (132 > 88)\n   --> x_cls_make_pypi_x.py:323:89\n    |\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n322 |                             f.write(\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n324 |                             )\n325 |                     except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:325:21\n    |\n323 |                                   f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n324 |                               )\n325 | /                     except Exception:\n326 | |                         pass\n    | |____________________________^\n327 |\n328 |                   # module-level stubs for any .py files\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:325:28\n    |\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n324 |                             )\n325 |                     except Exception:\n    |                            ^^^^^^^^^\n326 |                         pass\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:331:37\n    |\n329 |                 for fname in files:\n330 |                     if fname.endswith(\".py\") and not fname.endswith(\".pyi\"):\n331 |                         stub_path = os.path.join(root, fname[:-3] + \".pyi\")\n    |                                     ^^^^^^^^^^^^\n332 |                         if not os.path.exists(stub_path):\n333 |                             try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:332:32\n    |\n330 |                     if fname.endswith(\".py\") and not fname.endswith(\".pyi\"):\n331 |                         stub_path = os.path.join(root, fname[:-3] + \".pyi\")\n332 |                         if not os.path.exists(stub_path):\n    |                                ^^^^^^^^^^^^^^\n333 |                             try:\n334 |                                 with open(\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_pypi_x.py:334:38\n    |\n332 |                         if not os.path.exists(stub_path):\n333 |                             try:\n334 |                                 with open(\n    |                                      ^^^^\n335 |                                     stub_path, \"w\", encoding=\"utf-8\"\n336 |                                 ) as f:\n    |\nhelp: Replace with `Path.open()`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_pypi_x.py:338:89\n    |\n336 | \u00e2\u20ac\u00a6                         ) as f:\n337 | \u00e2\u20ac\u00a6                             f.write(\n338 | \u00e2\u20ac\u00a6                                 f\"# Stub for {fname}\\nfrom typing import Any\\n\\n\"\n    |                                                                                   ^\n339 | \u00e2\u20ac\u00a6                             )\n340 | \u00e2\u20ac\u00a6                     except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:340:29\n    |\n338 |                                           f\"# Stub for {fname}\\nfrom typing import Any\\n\\n\"\n339 |                                       )\n340 | /                             except Exception:\n341 | |                                 pass\n    | |____________________________________^\n342 |           except Exception:\n343 |               # Best-effort: do not fail the build just because stubs couldn't be written.\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:340:36\n    |\n338 |                                         f\"# Stub for {fname}\\nfrom typing import Any\\n\\n\"\n339 |                                     )\n340 |                             except Exception:\n    |                                    ^^^^^^^^^\n341 |                                 pass\n342 |         except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:342:9\n    |\n340 |                               except Exception:\n341 |                                   pass\n342 | /         except Exception:\n343 | |             # Best-effort: do not fail the build just because stubs couldn't be written.\n344 | |             pass\n    | |________________^\n345 |\n346 |           # After stubs generated, ensure PEP 561 artifacts & metadata\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:342:16\n    |\n340 |                             except Exception:\n341 |                                 pass\n342 |         except Exception:\n    |                ^^^^^^^^^\n343 |             # Best-effort: do not fail the build just because stubs couldn't be written.\n344 |             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:347:9\n    |\n346 |           # After stubs generated, ensure PEP 561 artifacts & metadata\n347 | /         try:\n348 | |             self.ensure_type_metadata(build_dir, package_dir, ancillary_files)\n349 | |         except Exception:\n350 | |             pass\n    | |________________^\n351 |           self._project_dir = build_dir\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:349:9\n    |\n347 |           try:\n348 |               self.ensure_type_metadata(build_dir, package_dir, ancillary_files)\n349 | /         except Exception:\n350 | |             pass\n    | |________________^\n351 |           self._project_dir = build_dir\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:349:16\n    |\n347 |         try:\n348 |             self.ensure_type_metadata(build_dir, package_dir, ancillary_files)\n349 |         except Exception:\n    |                ^^^^^^^^^\n350 |             pass\n351 |         self._project_dir = build_dir\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:354:16\n    |\n353 |     def prepare(self, main_file: str, ancillary_files: list[str]) -> None:\n354 |         if not os.path.exists(main_file):\n    |                ^^^^^^^^^^^^^^\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n356 |         for ancillary_file in ancillary_files or []:\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:355:19\n    |\n353 |     def prepare(self, main_file: str, ancillary_files: list[str]) -> None:\n354 |         if not os.path.exists(main_file):\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n356 |         for ancillary_file in ancillary_files or []:\n357 |             if not os.path.exists(ancillary_file):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:355:37\n    |\n353 |     def prepare(self, main_file: str, ancillary_files: list[str]) -> None:\n354 |         if not os.path.exists(main_file):\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n356 |         for ancillary_file in ancillary_files or []:\n357 |             if not os.path.exists(ancillary_file):\n    |\nhelp: Assign to variable; remove f-string literal\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:357:20\n    |\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n356 |         for ancillary_file in ancillary_files or []:\n357 |             if not os.path.exists(ancillary_file):\n    |                    ^^^^^^^^^^^^^^\n358 |                 raise FileNotFoundError(\n359 |                     f\"Ancillary file '{ancillary_file}' is not found.\"\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:358:23\n    |\n356 |           for ancillary_file in ancillary_files or []:\n357 |               if not os.path.exists(ancillary_file):\n358 |                   raise FileNotFoundError(\n    |  _______________________^\n359 | |                     f\"Ancillary file '{ancillary_file}' is not found.\"\n360 | |                 )\n    | |_________________^\n361 |\n362 |       def publish(self, main_file: str, ancillary_files: list[str]) -> bool:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:359:21\n    |\n357 |             if not os.path.exists(ancillary_file):\n358 |                 raise FileNotFoundError(\n359 |                     f\"Ancillary file '{ancillary_file}' is not found.\"\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n360 |                 )\n    |\nhelp: Assign to variable; remove f-string literal\n\nC901 `publish` is too complex (12 > 10)\n   --> x_cls_make_pypi_x.py:362:9\n    |\n360 |                 )\n361 |\n362 |     def publish(self, main_file: str, ancillary_files: list[str]) -> bool:\n    |         ^^^^^^^\n363 |         \"\"\"Build and upload package to PyPI using build + twine.\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_pypi_x.py:362:9\n    |\n360 |                 )\n361 |\n362 |     def publish(self, main_file: str, ancillary_files: list[str]) -> bool:\n    |         ^^^^^^^\n363 |         \"\"\"Build and upload package to PyPI using build + twine.\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_pypi_x.py:377:15\n    |\n375 |         self.create_files(main_file, ancillary_files or [])\n376 |         project_dir = self._project_dir\n377 |         cwd = os.getcwd()\n    |               ^^^^^^^^^\n378 |         try:\n379 |             os.chdir(project_dir)\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:381:24\n    |\n379 |             os.chdir(project_dir)\n380 |\n381 |             dist_dir = os.path.join(project_dir, \"dist\")\n    |                        ^^^^^^^^^^^^\n382 |             if os.path.exists(dist_dir):\n383 |                 shutil.rmtree(dist_dir)\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:382:16\n    |\n381 |             dist_dir = os.path.join(project_dir, \"dist\")\n382 |             if os.path.exists(dist_dir):\n    |                ^^^^^^^^^^^^^^\n383 |                 shutil.rmtree(dist_dir)\n    |\nhelp: Replace with `Path(...).exists()`\n\nS605 Starting a process with a shell, possible injection detected\n   --> x_cls_make_pypi_x.py:387:18\n    |\n385 |             build_cmd = [sys.executable, \"-m\", \"build\"]\n386 |             _info(\"Running build:\", \" \".join(build_cmd))\n387 |             rc = os.system(\" \".join(build_cmd))\n    |                  ^^^^^^^^^\n388 |             if rc != 0:\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:389:23\n    |\n387 |             rc = os.system(\" \".join(build_cmd))\n388 |             if rc != 0:\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n390 |\n391 |             if not os.path.exists(dist_dir):\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:389:36\n    |\n387 |             rc = os.system(\" \".join(build_cmd))\n388 |             if rc != 0:\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n390 |\n391 |             if not os.path.exists(dist_dir):\n    |\nhelp: Assign to variable; remove string literal\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:391:20\n    |\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n390 |\n391 |             if not os.path.exists(dist_dir):\n    |                    ^^^^^^^^^^^^^^\n392 |                 raise RuntimeError(\"dist/ directory not found after build.\")\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:392:23\n    |\n391 |             if not os.path.exists(dist_dir):\n392 |                 raise RuntimeError(\"dist/ directory not found after build.\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n393 |\n394 |             files = [\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:392:36\n    |\n391 |             if not os.path.exists(dist_dir):\n392 |                 raise RuntimeError(\"dist/ directory not found after build.\")\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n393 |\n394 |             files = [\n    |\nhelp: Assign to variable; remove string literal\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:395:17\n    |\n394 |             files = [\n395 |                 os.path.join(dist_dir, f)\n    |                 ^^^^^^^^^^^^\n396 |                 for f in os.listdir(dist_dir)\n397 |                 if f.startswith(f\"{self.name}-{self.version}\")\n    |\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_pypi_x.py:396:26\n    |\n394 |             files = [\n395 |                 os.path.join(dist_dir, f)\n396 |                 for f in os.listdir(dist_dir)\n    |                          ^^^^^^^^^^\n397 |                 if f.startswith(f\"{self.name}-{self.version}\")\n398 |                 and f.endswith((\".tar.gz\", \".whl\"))\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:401:23\n    |\n399 |               ]\n400 |               if not files:\n401 |                   raise RuntimeError(\n    |  _______________________^\n402 | |                     \"No valid distribution files found. Aborting publish.\"\n403 | |                 )\n    | |_________________^\n404 |\n405 |               pypirc_path = os.path.expanduser(\"~/.pypirc\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:402:21\n    |\n400 |             if not files:\n401 |                 raise RuntimeError(\n402 |                     \"No valid distribution files found. Aborting publish.\"\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n403 |                 )\n    |\nhelp: Assign to variable; remove string literal\n\nPTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`\n   --> x_cls_make_pypi_x.py:405:27\n    |\n403 |                 )\n404 |\n405 |             pypirc_path = os.path.expanduser(\"~/.pypirc\")\n    |                           ^^^^^^^^^^^^^^^^^^\n406 |             has_pypirc = os.path.exists(pypirc_path)\n407 |             has_env_creds = any(\n    |\nhelp: Replace with `Path(...).expanduser()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:406:26\n    |\n405 |             pypirc_path = os.path.expanduser(\"~/.pypirc\")\n406 |             has_pypirc = os.path.exists(pypirc_path)\n    |                          ^^^^^^^^^^^^^^\n407 |             has_env_creds = any(\n408 |                 [\n    |\nhelp: Replace with `Path(...).exists()`\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_pypi_x.py:423:70\n    |\n421 |             # exist on PyPI. Default to True to avoid failing the overall run when\n422 |             # package files are already present (common in retry scenarios).\n423 |             skip_existing = self.get_env_bool(\"TWINE_SKIP_EXISTING\", True)\n    |                                                                      ^^^^\n424 |             if skip_existing:\n425 |                 twine_cmd = [\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_pypi_x.py:441:22\n    |\n439 |                 _info(\"Running upload:\", \" \".join(twine_cmd))\n440 |\n441 |             result = _subprocess.run(\n    |                      ^^^^^^^^^^^^^^^\n442 |                 twine_cmd,\n443 |                 check=False,\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:452:23\n    |\n450 |                 _error(result.stderr)\n451 |             if result.returncode != 0:\n452 |                 raise RuntimeError(\"Twine upload failed. See output above.\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n453 |             return True\n454 |         finally:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:452:36\n    |\n450 |                 _error(result.stderr)\n451 |             if result.returncode != 0:\n452 |                 raise RuntimeError(\"Twine upload failed. See output above.\")\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n453 |             return True\n454 |         finally:\n    |\nhelp: Assign to variable; remove string literal\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:455:13\n    |\n453 |               return True\n454 |           finally:\n455 | /             try:\n456 | |                 os.chdir(cwd)\n457 | |             except Exception:\n458 | |                 pass\n    | |____________________^\n459 |\n460 |       def prepare_and_publish(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:457:13\n    |\n455 |               try:\n456 |                   os.chdir(cwd)\n457 | /             except Exception:\n458 | |                 pass\n    | |____________________^\n459 |\n460 |       def prepare_and_publish(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:457:20\n    |\n455 |             try:\n456 |                 os.chdir(cwd)\n457 |             except Exception:\n    |                    ^^^^^^^^^\n458 |                 pass\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:469:11\n    |\n468 | if __name__ == \"__main__\":\n469 |     raise SystemExit(\"This file is not meant to be run directly.\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:469:22\n    |\n468 | if __name__ == \"__main__\":\n469 |     raise SystemExit(\"This file is not meant to be run directly.\")\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Assign to variable; remove string literal\n\nFound 125 errors.\nNo fixes available (15 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "TC003 Move standard library import `collections.abc.Iterable` into a type-checking block\n  --> x_cls_make_pypi_x.py:14:29\n   |\n12 | import urllib.request\n13 | import uuid\n14 | from collections.abc import Iterable\n   |                             ^^^^^^^^\n15 | from typing import Any\n   |\nhelp: Move into type-checking block\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_pypi_x.py:21:18\n   |\n21 | def _info(*args: Any) -> None:\n   |                  ^^^\n22 |     msg = \" \".join(str(a) for a in args)\n23 |     try:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:23:5\n   |\n21 |   def _info(*args: Any) -> None:\n22 |       msg = \" \".join(str(a) for a in args)\n23 | /     try:\n24 | |         _LOGGER.info(\"%s\", msg)\n25 | |     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:25:5\n   |\n23 |       try:\n24 |           _LOGGER.info(\"%s\", msg)\n25 | /     except Exception:\n26 | |         pass\n   | |____________^\n27 |       try:\n28 |           print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:25:12\n   |\n23 |     try:\n24 |         _LOGGER.info(\"%s\", msg)\n25 |     except Exception:\n   |            ^^^^^^^^^\n26 |         pass\n27 |     try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:29:12\n   |\n27 |     try:\n28 |         print(msg)\n29 |     except Exception:\n   |            ^^^^^^^^^\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:30:9\n   |\n28 |           print(msg)\n29 |       except Exception:\n30 | /         try:\n31 | |             _sys.stdout.write(msg + \"\\n\")\n32 | |         except Exception:\n33 | |             pass\n   | |________________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:32:9\n   |\n30 |           try:\n31 |               _sys.stdout.write(msg + \"\\n\")\n32 | /         except Exception:\n33 | |             pass\n   | |________________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:32:16\n   |\n30 |         try:\n31 |             _sys.stdout.write(msg + \"\\n\")\n32 |         except Exception:\n   |                ^^^^^^^^^\n33 |             pass\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`\n  --> x_cls_make_pypi_x.py:36:19\n   |\n36 | def _error(*args: Any) -> None:\n   |                   ^^^\n37 |     msg = \" \".join(str(a) for a in args)\n38 |     try:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:38:5\n   |\n36 |   def _error(*args: Any) -> None:\n37 |       msg = \" \".join(str(a) for a in args)\n38 | /     try:\n39 | |         _LOGGER.error(\"%s\", msg)\n40 | |     except Exception:\n41 | |         pass\n   | |____________^\n42 |       try:\n43 |           print(msg, file=_sys.stderr)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:40:5\n   |\n38 |       try:\n39 |           _LOGGER.error(\"%s\", msg)\n40 | /     except Exception:\n41 | |         pass\n   | |____________^\n42 |       try:\n43 |           print(msg, file=_sys.stderr)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:40:12\n   |\n38 |     try:\n39 |         _LOGGER.error(\"%s\", msg)\n40 |     except Exception:\n   |            ^^^^^^^^^\n41 |         pass\n42 |     try:\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_pypi_x.py:42:5\n   |\n40 |       except Exception:\n41 |           pass\n42 | /     try:\n43 | |         print(msg, file=_sys.stderr)\n44 | |     except Exception:\n45 | |         pass\n   | |____________^\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_pypi_x.py:44:5\n   |\n42 |       try:\n43 |           print(msg, file=_sys.stderr)\n44 | /     except Exception:\n45 | |         pass\n   | |____________^\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:44:12\n   |\n42 |     try:\n43 |         print(msg, file=_sys.stderr)\n44 |     except Exception:\n   |            ^^^^^^^^^\n45 |         pass\n   |\n\nS105 Possible hardcoded password assigned to: \"TOKEN_ENV_VAR\"\n  --> x_cls_make_pypi_x.py:49:26\n   |\n48 | class BaseMake:\n49 |     TOKEN_ENV_VAR: str = \"GITHUB_TOKEN\"\n   |                          ^^^^^^^^^^^^^^\n50 |\n51 |     @classmethod\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`\n  --> x_cls_make_pypi_x.py:52:42\n   |\n51 |     @classmethod\n52 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                          ^^^\n53 |         return _os.environ.get(name, default)\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `get_env`\n  --> x_cls_make_pypi_x.py:52:57\n   |\n51 |     @classmethod\n52 |     def get_env(cls, name: str, default: Any = None) -> Any:\n   |                                                         ^^^\n53 |         return _os.environ.get(name, default)\n   |\n\nFBT001 Boolean-typed positional argument in function definition\n  --> x_cls_make_pypi_x.py:56:38\n   |\n55 |     @classmethod\n56 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n57 |         v = _os.environ.get(name, None)\n58 |         if v is None:\n   |\n\nFBT002 Boolean default positional argument in function definition\n  --> x_cls_make_pypi_x.py:56:38\n   |\n55 |     @classmethod\n56 |     def get_env_bool(cls, name: str, default: bool = False) -> bool:\n   |                                      ^^^^^^^\n57 |         v = _os.environ.get(name, None)\n58 |         if v is None:\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n  --> x_cls_make_pypi_x.py:66:46\n   |\n65 |     def run_cmd(\n66 |         self, args: Iterable[str], **kwargs: Any\n   |                                              ^^^\n67 |     ) -> _subprocess.CompletedProcess[str]:\n68 |         return _subprocess.run(\n   |\n\nS603 `subprocess` call: check for execution of untrusted input\n  --> x_cls_make_pypi_x.py:68:16\n   |\n66 |         self, args: Iterable[str], **kwargs: Any\n67 |     ) -> _subprocess.CompletedProcess[str]:\n68 |         return _subprocess.run(\n   |                ^^^^^^^^^^^^^^^\n69 |             list(args), check=False, capture_output=True, text=True, **kwargs\n70 |         )\n   |\n\nN801 Class name `x_cls_make_pypi_x` should use CapWords convention\n  --> x_cls_make_pypi_x.py:76:7\n   |\n76 | class x_cls_make_pypi_x(BaseMake):\n   |       ^^^^^^^^^^^^^^^^^\n77 |     # Configurable endpoints and env names\n78 |     PYPI_INDEX_URL: str = \"https://pypi.org\"\n   |\n\nS105 Possible hardcoded password assigned to: \"TEST_PYPI_TOKEN_ENV\"\n  --> x_cls_make_pypi_x.py:80:32\n   |\n78 |     PYPI_INDEX_URL: str = \"https://pypi.org\"\n79 |     TEST_PYPI_URL: str = \"https://test.pypi.org\"\n80 |     TEST_PYPI_TOKEN_ENV: str = \"TEST_PYPI_TOKEN\"\n   |                                ^^^^^^^^^^^^^^^^^\n81 |\n82 |     def version_exists_on_pypi(self) -> bool:\n   |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n  --> x_cls_make_pypi_x.py:86:18\n   |\n84 |         try:\n85 |             url = f\"{self.PYPI_INDEX_URL}/pypi/{self.name}/json\"\n86 |             with urllib.request.urlopen(url, timeout=10) as response:\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n87 |                 data = json.load(response)\n88 |             return self.version in data.get(\"releases\", {})\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_pypi_x.py:89:16\n   |\n87 |                 data = json.load(response)\n88 |             return self.version in data.get(\"releases\", {})\n89 |         except Exception as e:\n   |                ^^^^^^^^^\n90 |             _info(\n91 |                 f\"WARNING: Could not check PyPI for {self.name}=={self.version}: {e}\"\n   |\n\nPLR0913 Too many arguments in function definition (8 > 5)\n  --> x_cls_make_pypi_x.py:95:9\n   |\n93 |             return False\n94 |\n95 |     def __init__(\n   |         ^^^^^^^^\n96 |         self,\n97 |         name: str,\n   |\n\nANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`\n   --> x_cls_make_pypi_x.py:105:19\n    |\n103 |         dependencies: list[str],\n104 |         ctx: object | None = None,\n105 |         **kwargs: Any,\n    |                   ^^^\n106 |     ) -> None:\n107 |         # accept optional orchestrator context (backwards compatible)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:122:16\n    |\n120 |         try:\n121 |             self.dry_run = bool(getattr(self._ctx, \"dry_run\", False))\n122 |         except Exception:\n    |                ^^^^^^^^^\n123 |             self.dry_run = False\n    |\n\nARG002 Unused method argument: `project_dir`\n   --> x_cls_make_pypi_x.py:132:37\n    |\n130 |             _info(f\"[pypi] prepared publisher for {self.name}=={self.version}\")\n131 |\n132 |     def update_pyproject_toml(self, project_dir: str) -> None:\n    |                                     ^^^^^^^^^^^\n133 |         # Intentionally removed: no metadata file manipulation in this publisher.\n134 |         # Older behavior updated project metadata here; that logic was removed\n    |\n\nC901 `ensure_type_metadata` is too complex (19 > 10)\n   --> x_cls_make_pypi_x.py:138:9\n    |\n136 |         return\n137 |\n138 |     def ensure_type_metadata(\n    |         ^^^^^^^^^^^^^^^^^^^^\n139 |         self,\n140 |         repo_name: str,\n    |\n\nPLR0912 Too many branches (21 > 12)\n   --> x_cls_make_pypi_x.py:138:9\n    |\n136 |         return\n137 |\n138 |     def ensure_type_metadata(\n    |         ^^^^^^^^^^^^^^^^^^^^\n139 |         self,\n140 |         repo_name: str,\n    |\n\nPLR0915 Too many statements (66 > 50)\n   --> x_cls_make_pypi_x.py:138:9\n    |\n136 |         return\n137 |\n138 |     def ensure_type_metadata(\n    |         ^^^^^^^^^^^^^^^^^^^^\n139 |         self,\n140 |         repo_name: str,\n    |\n\nPLC0415 `import` should be at the top-level of a file\n   --> x_cls_make_pypi_x.py:146:13\n    |\n144 |         \"\"\"Inject PEP 561 artifacts and minimal build metadata without recursion.\"\"\"\n145 |         try:\n146 |             from pathlib import Path as _P\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n147 |\n148 |             pkg_path = _P(base_dir)  # build_dir/<dist_name>\n    |\n\nN814 Camelcase `Path` imported as constant `_P`\n   --> x_cls_make_pypi_x.py:146:33\n    |\n144 |         \"\"\"Inject PEP 561 artifacts and minimal build metadata without recursion.\"\"\"\n145 |         try:\n146 |             from pathlib import Path as _P\n    |                                 ^^^^^^^^^^\n147 |\n148 |             pkg_path = _P(base_dir)  # build_dir/<dist_name>\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:156:24\n    |\n154 |                 try:\n155 |                     py_typed.write_text(\"\", encoding=\"utf-8\")\n156 |                 except Exception:\n    |                        ^^^^^^^^^\n157 |                     return\n    |\n\nS112 `try`-`except`-`continue` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:166:17\n    |\n164 |                       if (pkg_path / rel).is_file():\n165 |                           explicit_files.append(rel)\n166 | /                 except Exception:\n167 | |                     continue\n    | |____________________________^\n168 |\n169 |               # MANIFEST.in: explicit includes only\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:166:24\n    |\n164 |                     if (pkg_path / rel).is_file():\n165 |                         explicit_files.append(rel)\n166 |                 except Exception:\n    |                        ^^^^^^^^^\n167 |                     continue\n    |\n\nPERF401 Use `list.extend` to create a transformed list\n   --> x_cls_make_pypi_x.py:172:17\n    |\n170 |             manifest_lines: list[str] = [f\"include {pkg_path.name}/py.typed\"]\n171 |             for rel in explicit_files:\n172 |                 manifest_lines.append(f\"include {pkg_path.name}/{rel}\")\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n173 |             man_path = bd / \"MANIFEST.in\"\n174 |             try:\n    |\nhelp: Replace for loop with list.extend\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:174:13\n    |\n172 |                   manifest_lines.append(f\"include {pkg_path.name}/{rel}\")\n173 |               man_path = bd / \"MANIFEST.in\"\n174 | /             try:\n175 | |                 man_path.write_text(\n176 | |                     \"\\n\".join(dict.fromkeys(manifest_lines)) + \"\\n\",\n177 | |                     encoding=\"utf-8\",\n178 | |                 )\n179 | |             except Exception:\n180 | |                 pass\n    | |____________________^\n181 |\n182 |               # pyproject: include-package-data and explicit package-data (no globs)\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:179:13\n    |\n177 |                       encoding=\"utf-8\",\n178 |                   )\n179 | /             except Exception:\n180 | |                 pass\n    | |____________________^\n181 |\n182 |               # pyproject: include-package-data and explicit package-data (no globs)\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:179:20\n    |\n177 |                     encoding=\"utf-8\",\n178 |                 )\n179 |             except Exception:\n    |                    ^^^^^^^^^\n180 |                 pass\n    |\n\nE501 Line too long (103 > 88)\n   --> x_cls_make_pypi_x.py:198:89\n    |\n196 |                     auth_name = self.author or \"Unknown\"\n197 |                     auth_email = self.email or \"unknown@example.com\"\n198 |                     base_pyproject += f'authors = [{{name = \"{auth_name}\", email = \"{auth_email}\"}}]\\n'\n    |                                                                                         ^^^^^^^^^^^^^^^\n199 |                 if self.dependencies:\n200 |                     deps_serial = \",\\n    \".join(\n    |\n\nE501 Line too long (99 > 88)\n   --> x_cls_make_pypi_x.py:236:89\n    |\n234 |                         txt += '\\n[tool.setuptools.packages.find]\\nwhere = [\".\"]\\n'\n235 |                         changed = True\n236 |                     # write/replace package-data block (append a fresh block with explicit entries)\n    |                                                                                         ^^^^^^^^^^^\n237 |                     pkg_data_block = (\n238 |                         f\"\\n[tool.setuptools.package-data]\\n\"\n    |\n\nE501 Line too long (103 > 88)\n   --> x_cls_make_pypi_x.py:245:89\n    |\n243 |                         changed = True\n244 |                     else:\n245 |                         # naive replace for the same key (append new explicit block to take precedence)\n    |                                                                                         ^^^^^^^^^^^^^^^\n246 |                         txt += pkg_data_block\n247 |                         changed = True\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:254:13\n    |\n252 |                       if changed:\n253 |                           pyproject.write_text(txt, encoding=\"utf-8\")\n254 | /             except Exception:\n255 | |                 pass\n    | |____________________^\n256 |           except Exception:\n257 |               pass\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:254:20\n    |\n252 |                     if changed:\n253 |                         pyproject.write_text(txt, encoding=\"utf-8\")\n254 |             except Exception:\n    |                    ^^^^^^^^^\n255 |                 pass\n256 |         except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:256:9\n    |\n254 |               except Exception:\n255 |                   pass\n256 | /         except Exception:\n257 | |             pass\n    | |________________^\n258 |\n259 |       def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:256:16\n    |\n254 |             except Exception:\n255 |                 pass\n256 |         except Exception:\n    |                ^^^^^^^^^\n257 |             pass\n    |\n\nC901 `create_files` is too complex (17 > 10)\n   --> x_cls_make_pypi_x.py:259:9\n    |\n257 |             pass\n258 |\n259 |     def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |         ^^^^^^^^^^^^\n260 |         \"\"\"\n261 |         Create a minimal package tree in a temporary build directory and\n    |\n\nPLR0912 Too many branches (16 > 12)\n   --> x_cls_make_pypi_x.py:259:9\n    |\n257 |             pass\n258 |\n259 |     def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |         ^^^^^^^^^^^^\n260 |         \"\"\"\n261 |         Create a minimal package tree in a temporary build directory and\n    |\n\nPLR0915 Too many statements (54 > 50)\n   --> x_cls_make_pypi_x.py:259:9\n    |\n257 |             pass\n258 |\n259 |     def create_files(self, main_file: str, ancillary_files: list[str]) -> None:\n    |         ^^^^^^^^^^^^\n260 |         \"\"\"\n261 |         Create a minimal package tree in a temporary build directory and\n    |\n\nPTH100 `os.path.abspath()` should be replaced by `Path.resolve()`\n   --> x_cls_make_pypi_x.py:265:27\n    |\n263 |         \"\"\"\n264 |         package_name = self.name\n265 |         repo_build_root = os.path.abspath(\n    |                           ^^^^^^^^^^^^^^^\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n267 |         )\n    |\nhelp: Replace with `Path(...).resolve()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:266:13\n    |\n264 |         package_name = self.name\n265 |         repo_build_root = os.path.abspath(\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n    |             ^^^^^^^^^^^^\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n    |\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_pypi_x.py:266:26\n    |\n264 |         package_name = self.name\n265 |         repo_build_root = os.path.abspath(\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n    |                          ^^^^^^^^^^^^^^^\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:268:9\n    |\n266 |             os.path.join(os.path.dirname(__file__), \"_build_temp_x_pypi_x\")\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n    |         ^^^^^^^^^^^\n269 |         build_dir = os.path.join(\n270 |             repo_build_root, f\"_build_{package_name}_{uuid.uuid4().hex}\"\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:269:21\n    |\n267 |         )\n268 |         os.makedirs(repo_build_root, exist_ok=True)\n269 |         build_dir = os.path.join(\n    |                     ^^^^^^^^^^^^\n270 |             repo_build_root, f\"_build_{package_name}_{uuid.uuid4().hex}\"\n271 |         )\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:272:9\n    |\n270 |             repo_build_root, f\"_build_{package_name}_{uuid.uuid4().hex}\"\n271 |         )\n272 |         os.makedirs(build_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n273 |         package_dir = os.path.join(build_dir, package_name)\n274 |         if os.path.lexists(package_dir):\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:273:23\n    |\n271 |         )\n272 |         os.makedirs(build_dir, exist_ok=True)\n273 |         package_dir = os.path.join(build_dir, package_name)\n    |                       ^^^^^^^^^^^^\n274 |         if os.path.lexists(package_dir):\n275 |             if os.path.isdir(package_dir):\n    |\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_pypi_x.py:275:16\n    |\n273 |         package_dir = os.path.join(build_dir, package_name)\n274 |         if os.path.lexists(package_dir):\n275 |             if os.path.isdir(package_dir):\n    |                ^^^^^^^^^^^^^\n276 |                 shutil.rmtree(package_dir)\n277 |             else:\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH107 `os.remove()` should be replaced by `Path.unlink()`\n   --> x_cls_make_pypi_x.py:278:17\n    |\n276 |                 shutil.rmtree(package_dir)\n277 |             else:\n278 |                 os.remove(package_dir)\n    |                 ^^^^^^^^^\n279 |         os.makedirs(package_dir, exist_ok=True)\n    |\nhelp: Replace with `Path(...).unlink()`\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:279:9\n    |\n277 |             else:\n278 |                 os.remove(package_dir)\n279 |         os.makedirs(package_dir, exist_ok=True)\n    |         ^^^^^^^^^^^\n280 |\n281 |         shutil.copy2(\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:282:24\n    |\n281 |         shutil.copy2(\n282 |             main_file, os.path.join(package_dir, os.path.basename(main_file))\n    |                        ^^^^^^^^^^^^\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_pypi_x.py:282:50\n    |\n281 |         shutil.copy2(\n282 |             main_file, os.path.join(package_dir, os.path.basename(main_file))\n    |                                                  ^^^^^^^^^^^^^^^^\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n    |\nhelp: Replace with `Path(...).name`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:284:21\n    |\n282 |             main_file, os.path.join(package_dir, os.path.basename(main_file))\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n    |                     ^^^^^^^^^^^^\n285 |         if not os.path.exists(init_path):\n286 |             with open(init_path, \"w\", encoding=\"utf-8\") as f:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:285:16\n    |\n283 |         )\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n285 |         if not os.path.exists(init_path):\n    |                ^^^^^^^^^^^^^^\n286 |             with open(init_path, \"w\", encoding=\"utf-8\") as f:\n287 |                 f.write(\"# Package init\\n\")\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_pypi_x.py:286:18\n    |\n284 |         init_path = os.path.join(package_dir, \"__init__.py\")\n285 |         if not os.path.exists(init_path):\n286 |             with open(init_path, \"w\", encoding=\"utf-8\") as f:\n    |                  ^^^^\n287 |                 f.write(\"# Package init\\n\")\n    |\nhelp: Replace with `Path.open()`\n\nPTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`\n   --> x_cls_make_pypi_x.py:291:22\n    |\n289 |         def _is_allowed(p: str) -> bool:\n290 |             \"\"\"Allow-list files copied into the build.\"\"\"\n291 |             _, ext = os.path.splitext(p.lower())\n    |                      ^^^^^^^^^^^^^^^^\n292 |             allowed = {\".py\", \".txt\", \".md\", \".rst\"}\n293 |             return (\n    |\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_pypi_x.py:294:35\n    |\n292 |             allowed = {\".py\", \".txt\", \".md\", \".rst\"}\n293 |             return (\n294 |                 ext in allowed or os.path.basename(p).lower() == \"__init__.py\"\n    |                                   ^^^^^^^^^^^^^^^^\n295 |             )\n    |\nhelp: Replace with `Path(...).name`\n\nPTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`\n   --> x_cls_make_pypi_x.py:301:16\n    |\n299 |             rel_norm = entry.replace(\"\\\\\", \"/\").lstrip(\"/\")\n300 |             src_path = rel_norm.replace(\"/\", os.sep)\n301 |             if os.path.isdir(src_path):\n    |                ^^^^^^^^^^^^^\n302 |                 _info(\n303 |                     f\"Ignoring ancillary directory (no recursion): {rel_norm}\"\n    |\nhelp: Replace with `Path(...).is_dir()`\n\nPTH113 `os.path.isfile()` should be replaced by `Path.is_file()`\n   --> x_cls_make_pypi_x.py:306:16\n    |\n304 |                 )\n305 |                 continue\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n    |                ^^^^^^^^^^^^^^\n307 |                 dest_path = os.path.join(package_dir, src_path)\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n    |\nhelp: Replace with `Path(...).is_file()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:307:29\n    |\n305 |                 continue\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n307 |                 dest_path = os.path.join(package_dir, src_path)\n    |                             ^^^^^^^^^^^^\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n309 |                 shutil.copy2(src_path, dest_path)\n    |\n\nPTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`\n   --> x_cls_make_pypi_x.py:308:17\n    |\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n307 |                 dest_path = os.path.join(package_dir, src_path)\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n    |                 ^^^^^^^^^^^\n309 |                 shutil.copy2(src_path, dest_path)\n    |\nhelp: Replace with `Path(...).mkdir(parents=True)`\n\nPTH120 `os.path.dirname()` should be replaced by `Path.parent`\n   --> x_cls_make_pypi_x.py:308:29\n    |\n306 |             if os.path.isfile(src_path) and _is_allowed(src_path):\n307 |                 dest_path = os.path.join(package_dir, src_path)\n308 |                 os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n    |                             ^^^^^^^^^^^^^^^\n309 |                 shutil.copy2(src_path, dest_path)\n    |\nhelp: Replace with `Path(...).parent`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:318:28\n    |\n316 |             for root, _dirs, files in os.walk(package_dir):\n317 |                 # package-level stub\n318 |                 pyi_init = os.path.join(root, \"__init__.pyi\")\n    |                            ^^^^^^^^^^^^\n319 |                 if not os.path.exists(pyi_init):\n320 |                     try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:319:24\n    |\n317 |                 # package-level stub\n318 |                 pyi_init = os.path.join(root, \"__init__.pyi\")\n319 |                 if not os.path.exists(pyi_init):\n    |                        ^^^^^^^^^^^^^^\n320 |                     try:\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_pypi_x.py:321:30\n    |\n319 |                 if not os.path.exists(pyi_init):\n320 |                     try:\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n    |                              ^^^^\n322 |                             f.write(\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n    |\nhelp: Replace with `Path.open()`\n\nPTH119 `os.path.basename()` should be replaced by `Path.name`\n   --> x_cls_make_pypi_x.py:323:61\n    |\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n322 |                             f.write(\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n    |                                                             ^^^^^^^^^^^^^^^^\n324 |                             )\n325 |                     except Exception:\n    |\nhelp: Replace with `Path(...).name`\n\nE501 Line too long (132 > 88)\n   --> x_cls_make_pypi_x.py:323:89\n    |\n321 |                         with open(pyi_init, \"w\", encoding=\"utf-8\") as f:\n322 |                             f.write(\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n324 |                             )\n325 |                     except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:325:21\n    |\n323 |                                   f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n324 |                               )\n325 | /                     except Exception:\n326 | |                         pass\n    | |____________________________^\n327 |\n328 |                   # module-level stubs for any .py files\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:325:28\n    |\n323 |                                 f\"# Type stubs for package {os.path.basename(root)}\\nfrom typing import Any\\n\\n__all__: list[str]\\n\"\n324 |                             )\n325 |                     except Exception:\n    |                            ^^^^^^^^^\n326 |                         pass\n    |\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:331:37\n    |\n329 |                 for fname in files:\n330 |                     if fname.endswith(\".py\") and not fname.endswith(\".pyi\"):\n331 |                         stub_path = os.path.join(root, fname[:-3] + \".pyi\")\n    |                                     ^^^^^^^^^^^^\n332 |                         if not os.path.exists(stub_path):\n333 |                             try:\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:332:32\n    |\n330 |                     if fname.endswith(\".py\") and not fname.endswith(\".pyi\"):\n331 |                         stub_path = os.path.join(root, fname[:-3] + \".pyi\")\n332 |                         if not os.path.exists(stub_path):\n    |                                ^^^^^^^^^^^^^^\n333 |                             try:\n334 |                                 with open(\n    |\nhelp: Replace with `Path(...).exists()`\n\nPTH123 `open()` should be replaced by `Path.open()`\n   --> x_cls_make_pypi_x.py:334:38\n    |\n332 |                         if not os.path.exists(stub_path):\n333 |                             try:\n334 |                                 with open(\n    |                                      ^^^^\n335 |                                     stub_path, \"w\", encoding=\"utf-8\"\n336 |                                 ) as f:\n    |\nhelp: Replace with `Path.open()`\n\nE501 Line too long (89 > 88)\n   --> x_cls_make_pypi_x.py:338:89\n    |\n336 | \u00e2\u20ac\u00a6                         ) as f:\n337 | \u00e2\u20ac\u00a6                             f.write(\n338 | \u00e2\u20ac\u00a6                                 f\"# Stub for {fname}\\nfrom typing import Any\\n\\n\"\n    |                                                                                   ^\n339 | \u00e2\u20ac\u00a6                             )\n340 | \u00e2\u20ac\u00a6                     except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:340:29\n    |\n338 |                                           f\"# Stub for {fname}\\nfrom typing import Any\\n\\n\"\n339 |                                       )\n340 | /                             except Exception:\n341 | |                                 pass\n    | |____________________________________^\n342 |           except Exception:\n343 |               # Best-effort: do not fail the build just because stubs couldn't be written.\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:340:36\n    |\n338 |                                         f\"# Stub for {fname}\\nfrom typing import Any\\n\\n\"\n339 |                                     )\n340 |                             except Exception:\n    |                                    ^^^^^^^^^\n341 |                                 pass\n342 |         except Exception:\n    |\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:342:9\n    |\n340 |                               except Exception:\n341 |                                   pass\n342 | /         except Exception:\n343 | |             # Best-effort: do not fail the build just because stubs couldn't be written.\n344 | |             pass\n    | |________________^\n345 |\n346 |           # After stubs generated, ensure PEP 561 artifacts & metadata\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:342:16\n    |\n340 |                             except Exception:\n341 |                                 pass\n342 |         except Exception:\n    |                ^^^^^^^^^\n343 |             # Best-effort: do not fail the build just because stubs couldn't be written.\n344 |             pass\n    |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:347:9\n    |\n346 |           # After stubs generated, ensure PEP 561 artifacts & metadata\n347 | /         try:\n348 | |             self.ensure_type_metadata(build_dir, package_dir, ancillary_files)\n349 | |         except Exception:\n350 | |             pass\n    | |________________^\n351 |           self._project_dir = build_dir\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:349:9\n    |\n347 |           try:\n348 |               self.ensure_type_metadata(build_dir, package_dir, ancillary_files)\n349 | /         except Exception:\n350 | |             pass\n    | |________________^\n351 |           self._project_dir = build_dir\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:349:16\n    |\n347 |         try:\n348 |             self.ensure_type_metadata(build_dir, package_dir, ancillary_files)\n349 |         except Exception:\n    |                ^^^^^^^^^\n350 |             pass\n351 |         self._project_dir = build_dir\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:354:16\n    |\n353 |     def prepare(self, main_file: str, ancillary_files: list[str]) -> None:\n354 |         if not os.path.exists(main_file):\n    |                ^^^^^^^^^^^^^^\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n356 |         for ancillary_file in ancillary_files or []:\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:355:19\n    |\n353 |     def prepare(self, main_file: str, ancillary_files: list[str]) -> None:\n354 |         if not os.path.exists(main_file):\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n356 |         for ancillary_file in ancillary_files or []:\n357 |             if not os.path.exists(ancillary_file):\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:355:37\n    |\n353 |     def prepare(self, main_file: str, ancillary_files: list[str]) -> None:\n354 |         if not os.path.exists(main_file):\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n356 |         for ancillary_file in ancillary_files or []:\n357 |             if not os.path.exists(ancillary_file):\n    |\nhelp: Assign to variable; remove f-string literal\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:357:20\n    |\n355 |             raise FileNotFoundError(f\"Main file '{main_file}' does not exist.\")\n356 |         for ancillary_file in ancillary_files or []:\n357 |             if not os.path.exists(ancillary_file):\n    |                    ^^^^^^^^^^^^^^\n358 |                 raise FileNotFoundError(\n359 |                     f\"Ancillary file '{ancillary_file}' is not found.\"\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:358:23\n    |\n356 |           for ancillary_file in ancillary_files or []:\n357 |               if not os.path.exists(ancillary_file):\n358 |                   raise FileNotFoundError(\n    |  _______________________^\n359 | |                     f\"Ancillary file '{ancillary_file}' is not found.\"\n360 | |                 )\n    | |_________________^\n361 |\n362 |       def publish(self, main_file: str, ancillary_files: list[str]) -> bool:\n    |\n\nEM102 Exception must not use an f-string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:359:21\n    |\n357 |             if not os.path.exists(ancillary_file):\n358 |                 raise FileNotFoundError(\n359 |                     f\"Ancillary file '{ancillary_file}' is not found.\"\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n360 |                 )\n    |\nhelp: Assign to variable; remove f-string literal\n\nC901 `publish` is too complex (12 > 10)\n   --> x_cls_make_pypi_x.py:362:9\n    |\n360 |                 )\n361 |\n362 |     def publish(self, main_file: str, ancillary_files: list[str]) -> bool:\n    |         ^^^^^^^\n363 |         \"\"\"Build and upload package to PyPI using build + twine.\n    |\n\nPLR0912 Too many branches (13 > 12)\n   --> x_cls_make_pypi_x.py:362:9\n    |\n360 |                 )\n361 |\n362 |     def publish(self, main_file: str, ancillary_files: list[str]) -> bool:\n    |         ^^^^^^^\n363 |         \"\"\"Build and upload package to PyPI using build + twine.\n    |\n\nPTH109 `os.getcwd()` should be replaced by `Path.cwd()`\n   --> x_cls_make_pypi_x.py:377:15\n    |\n375 |         self.create_files(main_file, ancillary_files or [])\n376 |         project_dir = self._project_dir\n377 |         cwd = os.getcwd()\n    |               ^^^^^^^^^\n378 |         try:\n379 |             os.chdir(project_dir)\n    |\nhelp: Replace with `Path.cwd()`\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:381:24\n    |\n379 |             os.chdir(project_dir)\n380 |\n381 |             dist_dir = os.path.join(project_dir, \"dist\")\n    |                        ^^^^^^^^^^^^\n382 |             if os.path.exists(dist_dir):\n383 |                 shutil.rmtree(dist_dir)\n    |\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:382:16\n    |\n381 |             dist_dir = os.path.join(project_dir, \"dist\")\n382 |             if os.path.exists(dist_dir):\n    |                ^^^^^^^^^^^^^^\n383 |                 shutil.rmtree(dist_dir)\n    |\nhelp: Replace with `Path(...).exists()`\n\nS605 Starting a process with a shell, possible injection detected\n   --> x_cls_make_pypi_x.py:387:18\n    |\n385 |             build_cmd = [sys.executable, \"-m\", \"build\"]\n386 |             _info(\"Running build:\", \" \".join(build_cmd))\n387 |             rc = os.system(\" \".join(build_cmd))\n    |                  ^^^^^^^^^\n388 |             if rc != 0:\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:389:23\n    |\n387 |             rc = os.system(\" \".join(build_cmd))\n388 |             if rc != 0:\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n390 |\n391 |             if not os.path.exists(dist_dir):\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:389:36\n    |\n387 |             rc = os.system(\" \".join(build_cmd))\n388 |             if rc != 0:\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n390 |\n391 |             if not os.path.exists(dist_dir):\n    |\nhelp: Assign to variable; remove string literal\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:391:20\n    |\n389 |                 raise RuntimeError(\"Build failed. Aborting publish.\")\n390 |\n391 |             if not os.path.exists(dist_dir):\n    |                    ^^^^^^^^^^^^^^\n392 |                 raise RuntimeError(\"dist/ directory not found after build.\")\n    |\nhelp: Replace with `Path(...).exists()`\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:392:23\n    |\n391 |             if not os.path.exists(dist_dir):\n392 |                 raise RuntimeError(\"dist/ directory not found after build.\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n393 |\n394 |             files = [\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:392:36\n    |\n391 |             if not os.path.exists(dist_dir):\n392 |                 raise RuntimeError(\"dist/ directory not found after build.\")\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n393 |\n394 |             files = [\n    |\nhelp: Assign to variable; remove string literal\n\nPTH118 `os.path.join()` should be replaced by `Path` with `/` operator\n   --> x_cls_make_pypi_x.py:395:17\n    |\n394 |             files = [\n395 |                 os.path.join(dist_dir, f)\n    |                 ^^^^^^^^^^^^\n396 |                 for f in os.listdir(dist_dir)\n397 |                 if f.startswith(f\"{self.name}-{self.version}\")\n    |\n\nPTH208 Use `pathlib.Path.iterdir()` instead.\n   --> x_cls_make_pypi_x.py:396:26\n    |\n394 |             files = [\n395 |                 os.path.join(dist_dir, f)\n396 |                 for f in os.listdir(dist_dir)\n    |                          ^^^^^^^^^^\n397 |                 if f.startswith(f\"{self.name}-{self.version}\")\n398 |                 and f.endswith((\".tar.gz\", \".whl\"))\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:401:23\n    |\n399 |               ]\n400 |               if not files:\n401 |                   raise RuntimeError(\n    |  _______________________^\n402 | |                     \"No valid distribution files found. Aborting publish.\"\n403 | |                 )\n    | |_________________^\n404 |\n405 |               pypirc_path = os.path.expanduser(\"~/.pypirc\")\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:402:21\n    |\n400 |             if not files:\n401 |                 raise RuntimeError(\n402 |                     \"No valid distribution files found. Aborting publish.\"\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n403 |                 )\n    |\nhelp: Assign to variable; remove string literal\n\nPTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`\n   --> x_cls_make_pypi_x.py:405:27\n    |\n403 |                 )\n404 |\n405 |             pypirc_path = os.path.expanduser(\"~/.pypirc\")\n    |                           ^^^^^^^^^^^^^^^^^^\n406 |             has_pypirc = os.path.exists(pypirc_path)\n407 |             has_env_creds = any(\n    |\nhelp: Replace with `Path(...).expanduser()`\n\nPTH110 `os.path.exists()` should be replaced by `Path.exists()`\n   --> x_cls_make_pypi_x.py:406:26\n    |\n405 |             pypirc_path = os.path.expanduser(\"~/.pypirc\")\n406 |             has_pypirc = os.path.exists(pypirc_path)\n    |                          ^^^^^^^^^^^^^^\n407 |             has_env_creds = any(\n408 |                 [\n    |\nhelp: Replace with `Path(...).exists()`\n\nFBT003 Boolean positional value in function call\n   --> x_cls_make_pypi_x.py:423:70\n    |\n421 |             # exist on PyPI. Default to True to avoid failing the overall run when\n422 |             # package files are already present (common in retry scenarios).\n423 |             skip_existing = self.get_env_bool(\"TWINE_SKIP_EXISTING\", True)\n    |                                                                      ^^^^\n424 |             if skip_existing:\n425 |                 twine_cmd = [\n    |\n\nS603 `subprocess` call: check for execution of untrusted input\n   --> x_cls_make_pypi_x.py:441:22\n    |\n439 |                 _info(\"Running upload:\", \" \".join(twine_cmd))\n440 |\n441 |             result = _subprocess.run(\n    |                      ^^^^^^^^^^^^^^^\n442 |                 twine_cmd,\n443 |                 check=False,\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:452:23\n    |\n450 |                 _error(result.stderr)\n451 |             if result.returncode != 0:\n452 |                 raise RuntimeError(\"Twine upload failed. See output above.\")\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n453 |             return True\n454 |         finally:\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:452:36\n    |\n450 |                 _error(result.stderr)\n451 |             if result.returncode != 0:\n452 |                 raise RuntimeError(\"Twine upload failed. See output above.\")\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n453 |             return True\n454 |         finally:\n    |\nhelp: Assign to variable; remove string literal\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n   --> x_cls_make_pypi_x.py:455:13\n    |\n453 |               return True\n454 |           finally:\n455 | /             try:\n456 | |                 os.chdir(cwd)\n457 | |             except Exception:\n458 | |                 pass\n    | |____________________^\n459 |\n460 |       def prepare_and_publish(\n    |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n   --> x_cls_make_pypi_x.py:457:13\n    |\n455 |               try:\n456 |                   os.chdir(cwd)\n457 | /             except Exception:\n458 | |                 pass\n    | |____________________^\n459 |\n460 |       def prepare_and_publish(\n    |\n\nBLE001 Do not catch blind exception: `Exception`\n   --> x_cls_make_pypi_x.py:457:20\n    |\n455 |             try:\n456 |                 os.chdir(cwd)\n457 |             except Exception:\n    |                    ^^^^^^^^^\n458 |                 pass\n    |\n\nTRY003 Avoid specifying long messages outside the exception class\n   --> x_cls_make_pypi_x.py:469:11\n    |\n468 | if __name__ == \"__main__\":\n469 |     raise SystemExit(\"This file is not meant to be run directly.\")\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n\nEM101 Exception must not use a string literal, assign to variable first\n   --> x_cls_make_pypi_x.py:469:22\n    |\n468 | if __name__ == \"__main__\":\n469 |     raise SystemExit(\"This file is not meant to be run directly.\")\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: Assign to variable; remove string literal\n\nFound 125 errors.\nNo fixes available (15 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    },
    "x_make_yahw_x": {
        "files": [
            "x_cls_make_yahw_x.py"
        ],
        "files_index": [
            "x_cls_make_yahw_x.py"
        ],
        "tool_reports": {
            "black": {
                "cached": false,
                "exit": 0,
                "stderr": "All done! \\u2728 \\U0001f370 \\u2728\n1 file would be left unchanged.\n",
                "stdout": ""
            },
            "mypy": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "Success: no issues found in 1 source file\n"
            },
            "pyright": {
                "cached": false,
                "exit": 0,
                "stderr": "",
                "stdout": "0 errors, 0 warnings, 0 informations\n"
            },
            "ruff_check": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "N801 Class name `x_cls_make_yahw_x` should use CapWords convention\n --> x_cls_make_yahw_x.py:1:7\n  |\n1 | class x_cls_make_yahw_x:\n  |       ^^^^^^^^^^^^^^^^^\n2 |     def __init__(self, ctx: object | None = None) -> None:\n3 |         # store optional orchestrator context for backward-compatible upgrades\n  |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:22:9\n   |\n20 |       def _info(*args: object) -> None:\n21 |           msg = \" \".join(str(a) for a in args)\n22 | /         try:\n23 | |             _LOGGER.info(\"%s\", msg)\n24 | |         except Exception:\n25 | |             pass\n   | |________________^\n26 |           try:\n27 |               print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_yahw_x.py:24:9\n   |\n22 |           try:\n23 |               _LOGGER.info(\"%s\", msg)\n24 | /         except Exception:\n25 | |             pass\n   | |________________^\n26 |           try:\n27 |               print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_yahw_x.py:24:16\n   |\n22 |         try:\n23 |             _LOGGER.info(\"%s\", msg)\n24 |         except Exception:\n   |                ^^^^^^^^^\n25 |             pass\n26 |         try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_yahw_x.py:28:16\n   |\n26 |         try:\n27 |             print(msg)\n28 |         except Exception:\n   |                ^^^^^^^^^\n29 |             try:\n30 |                 _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:29:13\n   |\n27 |               print(msg)\n28 |           except Exception:\n29 | /             try:\n30 | |                 _sys.stdout.write(msg + \"\\n\")\n31 | |             except Exception:\n32 | |                 pass\n   | |____________________^\n33 |\n34 |       _info(main())\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_yahw_x.py:31:13\n   |\n29 |               try:\n30 |                   _sys.stdout.write(msg + \"\\n\")\n31 | /             except Exception:\n32 | |                 pass\n   | |____________________^\n33 |\n34 |       _info(main())\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_yahw_x.py:31:20\n   |\n29 |             try:\n30 |                 _sys.stdout.write(msg + \"\\n\")\n31 |             except Exception:\n   |                    ^^^^^^^^^\n32 |                 pass\n   |\n\nFound 8 errors.\nNo fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            },
            "ruff_fix": {
                "cached": false,
                "exit": 1,
                "stderr": "",
                "stdout": "N801 Class name `x_cls_make_yahw_x` should use CapWords convention\n --> x_cls_make_yahw_x.py:1:7\n  |\n1 | class x_cls_make_yahw_x:\n  |       ^^^^^^^^^^^^^^^^^\n2 |     def __init__(self, ctx: object | None = None) -> None:\n3 |         # store optional orchestrator context for backward-compatible upgrades\n  |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:22:9\n   |\n20 |       def _info(*args: object) -> None:\n21 |           msg = \" \".join(str(a) for a in args)\n22 | /         try:\n23 | |             _LOGGER.info(\"%s\", msg)\n24 | |         except Exception:\n25 | |             pass\n   | |________________^\n26 |           try:\n27 |               print(msg)\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_yahw_x.py:24:9\n   |\n22 |           try:\n23 |               _LOGGER.info(\"%s\", msg)\n24 | /         except Exception:\n25 | |             pass\n   | |________________^\n26 |           try:\n27 |               print(msg)\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_yahw_x.py:24:16\n   |\n22 |         try:\n23 |             _LOGGER.info(\"%s\", msg)\n24 |         except Exception:\n   |                ^^^^^^^^^\n25 |             pass\n26 |         try:\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_yahw_x.py:28:16\n   |\n26 |         try:\n27 |             print(msg)\n28 |         except Exception:\n   |                ^^^^^^^^^\n29 |             try:\n30 |                 _sys.stdout.write(msg + \"\\n\")\n   |\n\nSIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`\n  --> x_cls_make_yahw_x.py:29:13\n   |\n27 |               print(msg)\n28 |           except Exception:\n29 | /             try:\n30 | |                 _sys.stdout.write(msg + \"\\n\")\n31 | |             except Exception:\n32 | |                 pass\n   | |____________________^\n33 |\n34 |       _info(main())\n   |\nhelp: Replace `try`-`except`-`pass` with `with contextlib.suppress(Exception): ...`\n\nS110 `try`-`except`-`pass` detected, consider logging the exception\n  --> x_cls_make_yahw_x.py:31:13\n   |\n29 |               try:\n30 |                   _sys.stdout.write(msg + \"\\n\")\n31 | /             except Exception:\n32 | |                 pass\n   | |____________________^\n33 |\n34 |       _info(main())\n   |\n\nBLE001 Do not catch blind exception: `Exception`\n  --> x_cls_make_yahw_x.py:31:20\n   |\n29 |             try:\n30 |                 _sys.stdout.write(msg + \"\\n\")\n31 |             except Exception:\n   |                    ^^^^^^^^^\n32 |                 pass\n   |\n\nFound 8 errors.\nNo fixes available (2 hidden fixes can be enabled with the `--unsafe-fixes` option).\n"
            }
        }
    }
}